class Attribute{constructor(t,e){this.table=t,this.name=e,this.attr=e,this.weight=0,this.diffEdges=0,this.randomEdges=0,this.sameEdges=0,this.mutable=!0,this.id=e}compareTo(t){return this.weight>t.weight?-1:this.weight<t.weight?1:0}simplifyName(t){return t=t.replace(/"/g,"").replace(/=/g,"").replace(/ /g,"")}}
class DumbHeuristic{constructor(t){this.g=t}arrange(){for(let t=0;t<this.g.maxDepth;t++){let e=g.edgeIndex[t];e=e.sort((t,e)=>t.compareTo(e));for(let t=0;t<e.length-1;t++){let i=e[t],r=e[t+1];i.leftTable==r.leftTable&&(i.leftAttribute.mutable||r.leftAttribute.mutable)&&(this.swap(i.leftAttribute,r.leftAttribute),(i.rightAttribute.mutable||r.rightAttribute.mutable)&&(i.rightTable==r.rightTable?this.swap(i.rightAttribute,r.rightAttribute):this.swap(i.rightTable,r.rightTable)))}}}swap(t,e){let i=t.weight;t.weight=e.weight,e.weight=i}}
class Edge{constructor(t,e,i,h){this.leftTable=t,this.att1=e,this.leftAttribute=e,this.rightTable=i,this.att2=h,this.rightAttribute=h}compareTo(t){if(this.leftTable==t.leftTable)if(this.rightTable==t.rightTable){if(this.leftAttribute.weight>t.leftAttribute.weight&&this.rightAttribute.weight<t.rightAttribute.weight)return!0;if(this.leftAttribute.weight<t.leftAttribute.weight&&this.rightAttribute.weight>t.rightAttribute.weight)return!0}else{if(this.rightTable.weight<t.rightTable.weight&&this.leftAttribute.weight>t.leftAttribute.weight)return!0;if(this.rightTable.weight>t.rightTable.weight&&this.leftAttribute.weight<t.leftAttribute.weight)return!0}else if(this.rightTable==t.rightTable)if(this.leftTable==t.leftTable){if(this.leftAttribute.weight>t.leftAttribute.weight&&this.rightAttribute.weight<t.rightAttribute.weight)return!0;if(this.leftAttribute.weight<t.leftAttribute.weight&&this.rightAttribute.weight>t.rightAttribute.weight)return!0}else{if(this.leftTable.weight<t.leftTable.weight&&this.rightAttribute.weight>t.rightAttribute.weight)return!0;if(this.leftTable.weight>t.leftTable.weight&&this.rightAttribute.weight<t.rightAttribute.weight)return!0}else{if(this.leftTable.weight<t.leftTable.weight&&this.rightTable.weight>t.rightTable.weight)return!0;if(this.leftTable.weight>t.leftTable.weight&&this.rightTable.weight<t.rightTable.weight)return!0}return!1}compareSelfEdgeTo(t){if(this.leftTable.depth==this.rightTable.depth&&t.leftTable.depth==t.rightTable.depth){if(this.leftTable==t.leftTable)if(this.rightTable==t.rightTable){if(this.leftAttribute.weight<t.leftAttribute.weight&&this.rightAttribute.weight<t.rightAttribute.weight)return!0;if(this.leftAttribute.weight>t.leftAttribute.weight&&this.rightAttribute.weight>t.rightAttribute.weight)return!0}else{if(this.leftAttribute.weight<t.leftAttribute.weight&&this.rightTable.weight<t.rightTable.weight)return!0;if(this.leftAttribute.weight>t.leftAttribute.weight&&this.rightTable.weight>t.rightTable.weight)return!0}else if(this.leftTable==t.rightTable)if(this.rightTable==t.leftTable){if(this.rightAttribute.weight<t.leftAttribute.weight&&this.leftAttribute.weight<t.rightAttribute.weight)return!0;if(this.rightAttribute.weight>t.leftAttribute.weight&&this.leftAttribute.weight>t.rightAttribute.weight)return!0}else{if(this.leftAttribute.weight<t.rightAttribute.weight&&this.rightTable.weight<t.leftTable.weight)return!0;if(this.leftAttribute.weight>t.rightAttribute.weight&&this.rightTable.weight>t.leftTable.weight)return!0}else if(this.rightTable==t.leftTable)if(this.leftTable==t.rightTable){if(this.rightAttribute.weight<t.leftAttribute.weight&&this.leftAttribute.weight<t.rightAttribute.weight)return!0;if(this.rightAttribute.weight>t.leftAttribute.weight&&this.leftAttribute.weight>t.rightAttribute.weight)return!0}else{if(this.rightAttribute.weight<t.leftAttribute.weight&&this.leftTable.weight<t.rightTable.weight)return!0;if(this.rightAttribute.weight>t.leftAttribute.weight&&this.leftTable.weight>t.rightTable.weight)return!0}else if(this.rightTable==t.rightTable)if(this.leftTable==t.leftTable){if(this.leftAttribute.weight<t.leftAttribute.weight&&this.rightAttribute.weight<t.rightAttribute.weight)return!0;if(this.leftAttribute.weight>t.leftAttribute.weight&&this.rightAttribute.weight>t.rightAttribute.weight)return!0}else{if(this.rightAttribute.weight<t.rightAttribute.weight&&this.leftTable.weight<t.leftTable.weight)return!0;if(this.rightAttribute.weight>t.rightAttribute.weight&&this.leftTable.weight>t.leftTable.weight)return!0}}else if(this.leftTable.depth==this.rightTable.depth)if(this.leftTable==t.leftTable){if(this.leftAttribute.weight<t.leftAttribute.weight&&this.rightTable.weight>t.leftTable.weight)return!0;if(this.leftAttribute.weight>t.leftAttribute.weight&&this.rightTable.weight<t.leftTable.weight)return!0}else if(this.rightTable==t.rightTable){if(this.rightAttribute.weight<t.leftAttribute.weight&&this.leftTable.weight>t.leftTable.weight)return!0;if(this.rightAttribute.weight>t.leftAttribute.weight&&this.leftTable.weight<t.leftTable.weight)return!0}else{if(this.leftTable.weight>t.leftTable.weight&&this.rightTable.weight<t.leftTable.weight)return!0;if(this.leftTable.weight<t.leftTable.weight&&this.rightTable.weight>t.leftTable.weight)return!0}else if(t.leftTable==this.leftTable){if(t.leftAttribute.weight<this.leftAttribute.weight&&t.rightTable.weight>this.leftTable.weight)return!0;if(t.leftAttribute.weight>this.leftAttribute.weight&&t.rightTable.weight<this.leftTable.weight)return!0}else if(t.rightTable==this.leftTable){if(t.rightAttribute.weight<this.leftAttribute.weight&&t.leftTable.weight>this.leftTable.weight)return!0;if(t.rightAttribute.weight>this.leftAttribute.weight&&t.leftTable.weight<this.leftTable.weight)return!0}else{if(t.leftTable.weight<this.leftAttribute.weight&&t.rightTable.weight>this.leftAttribute.weight)return!0;if(t.leftTable.weight>this.leftAttribute.weight&&t.rightTable.weight<this.leftAttribute.weight)return!0}}crosses(t){return this.leftTable.depth==this.rightTable.depth||t.leftTable.depth==t.rightTable.depth?this.compareSelfEdgeTo(t):!!this.compareTo(t)}compare(t){if(null==t)return 1;this.compareAttributes(this.leftTable,this.leftAttribute,t.leftTable,t.leftAttribute)}compareAttributes(t,e,i,h){let r=t.compareTo(i);return 0==r&&(r=e.compareTo(h)),r}isSameRankEdge(){return this.leftTable.depth==this.rightTable.depth}getBendiness(){let t=0,e=10/(10*this.leftTable.graph.baseRowDistance);return t=this.rightTable.weight+this.rightAttribute.weight*e+this.rightTable.verticalAttrOffset*e-(this.leftTable.weight+this.leftAttribute.weight*e+this.leftTable.verticalAttrOffset*e),t=Math.round(1e3*t)/1e3,Math.abs(t)}}
class Gansner{constructor(t){this.g=t,this.max_iterations=11,this.elapsedTime=0}median(t){return(t=t.sort()).length%2==0?(t[t.length/2]+t[t.length/2-1])/2:t[(t.length-1)/2]}applyArrangement(t){for(let e of t.tables){let t=this.g.tables.find(t=>t.name==e.name);t.weight=e.weight;for(let i of e.attributes){t.attributes.find(t=>t.name==i.name).weight=i.weight}}}arrange(){let t=(new Date).getTime(),e=this.g.getEdgeCrossings();for(let t=0;t<this.max_iterations;t++){let i=_.cloneDeep(this.g);t%2==0?this.arrangeLeft(i):this.arrangeRight(i),this.transpose(i);let a=i.getEdgeCrossings();a<=e&&(this.applyArrangement(i),e=a)}this.elapsedTime=(new Date).getTime()-t}arrangeLeft(t){for(let e=1;e<=t.maxDepth;e++){let i=t.tableIndex[e],a=t.edgeIndex[e-1];for(let t of i){let e=a.filter(e=>e.rightTable==t&&e.leftTable.depth!=e.rightTable.depth).map(t=>parseFloat(t.leftTable.weight));t.weight=this.median(e);for(let e of t.attributes){let i=a.filter(t=>t.rightAttribute==e&&t.leftTable.depth!=t.rightTable.depth).map(t=>parseFloat(t.leftTable.weight)),l=a.filter(t=>t.rightAttribute==e&&t.leftTable.depth!=t.rightTable.depth).map(t=>parseFloat(t.leftAttribute.weight));0!=i.length&&(e.weight=this.median(i)+this.median(l)/t.attributes.length)}}t.setExactWeights()}}arrangeRight(t){for(let e=t.maxDepth-1;e>0;e--){let i=t.tableIndex[e],a=t.edgeIndex[e];for(let t of i){let e=a.filter(e=>e.leftTable==t&&e.leftTable.depth!=e.rightTable.depth).map(t=>parseFloat(t.rightTable.weight));t.weight=this.median(e);for(let e of t.attributes){let i=a.filter(t=>t.leftAttribute==e&&t.leftTable.depth!=t.rightTable.depth).map(t=>parseFloat(t.rightTable.weight)),l=a.filter(t=>t.leftAttribute==e&&t.leftTable.depth!=t.rightTable.depth).map(t=>parseFloat(t.rightAttribute.weight));0!=i.length&&(e.weight=this.median(i)+this.median(l)/t.attributes.length)}}t.setExactWeights()}}transpose(t){let e=!0;for(;e;){e=!1;for(let i=0;i<=t.maxDepth;i++){let a=t.getEdgeCrossingsAtDepth(i),l=t.tableIndex[i];for(let h=0;h<l.length-1;h++){let r=l[h],s=l[h+1];this.swap(r,s),t.getEdgeCrossingsAtDepth(i)+t.getEdgeCrossingsAtDepth(i+1)<a?e=!0:this.swap(r,s)}for(let h of l)for(let l=0;l<h.attributes.length-1;l++){let r=h.attributes[l],s=h.attributes[l+1];this.swap(r,s),t.getEdgeCrossingsAtDepth(i)+t.getEdgeCrossingsAtDepth(i+1)<a?e=!0:this.swap(r,s)}}}}swap(t,e){let i=t.weight;t.weight=e.weight,e.weight=i}}
class GansnerSameRank{constructor(t){this.g=t,this.max_iterations=6,this.elapsedTime=0,this.iterations=[],this.cur_iteration=0}apply_iteration(t){this.applyArrangement(this.iterations[t])}quicksort(t){if(t.length<=1)return t;for(var e=t[0],i=[],a=[],s=1;s<t.length;s++)t[s]<e?i.push(t[s]):a.push(t[s]);return quicksort(i).concat(e,quicksort(a))}median(t){return(t=t.sort()).length%2==0?(t[t.length/2]+t[t.length/2-1])/2:t[(t.length-1)/2]}applyArrangement(t){for(let e of t.tables){let t=this.g.tables.find(t=>t.name==e.name);t.weight=e.weight,t.assignedWeight=e.assignedWeight;for(let i of e.attributes){let e=t.attributes.find(t=>t.name==i.name);e.weight=i.weight,e.assignedWeight=i.assignedWeight}}}arrange(){let t=(new Date).getTime();this.g.setExactWeights();let e=this.g.getEdgeCrossings();for(let t=0;t<this.max_iterations;t++){this.cur_iteration=t;let i=_.cloneDeep(this.g);t%2==0?this.arrangeLeft(i):this.arrangeRight(i),this.transpose(i);let a=i.getEdgeCrossings();a<=e&&(this.applyArrangement(i),e=a),this.iterations[this.cur_iteration]=_.cloneDeep(i)}this.elapsedTime=(new Date).getTime()-t}arrangeLeft(t){console.log("Left");let e={},i={};for(let a=1;a<=t.maxDepth+1;a++){let s=t.tableIndex[a],r=t.edgeIndex[a-1];for(let t in s){let a=s[t],n=r.filter(t=>t.rightTable==a&&!this.isSameRankEdge(t)).map(t=>parseFloat(t.leftTable.weight)),l=this.median(n);isNaN(l)||(e[a.name]=l),i[a.name]={};for(let t of a.attributes){let e=r.filter(e=>e.rightAttribute==t&&!this.isSameRankEdge(e)).map(t=>parseFloat(t.leftTable.weight)),s=r.filter(e=>e.rightAttribute==t&&!this.isSameRankEdge(e)).map(t=>parseFloat(t.leftAttribute.weight)),n=parseFloat(this.median(e))+parseFloat(this.median(s)/a.attributes.length);isNaN(n)||(i[a.name][t.name]=n)}}}this.reorder(t,e,i)}arrangeRight(t){console.log("Right");let e={},i={};for(let a=t.maxDepth-1;a>0;a--){let s=t.tableIndex[a],r=t.edgeIndex[a];for(let t of s){let a=r.filter(e=>e.leftTable==t).map(t=>parseFloat(t.rightTable.weight)),s=parseFloat(this.median(a));isNaN(s)||(e[t.name]=s),i[t.name]={};for(let e of t.attributes){let a=r.filter(t=>t.leftAttribute==e).map(t=>parseFloat(t.rightTable.weight)),s=r.filter(t=>t.leftAttribute==e).map(t=>parseFloat(t.rightAttribute.weight)),n=parseFloat(this.median(a))+parseFloat(this.median(s)/t.attributes.length);isNaN(n)||(i[t.name][e.name]=n)}}}this.reorder(t,e,i)}isSameRankEdge(t){return t.leftTable.depth==t.rightTable.depth}reorder(t,e,i){for(let a in t.tableIndex)if(0!=a){for(let s in t.tableIndex[a]){let r=t.tableIndex[a][s];if(null!=e[r.name]){r.weight=e[r.name],r.assignedWeight=e[r.name];for(let t in r.attributes){let e=r.attributes[t];e.weight=i[r.name][e.name],e.assignedWeight=i[r.name][e.name]}r.attributes.sort((t,e)=>isNaN(t.weight)||isNaN(e.weight)?0:t.weight>e.weight?1:-1);for(let t in r.attributes){r.attributes[t].weight=t}}}t.tableIndex[a].sort((t,e)=>isNaN(t.weight)||isNaN(e.weight)?0:t.weight>e.weight?1:-1);for(let e in t.tableIndex[a]){t.tableIndex[a][e].weight=e}}}transpose(t){let e=!0;for(;e;){e=!1;for(let i=0;i<=t.maxDepth;i++){let a=t.getEdgeCrossingsAtDepth(i),s=t.tableIndex[i];for(let r=0;r<s.length-1;r++){let n=s[r],l=s[r+1];this.swap(n,l),t.getEdgeCrossingsAtDepth(i)+t.getEdgeCrossingsAtDepth(i+1)<a?e=!0:this.swap(n,l)}for(let r of s)for(let s=0;s<r.attributes.length-1;s++){let n=r.attributes[s],l=r.attributes[s+1];this.swap(n,l),t.getEdgeCrossingsAtDepth(i)+t.getEdgeCrossingsAtDepth(i+1)<a?e=!0:this.swap(n,l)}}}}swap(t,e){let i=t.weight;t.weight=e.weight,e.weight=i}}
class Graph{constructor(t){null==t?(this.edges=[],this.tables=[],this.tableIndex=[],this.edgeIndex=[],this.maxDepth=0,this.groups=[],this.baseRowDistance=6,this.attributeCounter=0,this.newLayer()):t&&Object.assign(this,t)}addGroup(t){if(this.groups.push(t),t.graph=this,t.id="g"+this.groups.indexOf(t),null!=t.groupHeader){let e=t.groupHeaderTable;this.addTable(e)}}updateGroupCoords(){for(let t of this.groups)t.updateCoords()}newLayer(){this.tableIndex.push([]),this.edgeIndex.push([])}addTable(t){for(;this.maxDepth<=t.depth;)this.maxDepth+=1,this.newLayer();t.graph=this,this.tables.push(t),this.tableIndex[t.depth].push(t)}addEdge(t){this.edges.push(t),this.edgeIndex[t.leftTable.depth].push(t)}addAttribute(t,e){e.id=e.id+this.attributeCounter,this.attributeCounter+=1,t.attributes.push(e)}ensureUniqueEdges(){}getEdgeCrossings(){let t=0;for(let e in this.edgeIndex)t+=this.getEdgeCrossingsAtDepth(e);return t}getEdgeCrossingsAtDepth(t,e=!1){let s=0,i=this.edgeIndex[t];for(let t in i){let r=i[t];for(let h=parseFloat(t)+1;h<i.length;h++){let t=i[h];r.crosses(t)&&(e&&console.log("Edge "+r.leftAttribute.name+r.rightAttribute.name+" crosses "+t.leftAttribute.name+t.rightAttribute.name),s+=1)}}return s}sortGraph(){for(let t of this.tables)t.main||(t.attributes=t.attributes.sort((t,e)=>t.weight>e.weight?1:-1));this.tables=this.tables.sort((t,e)=>t.weight>e.weight?1:-1);for(let t of this.tableIndex)t.sort((t,e)=>t.weight>e.weight?1:-1)}setExactWeights(){for(let t in this.tableIndex){let e=this.tableIndex[t];e=e.sort((t,e)=>t.weight>e.weight?1:-1);for(let t in e){let s=e[t];s.weight=parseFloat(t);let i=s.attributes;i=i.sort((t,e)=>t.weight>e.weight?1:-1);for(let t in i)i[t].weight=parseFloat(t)}}this.updateGroupCoords()}getNumStraightEdges(){let t=0;for(let e in this.edgeIndex)t+=this.getNumStraightEdgesAtDepth(e);return t}getNumStraightEdgesAtDepth(t){let e=0;for(let s of this.edgeIndex[t])s.leftTable.weight==s.rightTable.weight&&(e+=1);return e}adjustTableYPosition(){this.adjustAttrOffset()}getBendLeft(t){let e=t.depth,s=this.edgeIndex[e-1].filter(e=>e.rightTable==t&&!e.isSameRankEdge());return 0==s.length?0:Math.abs(s.map(t=>t.getBendiness()).reduce((t,e)=>Math.round(1e3*t+1e3*e)/1e3))}getBendRight(t){let e=t.depth,s=this.edgeIndex[e].filter(e=>e.leftTable==t&&!e.isSameRankEdge());return 0==s.length?0:Math.abs(s.map(t=>t.getBendiness()).reduce((t,e)=>Math.round(1e3*t+1e3*e)/1e3))}getTableBendiness(t){return 0==t.depth?Math.round(1e3*this.getBendRight(t))/1e3:Math.round(1e3*this.getBendLeft(t)+1e3*this.getBendRight(t))/1e3}getGraphTotalEdgeBendiness(){return Math.round(1e3*this.tables.map(t=>this.getTableBendiness(t)).reduce((t,e)=>t+e))/1e3}adjustAttrOffset(){let t=!0,e=0,s=(t,e)=>{let s=-2;return s=0==e?0:t[e-1].verticalAttrOffset-this.baseRowDistance+t[e-1].attributes.length+2,s},i=(t,e)=>{let s=2;return s=1==t.length||null==t[e+1]?20:t[e+1].verticalAttrOffset+this.baseRowDistance-t[e].attributes.length-2,s},r=()=>{for(let e=0;e<this.tableIndex.length;e++){let r=this.tableIndex[e];for(let e=0;e<r.length;e++){let h=r[e],a=this.getTableBendiness(h),l=h.verticalAttrOffset,n=s(r,e),d=i(r,e);for(let e=n;e<=d;e++){h.verticalAttrOffset=e;let s=this.getTableBendiness(h);s<=a&&(l=e,a=s,t=!0)}h.verticalAttrOffset=l}}},h=()=>{for(let t=this.tableIndex.length-1;t>0;t--){let e=this.tableIndex[t];for(let t=e.length-1;t>=0;t--){let r=e[t],h=this.getTableBendiness(r),a=r.verticalAttrOffset,l=s(e,t),n=i(e,t);for(let t=l;t<=n;t++){r.verticalAttrOffset=t;let e=this.getTableBendiness(r);e<h&&(a=t,h=e)}r.verticalAttrOffset=a}}};for(;e<10;)e++,e%2==0?r():h();this.updateGroupCoords()}}
class GraphGenerator{constructor(t=3,e="hello",r=[2,3],i=[1,5],s=.05,a=.05){this.d=t,this.s=3,this.jd=.1,this.v=a,this.js=s,this.attributeCounter=0,this.seed=e,this.tableDistribution=r,this.attributeDistribution=i,this.rng=new Math.seedrandom(this.seed),this.tableDist=()=>r[0]+Math.round(this.rng()*(r[1]-r[0])),this.attrDist=()=>i[0]+Math.round(this.rng()*(i[1]-i[0]))}generate(){g=new Graph,g.baseRowDistance=this.attributeDistribution[1]+2;for(var t=1;t<this.d;t++){g.newLayer();for(var e=0;e<this.tableDist();e++)g.addTable(this.generateTable(t,e))}return this.generateProjections(g),this.generateJoins(g),g.ensureUniqueEdges(),g}generateTable(t,e){name="T"+t+"y"+e;for(var r=new Table(name,name,!1,t),i=0;i<this.attrDist();i++)r.addAttribute("a"+this.attributeCounter),this.attributeCounter+=1;return r}generateProjections(t){let e=t.tableIndex[1],r=[],i=new Table("select","SELECT",!0,0),s=[],a=[],n=0;for(let t of e){let e=t.attributes,i=e[Math.floor(this.rng()*e.length)];s.push(i),a.push(i);for(let s of e)s!=i&&r.push(new Attribute(t,s));n++}let l=this.s*(r.length+n);for(t.addTable(i);n<l;n++){let t=Math.floor(this.rng()*r.length);r[t];r.splice(t,1)}for(let e of s){let r=new Attribute(i,"a"+this.attributeCounter++);r.mutable=!1,i.attributes.push(r),t.addEdge(new Edge(i,r,e.table,e))}}generateInterLayerJoins(t){for(var e=1;e<this.d;e++){let r=t.tableIndex[e],i=t.tableIndex[e+1],s=[],a=[];for(let t of r){let e=t.attributes;for(let r of e)s.push(new Attribute(t,r))}for(let e of i){if(0==s.length)break;let r=e.attributes,i=r[Math.floor(this.rng()*r.length)],n=Math.floor(this.rng()*s.length),l=s[n];s.splice(n,1),t.addEdge(new Edge(l.table,l.attr,e,i)),l.diffEdges++,i.diffEdges++;for(let t of r)t!=i&&a.push(new Attribute(e,t))}for(let e of s){if(0==a.length)break;if(this.rng()<this.jd){let r=Math.floor(this.rng()*a.length),i=a[r];a.splice(r,1),t.addEdge(new Edge(e.table,e.attr,i.table,i.attr)),e.diffEdges++,i.diffEdges++}}}}generateInLayerJoins(){for(var t=1;t<this.d;t++){let e=g.tableIndex[t];for(let t of e){let r=[],i=[];for(let e of t.attributes)r.push(new Attribute(t,e));for(let r of e)if(t!=r)for(let t of r.attributes)0==t.sameEdges&&i.push(new Attribute(r,t));for(let t of r){if(0==i.length)break;if(this.rng()<this.js){let e=Math.floor(this.rng()*i.length),r=i[e];i.splice(e,1),g.addEdge(new Edge(t.table,t.attr,r.table,r.attr)),t.sameEdges++,r.sameEdges++}}}}}generateRandomJoins(t){let e=[];for(let r=1;r<this.d;r++){let i=t.tableIndex[r].map(t=>t.attributes).flat().filter(e=>null==t.edges.find(t=>t.rightAttribute==e)),s=t.tableIndex[r+1].map(t=>t.attributes).flat();for(let r of i)if(this.rng()<this.v){let i=e.length/(e.length+s.length);if(this.rng()<i){let i=Math.floor(this.rng()*e.length),s=e[i];e.splice(i,1),t.addEdge(new Edge(s.table,s,r.table,r))}}e=i.filter(e=>null==t.edges.find(t=>t.leftAttribute==e)),i=[],s=[]}}generateJoins(t){this.generateInterLayerJoins(t),this.generateInLayerJoins(t),this.generateRandomJoins(t)}}
class Group{constructor(t){this.tables=[],this.coords=[],this.x_coord=0,this.y_coord=0,this.width_coord=0,this.height_coord=0,this.id=void 0,this.margin=5,this.graph=void 0,null!=t&&(this.groupHeader="count",this.groupHeaderTable=new Table(this.groupHeader,this.groupHeader,!0,20,"groupheader"),this.addTable(this.groupHeaderTable)),this.coords=[]}addTable(t){t.group=this,t.groups.push(this),this.tables.push(t),this.updateCoords()}updateCoordsPrecise(){this.coords=[];let t=Math.min.apply(0,this.tables.map(t=>t.depth)),h=this.tables.find(h=>h.depth==t);this.x_coord=h.depth;let e=Math.min.apply(0,this.tables.map(t=>t.weight)),i=this.tables.find(t=>t.weight==e);this.y_coord=i.weight;let s=Math.max.apply(0,this.tables.map(t=>t.depth)),a=this.tables.find(t=>t.depth==s);this.width_coord=a.depth-h.depth;let r=Math.max.apply(0,this.tables.map(t=>t.weight)),d=this.tables.find(t=>t.weight==r);this.height_coord=d.weight-i.weight;let p=[h.depth,a.depth];for(let t=0;t<p.length;t++){let h=p[t],e=Math.min.apply(0,this.tables.filter(t=>t.depth==h).map(t=>t.weight)),i=this.tables.find(t=>t.depth==h&&t.weight==e);this.coords.push([i.depth*depth_distance-this.margin,i.weight*table_vert_space+i.verticalAttrOffset*attr_height-this.margin]),this.coords.push([i.depth*depth_distance+table_width+this.margin,i.weight*table_vert_space+i.verticalAttrOffset*attr_height-this.margin])}for(let t=p.length-1;t>=0;t--){let h=p[t],e=Math.max.apply(0,this.tables.filter(t=>t.depth==h).map(t=>t.weight)),i=this.tables.find(t=>t.depth==h&&t.weight==e);this.coords.push([i.depth*depth_distance+table_width+this.margin,i.weight*table_vert_space+(1+i.attributes.length)*attr_height+i.verticalAttrOffset*attr_height+this.margin]),this.coords.push([i.depth*depth_distance-this.margin,i.weight*table_vert_space+(1+i.attributes.length)*attr_height+i.verticalAttrOffset*attr_height+this.margin])}this.coords.push(this.coords[0])}get_subgroups(){let t=[];if(1==this.tables.length)return[];for(let h of this.tables)for(let e of h.groups){if(-1!=t.indexOf(e)||e==this)continue;let h=!0;for(let t of e.tables)-1==this.tables.indexOf(t)&&(h=!1);h&&t.push(e)}return t}updateCoords(){this.margin+=5*this.get_subgroups().length,this.coords=[];let t=Math.min.apply(0,this.tables.map(t=>t.depth)),h=this.tables.find(h=>h.depth==t);this.x_coord=h.depth;let e=t=>t.weight*table_vert_space+t.verticalAttrOffset*attr_height,i=Math.min.apply(0,this.tables.map(t=>e(t))),s=this.tables.find(t=>e(t)==i);this.y_coord=e(s);let a=Math.max.apply(0,this.tables.map(t=>t.depth)),r=this.tables.find(t=>t.depth==a);this.width_coord=r.depth-h.depth;let d=Math.max.apply(0,this.tables.map(t=>t.weight)),p=this.tables.find(t=>t.weight==d);this.height_coord=p.weight-s.weight,this.coords.push([h.depth*depth_distance-this.margin,this.y_coord-this.margin]),this.coords.push([h.depth*depth_distance+this.margin+this.width_coord*depth_distance+table_width,this.y_coord-this.margin]),this.coords.push([h.depth*depth_distance+this.margin+this.width_coord*depth_distance+table_width,p.weight*table_vert_space+(1+p.attributes.length)*attr_height+p.verticalAttrOffset*attr_height+this.margin]),this.coords.push([h.depth*depth_distance-this.margin,p.weight*table_vert_space+(1+p.attributes.length)*attr_height+p.verticalAttrOffset*attr_height+this.margin]),this.coords.push(this.coords[0]),null!=this.groupHeader&&(this.groupHeaderTable.depth=t)}}
class LPBendiness{constructor(e){this.g=e,this.mip=!0,this.verbose=!1,this.elapsedTime=0}async arrange(){let e=(new Date).getTime(),t={};this.fillModel(t);let i,l,n=this.modelToString(t),s={};this.verbose&&glp_set_print_func(console.log);let _=glp_create_prob();glp_read_lp_from_string(_,null,n),glp_scale_prob(_,GLP_SF_AUTO);let g=new SMCP({presolve:GLP_ON});if(glp_simplex(_,g),this.mip)for(glp_intopt(_),i=glp_mip_obj_val(_),l=1;l<=glp_get_num_cols(_);l++)s[glp_get_col_name(_,l)]=glp_mip_col_val(_,l);else for(i=glp_get_obj_val(_),l=1;l<=glp_get_num_cols(_);l++)s[glp_get_col_name(_,l)]=glp_get_col_prim(_,l);this.apply_solution(s),this.elapsedTime=(new Date).getTime()-e}fillModel(e){e.minimize="Minimize \n",e.subjectTo="Subject To \n",e.bounds="\nBounds \n";for(let t of this.g.edges)this.isSameRankEdge(t)||(e.minimize+="bend_"+t.leftAttribute.name+"_"+t.rightAttribute.name+" + ",e.subjectTo+="y_"+t.leftAttribute.name+" - y_"+t.rightAttribute.name+" - bend_"+t.leftAttribute.name+"_"+t.rightAttribute.name+" <= 0\n",e.subjectTo+="y_"+t.rightAttribute.name+" - y_"+t.leftAttribute.name+" - bend_"+t.leftAttribute.name+"_"+t.rightAttribute.name+" <= 0\n");for(let t=0;t<this.g.tableIndex.length;t++){let i=this.g.tableIndex[t];for(let t=0;t<i.length-1;t++){let l=i[t],n=i[t+1];e.subjectTo+="y_"+n.name+" - y_"+l.name+" > "+(2+l.attributes.length)+"\n"}}for(let t of this.g.tables)for(let i=0;i<t.attributes.length;i++){let l=t.attributes[i];e.subjectTo+="y_"+l.name+" - y_"+t.name+" = "+(i+1)+"\n"}e.minimize=e.minimize.substring(0,e.minimize.length-2)+"\n\n"}isSameRankEdge(e){return e.leftTable.depth==e.rightTable.depth}modelToString(e){return e.minimize+e.subjectTo+e.bounds+"\nEnd\n"}apply_solution(e){for(let t=0;t<this.g.tableIndex.length;t++){let i=this.g.tableIndex[t];for(let t=0;t<i.length;t++){let l=i[t],n=e["y_"+l.name];l.verticalAttrOffset=n-l.weight*this.g.baseRowDistance}}}}
class LPBendinessCombined{constructor(e){this.g=e,this.mip=!0,this.verbose=!1,this.elapsedTime=0}async arrange(){let e=(new Date).getTime(),t={};this.fillModel(t);let l,n,i=this.modelToString(t),s={};this.verbose&&glp_set_print_func(console.log);let o=glp_create_prob();glp_read_lp_from_string(o,null,i),glp_scale_prob(o,GLP_SF_AUTO);let a=new SMCP({presolve:GLP_ON});if(glp_simplex(o,a),this.mip)for(glp_intopt(o),l=glp_mip_obj_val(o),n=1;n<=glp_get_num_cols(o);n++)s[glp_get_col_name(o,n)]=glp_mip_col_val(o,n);else for(l=glp_get_obj_val(o),n=1;n<=glp_get_num_cols(o);n++)s[glp_get_col_name(o,n)]=glp_get_col_prim(o,n);this.apply_solution(s),this.elapsedTime=(new Date).getTime()-e}fillModel(e){e.minimize="Minimize \n",e.subjectTo="Subject To \n",e.bounds="\nBounds \n";let t={},l={},n=(e,t,n,i)=>{let s="c_"+e+t+"_"+n+i;return l[s]="",s},i=(e,t,l="")=>"x_"+l+e+"_"+l+t;for(let e=0;e<this.g.maxDepth+1;e++){let l=this.g.tableIndex[e],n=l.map(e=>e.attributes).flat();for(let e=0;e<l.length;e++){let n=l[e].name;for(let s=e+1;s<l.length;s++){let e=l[s].name;t[i(n,e,"T")]=""}}for(let e=0;e<n.length;e++){let l=n[e].name;for(let s=e+1;s<n.length;s++){let e=n[s].name;t[i(l,e)]=""}}}for(let t=0;t<this.g.maxDepth+1;t++){let l=this.g.tableIndex[t],n=l.map(e=>e.attributes).flat();for(let t=0;t<l.length;t++){let n=l[t].name;for(let s=t+1;s<l.length;s++){let t=l[s].name;for(let o=s+1;o<l.length;o++){let s=l[o].name;e.subjectTo+=i(n,t,"T")+" + "+i(t,s,"T")+" - "+i(n,s,"T")+" >= 0\n",e.subjectTo+="- "+i(n,t,"T")+" - "+i(t,s,"T")+" + "+i(n,s,"T")+" >= -1\n"}}}for(let t=0;t<n.length;t++){let l=n[t].name;for(let s=t+1;s<n.length;s++){let o=n[s].name;if(t!=s&&n[t].table.name==n[s].table.name)for(let a=s+1;a<n.length;a++){if(a==s||a==t)continue;if(n[a].table.name!=n[t].table.name)continue;if(n[a].table.name!=n[s].table.name)continue;let u=n[a].name;e.subjectTo+=i(l,o)+" + "+i(o,u)+" - "+i(l,u)+" >= 0\n",e.subjectTo+="- "+i(l,o)+" - "+i(o,u)+" + "+i(l,u)+" >= -1\n"}}}}for(let l=0;l<this.g.maxDepth+1;l++){let s=this.g.edgeIndex[l];for(let l=0;l<s.length;l++){let o=s[l];for(let a=l+1;a<s.length;a++){let l=s[a];if(null!=o.leftTable.group&&null!=o.rightTable.group&&l.leftTable.group!=l.leftTable.group&&(e.subjectTo+=n(u1,v1,u2,v2)+" = 0\n"),this.isSameRankEdge(o)||this.isSameRankEdge(l)){if(this.isSameRankEdge(o)&&this.isSameRankEdge(l)){let s=o.leftAttribute.name,a=o.rightAttribute.name,u=l.leftAttribute.name,b=l.rightAttribute.name,m=n(s,a,u,b),r=1;e.subjectTo+=m+"";let T=i(s,u);null!=t[T]?e.subjectTo+=" + "+T:(T=i(u,s),r-=1,e.subjectTo+=" - "+T);let g=i(a,b);null!=t[g]?e.subjectTo+=" + "+g:(r-=1,g=i(b,a),e.subjectTo+=" - "+g);let c=i(u,a);null!=t[c]?e.subjectTo+=c:(r-=1,c=i(a,u),e.subjectTo+=" + "+c),e.subjectTo+=" >= "+r+"\n",m=n(s,a,u,b),r=1,e.subjectTo+=m+"",T=i(s,u),null!=t[T]?e.subjectTo+=" + "+T:(T=i(u,s),r-=1,e.subjectTo+=" - "+T),g=i(a,b),null!=t[g]?e.subjectTo+=" + "+g:(r-=1,g=i(b,a),e.subjectTo+=" - "+g),c=i(b,s),null!=t[c]?e.subjectTo+=c:(r-=1,c=i(s,b),e.subjectTo+=" + "+c),e.subjectTo+=" >= "+r+"\n"}else if(this.isSameRankEdge(o)&&!this.isSameRankEdge(l)){let s=o.leftAttribute.name,a=o.rightAttribute.name,u=l.leftAttribute.name,b=l.rightAttribute.name,m=n(s,a,u,b),r=1;e.subjectTo+=m+"";let T=i(u,s);null!=t[T]?e.subjectTo+=" + "+T:(T=i(s,u),r-=1,e.subjectTo+=" - "+T);let g=i(a,u);null!=t[g]?e.subjectTo+=" + "+g:(r-=1,g=i(u,a),e.subjectTo+=" - "+g),e.subjectTo+=" >= "+r+"\n",m=n(s,a,u,b),r=1,e.subjectTo+=m+"",T=i(u,a),null!=t[T]?e.subjectTo+=" + "+T:(T=i(a,u),r-=1,e.subjectTo+=" - "+T),g=i(s,u),null!=t[g]?e.subjectTo+=" + "+g:(r-=1,g=i(u,s),e.subjectTo+=" - "+g),e.subjectTo+=" >= "+r+"\n"}else if(!this.isSameRankEdge(o)&&this.isSameRankEdge(l)){let s=o.leftAttribute.name,a=o.rightAttribute.name,u=l.leftAttribute.name,b=l.rightAttribute.name,m=n(s,a,u,b),r=1;e.subjectTo+=m+"";let T=i(s,u);null!=t[T]?e.subjectTo+=" + "+T:(T=i(u,s),r-=1,e.subjectTo+=" - "+T);let g=i(b,s);null!=t[g]?e.subjectTo+=" + "+g:(r-=1,g=i(s,b),e.subjectTo+=" - "+g),e.subjectTo+=" >= "+r+"\n",m=n(s,a,u,b),r=1,e.subjectTo+=m+"",T=i(s,b),null!=t[T]?e.subjectTo+=" + "+T:(T=i(b,s),r-=1,e.subjectTo+=" - "+T),g=i(u,s),null!=t[g]?e.subjectTo+=" + "+g:(r-=1,g=i(s,u),e.subjectTo+=" - "+g),e.subjectTo+=" >= "+r+"\n"}}else{let s=o.leftAttribute.name,a=o.rightAttribute.name,u=l.leftAttribute.name,b=l.rightAttribute.name;if(s==u||a==b)continue;let m=n(s,a,u,b),r=1;e.subjectTo+=m+"";let T=i(u,s);null!=t[T]?e.subjectTo+=" + "+T:(T=i(s,u),r-=1,e.subjectTo+=" - "+T);let g=i(a,b);null!=t[g]?e.subjectTo+=" + "+g:(g=i(b,a),r-=1,e.subjectTo+=" - "+g),e.subjectTo+=" >= "+r+"\n",m=n(s,a,u,b),r=1,e.subjectTo+=m+"",T=i(s,u),null!=t[T]?e.subjectTo+=" + "+T:(T=i(u,s),r-=1,e.subjectTo+=" - "+T),g=i(b,a),null!=t[g]?e.subjectTo+=" + "+g:(g=i(a,b),r-=1,e.subjectTo+=" - "+g),e.subjectTo+=" >= "+r+"\n"}}}}for(let t=0;t<this.g.maxDepth+1;t++){let l=this.g.tableIndex[t].map(e=>e.attributes).flat();for(let t=0;t<l.length;t++){let n=l[t].name,s=l[t].table.name;for(let o=t+1;o<l.length;o++){let t=l[o].name,a=l[o].table.name;s!=a&&(e.subjectTo+=i(n,t)+" - "+i(s,a,"T")+" = 0\n")}}}for(let t of this.g.edges)e.subjectTo+="y_"+t.leftAttribute.name+" - y_"+t.rightAttribute.name+" - bend_"+t.leftAttribute.name+"_"+t.rightAttribute.name+" <= 0\n",e.subjectTo+="y_"+t.rightAttribute.name+" - y_"+t.leftAttribute.name+" - bend_"+t.leftAttribute.name+"_"+t.rightAttribute.name+" <= 0\n";let s=0;for(let l of this.g.tableIndex)for(let n in l){let o=l[n];for(let a in l){if(n==a)continue;let u=l[a],b=i(u.name,o.name,"T");null!=t[b]?(e.subjectTo+="z_"+s+" - "+"20 "+b+" <= 0\n",e.subjectTo+="z_"+s+" - y_"+u.name+" <= 0\n",e.subjectTo+="z_"+s+" - y_"+u.name+" - "+"20 "+b+" >= - "+"20\n",e.subjectTo+="z_"+s+" >= 0\n",e.subjectTo+="y_"+o.name+" - z_"+s+" - "+(2+u.attributes.length)+" "+b+" >= 0\n"):(b=i(o.name,u.name,"T"),e.subjectTo+="z_"+s+" + "+"20 "+b+" <= "+"20\n",e.subjectTo+="z_"+s+" - y_"+u.name+" <= 0\n",e.subjectTo+="z_"+s+" - y_"+u.name+" + "+"20 "+b+" >= 0\n",e.subjectTo+="z_"+s+" >= 0\n",e.subjectTo+="y_"+o.name+" - z_"+s+" + "+(2+u.attributes.length)+" "+b+" >= "+(2+u.attributes.length)+"\n"),s+=1}}for(let l of this.g.tables)for(let n in l.attributes){let s=l.attributes[n],o=1,a="y_"+s.name+" - y_"+l.name;for(let e in l.attributes){if(n==e)continue;let u=l.attributes[e],b=i(u.name,s.name);if(null!=t[b])a+=" - "+b;else{a+=" + "+i(s.name,u.name),o+=1}}a+=" = "+o+"\n",e.subjectTo+=a}for(let t in l)e.minimize+=t+" + ";for(let t of this.g.edges)e.minimize+="0.1 bend_"+t.leftAttribute.name+"_"+t.rightAttribute.name+" + ";e.minimize=e.minimize.substring(0,e.minimize.length-2)+"\n\n";for(let l in t)e.bounds+="binary "+l+"\n"}isSameRankEdge(e){return e.leftTable.depth==e.rightTable.depth}modelToString(e){return e.minimize+e.subjectTo+e.bounds+"\nEnd\n"}apply_solution(e){console.log(e);for(let t=0;t<this.g.maxDepth+1;t++){let l=this.g.tableIndex[t];l.sort((t,l)=>0==e["x_T"+t.name+"_T"+l.name]?1:1==e["x_T"+t.name+"_T"+l.name]?-1:1==e["x_T"+l.name+"_T"+t.name]?1:0==e["x_T"+l.name+"_T"+t.name]?-1:void 0);for(let e in l)l[e].weight=e;for(let t of l){t.attributes.sort((t,l)=>0==e["x_"+t.name+"_"+l.name]?1:1==e["x_"+t.name+"_"+l.name]?-1:1==e["x_"+l.name+"_"+t.name]?1:0==e["x_"+l.name+"_"+t.name]?-1:void 0);for(let e=0;e<t.attributes.length;e++)t.attributes[e].weight=e}}for(let t=0;t<this.g.tableIndex.length;t++){let l=this.g.tableIndex[t];for(let t=0;t<l.length;t++){let n=l[t],i=e["y_"+n.name];null!=i&&(n.verticalAttrOffset=i-n.weight*this.g.baseRowDistance)}}}}
class LPBendinessCombinedPlusGroups{constructor(t,i){this.g=t,this.mip=!0,this.verbose=!1,this.elapsedTime=0,this.numConstraints=0,this.modelString="",this.options=null==i?{bendiness_reduction_active:!0,bendiness_reduction_type:"optimize_angles",crossings_reduction_active:!0,crossings_reduction_weight:1,bendiness_reduction_weight:.1,bendiness_angle_optimization_weight:.01}:i}async arrange(){if(0==this.options.crossings_reduction_active&&0==this.options.bendiness_reduction_active)return;let t=(new Date).getTime(),i={};this.fillModel(i);let e=this.modelToString(i);if(this.modelString=e,i.minimize.length<=10)return;let s,n,o={};this.verbose&&glp_set_print_func(console.log);let h=glp_create_prob();glp_read_lp_from_string(h,null,e),glp_scale_prob(h,GLP_SF_AUTO);let l=new SMCP({presolve:GLP_ON});if(glp_simplex(h,l),this.mip)for(glp_intopt(h),s=glp_mip_obj_val(h),n=1;n<=glp_get_num_cols(h);n++)o[glp_get_col_name(h,n)]=glp_mip_col_val(h,n);else for(s=glp_get_obj_val(h),n=1;n<=glp_get_num_cols(h);n++)o[glp_get_col_name(h,n)]=glp_get_col_prim(h,n);this.apply_solution(o),this.elapsedTime=(new Date).getTime()-t}fillModel(t){this.m=30,this.zcount=0,this.buffer=2,t.minimize="Minimize \n",t.subjectTo="Subject To \n",t.bounds="\nBounds \n",this.definitions={},this.crossing_vars={};for(let t=0;t<this.g.maxDepth+1;t++){let i=this.g.tableIndex[t],e=i.map(t=>t.attributes).flat();for(let t=0;t<i.length;t++){let e=i[t].id;for(let s=t+1;s<i.length;s++){let t=i[s].id;this.definitions[this.mkxBase(e,t,"T")]=""}}for(let t=0;t<e.length;t++){let i=e[t].id;for(let s=t+1;s<e.length;s++){let t=e[s].id;this.definitions[this.mkxBase(i,t)]=""}}}for(let i of this.g.groups){for(let e of i.tables)t.subjectTo+="y_groupstart_"+i.id+" - y_"+e.id+" <= 0\n",t.subjectTo+="y_groupend_"+i.id+" - y_"+e.id+" >= "+(e.attributes.length+this.buffer)+"\n";for(let e of this.g.tables)-1==i.tables.indexOf(e)&&-1!=i.tables.map(t=>t.depth).indexOf(e.depth)&&(t.subjectTo+="y_"+e.id+" - "+this.m+" z_"+this.zcount+" - y_groupstart_"+i.id+" <= - "+(e.attributes.length+this.buffer)+"\n",t.subjectTo+="- y_"+e.id+" + "+this.m+" z_"+this.zcount+" + y_groupend_"+i.id+" <= "+this.m+"\n",this.zcount+=1)}for(let i=0;i<=this.zcount;i++)t.bounds+="binary z_"+i+"\n";for(let i=0;i<this.g.maxDepth+1;i++){let e=this.g.tableIndex[i],s=e.map(t=>t.attributes).flat();for(let i=0;i<e.length;i++){let s=e[i].id;for(let n=i+1;n<e.length;n++){let i=e[n].id;for(let o=n+1;o<e.length;o++){let n=e[o].id;s!=i&&i!=n&&s!=n&&(t.subjectTo+=this.mkxBase(s,i,"T")+" + "+this.mkxBase(i,n,"T")+" - "+this.mkxBase(s,n,"T")+" >= 0\n",t.subjectTo+="- "+this.mkxBase(s,i,"T")+" - "+this.mkxBase(i,n,"T")+" + "+this.mkxBase(s,n,"T")+" >= -1\n")}}}for(let i=0;i<s.length;i++){let e=s[i].id;for(let n=i+1;n<s.length;n++){let o=s[n].id;if(i!=n&&s[i].table.id==s[n].table.id){for(let h=n+1;h<s.length;h++){if(h==n||h==i)continue;if(s[h].table.id!=s[i].table.id)continue;if(s[h].table.id!=s[n].table.id)continue;let l=s[h].id;e!=o&&o!=l&&e!=l&&(t.subjectTo+=this.mkxBase(e,o)+" + "+this.mkxBase(o,l)+" - "+this.mkxBase(e,l)+" >= 0\n",t.subjectTo+="- "+this.mkxBase(e,o)+" - "+this.mkxBase(o,l)+" + "+this.mkxBase(e,l)+" >= -1\n")}"constraint"==s[n].type?t.subjectTo+=this.mkxDict(" + ",e,o)[0]+" = "+(1+this.mkxDict(" + ",e,o)[1])+"\n":"constraint"==s[i].type&&(t.subjectTo+=this.mkxDict(" + ",o,e)[0]+" = "+(1+this.mkxDict(" + ",o,e)[1])+"\n")}}}}this.options.crossings_reduction_active&&this.addCrossingsReduction(t);for(let i=0;i<this.g.maxDepth+1;i++){let e=this.g.tableIndex[i].map(t=>t.attributes).flat();for(let i=0;i<e.length;i++){let s=e[i].id,n=e[i].table.id;for(let o=i+1;o<e.length;o++){let i=e[o].id,h=e[o].table.id;n!=h&&(t.subjectTo+=this.mkxBase(s,i)+" - "+this.mkxBase(n,h,"T")+" = 0\n")}}}this.options.bendiness_reduction_active?"simple"==this.options.bendiness_reduction_type?this.addSimpleBendiness(this.g,t):"optimize_angles"==this.options.bendiness_reduction_type&&this.addBendinessPlusMaximizeCrossingAngle(this.g,t):t.minimize=t.minimize.substring(0,t.minimize.length-2)+"\n\n";for(let i in this.definitions)t.bounds+="binary "+i+"\n";for(let i in this.crossing_vars)t.bounds+="binary "+i+"\n";this.numConstraints=t.subjectTo.split("\n").length,console.log("number of constraints: ",this.numConstraints)}mkc(t,i,e,s){let n="c_"+t+i+"_"+e+s;return this.crossing_vars[n]="",n}mkxDict(t,i,e){let s="",n=0,o=" - ";" - "==t&&(o=" + ");let h=this.mkxBase(i,e);return null!=this.definitions[h]?s+=t+h:(h=this.mkxBase(e,i),null==this.definitions[h]&&console.warn(h+" not defined"),n-=1,s+=o+h),[s,n]}addCrossingsReduction(t){for(let i=0;i<this.g.maxDepth+1;i++){let e=this.g.edgeIndex[i];for(let i=0;i<e.length;i++){let s=e[i];for(let n=i+1;n<e.length;n++){let i=e[n],o=s.leftAttribute.id,h=s.rightAttribute.id,l=i.leftAttribute.id,d=i.rightAttribute.id;if(this.isSameRankEdge(s)||this.isSameRankEdge(i)){if(this.isSameRankEdge(s)&&this.isSameRankEdge(i)){let i=this.mkc(o,h,l,d),e=1+this.mkxDict(" + ",o,l)[1]+this.mkxDict(" + ",h,d)[1]+this.mkxDict(" + ",l,h)[1];t.subjectTo+=i+""+this.mkxDict(" + ",o,l)[0]+this.mkxDict(" + ",h,d)[0]+this.mkxDict(" + ",l,h)[0],t.subjectTo+=" >= "+e+"\n",i=this.mkc(o,h,l,d),e=1+this.mkxDict(" + ",o,l)[1]+this.mkxDict(" + ",h,d)[1]+this.mkxDict(" + ",d,o)[1],t.subjectTo+=i+""+this.mkxDict(" + ",o,l)[0]+this.mkxDict(" + ",h,d)[0]+this.mkxDict(" + ",d,o)[0],t.subjectTo+=" >= "+e+"\n"}else if(this.isSameRankEdge(s)&&!this.isSameRankEdge(i)){let i=this.mkc(o,h,l,d),e=1+this.mkxDict(" + ",l,o)[1]+this.mkxDict(" + ",h,l)[1];t.subjectTo+=i+""+this.mkxDict(" + ",l,o)[0]+this.mkxDict(" + ",h,l)[0],t.subjectTo+=" >= "+e+"\n",i=this.mkc(o,h,l,d),e=1+this.mkxDict(" + ",l,h)[1]+this.mkxDict(" + ",o,l)[1],t.subjectTo+=i+""+this.mkxDict(" + ",l,h)[0]+this.mkxDict(" + ",o,l)[0],t.subjectTo+=" >= "+e+"\n"}else if(!this.isSameRankEdge(s)&&this.isSameRankEdge(i)){let i=this.mkc(o,h,l,d),e=1+this.mkxDict(" + ",o,l)[1]+this.mkxDict(" + ",d,o)[1];t.subjectTo+=i+""+this.mkxDict(" + ",o,l)[0]+this.mkxDict(" + ",d,o)[0],t.subjectTo+=" >= "+e+"\n",i=this.mkc(o,h,l,d),e=1+this.mkxDict(" + ",o,d)[1]+this.mkxDict(" + ",l,o)[1],t.subjectTo+=i+""+this.mkxDict(" + ",o,d)[0]+this.mkxDict(" + ",l,o)[0],t.subjectTo+=" >= "+e+"\n"}}else{if(o==l||h==d)continue;let i=this.mkc(o,h,l,d),e=1+this.mkxDict(" + ",l,o)[1]+this.mkxDict(" + ",h,d)[1];t.subjectTo+=i+""+this.mkxDict(" + ",l,o)[0]+this.mkxDict(" + ",h,d)[0],t.subjectTo+=" >= "+e+"\n",i=this.mkc(o,h,l,d),e=1+this.mkxDict(" + ",o,l)[1]+this.mkxDict(" + ",d,h)[1],t.subjectTo+=i+""+this.mkxDict(" + ",o,l)[0]+this.mkxDict(" + ",d,h)[0],t.subjectTo+=" >= "+e+"\n"}}}}for(let i in this.crossing_vars)t.minimize+=this.options.crossings_reduction_weight+" "+i+" + "}isSameRankEdge(t){return t.leftTable.depth==t.rightTable.depth}modelToString(t){return t.minimize+t.subjectTo+t.bounds+"\nEnd\n"}mkxBase(t,i,e=""){return"x_"+e+t+"_"+e+i}addBendinessPlusMaximizeCrossingAngle(t,i){for(let e of t.edges)this.isSameRankEdge(e)||(i.subjectTo+="y_"+e.leftAttribute.id+" - y_"+e.rightAttribute.id+" - bend_"+e.leftAttribute.id+"_"+e.rightAttribute.id+" <= 0\n",i.subjectTo+="y_"+e.rightAttribute.id+" - y_"+e.leftAttribute.id+" - bend_"+e.leftAttribute.id+"_"+e.rightAttribute.id+" <= 0\n");for(let e of t.tableIndex)for(let t in e){let s=e[t];for(let n in e){if(t==n)continue;let o=e[n],h=this.mkxBase(o.id,s.id,"T");null!=this.definitions[h]?(i.subjectTo+="z_"+this.zcount+" - "+this.m+" "+h+" <= 0\n",i.subjectTo+="z_"+this.zcount+" - y_"+o.id+" <= 0\n",i.subjectTo+="z_"+this.zcount+" - y_"+o.id+" - "+this.m+" "+h+" >= - "+this.m+"\n",i.subjectTo+="z_"+this.zcount+" >= 0\n",i.subjectTo+="y_"+s.id+" - z_"+this.zcount+" - "+(this.buffer+o.attributes.length)+" "+h+" >= 0\n"):(h=this.mkxBase(s.id,o.id,"T"),i.subjectTo+="z_"+this.zcount+" + "+this.m+" "+h+" <= "+this.m+"\n",i.subjectTo+="z_"+this.zcount+" - y_"+o.id+" <= 0\n",i.subjectTo+="z_"+this.zcount+" - y_"+o.id+" + "+this.m+" "+h+" >= 0\n",i.subjectTo+="z_"+this.zcount+" >= 0\n",i.subjectTo+="y_"+s.id+" - z_"+this.zcount+" + "+(this.buffer+o.attributes.length)+" "+h+" >= "+(this.buffer+o.attributes.length)+"\n"),this.zcount+=1}}for(let e of t.tables)for(let t in e.attributes){let s=e.attributes[t],n=1,o="y_"+s.id+" - y_"+e.id;for(let i in e.attributes){if(t==i)continue;let h=e.attributes[i],l=this.mkxBase(h.id,s.id);if(null!=this.definitions[l])o+=" - "+l;else{o+=" + "+this.mkxBase(s.id,h.id),n+=1}}o+=" = "+n+"\n",i.subjectTo+=o}for(let e of t.edges){if(this.isSameRankEdge(e))continue;let t=e.leftAttribute.id,s=e.rightAttribute.id;for(let e in this.crossing_vars){let n=e.split("_");n[1]!=t+s&&n[2]!=t+s||(i.subjectTo+="onecross_"+t+"_"+s+" - "+e+" >= 0\n")}i.bounds+="binary onecross_"+t+"_"+s+"\n",i.subjectTo+="auxbend_"+t+"_"+s+" + "+this.m+" onecross_"+t+"_"+s+" <= "+this.m+"\n",i.subjectTo+="auxbend_"+t+"_"+s+" - bend_"+t+"_"+s+" <= 0\n",i.subjectTo+="auxbend_"+t+"_"+s+" - bend_"+t+"_"+s+" + "+this.m+" onecross_"+t+"_"+s+" >= 0\n",i.subjectTo+="auxbend_"+t+"_"+s+" >= 0\n",i.subjectTo+="aux2bend_"+t+"_"+s+" - "+this.m+" onecross_"+t+"_"+s+" <= 0\n",i.subjectTo+="aux2bend_"+t+"_"+s+" + bend_"+t+"_"+s+" <= "+this.m+"\n",i.subjectTo+="aux2bend_"+t+"_"+s+" + bend_"+t+"_"+s+" - "+this.m+" onecross_"+t+"_"+s+" >= 0\n",i.subjectTo+="aux2bend_"+t+"_"+s+" >= 0\n"}for(let e of t.edges)this.isSameRankEdge(e)||(i.minimize+=this.options.bendiness_reduction_weight+" auxbend_"+e.leftAttribute.id+"_"+e.rightAttribute.id+" + ",i.minimize+=this.options.bendiness_angle_optimization_weight+" aux2bend_"+e.leftAttribute.id+"_"+e.rightAttribute.id+" + ");i.minimize=i.minimize.substring(0,i.minimize.length-2)+"\n\n"}addSimpleBendiness(t,i){for(let e of t.edges)this.isSameRankEdge(e)||(i.subjectTo+="y_"+e.leftAttribute.id+" - y_"+e.rightAttribute.id+" - bend_"+e.leftAttribute.id+"_"+e.rightAttribute.id+" <= 0\n",i.subjectTo+="y_"+e.rightAttribute.id+" - y_"+e.leftAttribute.id+" - bend_"+e.leftAttribute.id+"_"+e.rightAttribute.id+" <= 0\n");for(let e of t.tableIndex)for(let t in e){let s=e[t];for(let n in e){if(t==n)continue;let o=e[n],h=this.mkxBase(o.id,s.id,"T");null!=this.definitions[h]?(i.subjectTo+="z_"+this.zcount+" - "+this.m+" "+h+" <= 0\n",i.subjectTo+="z_"+this.zcount+" - y_"+o.id+" <= 0\n",i.subjectTo+="z_"+this.zcount+" - y_"+o.id+" - "+this.m+" "+h+" >= - "+this.m+"\n",i.subjectTo+="z_"+this.zcount+" >= 0\n",i.subjectTo+="y_"+s.id+" - z_"+this.zcount+" - "+(this.buffer+o.attributes.length)+" "+h+" >= 0\n"):(h=this.mkxBase(s.id,o.id,"T"),i.subjectTo+="z_"+this.zcount+" + "+this.m+" "+h+" <= "+this.m+"\n",i.subjectTo+="z_"+this.zcount+" - y_"+o.id+" <= 0\n",i.subjectTo+="z_"+this.zcount+" - y_"+o.id+" + "+this.m+" "+h+" >= 0\n",i.subjectTo+="z_"+this.zcount+" >= 0\n",i.subjectTo+="y_"+s.id+" - z_"+this.zcount+" + "+(this.buffer+o.attributes.length)+" "+h+" >= "+(this.buffer+o.attributes.length)+"\n"),this.zcount+=1}}for(let e of t.tables)for(let t in e.attributes){let s=e.attributes[t],n=1,o="y_"+s.id+" - y_"+e.id;for(let i in e.attributes){if(t==i)continue;let h=e.attributes[i],l=this.mkxBase(h.id,s.id);if(null!=this.definitions[l])o+=" - "+l;else{o+=" + "+this.mkxBase(s.id,h.id),n+=1}}o+=" = "+n+"\n",i.subjectTo+=o}for(let e of t.edges)this.isSameRankEdge(e)||(i.minimize+=this.options.bendiness_reduction_weight+" bend_"+e.leftAttribute.id+"_"+e.rightAttribute.id+" + ");i.minimize=i.minimize.substring(0,i.minimize.length-2)+"\n\n"}apply_solution(t){console.log(t);for(let i=0;i<this.g.maxDepth+1;i++){let e=this.g.tableIndex[i];e.sort((i,e)=>0==t["x_T"+i.id+"_T"+e.id]?1:1==t["x_T"+i.id+"_T"+e.id]?-1:1==t["x_T"+e.id+"_T"+i.id]?1:0==t["x_T"+e.id+"_T"+i.id]?-1:void 0);for(let t in e)e[t].weight=t;for(let i of e){i.attributes.sort((i,e)=>0==t["x_"+i.id+"_"+e.id]?1:1==t["x_"+i.id+"_"+e.id]?-1:1==t["x_"+e.id+"_"+i.id]?1:0==t["x_"+e.id+"_"+i.id]?-1:void 0);for(let t=0;t<i.attributes.length;t++)i.attributes[t].weight=t}}if(this.options.bendiness_reduction_active)for(let i=0;i<this.g.tableIndex.length;i++){let e=this.g.tableIndex[i];for(let i=0;i<e.length;i++){let s=e[i],n=t["y_"+s.id];null!=n&&(s.verticalAttrOffset=n-s.weight*this.g.baseRowDistance)}}}}
class LPFormulation{constructor(e){this.g=e,this.mip=!0,this.verbose=!1,this.elapsedTime=0}async arrange(){let e=(new Date).getTime(),t={};this.fillModel(t);let l,n,i=this.modelToString(t),a={};this.verbose&&glp_set_print_func(console.log);let o=glp_create_prob();glp_read_lp_from_string(o,null,i),glp_scale_prob(o,GLP_SF_AUTO);let s=new SMCP({presolve:GLP_ON});if(glp_simplex(o,s),this.mip)for(glp_intopt(o),l=glp_mip_obj_val(o),n=1;n<=glp_get_num_cols(o);n++)a[glp_get_col_name(o,n)]=glp_mip_col_val(o,n);else for(l=glp_get_obj_val(o),n=1;n<=glp_get_num_cols(o);n++)a[glp_get_col_name(o,n)]=glp_get_col_prim(o,n);this.apply_solution(a),this.elapsedTime=(new Date).getTime()-e}fillModel(e){e.minimize="Minimize \n",e.subjectTo="Subject To \n",e.bounds="\nBounds \n";let t={},l={},n=(e,t,n,i)=>{let a="c_"+e+t+"_"+n+i;return l[a]="",a},i=(e,t,l="")=>"x_"+l+e+"_"+l+t;for(let e=0;e<this.g.maxDepth+1;e++){let l=this.g.tableIndex[e],n=l.map(e=>e.attributes).flat();for(let e=0;e<l.length;e++){let n=l[e].name;for(let a=e+1;a<l.length;a++){let e=l[a].name;t[i(n,e,"T")]=""}}for(let e=0;e<n.length;e++){let l=n[e].name;for(let a=e+1;a<n.length;a++){let e=n[a].name;t[i(l,e)]=""}}}for(let t=0;t<this.g.maxDepth+1;t++){let l=this.g.tableIndex[t],n=l.map(e=>e.attributes).flat();for(let t=0;t<l.length;t++){let n=l[t].name;for(let a=t+1;a<l.length;a++){let t=l[a].name;for(let o=a+1;o<l.length;o++){let a=l[o].name;e.subjectTo+=i(n,t,"T")+" + "+i(t,a,"T")+" - "+i(n,a,"T")+" >= 0\n",e.subjectTo+="- "+i(n,t,"T")+" - "+i(t,a,"T")+" + "+i(n,a,"T")+" >= -1\n"}}}for(let t=0;t<n.length;t++){let l=n[t].name;for(let a=t+1;a<n.length;a++){let o=n[a].name;if(t!=a&&n[t].table.name==n[a].table.name)for(let s=a+1;s<n.length;s++){if(s==a||s==t)continue;if(n[s].table.name!=n[t].table.name)continue;if(n[s].table.name!=n[a].table.name)continue;let u=n[s].name;e.subjectTo+=i(l,o)+" + "+i(o,u)+" - "+i(l,u)+" >= 0\n",e.subjectTo+="- "+i(l,o)+" - "+i(o,u)+" + "+i(l,u)+" >= -1\n"}}}}for(let l=0;l<this.g.maxDepth+1;l++){let a=this.g.edgeIndex[l];for(let l=0;l<a.length;l++){let o=a[l];for(let s=l+1;s<a.length;s++){let l=a[s];if(null!=o.leftTable.group&&null!=o.rightTable.group&&l.leftTable.group!=l.leftTable.group&&(e.subjectTo+=n(u1,v1,u2,v2)+" = 0\n"),this.isSameRankEdge(o)||this.isSameRankEdge(l)){if(this.isSameRankEdge(o)&&this.isSameRankEdge(l)){let a=o.leftAttribute.name,s=o.rightAttribute.name,u=l.leftAttribute.name,b=l.rightAttribute.name,m=n(a,s,u,b),r=1;e.subjectTo+=m+"";let g=i(a,u);null!=t[g]?e.subjectTo+=" + "+g:(g=i(u,a),r-=1,e.subjectTo+=" - "+g);let _=i(s,b);null!=t[_]?e.subjectTo+=" + "+_:(r-=1,_=i(b,s),e.subjectTo+=" - "+_);let h=i(u,s);null!=t[h]?e.subjectTo+=h:(r-=1,h=i(s,u),e.subjectTo+=" + "+h),e.subjectTo+=" >= "+r+"\n",m=n(a,s,u,b),r=1,e.subjectTo+=m+"",g=i(a,u),null!=t[g]?e.subjectTo+=" + "+g:(g=i(u,a),r-=1,e.subjectTo+=" - "+g),_=i(s,b),null!=t[_]?e.subjectTo+=" + "+_:(r-=1,_=i(b,s),e.subjectTo+=" - "+_),h=i(b,a),null!=t[h]?e.subjectTo+=h:(r-=1,h=i(a,b),e.subjectTo+=" + "+h),e.subjectTo+=" >= "+r+"\n"}else if(this.isSameRankEdge(o)&&!this.isSameRankEdge(l)){let a=o.leftAttribute.name,s=o.rightAttribute.name,u=l.leftAttribute.name,b=l.rightAttribute.name,m=n(a,s,u,b),r=1;e.subjectTo+=m+"";let g=i(u,a);null!=t[g]?e.subjectTo+=" + "+g:(g=i(a,u),r-=1,e.subjectTo+=" - "+g);let _=i(s,u);null!=t[_]?e.subjectTo+=" + "+_:(r-=1,_=i(u,s),e.subjectTo+=" - "+_),e.subjectTo+=" >= "+r+"\n",m=n(a,s,u,b),r=1,e.subjectTo+=m+"",g=i(u,s),null!=t[g]?e.subjectTo+=" + "+g:(g=i(s,u),r-=1,e.subjectTo+=" - "+g),_=i(a,u),null!=t[_]?e.subjectTo+=" + "+_:(r-=1,_=i(u,a),e.subjectTo+=" - "+_),e.subjectTo+=" >= "+r+"\n"}else if(!this.isSameRankEdge(o)&&this.isSameRankEdge(l)){let a=o.leftAttribute.name,s=o.rightAttribute.name,u=l.leftAttribute.name,b=l.rightAttribute.name,m=n(a,s,u,b),r=1;e.subjectTo+=m+"";let g=i(a,u);null!=t[g]?e.subjectTo+=" + "+g:(g=i(u,a),r-=1,e.subjectTo+=" - "+g);let _=i(b,a);null!=t[_]?e.subjectTo+=" + "+_:(r-=1,_=i(a,b),e.subjectTo+=" - "+_),e.subjectTo+=" >= "+r+"\n",m=n(a,s,u,b),r=1,e.subjectTo+=m+"",g=i(a,b),null!=t[g]?e.subjectTo+=" + "+g:(g=i(b,a),r-=1,e.subjectTo+=" - "+g),_=i(u,a),null!=t[_]?e.subjectTo+=" + "+_:(r-=1,_=i(a,u),e.subjectTo+=" - "+_),e.subjectTo+=" >= "+r+"\n"}}else{let a=o.leftAttribute.name,s=o.rightAttribute.name,u=l.leftAttribute.name,b=l.rightAttribute.name;if(a==u||s==b)continue;let m=n(a,s,u,b),r=1;e.subjectTo+=m+"";let g=i(u,a);null!=t[g]?e.subjectTo+=" + "+g:(g=i(a,u),r-=1,e.subjectTo+=" - "+g);let _=i(s,b);null!=t[_]?e.subjectTo+=" + "+_:(_=i(b,s),r-=1,e.subjectTo+=" - "+_),e.subjectTo+=" >= "+r+"\n",m=n(a,s,u,b),r=1,e.subjectTo+=m+"",g=i(a,u),null!=t[g]?e.subjectTo+=" + "+g:(g=i(u,a),r-=1,e.subjectTo+=" - "+g),_=i(b,s),null!=t[_]?e.subjectTo+=" + "+_:(_=i(s,b),r-=1,e.subjectTo+=" - "+_),e.subjectTo+=" >= "+r+"\n"}}}}for(let t=0;t<this.g.maxDepth+1;t++){let l=this.g.tableIndex[t].map(e=>e.attributes).flat();for(let t=0;t<l.length;t++){let n=l[t].name,a=l[t].table.name;for(let o=t+1;o<l.length;o++){let t=l[o].name,s=l[o].table.name;a!=s&&(e.subjectTo+=i(n,t)+" - "+i(a,s,"T")+" = 0\n")}}}for(let t in l)e.minimize+=t+" + ";e.minimize=e.minimize.substring(0,e.minimize.length-2)+"\n\n";for(let l in t)e.bounds+="binary "+l+"\n"}fillModel2(e){e.minimize="Minimize \ncrossings: ",e.subjectTo="Subject To \n",e.bounds="\nBounds \n";for(let t=0;t<this.g.maxDepth+1;t++){let l=this.g.edgeIndex[t];for(let t=0;t<l.length;t++)for(let n=0;n<l.length;n++)if(l[t]!=l[n]){let i="c_"+l[t].leftAttribute.name+l[t].rightAttribute.name+"_"+l[n].leftAttribute.name+l[n].rightAttribute.name;e.minimize+=i+" + ",e.bounds+="binary "+i+"\n"}}e.minimize=e.minimize.substring(0,e.minimize.length-2)+"\n\n";for(let t=0;t<this.g.maxDepth+1;t++){let l=this.g.tableIndex[t];for(let t=0;t<l.length;t++){let n=l[t];for(let i=0;i<l.length;i++){if(t==i)continue;let a=l[i];n!=a&&(e.subjectTo+="x_T"+n.name+"_T"+a.name+" + x_T"+a.name+"_T"+n.name+" = 1\n",e.bounds+="binary x_T"+n.name+"_T"+a.name+"\n")}}}for(let t=0;t<this.g.maxDepth+1;t++){let l=this.g.tableIndex[t];for(let t=0;t<l.length;t++){let n=l[t];for(let i=0;i<l.length;i++){if(t==i)continue;let a=l[i];for(let t=i+1;t<l.length;t++){let i=l[t];e.subjectTo+="x_T"+i.name+"_T"+n.name+" - x_T"+i.name+"_T"+a.name+" - x_T"+a.name+"_T"+n.name+" >= - 1\n"}}}}for(let t=0;t<this.g.maxDepth+1;t++){let l=this.g.tableIndex[t].map(e=>e.attributes).flat();for(let t=0;t<l.length;t++){let n=l[t];for(let i=t+1;i<l.length;i++){let t=l[i];n!=t&&(e.subjectTo+="x_"+n.name+"_"+t.name+" + x_"+t.name+"_"+n.name+" = 1\n")}}}for(let t=0;t<this.g.maxDepth+1;t++){let l=this.g.tableIndex[t].map(e=>e.attributes).flat();for(let t of l)for(let n of l)t.table!=n.table&&(e.subjectTo+="x_"+t.name+"_"+n.name+" - x_T"+t.table.name+"_T"+n.table.name+" = 0\n")}for(let t=0;t<this.g.maxDepth+1;t++){let l=this.g.tableIndex[t].map(e=>e.attributes).flat();for(let t=0;t<l.length;t++){let n=l[t];for(let i=0;i<l.length;i++){let a=l[i];if(t!=i)for(let o=0;o<l.length;o++){if(o==t||o==i)continue;let s=l[o];e.subjectTo+="x_"+s.name+"_"+n.name+" - x_"+s.name+"_"+a.name+" - x_"+a.name+"_"+n.name+" >= - 1\n"}}}}for(let t=0;t<this.g.maxDepth;t++){let l=this.g.edgeIndex[t];for(let t=0;t<l.length;t++){let n=l[t];for(let i=0;i<l.length;i++){if(t==i)continue;let a=l[i];if(n.leftTable.depth==n.rightTable.depth||a.leftTable.depth==a.rightTable.depth)continue;let o=n.leftAttribute.name,s=n.rightAttribute.name,u=a.leftAttribute.name,b=a.rightAttribute.name;e.subjectTo+="c_"+o+s+"_"+u+b+" + x_"+u+"_"+o+" + x_"+s+"_"+b+" >= 1\n",e.subjectTo+="c_"+o+s+"_"+u+b+" + x_"+o+"_"+u+" + x_"+b+"_"+s+" >= 1\n"}}}for(let t=0;t<this.g.maxDepth+1;t++){let l=this.g.edgeIndex[t];for(let t=0;t<l.length;t++){let n=l[t];for(let t=0;t<l.length;t++){let i=l[t];if(n!=i)if(n.leftTable.depth==n.rightTable.depth&&i.leftTable.depth==i.rightTable.depth){let t=n.leftAttribute.name,l=n.rightAttribute.name,a=i.leftAttribute.name,o=i.rightAttribute.name;e.subjectTo+="c_"+t+l+"_"+a+o+" + x_"+t+"_"+a+" + x_"+l+"_"+o+" + x_"+a+"_"+l+" >= 1\n",e.subjectTo+="c_"+t+l+"_"+a+o+" + x_"+t+"_"+a+" + x_"+l+"_"+o+" + x_"+o+"_"+t+" >= 1\n"}else if(this.isSameRankEdge(n)&&!this.isSameRankEdge(i)){let t=n.leftAttribute.name,l=n.rightAttribute.name,a=i.leftAttribute.name,o=i.rightAttribute.name;e.subjectTo+="c_"+t+l+"_"+a+o+" + x_"+a+"_"+t+" + x_"+l+"_"+a+" >= 1\n",e.subjectTo+="c_"+t+l+"_"+a+o+" + x_"+a+"_"+l+" + x_"+t+"_"+a+" >= 1\n"}}}}}isSameRankEdge(e){return e.leftTable.depth==e.rightTable.depth}modelToString(e){return e.minimize+e.subjectTo+e.bounds+"\nEnd\n"}apply_solution(e){for(let t=0;t<this.g.maxDepth+1;t++){let l=this.g.tableIndex[t];l.sort((t,l)=>0==e["x_T"+t.name+"_T"+l.name]?1:1==e["x_T"+t.name+"_T"+l.name]?-1:1==e["x_T"+l.name+"_T"+t.name]?1:0==e["x_T"+l.name+"_T"+t.name]?-1:void 0);for(let e in l)l[e].weight=e;for(let t of l){t.attributes.sort((t,l)=>0==e["x_"+t.name+"_"+l.name]?1:1==e["x_"+t.name+"_"+l.name]?-1:1==e["x_"+l.name+"_"+t.name]?1:0==e["x_"+l.name+"_"+t.name]?-1:void 0);for(let e=0;e<t.attributes.length;e++)t.attributes[e].weight=e}}}}
class Sweep{constructor(t){this.g=t,this.elapsedTime=0}arrange(){let t=(new Date).getTime();this.g.setExactWeights(),this.sweepRight(),this.sweepLeft(),this.elapsedTime=(new Date).getTime()-t}sweepRight(){for(let t=1;t<=this.g.maxDepth;t++){let e,s,g=this.g.tableIndex[t];do{e=this.g.getEdgeCrossingsAtDepth(t-1)+this.g.getEdgeCrossingsAtDepth(t),s=e;do{e=this.g.getEdgeCrossingsAtDepth(t-1)+this.g.getEdgeCrossingsAtDepth(t),s=e;for(let e=0;e<g.length-1;e++){let h=g[e],i=g[e+1];this.swap(h,i);let l=this.g.getEdgeCrossingsAtDepth(t-1)+this.g.getEdgeCrossingsAtDepth(t);s>l?(s=l,g[e]=i,g[e+1]=h):this.swap(h,i)}}while(e>s);do{e=this.g.getEdgeCrossingsAtDepth(t-1)+this.g.getEdgeCrossingsAtDepth(t),s=e;for(let e=0;e<g.length;e++){let h=g[e].attributes;for(let e=0;e<h.length-1;e++){let g=h[e],i=h[e+1];this.swap(g,i);let l=this.g.getEdgeCrossingsAtDepth(t-1)+this.g.getEdgeCrossingsAtDepth(t);s>l?(s=l,h[e]=i,h[e+1]=g):this.swap(g,i)}}}while(e>s)}while(e>s)}}sweepLeft(){for(let t=this.g.maxDepth;t>=2;t--){let e,s,g=this.g.tableIndex[t-1];do{e=this.g.getEdgeCrossingsAtDepth(t-1)+this.g.getEdgeCrossingsAtDepth(t-2),s=e;do{e=this.g.getEdgeCrossingsAtDepth(t-1)+this.g.getEdgeCrossingsAtDepth(t-2),s=e;for(let e=0;e<g.length-1;e++){let h=g[e],i=g[e+1];this.swap(h,i);let l=this.g.getEdgeCrossingsAtDepth(t-1)+this.g.getEdgeCrossingsAtDepth(t-2);s>l?(s=l,g[e]=i,g[e+1]=h):this.swap(h,i)}}while(e>s);do{e=this.g.getEdgeCrossingsAtDepth(t-1)+this.g.getEdgeCrossingsAtDepth(t-2),s=e;for(let e=0;e<g.length;e++){let h=g[e].attributes;for(let e=0;e<h.length-1;e++){let g=h[e],i=h[e+1];this.swap(g,i);let l=this.g.getEdgeCrossingsAtDepth(t-1)+this.g.getEdgeCrossingsAtDepth(t-2);s>l?(s=l,h[e]=i,h[e+1]=g):this.swap(g,i)}}}while(e>s)}while(e>s)}}swap(t,e){let s=t.weight;t.weight=e.weight,e.weight=s}}
class Table{constructor(t,i,h,s,e){this.name=t,this.header=i,this.main=h,this.depth=s,this.attributes=[],this.attrMaps=[],this.weight=0,this.group=void 0,this.groups=[],this.graph=void 0,this.visibility="visible",this.verticalAttrOffset=0,this.id=t,this.type=e}addAttribute(t){this.attributes.push(new Attribute(this,t))}compareTo(t){return this.depth>t.depth?-1:this.depth<t.depth||this.weight<t.weight?1:this.weight>t.weight?-1:0}}
let find_negative_vertical_space=t=>{let e=1/0;for(d of t.tables){let a=t.tableIndex[d.depth].indexOf(d)*table_vert_space+d.verticalAttrOffset*attr_height;a<e&&(e=a)}return e},drawGraph=(t,e,a)=>{let r=d3.line().curve(d3.curveBasis),l=d3.line();table_vert_space=e.baseRowDistance*attr_height;let i=find_negative_vertical_space(e);visg=t.append("g").attr("transform","translate(20, "+(20-i)+")"),t.append("defs").append("marker").attr("id","arrow").attr("viewBox",[0,0,10,10]).attr("refX",5).attr("refY",5).attr("markerWidth",10).attr("markerHeight",10).attr("orient","auto-start-reverse").append("path").attr("d",d3.line()([[0,0],[0,10],[10,5]])).attr("stroke","black");for(let t in[...Array(10).keys()])visg.append("path").attr("stroke-width",1).attr("stroke","#ccc").attr("fill","none").style("stroke-dasharray","5, 3").attr("d",l([[0,attr_height*e.baseRowDistance*t],[1e3,attr_height*e.baseRowDistance*t]]));tablegroups=visg.selectAll(".tables").data(e.tables).enter().append("g").attr("class","tablegroup").attr("id",t=>"tablegroup_"+t.name).style("visibility",t=>t.visibility).attr("transform",t=>"translate("+t.depth*depth_distance+","+(e.tableIndex[t.depth].indexOf(t)*table_vert_space+t.verticalAttrOffset*attr_height)+")"),tablegroups.append("rect").attr("width",table_width).attr("height",t=>t.attributes.length*attr_height+header_height).attr("fill",t=>"groupheader"==t.type?"#eee":"black").attr("stroke","gray").on("click",t=>console.log(t)),tablegroups.append("text").attr("x",table_width/2).attr("y",attr_height/2+5).attr("text-anchor","middle").attr("fill",t=>"groupheader"==t.type?"black":"white").attr("font-size","0.7em").attr("font-family","Arial").text(t=>t.header),attrgroups=tablegroups.selectAll(".attrs").data(t=>t.attributes).enter().append("g").attr("transform",(t,e)=>"translate(0, "+(header_height+e*attr_height)+")"),attrgroups.append("rect").attr("width",table_width).attr("height",attr_height).attr("fill",t=>"constraint"==t.type?"#FFFF73":"#ccc").attr("stroke","white").attr("stroke-width",2).on("click",t=>console.log(t)),attrgroups.append("text").attr("x",table_width/2).attr("y",attr_height/2+3).attr("text-anchor","middle").attr("font-size","0.7em").attr("font-family","Arial").text(t=>t.attr);let d=t=>[t.leftTable.depth*depth_distance+table_width,t.leftTable.attributes.indexOf(t.leftAttribute)*attr_height+header_height+attr_height/2+e.tableIndex[t.leftTable.depth].indexOf(t.leftTable)*table_vert_space+t.leftTable.verticalAttrOffset*attr_height],s=t=>t.leftTable.depth!=t.rightTable.depth?[t.rightTable.depth*depth_distance,t.rightTable.attributes.indexOf(t.rightAttribute)*attr_height+header_height+attr_height/2+e.tableIndex[t.rightTable.depth].indexOf(t.rightTable)*table_vert_space+t.rightTable.verticalAttrOffset*attr_height]:[t.leftTable.depth*depth_distance+table_width,t.rightTable.attributes.indexOf(t.rightAttribute)*attr_height+header_height+attr_height/2+e.tableIndex[t.rightTable.depth].indexOf(t.rightTable)*table_vert_space+t.rightTable.verticalAttrOffset*attr_height];e.updateGroupCoords(),visg.selectAll(".grouprects").data(e.groups).enter().append("path").attr("class","grouplines").attr("stroke-width",2).attr("stroke","black").attr("fill","none").style("stroke-dasharray","5, 3").attr("d",t=>l(t.coords)),edges=visg.selectAll(".edges").data(e.edges).enter().append("path").attr("stroke","black").attr("fill","none").attr("marker-end",t=>"directed"==t.type?"url(#arrow)":"").attr("d",t=>(first=d(t),second=s(t),r([first,[first[0]+.2*depth_distance,first[1]],[second[0]+(t.leftTable.depth==t.rightTable.depth?1:-1)*depth_distance*.2,second[1]],second]))),edgeLabels=visg.selectAll(".edgeLabels").data(e.edges.filter(t=>null!=t.label)).enter().append("text").text(t=>t.label).style("font-size","small").style("text-anchor","middle").attr("transform",t=>(first=d(t),second=s(t),"translate("+(first[0]/2+second[0]/2+(t.leftTable.depth==t.rightTable.depth?1:0)*depth_distance*.16)+","+(first[1]/2-2+second[1]/2)+")")),d3.select(t.node().parentNode).append("div").append("text").text("crossings: "+e.getEdgeCrossings()+", tables: "+e.tables.length+", edges: "+e.edges.length).style("font-family","Arial").attr("class","crossing_count"),null!=a&&null!=a.elapsedTime&&(d3.select(t.node().parentNode).append("div").append("text").text("time: "+a.elapsedTime+"ms").style("font-family","Arial").attr("class","crossing_count"),null!=a.iterations&&(d3.select(t.node().parentNode).append("text").text("⏹️"),d3.select(t.node().parentNode).append("text").text("⏪").on("click",()=>{a.cur_iteration--,a.apply_iteration(a.cur_iteration),t.selectAll(".tablegroup").transition().duration(750).attr("transform",t=>"translate("+t.depth*depth_distance+" ,  "+a.g.tableIndex[t.depth].indexOf(t)*table_vert_space+" )")}),d3.select(t.node().parentNode).append("text").text(a.cur_iteration),d3.select(t.node().parentNode).append("text").text("⏩").on("click",()=>{}),d3.select(t.node().parentNode).append("text").text("▶️")))};
let parseQuery=(e,t)=>{const l=(new NodeSQLParser.Parser).astify(e),r=t;console.log(l);let a=(e=>{let t={},l=e.split("\n");for(let e of l){let l=e.split("(")[0],r=e.split("(")[1].split(")")[0].split(",");t[l]=[];for(let e of r)t[l].push(e.replace(/ /g,""))}return t})(r);g=new Graph;let o=new Table("select","select",!0,0);g.addTable(o);let n={},i=0;for(let e of l.from)null!=e.as?(n[e.as]=e.table+i,i+=1):(n[e.table]=e.table+i,i+=1);let f=(e,t,l,r)=>{console.log("navigateExpr",t,e,l);for(let t of e.from)null!=t.as?(n[t.as]=t.table+i,i+=1):(n[t.table]=t.table+i,i+=1);s(e.where,t+1,l,r)},b=(e,t)=>{let l=e.attributes.find(e=>e.name==t);return null==l&&(l=new Attribute(e,t),g.addAttribute(e,l)),l},p=(e,t)=>{let l=g.tables.find(t=>t.id==e);if(null==l){if(l=new Table(e,e,!0,depth),null!=t&&t.length>0)for(group of t)group.addTable(l);g.addTable(l);let r=e.slice(0,e.length-1);if(null==r&&console.error("not found: "+e),null!=a[r])for(let e of a[r]){let t=new Attribute(l,e);g.addAttribute(l,t)}}return l},s=(e,t,l,r)=>{if(null!=e)if(console.log("navigateWhere",t,e,l),"AND"==e.operator&&(s(e.left,t+1,l,r),s(e.right,t+1,l,r)),null!=e.left&&null==e.left.table&&(e.left.table=r.columns.find(t=>t.column==e.left.attribute).expr.table),"="==e.operator||">"==e.operator||"<"==e.operator||"<>"==e.operator){if("string"==e.right.type){let t=g.tables.find(t=>t.id==n[e.left.table]),l=new Attribute(t,e.left.column+" "+e.operator+' "'+e.right.value+'"');l.id=l.name.replace(/"/g,"").replace(/=/g,"").replace(/>/g,"").replace(/</g,"").replace(/ /g,"")+"c",l.type="constraint",t.attributes.push(l)}else if("number"==e.right.type){let t=p(n[e.left.table]),l=new Attribute(t,e.left.column+" "+e.operator+" "+e.right.value);l.id=l.name.replace(/"/g,"").replace(/=/g,"").replace(/>/g,"").replace(/</g,"").replace(/ /g,"")+"c",l.type="constraint",t.attributes.push(l)}else if("column_ref"==e.right.type){let t=n[e.left.table],r=n[e.right.table],a=p(t,l),o=b(a,e.left.column),i=p(r,l),f=b(i,e.right.column),s=new Edge(a,o,i,f);"<>"==e.operator?s.label="<>":"<"==e.operator?(s.type="directed",s.label="<"):">"==e.operator&&(s.type="directed",s.label=">"),g.addEdge(s)}else console.warn("something weird here");e.add=!0}else if("NOT EXISTS"==e.operator){let a=new Group;a.type="NOT EXISTS",g.addGroup(a),l.push(a),f(e.expr.ast,t+1,l,r)}else"EXISTS"==e.operator&&f(e.expr.ast,t+1,l,r)};for(let e of l.columns)if("*"==e)for(let e of l.from){let t=p(n[e.table]);for(let e of t.attributes){let l=new Attribute(o,e.name);g.addAttribute(o,l),g.addEdge(new Edge(o,l,t,e))}}else{let t,r=e.expr.column,a=new Attribute(o,r);o.attributes.push(a),t=null==e.expr.table?p(n[l.from[0].table]):p(n[e.expr.table]);let i=b(t,e.expr.column),f=new Edge(o,a,t,i);g.addEdge(f)}return s(l.where,0,[],l),assignTablesToDepths(g),g},assignTablesToDepths=e=>{for(let t=0;t<2;t++){arrangeTables(e,e.tableIndex[0][0]);for(let t in e.tableIndex)e.tableIndex[t]=[];for(let t of e.tables){e.tableIndex[t.depth].push(t);for(let l of t.attributes){0==e.edges.filter(e=>e.leftAttribute==l||e.rightAttribute==l).length&&"constraint"!=l.type&&t.attributes.splice(t.attributes.indexOf(l),1)}}for(let t in e.edgeIndex)e.edgeIndex[t]=[];for(let t of e.edges){if(t.leftTable.depth>t.rightTable.depth){let e=t.leftTable,l=t.leftAttribute;t.leftTable=t.rightTable,t.rightTable=e,t.leftAttribute=t.rightAttribute,t.rightAttribute=l}e.edgeIndex[t.leftTable.depth].push(t)}}},arrangeTables=(e,t)=>{let l=e.edges.filter(e=>e.leftTable==t&&e.rightTable.depth!=e.leftTable.depth);if(0!=l.length)for(let r of l.map(e=>e.rightTable)){for(r.depth=t.depth+1;e.tableIndex.length<r.depth;)e.newLayer();arrangeTables(e,r)}};

/**
 * @license
 * Lodash <https://lodash.com/>
 * Copyright OpenJS Foundation and other contributors <https://openjsf.org/>
 * Released under MIT license <https://lodash.com/license>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 */
(function(){var n="Expected a function",t="__lodash_placeholder__",e=[["ary",128],["bind",1],["bindKey",2],["curry",8],["curryRight",16],["flip",512],["partial",32],["partialRight",64],["rearg",256]],r="[object Arguments]",u="[object Array]",i="[object Boolean]",f="[object Date]",o="[object Error]",a="[object Function]",c="[object GeneratorFunction]",l="[object Map]",s="[object Number]",d="[object Object]",h="[object RegExp]",p="[object Set]",v="[object String]",_="[object Symbol]",g="[object WeakMap]",y="[object ArrayBuffer]",b="[object DataView]",w="[object Float32Array]",m="[object Float64Array]",x="[object Int8Array]",j="[object Int16Array]",A="[object Int32Array]",I="[object Uint8Array]",k="[object Uint8ClampedArray]",O="[object Uint16Array]",R="[object Uint32Array]",E=/\b__p \+= '';/g,z=/\b(__p \+=) '' \+/g,S=/(__e\(.*?\)|\b__t\)) \+\n'';/g,L=/&(?:amp|lt|gt|quot|#39);/g,C=/[&<>"']/g,W=RegExp(L.source),U=RegExp(C.source),B=/<%-([\s\S]+?)%>/g,T=/<%([\s\S]+?)%>/g,$=/<%=([\s\S]+?)%>/g,D=/\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,N=/^\w*$/,M=/[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g,F=/[\\^$.*+?()[\]{}|]/g,P=RegExp(F.source),q=/^\s+|\s+$/g,Z=/^\s+/,K=/\s+$/,V=/\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/,G=/\{\n\/\* \[wrapped with (.+)\] \*/,H=/,? & /,J=/[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g,Y=/\\(\\)?/g,Q=/\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g,X=/\w*$/,nn=/^[-+]0x[0-9a-f]+$/i,tn=/^0b[01]+$/i,en=/^\[object .+?Constructor\]$/,rn=/^0o[0-7]+$/i,un=/^(?:0|[1-9]\d*)$/,fn=/[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g,on=/($^)/,an=/['\n\r\u2028\u2029\\]/g,cn="\\u0300-\\u036f\\ufe20-\\ufe2f\\u20d0-\\u20ff",ln="\\xac\\xb1\\xd7\\xf7\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf\\u2000-\\u206f \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000",sn="[\\ud800-\\udfff]",dn="["+ln+"]",hn="["+cn+"]",pn="\\d+",vn="[\\u2700-\\u27bf]",_n="[a-z\\xdf-\\xf6\\xf8-\\xff]",gn="[^\\ud800-\\udfff"+ln+pn+"\\u2700-\\u27bfa-z\\xdf-\\xf6\\xf8-\\xffA-Z\\xc0-\\xd6\\xd8-\\xde]",yn="\\ud83c[\\udffb-\\udfff]",bn="[^\\ud800-\\udfff]",wn="(?:\\ud83c[\\udde6-\\uddff]){2}",mn="[\\ud800-\\udbff][\\udc00-\\udfff]",xn="[A-Z\\xc0-\\xd6\\xd8-\\xde]",jn="(?:"+_n+"|"+gn+")",An="(?:"+xn+"|"+gn+")",In="(?:"+hn+"|"+yn+")"+"?",kn="[\\ufe0e\\ufe0f]?"+In+("(?:\\u200d(?:"+[bn,wn,mn].join("|")+")[\\ufe0e\\ufe0f]?"+In+")*"),On="(?:"+[vn,wn,mn].join("|")+")"+kn,Rn="(?:"+[bn+hn+"?",hn,wn,mn,sn].join("|")+")",En=RegExp("['’]","g"),zn=RegExp(hn,"g"),Sn=RegExp(yn+"(?="+yn+")|"+Rn+kn,"g"),Ln=RegExp([xn+"?"+_n+"+(?:['’](?:d|ll|m|re|s|t|ve))?(?="+[dn,xn,"$"].join("|")+")",An+"+(?:['’](?:D|LL|M|RE|S|T|VE))?(?="+[dn,xn+jn,"$"].join("|")+")",xn+"?"+jn+"+(?:['’](?:d|ll|m|re|s|t|ve))?",xn+"+(?:['’](?:D|LL|M|RE|S|T|VE))?","\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])","\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])",pn,On].join("|"),"g"),Cn=RegExp("[\\u200d\\ud800-\\udfff"+cn+"\\ufe0e\\ufe0f]"),Wn=/[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/,Un=["Array","Buffer","DataView","Date","Error","Float32Array","Float64Array","Function","Int8Array","Int16Array","Int32Array","Map","Math","Object","Promise","RegExp","Set","String","Symbol","TypeError","Uint8Array","Uint8ClampedArray","Uint16Array","Uint32Array","WeakMap","_","clearTimeout","isFinite","parseInt","setTimeout"],Bn=-1,Tn={};Tn[w]=Tn[m]=Tn[x]=Tn[j]=Tn[A]=Tn[I]=Tn["[object Uint8ClampedArray]"]=Tn[O]=Tn[R]=!0,Tn[r]=Tn[u]=Tn[y]=Tn[i]=Tn[b]=Tn[f]=Tn[o]=Tn[a]=Tn[l]=Tn[s]=Tn[d]=Tn[h]=Tn[p]=Tn[v]=Tn[g]=!1;var $n={};$n[r]=$n[u]=$n[y]=$n[b]=$n[i]=$n[f]=$n[w]=$n[m]=$n[x]=$n[j]=$n[A]=$n[l]=$n[s]=$n[d]=$n[h]=$n[p]=$n[v]=$n[_]=$n[I]=$n["[object Uint8ClampedArray]"]=$n[O]=$n[R]=!0,$n[o]=$n[a]=$n[g]=!1;var Dn={"\\":"\\","'":"'","\n":"n","\r":"r","\u2028":"u2028","\u2029":"u2029"},Nn=parseFloat,Mn=parseInt,Fn="object"==typeof global&&global&&global.Object===Object&&global,Pn="object"==typeof self&&self&&self.Object===Object&&self,qn=Fn||Pn||Function("return this")(),Zn="object"==typeof exports&&exports&&!exports.nodeType&&exports,Kn=Zn&&"object"==typeof module&&module&&!module.nodeType&&module,Vn=Kn&&Kn.exports===Zn,Gn=Vn&&Fn.process,Hn=function(){try{var n=Kn&&Kn.require&&Kn.require("util").types;return n||Gn&&Gn.binding&&Gn.binding("util")}catch(n){}}(),Jn=Hn&&Hn.isArrayBuffer,Yn=Hn&&Hn.isDate,Qn=Hn&&Hn.isMap,Xn=Hn&&Hn.isRegExp,nt=Hn&&Hn.isSet,tt=Hn&&Hn.isTypedArray;function et(n,t,e){switch(e.length){case 0:return n.call(t);case 1:return n.call(t,e[0]);case 2:return n.call(t,e[0],e[1]);case 3:return n.call(t,e[0],e[1],e[2])}return n.apply(t,e)}function rt(n,t,e,r){for(var u=-1,i=null==n?0:n.length;++u<i;){var f=n[u];t(r,f,e(f),n)}return r}function ut(n,t){for(var e=-1,r=null==n?0:n.length;++e<r&&!1!==t(n[e],e,n););return n}function it(n,t){for(var e=null==n?0:n.length;e--&&!1!==t(n[e],e,n););return n}function ft(n,t){for(var e=-1,r=null==n?0:n.length;++e<r;)if(!t(n[e],e,n))return!1;return!0}function ot(n,t){for(var e=-1,r=null==n?0:n.length,u=0,i=[];++e<r;){var f=n[e];t(f,e,n)&&(i[u++]=f)}return i}function at(n,t){return!!(null==n?0:n.length)&&yt(n,t,0)>-1}function ct(n,t,e){for(var r=-1,u=null==n?0:n.length;++r<u;)if(e(t,n[r]))return!0;return!1}function lt(n,t){for(var e=-1,r=null==n?0:n.length,u=Array(r);++e<r;)u[e]=t(n[e],e,n);return u}function st(n,t){for(var e=-1,r=t.length,u=n.length;++e<r;)n[u+e]=t[e];return n}function dt(n,t,e,r){var u=-1,i=null==n?0:n.length;for(r&&i&&(e=n[++u]);++u<i;)e=t(e,n[u],u,n);return e}function ht(n,t,e,r){var u=null==n?0:n.length;for(r&&u&&(e=n[--u]);u--;)e=t(e,n[u],u,n);return e}function pt(n,t){for(var e=-1,r=null==n?0:n.length;++e<r;)if(t(n[e],e,n))return!0;return!1}var vt=xt("length");function _t(n,t,e){var r;return e(n,(function(n,e,u){if(t(n,e,u))return r=e,!1})),r}function gt(n,t,e,r){for(var u=n.length,i=e+(r?1:-1);r?i--:++i<u;)if(t(n[i],i,n))return i;return-1}function yt(n,t,e){return t==t?function(n,t,e){var r=e-1,u=n.length;for(;++r<u;)if(n[r]===t)return r;return-1}(n,t,e):gt(n,wt,e)}function bt(n,t,e,r){for(var u=e-1,i=n.length;++u<i;)if(r(n[u],t))return u;return-1}function wt(n){return n!=n}function mt(n,t){var e=null==n?0:n.length;return e?It(n,t)/e:NaN}function xt(n){return function(t){return null==t?undefined:t[n]}}function jt(n){return function(t){return null==n?undefined:n[t]}}function At(n,t,e,r,u){return u(n,(function(n,u,i){e=r?(r=!1,n):t(e,n,u,i)})),e}function It(n,t){for(var e,r=-1,u=n.length;++r<u;){var i=t(n[r]);undefined!==i&&(e=undefined===e?i:e+i)}return e}function kt(n,t){for(var e=-1,r=Array(n);++e<n;)r[e]=t(e);return r}function Ot(n){return function(t){return n(t)}}function Rt(n,t){return lt(t,(function(t){return n[t]}))}function Et(n,t){return n.has(t)}function zt(n,t){for(var e=-1,r=n.length;++e<r&&yt(t,n[e],0)>-1;);return e}function St(n,t){for(var e=n.length;e--&&yt(t,n[e],0)>-1;);return e}function Lt(n,t){for(var e=n.length,r=0;e--;)n[e]===t&&++r;return r}var Ct=jt({"À":"A","Á":"A","Â":"A","Ã":"A","Ä":"A","Å":"A","à":"a","á":"a","â":"a","ã":"a","ä":"a","å":"a","Ç":"C","ç":"c","Ð":"D","ð":"d","È":"E","É":"E","Ê":"E","Ë":"E","è":"e","é":"e","ê":"e","ë":"e","Ì":"I","Í":"I","Î":"I","Ï":"I","ì":"i","í":"i","î":"i","ï":"i","Ñ":"N","ñ":"n","Ò":"O","Ó":"O","Ô":"O","Õ":"O","Ö":"O","Ø":"O","ò":"o","ó":"o","ô":"o","õ":"o","ö":"o","ø":"o","Ù":"U","Ú":"U","Û":"U","Ü":"U","ù":"u","ú":"u","û":"u","ü":"u","Ý":"Y","ý":"y","ÿ":"y","Æ":"Ae","æ":"ae","Þ":"Th","þ":"th","ß":"ss","Ā":"A","Ă":"A","Ą":"A","ā":"a","ă":"a","ą":"a","Ć":"C","Ĉ":"C","Ċ":"C","Č":"C","ć":"c","ĉ":"c","ċ":"c","č":"c","Ď":"D","Đ":"D","ď":"d","đ":"d","Ē":"E","Ĕ":"E","Ė":"E","Ę":"E","Ě":"E","ē":"e","ĕ":"e","ė":"e","ę":"e","ě":"e","Ĝ":"G","Ğ":"G","Ġ":"G","Ģ":"G","ĝ":"g","ğ":"g","ġ":"g","ģ":"g","Ĥ":"H","Ħ":"H","ĥ":"h","ħ":"h","Ĩ":"I","Ī":"I","Ĭ":"I","Į":"I","İ":"I","ĩ":"i","ī":"i","ĭ":"i","į":"i","ı":"i","Ĵ":"J","ĵ":"j","Ķ":"K","ķ":"k","ĸ":"k","Ĺ":"L","Ļ":"L","Ľ":"L","Ŀ":"L","Ł":"L","ĺ":"l","ļ":"l","ľ":"l","ŀ":"l","ł":"l","Ń":"N","Ņ":"N","Ň":"N","Ŋ":"N","ń":"n","ņ":"n","ň":"n","ŋ":"n","Ō":"O","Ŏ":"O","Ő":"O","ō":"o","ŏ":"o","ő":"o","Ŕ":"R","Ŗ":"R","Ř":"R","ŕ":"r","ŗ":"r","ř":"r","Ś":"S","Ŝ":"S","Ş":"S","Š":"S","ś":"s","ŝ":"s","ş":"s","š":"s","Ţ":"T","Ť":"T","Ŧ":"T","ţ":"t","ť":"t","ŧ":"t","Ũ":"U","Ū":"U","Ŭ":"U","Ů":"U","Ű":"U","Ų":"U","ũ":"u","ū":"u","ŭ":"u","ů":"u","ű":"u","ų":"u","Ŵ":"W","ŵ":"w","Ŷ":"Y","ŷ":"y","Ÿ":"Y","Ź":"Z","Ż":"Z","Ž":"Z","ź":"z","ż":"z","ž":"z","Ĳ":"IJ","ĳ":"ij","Œ":"Oe","œ":"oe","ŉ":"'n","ſ":"s"}),Wt=jt({"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#39;"});function Ut(n){return"\\"+Dn[n]}function Bt(n){return Cn.test(n)}function Tt(n){var t=-1,e=Array(n.size);return n.forEach((function(n,r){e[++t]=[r,n]})),e}function $t(n,t){return function(e){return n(t(e))}}function Dt(n,e){for(var r=-1,u=n.length,i=0,f=[];++r<u;){var o=n[r];o!==e&&o!==t||(n[r]=t,f[i++]=r)}return f}function Nt(n){var t=-1,e=Array(n.size);return n.forEach((function(n){e[++t]=n})),e}function Mt(n){var t=-1,e=Array(n.size);return n.forEach((function(n){e[++t]=[n,n]})),e}function Ft(n){return Bt(n)?function(n){var t=Sn.lastIndex=0;for(;Sn.test(n);)++t;return t}(n):vt(n)}function Pt(n){return Bt(n)?function(n){return n.match(Sn)||[]}(n):function(n){return n.split("")}(n)}var qt=jt({"&amp;":"&","&lt;":"<","&gt;":">","&quot;":'"',"&#39;":"'"});var Zt=function cn(ln){var sn,dn=(ln=null==ln?qn:Zt.defaults(qn.Object(),ln,Zt.pick(qn,Un))).Array,hn=ln.Date,pn=ln.Error,vn=ln.Function,_n=ln.Math,gn=ln.Object,yn=ln.RegExp,bn=ln.String,wn=ln.TypeError,mn=dn.prototype,xn=vn.prototype,jn=gn.prototype,An=ln["__core-js_shared__"],In=xn.toString,kn=jn.hasOwnProperty,On=0,Rn=(sn=/[^.]+$/.exec(An&&An.keys&&An.keys.IE_PROTO||""))?"Symbol(src)_1."+sn:"",Sn=jn.toString,Cn=In.call(gn),Dn=qn._,Fn=yn("^"+In.call(kn).replace(F,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$"),Pn=Vn?ln.Buffer:undefined,Zn=ln.Symbol,Kn=ln.Uint8Array,Gn=Pn?Pn.allocUnsafe:undefined,Hn=$t(gn.getPrototypeOf,gn),vt=gn.create,jt=jn.propertyIsEnumerable,Kt=mn.splice,Vt=Zn?Zn.isConcatSpreadable:undefined,Gt=Zn?Zn.iterator:undefined,Ht=Zn?Zn.toStringTag:undefined,Jt=function(){try{var n=ni(gn,"defineProperty");return n({},"",{}),n}catch(n){}}(),Yt=ln.clearTimeout!==qn.clearTimeout&&ln.clearTimeout,Qt=hn&&hn.now!==qn.Date.now&&hn.now,Xt=ln.setTimeout!==qn.setTimeout&&ln.setTimeout,ne=_n.ceil,te=_n.floor,ee=gn.getOwnPropertySymbols,re=Pn?Pn.isBuffer:undefined,ue=ln.isFinite,ie=mn.join,fe=$t(gn.keys,gn),oe=_n.max,ae=_n.min,ce=hn.now,le=ln.parseInt,se=_n.random,de=mn.reverse,he=ni(ln,"DataView"),pe=ni(ln,"Map"),ve=ni(ln,"Promise"),_e=ni(ln,"Set"),ge=ni(ln,"WeakMap"),ye=ni(gn,"create"),be=ge&&new ge,we={},me=Oi(he),xe=Oi(pe),je=Oi(ve),Ae=Oi(_e),Ie=Oi(ge),ke=Zn?Zn.prototype:undefined,Oe=ke?ke.valueOf:undefined,Re=ke?ke.toString:undefined;function Ee(n){if(Zf(n)&&!Wf(n)&&!(n instanceof Ce)){if(n instanceof Le)return n;if(kn.call(n,"__wrapped__"))return Ri(n)}return new Le(n)}var ze=function(){function n(){}return function(t){if(!qf(t))return{};if(vt)return vt(t);n.prototype=t;var e=new n;return n.prototype=undefined,e}}();function Se(){}function Le(n,t){this.__wrapped__=n,this.__actions__=[],this.__chain__=!!t,this.__index__=0,this.__values__=undefined}function Ce(n){this.__wrapped__=n,this.__actions__=[],this.__dir__=1,this.__filtered__=!1,this.__iteratees__=[],this.__takeCount__=4294967295,this.__views__=[]}function We(n){var t=-1,e=null==n?0:n.length;for(this.clear();++t<e;){var r=n[t];this.set(r[0],r[1])}}function Ue(n){var t=-1,e=null==n?0:n.length;for(this.clear();++t<e;){var r=n[t];this.set(r[0],r[1])}}function Be(n){var t=-1,e=null==n?0:n.length;for(this.clear();++t<e;){var r=n[t];this.set(r[0],r[1])}}function Te(n){var t=-1,e=null==n?0:n.length;for(this.__data__=new Be;++t<e;)this.add(n[t])}function $e(n){var t=this.__data__=new Ue(n);this.size=t.size}function De(n,t){var e=Wf(n),r=!e&&Cf(n),u=!e&&!r&&$f(n),i=!e&&!r&&!u&&Xf(n),f=e||r||u||i,o=f?kt(n.length,bn):[],a=o.length;for(var c in n)!t&&!kn.call(n,c)||f&&("length"==c||u&&("offset"==c||"parent"==c)||i&&("buffer"==c||"byteLength"==c||"byteOffset"==c)||oi(c,a))||o.push(c);return o}function Ne(n){var t=n.length;return t?n[Tr(0,t-1)]:undefined}function Me(n,t){return Ai(yu(n),Je(t,0,n.length))}function Fe(n){return Ai(yu(n))}function Pe(n,t,e){(undefined!==e&&!zf(n[t],e)||undefined===e&&!(t in n))&&Ge(n,t,e)}function qe(n,t,e){var r=n[t];kn.call(n,t)&&zf(r,e)&&(undefined!==e||t in n)||Ge(n,t,e)}function Ze(n,t){for(var e=n.length;e--;)if(zf(n[e][0],t))return e;return-1}function Ke(n,t,e,r){return tr(n,(function(n,u,i){t(r,n,e(n),i)})),r}function Ve(n,t){return n&&bu(t,xo(t),n)}function Ge(n,t,e){"__proto__"==t&&Jt?Jt(n,t,{configurable:!0,enumerable:!0,value:e,writable:!0}):n[t]=e}function He(n,t){for(var e=-1,r=t.length,u=dn(r),i=null==n;++e<r;)u[e]=i?undefined:go(n,t[e]);return u}function Je(n,t,e){return n==n&&(undefined!==e&&(n=n<=e?n:e),undefined!==t&&(n=n>=t?n:t)),n}function Ye(n,t,e,u,o,g){var E,z=1&t,S=2&t,L=4&t;if(e&&(E=o?e(n,u,o,g):e(n)),undefined!==E)return E;if(!qf(n))return n;var C=Wf(n);if(C){if(E=function(n){var t=n.length,e=new n.constructor(t);t&&"string"==typeof n[0]&&kn.call(n,"index")&&(e.index=n.index,e.input=n.input);return e}(n),!z)return yu(n,E)}else{var W=ri(n),U=W==a||W==c;if($f(n))return du(n,z);if(W==d||W==r||U&&!o){if(E=S||U?{}:ii(n),!z)return S?function(n,t){return bu(n,ei(n),t)}(n,function(n,t){return n&&bu(t,jo(t),n)}(E,n)):function(n,t){return bu(n,ti(n),t)}(n,Ve(E,n))}else{if(!$n[W])return o?n:{};E=function(n,t,e){var r=n.constructor;switch(t){case y:return hu(n);case i:case f:return new r(+n);case b:return function(n,t){var e=t?hu(n.buffer):n.buffer;return new n.constructor(e,n.byteOffset,n.byteLength)}(n,e);case w:case m:case x:case j:case A:case I:case k:case O:case R:return pu(n,e);case l:return new r;case s:case v:return new r(n);case h:return function(n){var t=new n.constructor(n.source,X.exec(n));return t.lastIndex=n.lastIndex,t}(n);case p:return new r;case _:return u=n,Oe?gn(Oe.call(u)):{}}var u}(n,W,z)}}g||(g=new $e);var B=g.get(n);if(B)return B;g.set(n,E),Jf(n)?n.forEach((function(r){E.add(Ye(r,t,e,r,n,g))})):Kf(n)&&n.forEach((function(r,u){E.set(u,Ye(r,t,e,u,n,g))}));var T=C?undefined:(L?S?Vu:Ku:S?jo:xo)(n);return ut(T||n,(function(r,u){T&&(r=n[u=r]),qe(E,u,Ye(r,t,e,u,n,g))})),E}function Qe(n,t,e){var r=e.length;if(null==n)return!r;for(n=gn(n);r--;){var u=e[r],i=t[u],f=n[u];if(undefined===f&&!(u in n)||!i(f))return!1}return!0}function Xe(t,e,r){if("function"!=typeof t)throw new wn(n);return wi((function(){t.apply(undefined,r)}),e)}function nr(n,t,e,r){var u=-1,i=at,f=!0,o=n.length,a=[],c=t.length;if(!o)return a;e&&(t=lt(t,Ot(e))),r?(i=ct,f=!1):t.length>=200&&(i=Et,f=!1,t=new Te(t));n:for(;++u<o;){var l=n[u],s=null==e?l:e(l);if(l=r||0!==l?l:0,f&&s==s){for(var d=c;d--;)if(t[d]===s)continue n;a.push(l)}else i(t,s,r)||a.push(l)}return a}Ee.templateSettings={escape:B,evaluate:T,interpolate:$,variable:"",imports:{_:Ee}},Ee.prototype=Se.prototype,Ee.prototype.constructor=Ee,Le.prototype=ze(Se.prototype),Le.prototype.constructor=Le,Ce.prototype=ze(Se.prototype),Ce.prototype.constructor=Ce,We.prototype.clear=function(){this.__data__=ye?ye(null):{},this.size=0},We.prototype.delete=function(n){var t=this.has(n)&&delete this.__data__[n];return this.size-=t?1:0,t},We.prototype.get=function(n){var t=this.__data__;if(ye){var e=t[n];return"__lodash_hash_undefined__"===e?undefined:e}return kn.call(t,n)?t[n]:undefined},We.prototype.has=function(n){var t=this.__data__;return ye?undefined!==t[n]:kn.call(t,n)},We.prototype.set=function(n,t){var e=this.__data__;return this.size+=this.has(n)?0:1,e[n]=ye&&undefined===t?"__lodash_hash_undefined__":t,this},Ue.prototype.clear=function(){this.__data__=[],this.size=0},Ue.prototype.delete=function(n){var t=this.__data__,e=Ze(t,n);return!(e<0)&&(e==t.length-1?t.pop():Kt.call(t,e,1),--this.size,!0)},Ue.prototype.get=function(n){var t=this.__data__,e=Ze(t,n);return e<0?undefined:t[e][1]},Ue.prototype.has=function(n){return Ze(this.__data__,n)>-1},Ue.prototype.set=function(n,t){var e=this.__data__,r=Ze(e,n);return r<0?(++this.size,e.push([n,t])):e[r][1]=t,this},Be.prototype.clear=function(){this.size=0,this.__data__={hash:new We,map:new(pe||Ue),string:new We}},Be.prototype.delete=function(n){var t=Qu(this,n).delete(n);return this.size-=t?1:0,t},Be.prototype.get=function(n){return Qu(this,n).get(n)},Be.prototype.has=function(n){return Qu(this,n).has(n)},Be.prototype.set=function(n,t){var e=Qu(this,n),r=e.size;return e.set(n,t),this.size+=e.size==r?0:1,this},Te.prototype.add=Te.prototype.push=function(n){return this.__data__.set(n,"__lodash_hash_undefined__"),this},Te.prototype.has=function(n){return this.__data__.has(n)},$e.prototype.clear=function(){this.__data__=new Ue,this.size=0},$e.prototype.delete=function(n){var t=this.__data__,e=t.delete(n);return this.size=t.size,e},$e.prototype.get=function(n){return this.__data__.get(n)},$e.prototype.has=function(n){return this.__data__.has(n)},$e.prototype.set=function(n,t){var e=this.__data__;if(e instanceof Ue){var r=e.__data__;if(!pe||r.length<199)return r.push([n,t]),this.size=++e.size,this;e=this.__data__=new Be(r)}return e.set(n,t),this.size=e.size,this};var tr=xu(cr),er=xu(lr,!0);function rr(n,t){var e=!0;return tr(n,(function(n,r,u){return e=!!t(n,r,u)})),e}function ur(n,t,e){for(var r=-1,u=n.length;++r<u;){var i=n[r],f=t(i);if(null!=f&&(undefined===o?f==f&&!Qf(f):e(f,o)))var o=f,a=i}return a}function ir(n,t){var e=[];return tr(n,(function(n,r,u){t(n,r,u)&&e.push(n)})),e}function fr(n,t,e,r,u){var i=-1,f=n.length;for(e||(e=fi),u||(u=[]);++i<f;){var o=n[i];t>0&&e(o)?t>1?fr(o,t-1,e,r,u):st(u,o):r||(u[u.length]=o)}return u}var or=ju(),ar=ju(!0);function cr(n,t){return n&&or(n,t,xo)}function lr(n,t){return n&&ar(n,t,xo)}function sr(n,t){return ot(t,(function(t){return Mf(n[t])}))}function dr(n,t){for(var e=0,r=(t=au(t,n)).length;null!=n&&e<r;)n=n[ki(t[e++])];return e&&e==r?n:undefined}function hr(n,t,e){var r=t(n);return Wf(n)?r:st(r,e(n))}function pr(n){return null==n?undefined===n?"[object Undefined]":"[object Null]":Ht&&Ht in gn(n)?function(n){var t=kn.call(n,Ht),e=n[Ht];try{n[Ht]=undefined;var r=!0}catch(n){}var u=Sn.call(n);r&&(t?n[Ht]=e:delete n[Ht]);return u}(n):function(n){return Sn.call(n)}(n)}function vr(n,t){return n>t}function _r(n,t){return null!=n&&kn.call(n,t)}function gr(n,t){return null!=n&&t in gn(n)}function yr(n,t,e){for(var r=e?ct:at,u=n[0].length,i=n.length,f=i,o=dn(i),a=1/0,c=[];f--;){var l=n[f];f&&t&&(l=lt(l,Ot(t))),a=ae(l.length,a),o[f]=!e&&(t||u>=120&&l.length>=120)?new Te(f&&l):undefined}l=n[0];var s=-1,d=o[0];n:for(;++s<u&&c.length<a;){var h=l[s],p=t?t(h):h;if(h=e||0!==h?h:0,!(d?Et(d,p):r(c,p,e))){for(f=i;--f;){var v=o[f];if(!(v?Et(v,p):r(n[f],p,e)))continue n}d&&d.push(p),c.push(h)}}return c}function br(n,t,e){var r=null==(n=_i(n,t=au(t,n)))?n:n[ki(Di(t))];return null==r?undefined:et(r,n,e)}function wr(n){return Zf(n)&&pr(n)==r}function mr(n,t,e,a,c){return n===t||(null==n||null==t||!Zf(n)&&!Zf(t)?n!=n&&t!=t:function(n,t,e,a,c,g){var w=Wf(n),m=Wf(t),x=w?u:ri(n),j=m?u:ri(t),A=(x=x==r?d:x)==d,I=(j=j==r?d:j)==d,k=x==j;if(k&&$f(n)){if(!$f(t))return!1;w=!0,A=!1}if(k&&!A)return g||(g=new $e),w||Xf(n)?qu(n,t,e,a,c,g):function(n,t,e,r,u,a,c){switch(e){case b:if(n.byteLength!=t.byteLength||n.byteOffset!=t.byteOffset)return!1;n=n.buffer,t=t.buffer;case y:return!(n.byteLength!=t.byteLength||!a(new Kn(n),new Kn(t)));case i:case f:case s:return zf(+n,+t);case o:return n.name==t.name&&n.message==t.message;case h:case v:return n==t+"";case l:var d=Tt;case p:var g=1&r;if(d||(d=Nt),n.size!=t.size&&!g)return!1;var w=c.get(n);if(w)return w==t;r|=2,c.set(n,t);var m=qu(d(n),d(t),r,u,a,c);return c.delete(n),m;case _:if(Oe)return Oe.call(n)==Oe.call(t)}return!1}(n,t,x,e,a,c,g);if(!(1&e)){var O=A&&kn.call(n,"__wrapped__"),R=I&&kn.call(t,"__wrapped__");if(O||R){var E=O?n.value():n,z=R?t.value():t;return g||(g=new $e),c(E,z,e,a,g)}}if(!k)return!1;return g||(g=new $e),function(n,t,e,r,u,i){var f=1&e,o=Ku(n),a=o.length,c=Ku(t).length;if(a!=c&&!f)return!1;var l=a;for(;l--;){var s=o[l];if(!(f?s in t:kn.call(t,s)))return!1}var d=i.get(n);if(d&&i.get(t))return d==t;var h=!0;i.set(n,t),i.set(t,n);var p=f;for(;++l<a;){var v=n[s=o[l]],_=t[s];if(r)var g=f?r(_,v,s,t,n,i):r(v,_,s,n,t,i);if(!(undefined===g?v===_||u(v,_,e,r,i):g)){h=!1;break}p||(p="constructor"==s)}if(h&&!p){var y=n.constructor,b=t.constructor;y==b||!("constructor"in n)||!("constructor"in t)||"function"==typeof y&&y instanceof y&&"function"==typeof b&&b instanceof b||(h=!1)}return i.delete(n),i.delete(t),h}(n,t,e,a,c,g)}(n,t,e,a,mr,c))}function xr(n,t,e,r){var u=e.length,i=u,f=!r;if(null==n)return!i;for(n=gn(n);u--;){var o=e[u];if(f&&o[2]?o[1]!==n[o[0]]:!(o[0]in n))return!1}for(;++u<i;){var a=(o=e[u])[0],c=n[a],l=o[1];if(f&&o[2]){if(undefined===c&&!(a in n))return!1}else{var s=new $e;if(r)var d=r(c,l,a,n,t,s);if(!(undefined===d?mr(l,c,3,r,s):d))return!1}}return!0}function jr(n){return!(!qf(n)||(t=n,Rn&&Rn in t))&&(Mf(n)?Fn:en).test(Oi(n));var t}function Ar(n){return"function"==typeof n?n:null==n?Go:"object"==typeof n?Wf(n)?zr(n[0],n[1]):Er(n):ra(n)}function Ir(n){if(!di(n))return fe(n);var t=[];for(var e in gn(n))kn.call(n,e)&&"constructor"!=e&&t.push(e);return t}function kr(n){if(!qf(n))return function(n){var t=[];if(null!=n)for(var e in gn(n))t.push(e);return t}(n);var t=di(n),e=[];for(var r in n)("constructor"!=r||!t&&kn.call(n,r))&&e.push(r);return e}function Or(n,t){return n<t}function Rr(n,t){var e=-1,r=Bf(n)?dn(n.length):[];return tr(n,(function(n,u,i){r[++e]=t(n,u,i)})),r}function Er(n){var t=Xu(n);return 1==t.length&&t[0][2]?pi(t[0][0],t[0][1]):function(e){return e===n||xr(e,n,t)}}function zr(n,t){return ci(n)&&hi(t)?pi(ki(n),t):function(e){var r=go(e,n);return undefined===r&&r===t?yo(e,n):mr(t,r,3)}}function Sr(n,t,e,r,u){n!==t&&or(t,(function(i,f){if(u||(u=new $e),qf(i))!function(n,t,e,r,u,i,f){var o=yi(n,e),a=yi(t,e),c=f.get(a);if(c)return void Pe(n,e,c);var l=i?i(o,a,e+"",n,t,f):undefined,s=undefined===l;if(s){var d=Wf(a),h=!d&&$f(a),p=!d&&!h&&Xf(a);l=a,d||h||p?Wf(o)?l=o:Tf(o)?l=yu(o):h?(s=!1,l=du(a,!0)):p?(s=!1,l=pu(a,!0)):l=[]:Gf(a)||Cf(a)?(l=o,Cf(o)?l=oo(o):qf(o)&&!Mf(o)||(l=ii(a))):s=!1}s&&(f.set(a,l),u(l,a,r,i,f),f.delete(a));Pe(n,e,l)}(n,t,f,e,Sr,r,u);else{var o=r?r(yi(n,f),i,f+"",n,t,u):undefined;undefined===o&&(o=i),Pe(n,f,o)}}),jo)}function Lr(n,t){var e=n.length;if(e)return oi(t+=t<0?e:0,e)?n[t]:undefined}function Cr(n,t,e){var r=-1;return t=lt(t.length?t:[Go],Ot(Yu())),function(n,t){var e=n.length;for(n.sort(t);e--;)n[e]=n[e].value;return n}(Rr(n,(function(n,e,u){return{criteria:lt(t,(function(t){return t(n)})),index:++r,value:n}})),(function(n,t){return function(n,t,e){var r=-1,u=n.criteria,i=t.criteria,f=u.length,o=e.length;for(;++r<f;){var a=vu(u[r],i[r]);if(a)return r>=o?a:a*("desc"==e[r]?-1:1)}return n.index-t.index}(n,t,e)}))}function Wr(n,t,e){for(var r=-1,u=t.length,i={};++r<u;){var f=t[r],o=dr(n,f);e(o,f)&&Fr(i,au(f,n),o)}return i}function Ur(n,t,e,r){var u=r?bt:yt,i=-1,f=t.length,o=n;for(n===t&&(t=yu(t)),e&&(o=lt(n,Ot(e)));++i<f;)for(var a=0,c=t[i],l=e?e(c):c;(a=u(o,l,a,r))>-1;)o!==n&&Kt.call(o,a,1),Kt.call(n,a,1);return n}function Br(n,t){for(var e=n?t.length:0,r=e-1;e--;){var u=t[e];if(e==r||u!==i){var i=u;oi(u)?Kt.call(n,u,1):nu(n,u)}}return n}function Tr(n,t){return n+te(se()*(t-n+1))}function $r(n,t){var e="";if(!n||t<1||t>9007199254740991)return e;do{t%2&&(e+=n),(t=te(t/2))&&(n+=n)}while(t);return e}function Dr(n,t){return mi(vi(n,t,Go),n+"")}function Nr(n){return Ne(So(n))}function Mr(n,t){var e=So(n);return Ai(e,Je(t,0,e.length))}function Fr(n,t,e,r){if(!qf(n))return n;for(var u=-1,i=(t=au(t,n)).length,f=i-1,o=n;null!=o&&++u<i;){var a=ki(t[u]),c=e;if(u!=f){var l=o[a];undefined===(c=r?r(l,a,o):undefined)&&(c=qf(l)?l:oi(t[u+1])?[]:{})}qe(o,a,c),o=o[a]}return n}var Pr=be?function(n,t){return be.set(n,t),n}:Go,qr=Jt?function(n,t){return Jt(n,"toString",{configurable:!0,enumerable:!1,value:Zo(t),writable:!0})}:Go;function Zr(n){return Ai(So(n))}function Kr(n,t,e){var r=-1,u=n.length;t<0&&(t=-t>u?0:u+t),(e=e>u?u:e)<0&&(e+=u),u=t>e?0:e-t>>>0,t>>>=0;for(var i=dn(u);++r<u;)i[r]=n[r+t];return i}function Vr(n,t){var e;return tr(n,(function(n,r,u){return!(e=t(n,r,u))})),!!e}function Gr(n,t,e){var r=0,u=null==n?r:n.length;if("number"==typeof t&&t==t&&u<=2147483647){for(;r<u;){var i=r+u>>>1,f=n[i];null!==f&&!Qf(f)&&(e?f<=t:f<t)?r=i+1:u=i}return u}return Hr(n,t,Go,e)}function Hr(n,t,e,r){t=e(t);for(var u=0,i=null==n?0:n.length,f=t!=t,o=null===t,a=Qf(t),c=undefined===t;u<i;){var l=te((u+i)/2),s=e(n[l]),d=undefined!==s,h=null===s,p=s==s,v=Qf(s);if(f)var _=r||p;else _=c?p&&(r||d):o?p&&d&&(r||!h):a?p&&d&&!h&&(r||!v):!h&&!v&&(r?s<=t:s<t);_?u=l+1:i=l}return ae(i,4294967294)}function Jr(n,t){for(var e=-1,r=n.length,u=0,i=[];++e<r;){var f=n[e],o=t?t(f):f;if(!e||!zf(o,a)){var a=o;i[u++]=0===f?0:f}}return i}function Yr(n){return"number"==typeof n?n:Qf(n)?NaN:+n}function Qr(n){if("string"==typeof n)return n;if(Wf(n))return lt(n,Qr)+"";if(Qf(n))return Re?Re.call(n):"";var t=n+"";return"0"==t&&1/n==-Infinity?"-0":t}function Xr(n,t,e){var r=-1,u=at,i=n.length,f=!0,o=[],a=o;if(e)f=!1,u=ct;else if(i>=200){var c=t?null:$u(n);if(c)return Nt(c);f=!1,u=Et,a=new Te}else a=t?[]:o;n:for(;++r<i;){var l=n[r],s=t?t(l):l;if(l=e||0!==l?l:0,f&&s==s){for(var d=a.length;d--;)if(a[d]===s)continue n;t&&a.push(s),o.push(l)}else u(a,s,e)||(a!==o&&a.push(s),o.push(l))}return o}function nu(n,t){return null==(n=_i(n,t=au(t,n)))||delete n[ki(Di(t))]}function tu(n,t,e,r){return Fr(n,t,e(dr(n,t)),r)}function eu(n,t,e,r){for(var u=n.length,i=r?u:-1;(r?i--:++i<u)&&t(n[i],i,n););return e?Kr(n,r?0:i,r?i+1:u):Kr(n,r?i+1:0,r?u:i)}function ru(n,t){var e=n;return e instanceof Ce&&(e=e.value()),dt(t,(function(n,t){return t.func.apply(t.thisArg,st([n],t.args))}),e)}function uu(n,t,e){var r=n.length;if(r<2)return r?Xr(n[0]):[];for(var u=-1,i=dn(r);++u<r;)for(var f=n[u],o=-1;++o<r;)o!=u&&(i[u]=nr(i[u]||f,n[o],t,e));return Xr(fr(i,1),t,e)}function iu(n,t,e){for(var r=-1,u=n.length,i=t.length,f={};++r<u;){var o=r<i?t[r]:undefined;e(f,n[r],o)}return f}function fu(n){return Tf(n)?n:[]}function ou(n){return"function"==typeof n?n:Go}function au(n,t){return Wf(n)?n:ci(n,t)?[n]:Ii(ao(n))}var cu=Dr;function lu(n,t,e){var r=n.length;return e=undefined===e?r:e,!t&&e>=r?n:Kr(n,t,e)}var su=Yt||function(n){return qn.clearTimeout(n)};function du(n,t){if(t)return n.slice();var e=n.length,r=Gn?Gn(e):new n.constructor(e);return n.copy(r),r}function hu(n){var t=new n.constructor(n.byteLength);return new Kn(t).set(new Kn(n)),t}function pu(n,t){var e=t?hu(n.buffer):n.buffer;return new n.constructor(e,n.byteOffset,n.length)}function vu(n,t){if(n!==t){var e=undefined!==n,r=null===n,u=n==n,i=Qf(n),f=undefined!==t,o=null===t,a=t==t,c=Qf(t);if(!o&&!c&&!i&&n>t||i&&f&&a&&!o&&!c||r&&f&&a||!e&&a||!u)return 1;if(!r&&!i&&!c&&n<t||c&&e&&u&&!r&&!i||o&&e&&u||!f&&u||!a)return-1}return 0}function _u(n,t,e,r){for(var u=-1,i=n.length,f=e.length,o=-1,a=t.length,c=oe(i-f,0),l=dn(a+c),s=!r;++o<a;)l[o]=t[o];for(;++u<f;)(s||u<i)&&(l[e[u]]=n[u]);for(;c--;)l[o++]=n[u++];return l}function gu(n,t,e,r){for(var u=-1,i=n.length,f=-1,o=e.length,a=-1,c=t.length,l=oe(i-o,0),s=dn(l+c),d=!r;++u<l;)s[u]=n[u];for(var h=u;++a<c;)s[h+a]=t[a];for(;++f<o;)(d||u<i)&&(s[h+e[f]]=n[u++]);return s}function yu(n,t){var e=-1,r=n.length;for(t||(t=dn(r));++e<r;)t[e]=n[e];return t}function bu(n,t,e,r){var u=!e;e||(e={});for(var i=-1,f=t.length;++i<f;){var o=t[i],a=r?r(e[o],n[o],o,e,n):undefined;undefined===a&&(a=n[o]),u?Ge(e,o,a):qe(e,o,a)}return e}function wu(n,t){return function(e,r){var u=Wf(e)?rt:Ke,i=t?t():{};return u(e,n,Yu(r,2),i)}}function mu(n){return Dr((function(t,e){var r=-1,u=e.length,i=u>1?e[u-1]:undefined,f=u>2?e[2]:undefined;for(i=n.length>3&&"function"==typeof i?(u--,i):undefined,f&&ai(e[0],e[1],f)&&(i=u<3?undefined:i,u=1),t=gn(t);++r<u;){var o=e[r];o&&n(t,o,r,i)}return t}))}function xu(n,t){return function(e,r){if(null==e)return e;if(!Bf(e))return n(e,r);for(var u=e.length,i=t?u:-1,f=gn(e);(t?i--:++i<u)&&!1!==r(f[i],i,f););return e}}function ju(n){return function(t,e,r){for(var u=-1,i=gn(t),f=r(t),o=f.length;o--;){var a=f[n?o:++u];if(!1===e(i[a],a,i))break}return t}}function Au(n){return function(t){var e=Bt(t=ao(t))?Pt(t):undefined,r=e?e[0]:t.charAt(0),u=e?lu(e,1).join(""):t.slice(1);return r[n]()+u}}function Iu(n){return function(t){return dt(Fo(Wo(t).replace(En,"")),n,"")}}function ku(n){return function(){var t=arguments;switch(t.length){case 0:return new n;case 1:return new n(t[0]);case 2:return new n(t[0],t[1]);case 3:return new n(t[0],t[1],t[2]);case 4:return new n(t[0],t[1],t[2],t[3]);case 5:return new n(t[0],t[1],t[2],t[3],t[4]);case 6:return new n(t[0],t[1],t[2],t[3],t[4],t[5]);case 7:return new n(t[0],t[1],t[2],t[3],t[4],t[5],t[6])}var e=ze(n.prototype),r=n.apply(e,t);return qf(r)?r:e}}function Ou(n){return function(t,e,r){var u=gn(t);if(!Bf(t)){var i=Yu(e,3);t=xo(t),e=function(n){return i(u[n],n,u)}}var f=n(t,e,r);return f>-1?u[i?t[f]:f]:undefined}}function Ru(t){return Zu((function(e){var r=e.length,u=r,i=Le.prototype.thru;for(t&&e.reverse();u--;){var f=e[u];if("function"!=typeof f)throw new wn(n);if(i&&!o&&"wrapper"==Hu(f))var o=new Le([],!0)}for(u=o?u:r;++u<r;){var a=Hu(f=e[u]),c="wrapper"==a?Gu(f):undefined;o=c&&li(c[0])&&424==c[1]&&!c[4].length&&1==c[9]?o[Hu(c[0])].apply(o,c[3]):1==f.length&&li(f)?o[a]():o.thru(f)}return function(){var n=arguments,t=n[0];if(o&&1==n.length&&Wf(t))return o.plant(t).value();for(var u=0,i=r?e[u].apply(this,n):t;++u<r;)i=e[u].call(this,i);return i}}))}function Eu(n,t,e,r,u,i,f,o,a,c){var l=128&t,s=1&t,d=2&t,h=24&t,p=512&t,v=d?undefined:ku(n);return function _(){for(var g=arguments.length,y=dn(g),b=g;b--;)y[b]=arguments[b];if(h)var w=Ju(_),m=Lt(y,w);if(r&&(y=_u(y,r,u,h)),i&&(y=gu(y,i,f,h)),g-=m,h&&g<c){var x=Dt(y,w);return Bu(n,t,Eu,_.placeholder,e,y,x,o,a,c-g)}var j=s?e:this,A=d?j[n]:n;return g=y.length,o?y=gi(y,o):p&&g>1&&y.reverse(),l&&a<g&&(y.length=a),this&&this!==qn&&this instanceof _&&(A=v||ku(A)),A.apply(j,y)}}function zu(n,t){return function(e,r){return function(n,t,e,r){return cr(n,(function(n,u,i){t(r,e(n),u,i)})),r}(e,n,t(r),{})}}function Su(n,t){return function(e,r){var u;if(undefined===e&&undefined===r)return t;if(undefined!==e&&(u=e),undefined!==r){if(undefined===u)return r;"string"==typeof e||"string"==typeof r?(e=Qr(e),r=Qr(r)):(e=Yr(e),r=Yr(r)),u=n(e,r)}return u}}function Lu(n){return Zu((function(t){return t=lt(t,Ot(Yu())),Dr((function(e){var r=this;return n(t,(function(n){return et(n,r,e)}))}))}))}function Cu(n,t){var e=(t=undefined===t?" ":Qr(t)).length;if(e<2)return e?$r(t,n):t;var r=$r(t,ne(n/Ft(t)));return Bt(t)?lu(Pt(r),0,n).join(""):r.slice(0,n)}function Wu(n){return function(t,e,r){return r&&"number"!=typeof r&&ai(t,e,r)&&(e=r=undefined),t=ro(t),undefined===e?(e=t,t=0):e=ro(e),function(n,t,e,r){for(var u=-1,i=oe(ne((t-n)/(e||1)),0),f=dn(i);i--;)f[r?i:++u]=n,n+=e;return f}(t,e,r=undefined===r?t<e?1:-1:ro(r),n)}}function Uu(n){return function(t,e){return"string"==typeof t&&"string"==typeof e||(t=fo(t),e=fo(e)),n(t,e)}}function Bu(n,t,e,r,u,i,f,o,a,c){var l=8&t;t|=l?32:64,4&(t&=~(l?64:32))||(t&=-4);var s=[n,t,u,l?i:undefined,l?f:undefined,l?undefined:i,l?undefined:f,o,a,c],d=e.apply(undefined,s);return li(n)&&bi(d,s),d.placeholder=r,xi(d,n,t)}function Tu(n){var t=_n[n];return function(n,e){if(n=fo(n),(e=null==e?0:ae(uo(e),292))&&ue(n)){var r=(ao(n)+"e").split("e");return+((r=(ao(t(r[0]+"e"+(+r[1]+e)))+"e").split("e"))[0]+"e"+(+r[1]-e))}return t(n)}}var $u=_e&&1/Nt(new _e([,-0]))[1]==Infinity?function(n){return new _e(n)}:Xo;function Du(n){return function(t){var e=ri(t);return e==l?Tt(t):e==p?Mt(t):function(n,t){return lt(t,(function(t){return[t,n[t]]}))}(t,n(t))}}function Nu(e,r,u,i,f,o,a,c){var l=2&r;if(!l&&"function"!=typeof e)throw new wn(n);var s=i?i.length:0;if(s||(r&=-97,i=f=undefined),a=undefined===a?a:oe(uo(a),0),c=undefined===c?c:uo(c),s-=f?f.length:0,64&r){var d=i,h=f;i=f=undefined}var p=l?undefined:Gu(e),v=[e,r,u,i,f,d,h,o,a,c];if(p&&function(n,e){var r=n[1],u=e[1],i=r|u,f=i<131,o=128==u&&8==r||128==u&&256==r&&n[7].length<=e[8]||384==u&&e[7].length<=e[8]&&8==r;if(!f&&!o)return n;1&u&&(n[2]=e[2],i|=1&r?0:4);var a=e[3];if(a){var c=n[3];n[3]=c?_u(c,a,e[4]):a,n[4]=c?Dt(n[3],t):e[4]}(a=e[5])&&(c=n[5],n[5]=c?gu(c,a,e[6]):a,n[6]=c?Dt(n[5],t):e[6]);(a=e[7])&&(n[7]=a);128&u&&(n[8]=null==n[8]?e[8]:ae(n[8],e[8]));null==n[9]&&(n[9]=e[9]);n[0]=e[0],n[1]=i}(v,p),e=v[0],r=v[1],u=v[2],i=v[3],f=v[4],!(c=v[9]=undefined===v[9]?l?0:e.length:oe(v[9]-s,0))&&24&r&&(r&=-25),r&&1!=r)_=8==r||16==r?function(n,t,e){var r=ku(n);return function u(){for(var i=arguments.length,f=dn(i),o=i,a=Ju(u);o--;)f[o]=arguments[o];var c=i<3&&f[0]!==a&&f[i-1]!==a?[]:Dt(f,a);return(i-=c.length)<e?Bu(n,t,Eu,u.placeholder,void 0,f,c,void 0,void 0,e-i):et(this&&this!==qn&&this instanceof u?r:n,this,f)}}(e,r,c):32!=r&&33!=r||f.length?Eu.apply(undefined,v):function(n,t,e,r){var u=1&t,i=ku(n);return function t(){for(var f=-1,o=arguments.length,a=-1,c=r.length,l=dn(c+o),s=this&&this!==qn&&this instanceof t?i:n;++a<c;)l[a]=r[a];for(;o--;)l[a++]=arguments[++f];return et(s,u?e:this,l)}}(e,r,u,i);else var _=function(n,t,e){var r=1&t,u=ku(n);return function t(){return(this&&this!==qn&&this instanceof t?u:n).apply(r?e:this,arguments)}}(e,r,u);return xi((p?Pr:bi)(_,v),e,r)}function Mu(n,t,e,r){return undefined===n||zf(n,jn[e])&&!kn.call(r,e)?t:n}function Fu(n,t,e,r,u,i){return qf(n)&&qf(t)&&(i.set(t,n),Sr(n,t,undefined,Fu,i),i.delete(t)),n}function Pu(n){return Gf(n)?undefined:n}function qu(n,t,e,r,u,i){var f=1&e,o=n.length,a=t.length;if(o!=a&&!(f&&a>o))return!1;var c=i.get(n);if(c&&i.get(t))return c==t;var l=-1,s=!0,d=2&e?new Te:undefined;for(i.set(n,t),i.set(t,n);++l<o;){var h=n[l],p=t[l];if(r)var v=f?r(p,h,l,t,n,i):r(h,p,l,n,t,i);if(undefined!==v){if(v)continue;s=!1;break}if(d){if(!pt(t,(function(n,t){if(!Et(d,t)&&(h===n||u(h,n,e,r,i)))return d.push(t)}))){s=!1;break}}else if(h!==p&&!u(h,p,e,r,i)){s=!1;break}}return i.delete(n),i.delete(t),s}function Zu(n){return mi(vi(n,undefined,Wi),n+"")}function Ku(n){return hr(n,xo,ti)}function Vu(n){return hr(n,jo,ei)}var Gu=be?function(n){return be.get(n)}:Xo;function Hu(n){for(var t=n.name+"",e=we[t],r=kn.call(we,t)?e.length:0;r--;){var u=e[r],i=u.func;if(null==i||i==n)return u.name}return t}function Ju(n){return(kn.call(Ee,"placeholder")?Ee:n).placeholder}function Yu(){var n=Ee.iteratee||Ho;return n=n===Ho?Ar:n,arguments.length?n(arguments[0],arguments[1]):n}function Qu(n,t){var e,r,u=n.__data__;return("string"==(r=typeof(e=t))||"number"==r||"symbol"==r||"boolean"==r?"__proto__"!==e:null===e)?u["string"==typeof t?"string":"hash"]:u.map}function Xu(n){for(var t=xo(n),e=t.length;e--;){var r=t[e],u=n[r];t[e]=[r,u,hi(u)]}return t}function ni(n,t){var e=function(n,t){return null==n?void 0:n[t]}(n,t);return jr(e)?e:undefined}var ti=ee?function(n){return null==n?[]:(n=gn(n),ot(ee(n),(function(t){return jt.call(n,t)})))}:fa,ei=ee?function(n){for(var t=[];n;)st(t,ti(n)),n=Hn(n);return t}:fa,ri=pr;function ui(n,t,e){for(var r=-1,u=(t=au(t,n)).length,i=!1;++r<u;){var f=ki(t[r]);if(!(i=null!=n&&e(n,f)))break;n=n[f]}return i||++r!=u?i:!!(u=null==n?0:n.length)&&Pf(u)&&oi(f,u)&&(Wf(n)||Cf(n))}function ii(n){return"function"!=typeof n.constructor||di(n)?{}:ze(Hn(n))}function fi(n){return Wf(n)||Cf(n)||!!(Vt&&n&&n[Vt])}function oi(n,t){var e=typeof n;return!!(t=null==t?9007199254740991:t)&&("number"==e||"symbol"!=e&&un.test(n))&&n>-1&&n%1==0&&n<t}function ai(n,t,e){if(!qf(e))return!1;var r=typeof t;return!!("number"==r?Bf(e)&&oi(t,e.length):"string"==r&&t in e)&&zf(e[t],n)}function ci(n,t){if(Wf(n))return!1;var e=typeof n;return!("number"!=e&&"symbol"!=e&&"boolean"!=e&&null!=n&&!Qf(n))||(N.test(n)||!D.test(n)||null!=t&&n in gn(t))}function li(n){var t=Hu(n),e=Ee[t];if("function"!=typeof e||!(t in Ce.prototype))return!1;if(n===e)return!0;var r=Gu(e);return!!r&&n===r[0]}(he&&ri(new he(new ArrayBuffer(1)))!=b||pe&&ri(new pe)!=l||ve&&"[object Promise]"!=ri(ve.resolve())||_e&&ri(new _e)!=p||ge&&ri(new ge)!=g)&&(ri=function(n){var t=pr(n),e=t==d?n.constructor:undefined,r=e?Oi(e):"";if(r)switch(r){case me:return b;case xe:return l;case je:return"[object Promise]";case Ae:return p;case Ie:return g}return t});var si=An?Mf:oa;function di(n){var t=n&&n.constructor;return n===("function"==typeof t&&t.prototype||jn)}function hi(n){return n==n&&!qf(n)}function pi(n,t){return function(e){return null!=e&&(e[n]===t&&(undefined!==t||n in gn(e)))}}function vi(n,t,e){return t=oe(undefined===t?n.length-1:t,0),function(){for(var r=arguments,u=-1,i=oe(r.length-t,0),f=dn(i);++u<i;)f[u]=r[t+u];u=-1;for(var o=dn(t+1);++u<t;)o[u]=r[u];return o[t]=e(f),et(n,this,o)}}function _i(n,t){return t.length<2?n:dr(n,Kr(t,0,-1))}function gi(n,t){for(var e=n.length,r=ae(t.length,e),u=yu(n);r--;){var i=t[r];n[r]=oi(i,e)?u[i]:undefined}return n}function yi(n,t){if(("constructor"!==t||"function"!=typeof n[t])&&"__proto__"!=t)return n[t]}var bi=ji(Pr),wi=Xt||function(n,t){return qn.setTimeout(n,t)},mi=ji(qr);function xi(n,t,r){var u=t+"";return mi(n,function(n,t){var e=t.length;if(!e)return n;var r=e-1;return t[r]=(e>1?"& ":"")+t[r],t=t.join(e>2?", ":" "),n.replace(V,"{\n/* [wrapped with "+t+"] */\n")}(u,function(n,t){return ut(e,(function(e){var r="_."+e[0];t&e[1]&&!at(n,r)&&n.push(r)})),n.sort()}(function(n){var t=n.match(G);return t?t[1].split(H):[]}(u),r)))}function ji(n){var t=0,e=0;return function(){var r=ce(),u=16-(r-e);if(e=r,u>0){if(++t>=800)return arguments[0]}else t=0;return n.apply(undefined,arguments)}}function Ai(n,t){var e=-1,r=n.length,u=r-1;for(t=undefined===t?r:t;++e<t;){var i=Tr(e,u),f=n[i];n[i]=n[e],n[e]=f}return n.length=t,n}var Ii=function(n){var t=Af(n,(function(n){return 500===e.size&&e.clear(),n})),e=t.cache;return t}((function(n){var t=[];return 46===n.charCodeAt(0)&&t.push(""),n.replace(M,(function(n,e,r,u){t.push(r?u.replace(Y,"$1"):e||n)})),t}));function ki(n){if("string"==typeof n||Qf(n))return n;var t=n+"";return"0"==t&&1/n==-Infinity?"-0":t}function Oi(n){if(null!=n){try{return In.call(n)}catch(n){}try{return n+""}catch(n){}}return""}function Ri(n){if(n instanceof Ce)return n.clone();var t=new Le(n.__wrapped__,n.__chain__);return t.__actions__=yu(n.__actions__),t.__index__=n.__index__,t.__values__=n.__values__,t}var Ei=Dr((function(n,t){return Tf(n)?nr(n,fr(t,1,Tf,!0)):[]})),zi=Dr((function(n,t){var e=Di(t);return Tf(e)&&(e=undefined),Tf(n)?nr(n,fr(t,1,Tf,!0),Yu(e,2)):[]})),Si=Dr((function(n,t){var e=Di(t);return Tf(e)&&(e=undefined),Tf(n)?nr(n,fr(t,1,Tf,!0),undefined,e):[]}));function Li(n,t,e){var r=null==n?0:n.length;if(!r)return-1;var u=null==e?0:uo(e);return u<0&&(u=oe(r+u,0)),gt(n,Yu(t,3),u)}function Ci(n,t,e){var r=null==n?0:n.length;if(!r)return-1;var u=r-1;return undefined!==e&&(u=uo(e),u=e<0?oe(r+u,0):ae(u,r-1)),gt(n,Yu(t,3),u,!0)}function Wi(n){return(null==n?0:n.length)?fr(n,1):[]}function Ui(n){return n&&n.length?n[0]:undefined}var Bi=Dr((function(n){var t=lt(n,fu);return t.length&&t[0]===n[0]?yr(t):[]})),Ti=Dr((function(n){var t=Di(n),e=lt(n,fu);return t===Di(e)?t=undefined:e.pop(),e.length&&e[0]===n[0]?yr(e,Yu(t,2)):[]})),$i=Dr((function(n){var t=Di(n),e=lt(n,fu);return(t="function"==typeof t?t:undefined)&&e.pop(),e.length&&e[0]===n[0]?yr(e,undefined,t):[]}));function Di(n){var t=null==n?0:n.length;return t?n[t-1]:undefined}var Ni=Dr(Mi);function Mi(n,t){return n&&n.length&&t&&t.length?Ur(n,t):n}var Fi=Zu((function(n,t){var e=null==n?0:n.length,r=He(n,t);return Br(n,lt(t,(function(n){return oi(n,e)?+n:n})).sort(vu)),r}));function Pi(n){return null==n?n:de.call(n)}var qi=Dr((function(n){return Xr(fr(n,1,Tf,!0))})),Zi=Dr((function(n){var t=Di(n);return Tf(t)&&(t=undefined),Xr(fr(n,1,Tf,!0),Yu(t,2))})),Ki=Dr((function(n){var t=Di(n);return t="function"==typeof t?t:undefined,Xr(fr(n,1,Tf,!0),undefined,t)}));function Vi(n){if(!n||!n.length)return[];var t=0;return n=ot(n,(function(n){if(Tf(n))return t=oe(n.length,t),!0})),kt(t,(function(t){return lt(n,xt(t))}))}function Gi(n,t){if(!n||!n.length)return[];var e=Vi(n);return null==t?e:lt(e,(function(n){return et(t,undefined,n)}))}var Hi=Dr((function(n,t){return Tf(n)?nr(n,t):[]})),Ji=Dr((function(n){return uu(ot(n,Tf))})),Yi=Dr((function(n){var t=Di(n);return Tf(t)&&(t=undefined),uu(ot(n,Tf),Yu(t,2))})),Qi=Dr((function(n){var t=Di(n);return t="function"==typeof t?t:undefined,uu(ot(n,Tf),undefined,t)})),Xi=Dr(Vi);var nf=Dr((function(n){var t=n.length,e=t>1?n[t-1]:undefined;return e="function"==typeof e?(n.pop(),e):undefined,Gi(n,e)}));function tf(n){var t=Ee(n);return t.__chain__=!0,t}function ef(n,t){return t(n)}var rf=Zu((function(n){var t=n.length,e=t?n[0]:0,r=this.__wrapped__,u=function(t){return He(t,n)};return!(t>1||this.__actions__.length)&&r instanceof Ce&&oi(e)?((r=r.slice(e,+e+(t?1:0))).__actions__.push({func:ef,args:[u],thisArg:undefined}),new Le(r,this.__chain__).thru((function(n){return t&&!n.length&&n.push(undefined),n}))):this.thru(u)}));var uf=wu((function(n,t,e){kn.call(n,e)?++n[e]:Ge(n,e,1)}));var ff=Ou(Li),of=Ou(Ci);function af(n,t){return(Wf(n)?ut:tr)(n,Yu(t,3))}function cf(n,t){return(Wf(n)?it:er)(n,Yu(t,3))}var lf=wu((function(n,t,e){kn.call(n,e)?n[e].push(t):Ge(n,e,[t])}));var sf=Dr((function(n,t,e){var r=-1,u="function"==typeof t,i=Bf(n)?dn(n.length):[];return tr(n,(function(n){i[++r]=u?et(t,n,e):br(n,t,e)})),i})),df=wu((function(n,t,e){Ge(n,e,t)}));function hf(n,t){return(Wf(n)?lt:Rr)(n,Yu(t,3))}var pf=wu((function(n,t,e){n[e?0:1].push(t)}),(function(){return[[],[]]}));var vf=Dr((function(n,t){if(null==n)return[];var e=t.length;return e>1&&ai(n,t[0],t[1])?t=[]:e>2&&ai(t[0],t[1],t[2])&&(t=[t[0]]),Cr(n,fr(t,1),[])})),_f=Qt||function(){return qn.Date.now()};function gf(n,t,e){return t=e?undefined:t,Nu(n,128,undefined,undefined,undefined,undefined,t=n&&null==t?n.length:t)}function yf(t,e){var r;if("function"!=typeof e)throw new wn(n);return t=uo(t),function(){return--t>0&&(r=e.apply(this,arguments)),t<=1&&(e=undefined),r}}var bf=Dr((function(n,t,e){var r=1;if(e.length){var u=Dt(e,Ju(bf));r|=32}return Nu(n,r,t,e,u)})),wf=Dr((function(n,t,e){var r=3;if(e.length){var u=Dt(e,Ju(wf));r|=32}return Nu(t,r,n,e,u)}));function mf(t,e,r){var u,i,f,o,a,c,l=0,s=!1,d=!1,h=!0;if("function"!=typeof t)throw new wn(n);function p(n){var e=u,r=i;return u=i=undefined,l=n,o=t.apply(r,e)}function v(n){return l=n,a=wi(g,e),s?p(n):o}function _(n){var t=n-c;return undefined===c||t>=e||t<0||d&&n-l>=f}function g(){var n=_f();if(_(n))return y(n);a=wi(g,function(n){var t=e-(n-c);return d?ae(t,f-(n-l)):t}(n))}function y(n){return a=undefined,h&&u?p(n):(u=i=undefined,o)}function b(){var n=_f(),t=_(n);if(u=arguments,i=this,c=n,t){if(undefined===a)return v(c);if(d)return su(a),a=wi(g,e),p(c)}return undefined===a&&(a=wi(g,e)),o}return e=fo(e)||0,qf(r)&&(s=!!r.leading,f=(d="maxWait"in r)?oe(fo(r.maxWait)||0,e):f,h="trailing"in r?!!r.trailing:h),b.cancel=function(){undefined!==a&&su(a),l=0,u=c=i=a=undefined},b.flush=function(){return undefined===a?o:y(_f())},b}var xf=Dr((function(n,t){return Xe(n,1,t)})),jf=Dr((function(n,t,e){return Xe(n,fo(t)||0,e)}));function Af(t,e){if("function"!=typeof t||null!=e&&"function"!=typeof e)throw new wn(n);var r=function(){var n=arguments,u=e?e.apply(this,n):n[0],i=r.cache;if(i.has(u))return i.get(u);var f=t.apply(this,n);return r.cache=i.set(u,f)||i,f};return r.cache=new(Af.Cache||Be),r}function If(t){if("function"!=typeof t)throw new wn(n);return function(){var n=arguments;switch(n.length){case 0:return!t.call(this);case 1:return!t.call(this,n[0]);case 2:return!t.call(this,n[0],n[1]);case 3:return!t.call(this,n[0],n[1],n[2])}return!t.apply(this,n)}}Af.Cache=Be;var kf=cu((function(n,t){var e=(t=1==t.length&&Wf(t[0])?lt(t[0],Ot(Yu())):lt(fr(t,1),Ot(Yu()))).length;return Dr((function(r){for(var u=-1,i=ae(r.length,e);++u<i;)r[u]=t[u].call(this,r[u]);return et(n,this,r)}))})),Of=Dr((function(n,t){return Nu(n,32,undefined,t,Dt(t,Ju(Of)))})),Rf=Dr((function(n,t){return Nu(n,64,undefined,t,Dt(t,Ju(Rf)))})),Ef=Zu((function(n,t){return Nu(n,256,undefined,undefined,undefined,t)}));function zf(n,t){return n===t||n!=n&&t!=t}var Sf=Uu(vr),Lf=Uu((function(n,t){return n>=t})),Cf=wr(function(){return arguments}())?wr:function(n){return Zf(n)&&kn.call(n,"callee")&&!jt.call(n,"callee")},Wf=dn.isArray,Uf=Jn?Ot(Jn):function(n){return Zf(n)&&pr(n)==y};function Bf(n){return null!=n&&Pf(n.length)&&!Mf(n)}function Tf(n){return Zf(n)&&Bf(n)}var $f=re||oa,Df=Yn?Ot(Yn):function(n){return Zf(n)&&pr(n)==f};function Nf(n){if(!Zf(n))return!1;var t=pr(n);return t==o||"[object DOMException]"==t||"string"==typeof n.message&&"string"==typeof n.name&&!Gf(n)}function Mf(n){if(!qf(n))return!1;var t=pr(n);return t==a||t==c||"[object AsyncFunction]"==t||"[object Proxy]"==t}function Ff(n){return"number"==typeof n&&n==uo(n)}function Pf(n){return"number"==typeof n&&n>-1&&n%1==0&&n<=9007199254740991}function qf(n){var t=typeof n;return null!=n&&("object"==t||"function"==t)}function Zf(n){return null!=n&&"object"==typeof n}var Kf=Qn?Ot(Qn):function(n){return Zf(n)&&ri(n)==l};function Vf(n){return"number"==typeof n||Zf(n)&&pr(n)==s}function Gf(n){if(!Zf(n)||pr(n)!=d)return!1;var t=Hn(n);if(null===t)return!0;var e=kn.call(t,"constructor")&&t.constructor;return"function"==typeof e&&e instanceof e&&In.call(e)==Cn}var Hf=Xn?Ot(Xn):function(n){return Zf(n)&&pr(n)==h};var Jf=nt?Ot(nt):function(n){return Zf(n)&&ri(n)==p};function Yf(n){return"string"==typeof n||!Wf(n)&&Zf(n)&&pr(n)==v}function Qf(n){return"symbol"==typeof n||Zf(n)&&pr(n)==_}var Xf=tt?Ot(tt):function(n){return Zf(n)&&Pf(n.length)&&!!Tn[pr(n)]};var no=Uu(Or),to=Uu((function(n,t){return n<=t}));function eo(n){if(!n)return[];if(Bf(n))return Yf(n)?Pt(n):yu(n);if(Gt&&n[Gt])return function(n){for(var t,e=[];!(t=n.next()).done;)e.push(t.value);return e}(n[Gt]());var t=ri(n);return(t==l?Tt:t==p?Nt:So)(n)}function ro(n){return n?Infinity===(n=fo(n))||-Infinity===n?17976931348623157e292*(n<0?-1:1):n==n?n:0:0===n?n:0}function uo(n){var t=ro(n),e=t%1;return t==t?e?t-e:t:0}function io(n){return n?Je(uo(n),0,4294967295):0}function fo(n){if("number"==typeof n)return n;if(Qf(n))return NaN;if(qf(n)){var t="function"==typeof n.valueOf?n.valueOf():n;n=qf(t)?t+"":t}if("string"!=typeof n)return 0===n?n:+n;n=n.replace(q,"");var e=tn.test(n);return e||rn.test(n)?Mn(n.slice(2),e?2:8):nn.test(n)?NaN:+n}function oo(n){return bu(n,jo(n))}function ao(n){return null==n?"":Qr(n)}var co=mu((function(n,t){if(di(t)||Bf(t))bu(t,xo(t),n);else for(var e in t)kn.call(t,e)&&qe(n,e,t[e])})),lo=mu((function(n,t){bu(t,jo(t),n)})),so=mu((function(n,t,e,r){bu(t,jo(t),n,r)})),ho=mu((function(n,t,e,r){bu(t,xo(t),n,r)})),po=Zu(He);var vo=Dr((function(n,t){n=gn(n);var e=-1,r=t.length,u=r>2?t[2]:undefined;for(u&&ai(t[0],t[1],u)&&(r=1);++e<r;)for(var i=t[e],f=jo(i),o=-1,a=f.length;++o<a;){var c=f[o],l=n[c];(undefined===l||zf(l,jn[c])&&!kn.call(n,c))&&(n[c]=i[c])}return n})),_o=Dr((function(n){return n.push(undefined,Fu),et(Io,undefined,n)}));function go(n,t,e){var r=null==n?undefined:dr(n,t);return undefined===r?e:r}function yo(n,t){return null!=n&&ui(n,t,gr)}var bo=zu((function(n,t,e){null!=t&&"function"!=typeof t.toString&&(t=Sn.call(t)),n[t]=e}),Zo(Go)),wo=zu((function(n,t,e){null!=t&&"function"!=typeof t.toString&&(t=Sn.call(t)),kn.call(n,t)?n[t].push(e):n[t]=[e]}),Yu),mo=Dr(br);function xo(n){return Bf(n)?De(n):Ir(n)}function jo(n){return Bf(n)?De(n,!0):kr(n)}var Ao=mu((function(n,t,e){Sr(n,t,e)})),Io=mu((function(n,t,e,r){Sr(n,t,e,r)})),ko=Zu((function(n,t){var e={};if(null==n)return e;var r=!1;t=lt(t,(function(t){return t=au(t,n),r||(r=t.length>1),t})),bu(n,Vu(n),e),r&&(e=Ye(e,7,Pu));for(var u=t.length;u--;)nu(e,t[u]);return e}));var Oo=Zu((function(n,t){return null==n?{}:function(n,t){return Wr(n,t,(function(t,e){return yo(n,e)}))}(n,t)}));function Ro(n,t){if(null==n)return{};var e=lt(Vu(n),(function(n){return[n]}));return t=Yu(t),Wr(n,e,(function(n,e){return t(n,e[0])}))}var Eo=Du(xo),zo=Du(jo);function So(n){return null==n?[]:Rt(n,xo(n))}var Lo=Iu((function(n,t,e){return t=t.toLowerCase(),n+(e?Co(t):t)}));function Co(n){return Mo(ao(n).toLowerCase())}function Wo(n){return(n=ao(n))&&n.replace(fn,Ct).replace(zn,"")}var Uo=Iu((function(n,t,e){return n+(e?"-":"")+t.toLowerCase()})),Bo=Iu((function(n,t,e){return n+(e?" ":"")+t.toLowerCase()})),To=Au("toLowerCase");var $o=Iu((function(n,t,e){return n+(e?"_":"")+t.toLowerCase()}));var Do=Iu((function(n,t,e){return n+(e?" ":"")+Mo(t)}));var No=Iu((function(n,t,e){return n+(e?" ":"")+t.toUpperCase()})),Mo=Au("toUpperCase");function Fo(n,t,e){return n=ao(n),undefined===(t=e?undefined:t)?function(n){return Wn.test(n)}(n)?function(n){return n.match(Ln)||[]}(n):function(n){return n.match(J)||[]}(n):n.match(t)||[]}var Po=Dr((function(n,t){try{return et(n,undefined,t)}catch(n){return Nf(n)?n:new pn(n)}})),qo=Zu((function(n,t){return ut(t,(function(t){t=ki(t),Ge(n,t,bf(n[t],n))})),n}));function Zo(n){return function(){return n}}var Ko=Ru(),Vo=Ru(!0);function Go(n){return n}function Ho(n){return Ar("function"==typeof n?n:Ye(n,1))}var Jo=Dr((function(n,t){return function(e){return br(e,n,t)}})),Yo=Dr((function(n,t){return function(e){return br(n,e,t)}}));function Qo(n,t,e){var r=xo(t),u=sr(t,r);null!=e||qf(t)&&(u.length||!r.length)||(e=t,t=n,n=this,u=sr(t,xo(t)));var i=!(qf(e)&&"chain"in e&&!e.chain),f=Mf(n);return ut(u,(function(e){var r=t[e];n[e]=r,f&&(n.prototype[e]=function(){var t=this.__chain__;if(i||t){var e=n(this.__wrapped__),u=e.__actions__=yu(this.__actions__);return u.push({func:r,args:arguments,thisArg:n}),e.__chain__=t,e}return r.apply(n,st([this.value()],arguments))})})),n}function Xo(){}var na=Lu(lt),ta=Lu(ft),ea=Lu(pt);function ra(n){return ci(n)?xt(ki(n)):function(n){return function(t){return dr(t,n)}}(n)}var ua=Wu(),ia=Wu(!0);function fa(){return[]}function oa(){return!1}var aa=Su((function(n,t){return n+t}),0),ca=Tu("ceil"),la=Su((function(n,t){return n/t}),1),sa=Tu("floor");var da,ha=Su((function(n,t){return n*t}),1),pa=Tu("round"),va=Su((function(n,t){return n-t}),0);return Ee.after=function(t,e){if("function"!=typeof e)throw new wn(n);return t=uo(t),function(){if(--t<1)return e.apply(this,arguments)}},Ee.ary=gf,Ee.assign=co,Ee.assignIn=lo,Ee.assignInWith=so,Ee.assignWith=ho,Ee.at=po,Ee.before=yf,Ee.bind=bf,Ee.bindAll=qo,Ee.bindKey=wf,Ee.castArray=function(){if(!arguments.length)return[];var n=arguments[0];return Wf(n)?n:[n]},Ee.chain=tf,Ee.chunk=function(n,t,e){t=(e?ai(n,t,e):undefined===t)?1:oe(uo(t),0);var r=null==n?0:n.length;if(!r||t<1)return[];for(var u=0,i=0,f=dn(ne(r/t));u<r;)f[i++]=Kr(n,u,u+=t);return f},Ee.compact=function(n){for(var t=-1,e=null==n?0:n.length,r=0,u=[];++t<e;){var i=n[t];i&&(u[r++]=i)}return u},Ee.concat=function(){var n=arguments.length;if(!n)return[];for(var t=dn(n-1),e=arguments[0],r=n;r--;)t[r-1]=arguments[r];return st(Wf(e)?yu(e):[e],fr(t,1))},Ee.cond=function(t){var e=null==t?0:t.length,r=Yu();return t=e?lt(t,(function(t){if("function"!=typeof t[1])throw new wn(n);return[r(t[0]),t[1]]})):[],Dr((function(n){for(var r=-1;++r<e;){var u=t[r];if(et(u[0],this,n))return et(u[1],this,n)}}))},Ee.conforms=function(n){return function(n){var t=xo(n);return function(e){return Qe(e,n,t)}}(Ye(n,1))},Ee.constant=Zo,Ee.countBy=uf,Ee.create=function(n,t){var e=ze(n);return null==t?e:Ve(e,t)},Ee.curry=function n(t,e,r){var u=Nu(t,8,undefined,undefined,undefined,undefined,undefined,e=r?undefined:e);return u.placeholder=n.placeholder,u},Ee.curryRight=function n(t,e,r){var u=Nu(t,16,undefined,undefined,undefined,undefined,undefined,e=r?undefined:e);return u.placeholder=n.placeholder,u},Ee.debounce=mf,Ee.defaults=vo,Ee.defaultsDeep=_o,Ee.defer=xf,Ee.delay=jf,Ee.difference=Ei,Ee.differenceBy=zi,Ee.differenceWith=Si,Ee.drop=function(n,t,e){var r=null==n?0:n.length;return r?Kr(n,(t=e||undefined===t?1:uo(t))<0?0:t,r):[]},Ee.dropRight=function(n,t,e){var r=null==n?0:n.length;return r?Kr(n,0,(t=r-(t=e||undefined===t?1:uo(t)))<0?0:t):[]},Ee.dropRightWhile=function(n,t){return n&&n.length?eu(n,Yu(t,3),!0,!0):[]},Ee.dropWhile=function(n,t){return n&&n.length?eu(n,Yu(t,3),!0):[]},Ee.fill=function(n,t,e,r){var u=null==n?0:n.length;return u?(e&&"number"!=typeof e&&ai(n,t,e)&&(e=0,r=u),function(n,t,e,r){var u=n.length;for((e=uo(e))<0&&(e=-e>u?0:u+e),(r=void 0===r||r>u?u:uo(r))<0&&(r+=u),r=e>r?0:io(r);e<r;)n[e++]=t;return n}(n,t,e,r)):[]},Ee.filter=function(n,t){return(Wf(n)?ot:ir)(n,Yu(t,3))},Ee.flatMap=function(n,t){return fr(hf(n,t),1)},Ee.flatMapDeep=function(n,t){return fr(hf(n,t),Infinity)},Ee.flatMapDepth=function(n,t,e){return e=undefined===e?1:uo(e),fr(hf(n,t),e)},Ee.flatten=Wi,Ee.flattenDeep=function(n){return(null==n?0:n.length)?fr(n,Infinity):[]},Ee.flattenDepth=function(n,t){return(null==n?0:n.length)?fr(n,t=undefined===t?1:uo(t)):[]},Ee.flip=function(n){return Nu(n,512)},Ee.flow=Ko,Ee.flowRight=Vo,Ee.fromPairs=function(n){for(var t=-1,e=null==n?0:n.length,r={};++t<e;){var u=n[t];r[u[0]]=u[1]}return r},Ee.functions=function(n){return null==n?[]:sr(n,xo(n))},Ee.functionsIn=function(n){return null==n?[]:sr(n,jo(n))},Ee.groupBy=lf,Ee.initial=function(n){return(null==n?0:n.length)?Kr(n,0,-1):[]},Ee.intersection=Bi,Ee.intersectionBy=Ti,Ee.intersectionWith=$i,Ee.invert=bo,Ee.invertBy=wo,Ee.invokeMap=sf,Ee.iteratee=Ho,Ee.keyBy=df,Ee.keys=xo,Ee.keysIn=jo,Ee.map=hf,Ee.mapKeys=function(n,t){var e={};return t=Yu(t,3),cr(n,(function(n,r,u){Ge(e,t(n,r,u),n)})),e},Ee.mapValues=function(n,t){var e={};return t=Yu(t,3),cr(n,(function(n,r,u){Ge(e,r,t(n,r,u))})),e},Ee.matches=function(n){return Er(Ye(n,1))},Ee.matchesProperty=function(n,t){return zr(n,Ye(t,1))},Ee.memoize=Af,Ee.merge=Ao,Ee.mergeWith=Io,Ee.method=Jo,Ee.methodOf=Yo,Ee.mixin=Qo,Ee.negate=If,Ee.nthArg=function(n){return n=uo(n),Dr((function(t){return Lr(t,n)}))},Ee.omit=ko,Ee.omitBy=function(n,t){return Ro(n,If(Yu(t)))},Ee.once=function(n){return yf(2,n)},Ee.orderBy=function(n,t,e,r){return null==n?[]:(Wf(t)||(t=null==t?[]:[t]),Wf(e=r?undefined:e)||(e=null==e?[]:[e]),Cr(n,t,e))},Ee.over=na,Ee.overArgs=kf,Ee.overEvery=ta,Ee.overSome=ea,Ee.partial=Of,Ee.partialRight=Rf,Ee.partition=pf,Ee.pick=Oo,Ee.pickBy=Ro,Ee.property=ra,Ee.propertyOf=function(n){return function(t){return null==n?undefined:dr(n,t)}},Ee.pull=Ni,Ee.pullAll=Mi,Ee.pullAllBy=function(n,t,e){return n&&n.length&&t&&t.length?Ur(n,t,Yu(e,2)):n},Ee.pullAllWith=function(n,t,e){return n&&n.length&&t&&t.length?Ur(n,t,undefined,e):n},Ee.pullAt=Fi,Ee.range=ua,Ee.rangeRight=ia,Ee.rearg=Ef,Ee.reject=function(n,t){return(Wf(n)?ot:ir)(n,If(Yu(t,3)))},Ee.remove=function(n,t){var e=[];if(!n||!n.length)return e;var r=-1,u=[],i=n.length;for(t=Yu(t,3);++r<i;){var f=n[r];t(f,r,n)&&(e.push(f),u.push(r))}return Br(n,u),e},Ee.rest=function(t,e){if("function"!=typeof t)throw new wn(n);return Dr(t,e=undefined===e?e:uo(e))},Ee.reverse=Pi,Ee.sampleSize=function(n,t,e){return t=(e?ai(n,t,e):undefined===t)?1:uo(t),(Wf(n)?Me:Mr)(n,t)},Ee.set=function(n,t,e){return null==n?n:Fr(n,t,e)},Ee.setWith=function(n,t,e,r){return r="function"==typeof r?r:undefined,null==n?n:Fr(n,t,e,r)},Ee.shuffle=function(n){return(Wf(n)?Fe:Zr)(n)},Ee.slice=function(n,t,e){var r=null==n?0:n.length;return r?(e&&"number"!=typeof e&&ai(n,t,e)?(t=0,e=r):(t=null==t?0:uo(t),e=undefined===e?r:uo(e)),Kr(n,t,e)):[]},Ee.sortBy=vf,Ee.sortedUniq=function(n){return n&&n.length?Jr(n):[]},Ee.sortedUniqBy=function(n,t){return n&&n.length?Jr(n,Yu(t,2)):[]},Ee.split=function(n,t,e){return e&&"number"!=typeof e&&ai(n,t,e)&&(t=e=undefined),(e=undefined===e?4294967295:e>>>0)?(n=ao(n))&&("string"==typeof t||null!=t&&!Hf(t))&&!(t=Qr(t))&&Bt(n)?lu(Pt(n),0,e):n.split(t,e):[]},Ee.spread=function(t,e){if("function"!=typeof t)throw new wn(n);return e=null==e?0:oe(uo(e),0),Dr((function(n){var r=n[e],u=lu(n,0,e);return r&&st(u,r),et(t,this,u)}))},Ee.tail=function(n){var t=null==n?0:n.length;return t?Kr(n,1,t):[]},Ee.take=function(n,t,e){return n&&n.length?Kr(n,0,(t=e||undefined===t?1:uo(t))<0?0:t):[]},Ee.takeRight=function(n,t,e){var r=null==n?0:n.length;return r?Kr(n,(t=r-(t=e||undefined===t?1:uo(t)))<0?0:t,r):[]},Ee.takeRightWhile=function(n,t){return n&&n.length?eu(n,Yu(t,3),!1,!0):[]},Ee.takeWhile=function(n,t){return n&&n.length?eu(n,Yu(t,3)):[]},Ee.tap=function(n,t){return t(n),n},Ee.throttle=function(t,e,r){var u=!0,i=!0;if("function"!=typeof t)throw new wn(n);return qf(r)&&(u="leading"in r?!!r.leading:u,i="trailing"in r?!!r.trailing:i),mf(t,e,{leading:u,maxWait:e,trailing:i})},Ee.thru=ef,Ee.toArray=eo,Ee.toPairs=Eo,Ee.toPairsIn=zo,Ee.toPath=function(n){return Wf(n)?lt(n,ki):Qf(n)?[n]:yu(Ii(ao(n)))},Ee.toPlainObject=oo,Ee.transform=function(n,t,e){var r=Wf(n),u=r||$f(n)||Xf(n);if(t=Yu(t,4),null==e){var i=n&&n.constructor;e=u?r?new i:[]:qf(n)&&Mf(i)?ze(Hn(n)):{}}return(u?ut:cr)(n,(function(n,r,u){return t(e,n,r,u)})),e},Ee.unary=function(n){return gf(n,1)},Ee.union=qi,Ee.unionBy=Zi,Ee.unionWith=Ki,Ee.uniq=function(n){return n&&n.length?Xr(n):[]},Ee.uniqBy=function(n,t){return n&&n.length?Xr(n,Yu(t,2)):[]},Ee.uniqWith=function(n,t){return t="function"==typeof t?t:undefined,n&&n.length?Xr(n,undefined,t):[]},Ee.unset=function(n,t){return null==n||nu(n,t)},Ee.unzip=Vi,Ee.unzipWith=Gi,Ee.update=function(n,t,e){return null==n?n:tu(n,t,ou(e))},Ee.updateWith=function(n,t,e,r){return r="function"==typeof r?r:undefined,null==n?n:tu(n,t,ou(e),r)},Ee.values=So,Ee.valuesIn=function(n){return null==n?[]:Rt(n,jo(n))},Ee.without=Hi,Ee.words=Fo,Ee.wrap=function(n,t){return Of(ou(t),n)},Ee.xor=Ji,Ee.xorBy=Yi,Ee.xorWith=Qi,Ee.zip=Xi,Ee.zipObject=function(n,t){return iu(n||[],t||[],qe)},Ee.zipObjectDeep=function(n,t){return iu(n||[],t||[],Fr)},Ee.zipWith=nf,Ee.entries=Eo,Ee.entriesIn=zo,Ee.extend=lo,Ee.extendWith=so,Qo(Ee,Ee),Ee.add=aa,Ee.attempt=Po,Ee.camelCase=Lo,Ee.capitalize=Co,Ee.ceil=ca,Ee.clamp=function(n,t,e){return undefined===e&&(e=t,t=undefined),undefined!==e&&(e=(e=fo(e))==e?e:0),undefined!==t&&(t=(t=fo(t))==t?t:0),Je(fo(n),t,e)},Ee.clone=function(n){return Ye(n,4)},Ee.cloneDeep=function(n){return Ye(n,5)},Ee.cloneDeepWith=function(n,t){return Ye(n,5,t="function"==typeof t?t:undefined)},Ee.cloneWith=function(n,t){return Ye(n,4,t="function"==typeof t?t:undefined)},Ee.conformsTo=function(n,t){return null==t||Qe(n,t,xo(t))},Ee.deburr=Wo,Ee.defaultTo=function(n,t){return null==n||n!=n?t:n},Ee.divide=la,Ee.endsWith=function(n,t,e){n=ao(n),t=Qr(t);var r=n.length,u=e=undefined===e?r:Je(uo(e),0,r);return(e-=t.length)>=0&&n.slice(e,u)==t},Ee.eq=zf,Ee.escape=function(n){return(n=ao(n))&&U.test(n)?n.replace(C,Wt):n},Ee.escapeRegExp=function(n){return(n=ao(n))&&P.test(n)?n.replace(F,"\\$&"):n},Ee.every=function(n,t,e){var r=Wf(n)?ft:rr;return e&&ai(n,t,e)&&(t=undefined),r(n,Yu(t,3))},Ee.find=ff,Ee.findIndex=Li,Ee.findKey=function(n,t){return _t(n,Yu(t,3),cr)},Ee.findLast=of,Ee.findLastIndex=Ci,Ee.findLastKey=function(n,t){return _t(n,Yu(t,3),lr)},Ee.floor=sa,Ee.forEach=af,Ee.forEachRight=cf,Ee.forIn=function(n,t){return null==n?n:or(n,Yu(t,3),jo)},Ee.forInRight=function(n,t){return null==n?n:ar(n,Yu(t,3),jo)},Ee.forOwn=function(n,t){return n&&cr(n,Yu(t,3))},Ee.forOwnRight=function(n,t){return n&&lr(n,Yu(t,3))},Ee.get=go,Ee.gt=Sf,Ee.gte=Lf,Ee.has=function(n,t){return null!=n&&ui(n,t,_r)},Ee.hasIn=yo,Ee.head=Ui,Ee.identity=Go,Ee.includes=function(n,t,e,r){n=Bf(n)?n:So(n),e=e&&!r?uo(e):0;var u=n.length;return e<0&&(e=oe(u+e,0)),Yf(n)?e<=u&&n.indexOf(t,e)>-1:!!u&&yt(n,t,e)>-1},Ee.indexOf=function(n,t,e){var r=null==n?0:n.length;if(!r)return-1;var u=null==e?0:uo(e);return u<0&&(u=oe(r+u,0)),yt(n,t,u)},Ee.inRange=function(n,t,e){return t=ro(t),undefined===e?(e=t,t=0):e=ro(e),function(n,t,e){return n>=ae(t,e)&&n<oe(t,e)}(n=fo(n),t,e)},Ee.invoke=mo,Ee.isArguments=Cf,Ee.isArray=Wf,Ee.isArrayBuffer=Uf,Ee.isArrayLike=Bf,Ee.isArrayLikeObject=Tf,Ee.isBoolean=function(n){return!0===n||!1===n||Zf(n)&&pr(n)==i},Ee.isBuffer=$f,Ee.isDate=Df,Ee.isElement=function(n){return Zf(n)&&1===n.nodeType&&!Gf(n)},Ee.isEmpty=function(n){if(null==n)return!0;if(Bf(n)&&(Wf(n)||"string"==typeof n||"function"==typeof n.splice||$f(n)||Xf(n)||Cf(n)))return!n.length;var t=ri(n);if(t==l||t==p)return!n.size;if(di(n))return!Ir(n).length;for(var e in n)if(kn.call(n,e))return!1;return!0},Ee.isEqual=function(n,t){return mr(n,t)},Ee.isEqualWith=function(n,t,e){var r=(e="function"==typeof e?e:undefined)?e(n,t):undefined;return undefined===r?mr(n,t,undefined,e):!!r},Ee.isError=Nf,Ee.isFinite=function(n){return"number"==typeof n&&ue(n)},Ee.isFunction=Mf,Ee.isInteger=Ff,Ee.isLength=Pf,Ee.isMap=Kf,Ee.isMatch=function(n,t){return n===t||xr(n,t,Xu(t))},Ee.isMatchWith=function(n,t,e){return e="function"==typeof e?e:undefined,xr(n,t,Xu(t),e)},Ee.isNaN=function(n){return Vf(n)&&n!=+n},Ee.isNative=function(n){if(si(n))throw new pn("Unsupported core-js use. Try https://npms.io/search?q=ponyfill.");return jr(n)},Ee.isNil=function(n){return null==n},Ee.isNull=function(n){return null===n},Ee.isNumber=Vf,Ee.isObject=qf,Ee.isObjectLike=Zf,Ee.isPlainObject=Gf,Ee.isRegExp=Hf,Ee.isSafeInteger=function(n){return Ff(n)&&n>=-9007199254740991&&n<=9007199254740991},Ee.isSet=Jf,Ee.isString=Yf,Ee.isSymbol=Qf,Ee.isTypedArray=Xf,Ee.isUndefined=function(n){return undefined===n},Ee.isWeakMap=function(n){return Zf(n)&&ri(n)==g},Ee.isWeakSet=function(n){return Zf(n)&&"[object WeakSet]"==pr(n)},Ee.join=function(n,t){return null==n?"":ie.call(n,t)},Ee.kebabCase=Uo,Ee.last=Di,Ee.lastIndexOf=function(n,t,e){var r=null==n?0:n.length;if(!r)return-1;var u=r;return undefined!==e&&(u=(u=uo(e))<0?oe(r+u,0):ae(u,r-1)),t==t?function(n,t,e){for(var r=e+1;r--;)if(n[r]===t)return r;return r}(n,t,u):gt(n,wt,u,!0)},Ee.lowerCase=Bo,Ee.lowerFirst=To,Ee.lt=no,Ee.lte=to,Ee.max=function(n){return n&&n.length?ur(n,Go,vr):undefined},Ee.maxBy=function(n,t){return n&&n.length?ur(n,Yu(t,2),vr):undefined},Ee.mean=function(n){return mt(n,Go)},Ee.meanBy=function(n,t){return mt(n,Yu(t,2))},Ee.min=function(n){return n&&n.length?ur(n,Go,Or):undefined},Ee.minBy=function(n,t){return n&&n.length?ur(n,Yu(t,2),Or):undefined},Ee.stubArray=fa,Ee.stubFalse=oa,Ee.stubObject=function(){return{}},Ee.stubString=function(){return""},Ee.stubTrue=function(){return!0},Ee.multiply=ha,Ee.nth=function(n,t){return n&&n.length?Lr(n,uo(t)):undefined},Ee.noConflict=function(){return qn._===this&&(qn._=Dn),this},Ee.noop=Xo,Ee.now=_f,Ee.pad=function(n,t,e){n=ao(n);var r=(t=uo(t))?Ft(n):0;if(!t||r>=t)return n;var u=(t-r)/2;return Cu(te(u),e)+n+Cu(ne(u),e)},Ee.padEnd=function(n,t,e){n=ao(n);var r=(t=uo(t))?Ft(n):0;return t&&r<t?n+Cu(t-r,e):n},Ee.padStart=function(n,t,e){n=ao(n);var r=(t=uo(t))?Ft(n):0;return t&&r<t?Cu(t-r,e)+n:n},Ee.parseInt=function(n,t,e){return e||null==t?t=0:t&&(t=+t),le(ao(n).replace(Z,""),t||0)},Ee.random=function(n,t,e){if(e&&"boolean"!=typeof e&&ai(n,t,e)&&(t=e=undefined),undefined===e&&("boolean"==typeof t?(e=t,t=undefined):"boolean"==typeof n&&(e=n,n=undefined)),undefined===n&&undefined===t?(n=0,t=1):(n=ro(n),undefined===t?(t=n,n=0):t=ro(t)),n>t){var r=n;n=t,t=r}if(e||n%1||t%1){var u=se();return ae(n+u*(t-n+Nn("1e-"+((u+"").length-1))),t)}return Tr(n,t)},Ee.reduce=function(n,t,e){var r=Wf(n)?dt:At,u=arguments.length<3;return r(n,Yu(t,4),e,u,tr)},Ee.reduceRight=function(n,t,e){var r=Wf(n)?ht:At,u=arguments.length<3;return r(n,Yu(t,4),e,u,er)},Ee.repeat=function(n,t,e){return t=(e?ai(n,t,e):undefined===t)?1:uo(t),$r(ao(n),t)},Ee.replace=function(){var n=arguments,t=ao(n[0]);return n.length<3?t:t.replace(n[1],n[2])},Ee.result=function(n,t,e){var r=-1,u=(t=au(t,n)).length;for(u||(u=1,n=undefined);++r<u;){var i=null==n?undefined:n[ki(t[r])];undefined===i&&(r=u,i=e),n=Mf(i)?i.call(n):i}return n},Ee.round=pa,Ee.runInContext=cn,Ee.sample=function(n){return(Wf(n)?Ne:Nr)(n)},Ee.size=function(n){if(null==n)return 0;if(Bf(n))return Yf(n)?Ft(n):n.length;var t=ri(n);return t==l||t==p?n.size:Ir(n).length},Ee.snakeCase=$o,Ee.some=function(n,t,e){var r=Wf(n)?pt:Vr;return e&&ai(n,t,e)&&(t=undefined),r(n,Yu(t,3))},Ee.sortedIndex=function(n,t){return Gr(n,t)},Ee.sortedIndexBy=function(n,t,e){return Hr(n,t,Yu(e,2))},Ee.sortedIndexOf=function(n,t){var e=null==n?0:n.length;if(e){var r=Gr(n,t);if(r<e&&zf(n[r],t))return r}return-1},Ee.sortedLastIndex=function(n,t){return Gr(n,t,!0)},Ee.sortedLastIndexBy=function(n,t,e){return Hr(n,t,Yu(e,2),!0)},Ee.sortedLastIndexOf=function(n,t){if(null==n?0:n.length){var e=Gr(n,t,!0)-1;if(zf(n[e],t))return e}return-1},Ee.startCase=Do,Ee.startsWith=function(n,t,e){return n=ao(n),e=null==e?0:Je(uo(e),0,n.length),t=Qr(t),n.slice(e,e+t.length)==t},Ee.subtract=va,Ee.sum=function(n){return n&&n.length?It(n,Go):0},Ee.sumBy=function(n,t){return n&&n.length?It(n,Yu(t,2)):0},Ee.template=function(n,t,e){var r=Ee.templateSettings;e&&ai(n,t,e)&&(t=undefined),n=ao(n),t=so({},t,r,Mu);var u,i,f=so({},t.imports,r.imports,Mu),o=xo(f),a=Rt(f,o),c=0,l=t.interpolate||on,s="__p += '",d=yn((t.escape||on).source+"|"+l.source+"|"+(l===$?Q:on).source+"|"+(t.evaluate||on).source+"|$","g"),h="//# sourceURL="+(kn.call(t,"sourceURL")?(t.sourceURL+"").replace(/[\r\n]/g," "):"lodash.templateSources["+ ++Bn+"]")+"\n";n.replace(d,(function(t,e,r,f,o,a){return r||(r=f),s+=n.slice(c,a).replace(an,Ut),e&&(u=!0,s+="' +\n__e("+e+") +\n'"),o&&(i=!0,s+="';\n"+o+";\n__p += '"),r&&(s+="' +\n((__t = ("+r+")) == null ? '' : __t) +\n'"),c=a+t.length,t})),s+="';\n";var p=kn.call(t,"variable")&&t.variable;p||(s="with (obj) {\n"+s+"\n}\n"),s=(i?s.replace(E,""):s).replace(z,"$1").replace(S,"$1;"),s="function("+(p||"obj")+") {\n"+(p?"":"obj || (obj = {});\n")+"var __t, __p = ''"+(u?", __e = _.escape":"")+(i?", __j = Array.prototype.join;\nfunction print() { __p += __j.call(arguments, '') }\n":";\n")+s+"return __p\n}";var v=Po((function(){return vn(o,h+"return "+s).apply(undefined,a)}));if(v.source=s,Nf(v))throw v;return v},Ee.times=function(n,t){if((n=uo(n))<1||n>9007199254740991)return[];var e=4294967295,r=ae(n,4294967295);n-=4294967295;for(var u=kt(r,t=Yu(t));++e<n;)t(e);return u},Ee.toFinite=ro,Ee.toInteger=uo,Ee.toLength=io,Ee.toLower=function(n){return ao(n).toLowerCase()},Ee.toNumber=fo,Ee.toSafeInteger=function(n){return n?Je(uo(n),-9007199254740991,9007199254740991):0===n?n:0},Ee.toString=ao,Ee.toUpper=function(n){return ao(n).toUpperCase()},Ee.trim=function(n,t,e){if((n=ao(n))&&(e||undefined===t))return n.replace(q,"");if(!n||!(t=Qr(t)))return n;var r=Pt(n),u=Pt(t);return lu(r,zt(r,u),St(r,u)+1).join("")},Ee.trimEnd=function(n,t,e){if((n=ao(n))&&(e||undefined===t))return n.replace(K,"");if(!n||!(t=Qr(t)))return n;var r=Pt(n);return lu(r,0,St(r,Pt(t))+1).join("")},Ee.trimStart=function(n,t,e){if((n=ao(n))&&(e||undefined===t))return n.replace(Z,"");if(!n||!(t=Qr(t)))return n;var r=Pt(n);return lu(r,zt(r,Pt(t))).join("")},Ee.truncate=function(n,t){var e=30,r="...";if(qf(t)){var u="separator"in t?t.separator:u;e="length"in t?uo(t.length):e,r="omission"in t?Qr(t.omission):r}var i=(n=ao(n)).length;if(Bt(n)){var f=Pt(n);i=f.length}if(e>=i)return n;var o=e-Ft(r);if(o<1)return r;var a=f?lu(f,0,o).join(""):n.slice(0,o);if(undefined===u)return a+r;if(f&&(o+=a.length-o),Hf(u)){if(n.slice(o).search(u)){var c,l=a;for(u.global||(u=yn(u.source,ao(X.exec(u))+"g")),u.lastIndex=0;c=u.exec(l);)var s=c.index;a=a.slice(0,undefined===s?o:s)}}else if(n.indexOf(Qr(u),o)!=o){var d=a.lastIndexOf(u);d>-1&&(a=a.slice(0,d))}return a+r},Ee.unescape=function(n){return(n=ao(n))&&W.test(n)?n.replace(L,qt):n},Ee.uniqueId=function(n){var t=++On;return ao(n)+t},Ee.upperCase=No,Ee.upperFirst=Mo,Ee.each=af,Ee.eachRight=cf,Ee.first=Ui,Qo(Ee,(da={},cr(Ee,(function(n,t){kn.call(Ee.prototype,t)||(da[t]=n)})),da),{chain:!1}),Ee.VERSION="4.17.15",ut(["bind","bindKey","curry","curryRight","partial","partialRight"],(function(n){Ee[n].placeholder=Ee})),ut(["drop","take"],(function(n,t){Ce.prototype[n]=function(e){e=undefined===e?1:oe(uo(e),0);var r=this.__filtered__&&!t?new Ce(this):this.clone();return r.__filtered__?r.__takeCount__=ae(e,r.__takeCount__):r.__views__.push({size:ae(e,4294967295),type:n+(r.__dir__<0?"Right":"")}),r},Ce.prototype[n+"Right"]=function(t){return this.reverse()[n](t).reverse()}})),ut(["filter","map","takeWhile"],(function(n,t){var e=t+1,r=1==e||3==e;Ce.prototype[n]=function(n){var t=this.clone();return t.__iteratees__.push({iteratee:Yu(n,3),type:e}),t.__filtered__=t.__filtered__||r,t}})),ut(["head","last"],(function(n,t){var e="take"+(t?"Right":"");Ce.prototype[n]=function(){return this[e](1).value()[0]}})),ut(["initial","tail"],(function(n,t){var e="drop"+(t?"":"Right");Ce.prototype[n]=function(){return this.__filtered__?new Ce(this):this[e](1)}})),Ce.prototype.compact=function(){return this.filter(Go)},Ce.prototype.find=function(n){return this.filter(n).head()},Ce.prototype.findLast=function(n){return this.reverse().find(n)},Ce.prototype.invokeMap=Dr((function(n,t){return"function"==typeof n?new Ce(this):this.map((function(e){return br(e,n,t)}))})),Ce.prototype.reject=function(n){return this.filter(If(Yu(n)))},Ce.prototype.slice=function(n,t){n=uo(n);var e=this;return e.__filtered__&&(n>0||t<0)?new Ce(e):(n<0?e=e.takeRight(-n):n&&(e=e.drop(n)),undefined!==t&&(e=(t=uo(t))<0?e.dropRight(-t):e.take(t-n)),e)},Ce.prototype.takeRightWhile=function(n){return this.reverse().takeWhile(n).reverse()},Ce.prototype.toArray=function(){return this.take(4294967295)},cr(Ce.prototype,(function(n,t){var e=/^(?:filter|find|map|reject)|While$/.test(t),r=/^(?:head|last)$/.test(t),u=Ee[r?"take"+("last"==t?"Right":""):t],i=r||/^find/.test(t);u&&(Ee.prototype[t]=function(){var t=this.__wrapped__,f=r?[1]:arguments,o=t instanceof Ce,a=f[0],c=o||Wf(t),l=function(n){var t=u.apply(Ee,st([n],f));return r&&s?t[0]:t};c&&e&&"function"==typeof a&&1!=a.length&&(o=c=!1);var s=this.__chain__,d=!!this.__actions__.length,h=i&&!s,p=o&&!d;if(!i&&c){t=p?t:new Ce(this);var v=n.apply(t,f);return v.__actions__.push({func:ef,args:[l],thisArg:undefined}),new Le(v,s)}return h&&p?n.apply(this,f):(v=this.thru(l),h?r?v.value()[0]:v.value():v)})})),ut(["pop","push","shift","sort","splice","unshift"],(function(n){var t=mn[n],e=/^(?:push|sort|unshift)$/.test(n)?"tap":"thru",r=/^(?:pop|shift)$/.test(n);Ee.prototype[n]=function(){var n=arguments;if(r&&!this.__chain__){var u=this.value();return t.apply(Wf(u)?u:[],n)}return this[e]((function(e){return t.apply(Wf(e)?e:[],n)}))}})),cr(Ce.prototype,(function(n,t){var e=Ee[t];if(e){var r=e.name+"";kn.call(we,r)||(we[r]=[]),we[r].push({name:t,func:e})}})),we[Eu(undefined,2).name]=[{name:"wrapper",func:undefined}],Ce.prototype.clone=function(){var n=new Ce(this.__wrapped__);return n.__actions__=yu(this.__actions__),n.__dir__=this.__dir__,n.__filtered__=this.__filtered__,n.__iteratees__=yu(this.__iteratees__),n.__takeCount__=this.__takeCount__,n.__views__=yu(this.__views__),n},Ce.prototype.reverse=function(){if(this.__filtered__){var n=new Ce(this);n.__dir__=-1,n.__filtered__=!0}else(n=this.clone()).__dir__*=-1;return n},Ce.prototype.value=function(){var n=this.__wrapped__.value(),t=this.__dir__,e=Wf(n),r=t<0,u=e?n.length:0,i=function(n,t,e){var r=-1,u=e.length;for(;++r<u;){var i=e[r],f=i.size;switch(i.type){case"drop":n+=f;break;case"dropRight":t-=f;break;case"take":t=ae(t,n+f);break;case"takeRight":n=oe(n,t-f)}}return{start:n,end:t}}(0,u,this.__views__),f=i.start,o=i.end,a=o-f,c=r?o:f-1,l=this.__iteratees__,s=l.length,d=0,h=ae(a,this.__takeCount__);if(!e||!r&&u==a&&h==a)return ru(n,this.__actions__);var p=[];n:for(;a--&&d<h;){for(var v=-1,_=n[c+=t];++v<s;){var g=l[v],y=g.iteratee,b=g.type,w=y(_);if(2==b)_=w;else if(!w){if(1==b)continue n;break n}}p[d++]=_}return p},Ee.prototype.at=rf,Ee.prototype.chain=function(){return tf(this)},Ee.prototype.commit=function(){return new Le(this.value(),this.__chain__)},Ee.prototype.next=function(){undefined===this.__values__&&(this.__values__=eo(this.value()));var n=this.__index__>=this.__values__.length;return{done:n,value:n?undefined:this.__values__[this.__index__++]}},Ee.prototype.plant=function(n){for(var t,e=this;e instanceof Se;){var r=Ri(e);r.__index__=0,r.__values__=undefined,t?u.__wrapped__=r:t=r;var u=r;e=e.__wrapped__}return u.__wrapped__=n,t},Ee.prototype.reverse=function(){var n=this.__wrapped__;if(n instanceof Ce){var t=n;return this.__actions__.length&&(t=new Ce(this)),(t=t.reverse()).__actions__.push({func:ef,args:[Pi],thisArg:undefined}),new Le(t,this.__chain__)}return this.thru(Pi)},Ee.prototype.toJSON=Ee.prototype.valueOf=Ee.prototype.value=function(){return ru(this.__wrapped__,this.__actions__)},Ee.prototype.first=Ee.prototype.head,Gt&&(Ee.prototype[Gt]=function(){return this}),Ee}();"function"==typeof define&&"object"==typeof define.amd&&define.amd?(qn._=Zt,define((function(){return Zt}))):Kn?((Kn.exports=Zt)._=Zt,Zn._=Zt):qn._=Zt}).call(this);
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkF0dHJpYnV0ZS5qcyIsIkR1bWJIZXVyaXN0aWMuanMiLCJFZGdlLmpzIiwiR2Fuc25lci5qcyIsIkdhbnNuZXJTYW1lUmFuay5qcyIsIkdyYXBoLmpzIiwiR3JhcGhHZW5lcmF0b3IuanMiLCJHcm91cC5qcyIsIkxQQmVuZGluZXNzLmpzIiwiTFBCZW5kaW5lc3NDb21iaW5lZC5qcyIsIkxQQmVuZGluZXNzQ29tYmluZWRQbHVzR3JvdXBzLmpzIiwiTFBGb3JtdWxhdGlvbi5qcyIsIlN3ZWVwLmpzIiwiVGFibGUuanMiLCJkcmF3R3JhcGguanMiLCJwYXJzZVF1ZXJ5LmpzIiwidGVzdC5qcyIsImxvZGFzaC5qcyJdLCJuYW1lcyI6WyJBdHRyaWJ1dGUiLCJbb2JqZWN0IE9iamVjdF0iLCJ0YWJsZSIsIm5hbWUiLCJ0aGlzIiwiYXR0ciIsIndlaWdodCIsImRpZmZFZGdlcyIsInJhbmRvbUVkZ2VzIiwic2FtZUVkZ2VzIiwibXV0YWJsZSIsImlkIiwiYXJnMCIsInJlcGxhY2UiLCJEdW1iSGV1cmlzdGljIiwiZyIsImkiLCJtYXhEZXB0aCIsImVkZ2VzIiwiZWRnZUluZGV4Iiwic29ydCIsImEiLCJiIiwiY29tcGFyZVRvIiwiaiIsImxlbmd0aCIsImVkZ2UxIiwiZWRnZTIiLCJsZWZ0VGFibGUiLCJsZWZ0QXR0cmlidXRlIiwic3dhcCIsInJpZ2h0QXR0cmlidXRlIiwicmlnaHRUYWJsZSIsIncxIiwidzIiLCJ0bXB3IiwiRWRnZSIsImF0dDEiLCJhdHQyIiwib3RoZXJFZGdlIiwiZGVwdGgiLCJjb21wYXJlU2VsZkVkZ2VUbyIsInVuZGVmaW5lZCIsImNvbXBhcmVBdHRyaWJ1dGVzIiwidDEiLCJhMSIsInQyIiwiYTIiLCJyZXQiLCJyZXMiLCJmYWN0b3IiLCJncmFwaCIsImJhc2VSb3dEaXN0YW5jZSIsInZlcnRpY2FsQXR0ck9mZnNldCIsIk1hdGgiLCJyb3VuZCIsImFicyIsIkdhbnNuZXIiLCJtYXhfaXRlcmF0aW9ucyIsImVsYXBzZWRUaW1lIiwiYXJyYXkiLCJjbG9uZUdyYXBoIiwidGFibGVzIiwidGFibGUyIiwiZmluZCIsInQiLCJhdHRyaWJ1dGUiLCJhdHRyaWJ1dGVzIiwic3RhcnRUaW1lIiwiRGF0ZSIsImdldFRpbWUiLCJiZXN0X2Nyb3NzaW5ncyIsImdldEVkZ2VDcm9zc2luZ3MiLCJfIiwiY2xvbmVEZWVwIiwiYXJyYW5nZUxlZnQiLCJhcnJhbmdlUmlnaHQiLCJ0cmFuc3Bvc2UiLCJjdXJfY3Jvc3NpbmdzIiwiYXBwbHlBcnJhbmdlbWVudCIsImxheWVyVGFibGVzIiwidGFibGVJbmRleCIsImxheWVyRWRnZXMiLCJ3ZWlnaHRzIiwiZmlsdGVyIiwiZSIsIm1hcCIsInBhcnNlRmxvYXQiLCJtZWRpYW4iLCJ0YWJsZVdlaWdodHMiLCJhdHRyaWJ1dGVXZWlnaHRzIiwic2V0RXhhY3RXZWlnaHRzIiwiaW1wcm92ZWQiLCJpbml0Q3Jvc3NpbmdzIiwiZ2V0RWRnZUNyb3NzaW5nc0F0RGVwdGgiLCJ0YWJsZTEiLCJrIiwiYXR0cjEiLCJhdHRyMiIsIkdhbnNuZXJTYW1lUmFuayIsIml0ZXJhdGlvbnMiLCJjdXJfaXRlcmF0aW9uIiwiaXRlcl9udW0iLCJwaXZvdCIsImxlZnQiLCJyaWdodCIsInB1c2giLCJxdWlja3NvcnQiLCJjb25jYXQiLCJhc3NpZ25lZFdlaWdodCIsImF0dHJpYnV0ZTIiLCJjb25zb2xlIiwibG9nIiwidG1wV2VpZ2h0c1RhYmxlcyIsInRtcEF0dHJpYnV0ZVdlaWdodHMiLCJpc1NhbWVSYW5rRWRnZSIsInZhbCIsImlzTmFOIiwicmVvcmRlciIsInRhYmwiLCJHcmFwaCIsIm9iaiIsImdyb3VwcyIsImF0dHJpYnV0ZUNvdW50ZXIiLCJuZXdMYXllciIsIk9iamVjdCIsImFzc2lnbiIsImdyb3VwIiwiaW5kZXhPZiIsImdyb3VwSGVhZGVyIiwiZ3JvdXBIZWFkZXJUYWJsZSIsImFkZFRhYmxlIiwidXBkYXRlQ29vcmRzIiwiZWRnZSIsImNvdW50IiwiZCIsInZlcmJvc2UiLCJjcm9zc2luZ3MiLCJjdXJyRWRnZSIsImNyb3NzZXMiLCJtYWluIiwidF9pbmQiLCJhdHRycyIsInVwZGF0ZUdyb3VwQ29vcmRzIiwiZ2V0TnVtU3RyYWlnaHRFZGdlc0F0RGVwdGgiLCJhZGp1c3RBdHRyT2Zmc2V0IiwiZWRnZXNMZWZ0IiwiZ2V0QmVuZGluZXNzIiwicmVkdWNlIiwiZWRnZXNSaWdodCIsImdldEJlbmRSaWdodCIsImdldEJlbmRMZWZ0IiwiZ2V0VGFibGVCZW5kaW5lc3MiLCJjeWNsZUluZGV4IiwiZ2V0VXBwZXJCb3VuZCIsInRhYmxlQ29sIiwidXBwZXJCb3VuZCIsImdldExvd2VyQm91bmQiLCJsb3dlckJvdW5kIiwic3dpcGVSaWdodCIsImN1cnJCZW5kaW5lc3NTdW0iLCJjdXJyQmVzdE9mZnNldCIsInRlbXBCZW5kaW5lc3NTdW0iLCJzd2lwZUxlZnQiLCJHcmFwaEdlbmVyYXRvciIsInNlZWQiLCJ0YWJsZURpc3RyaWJ1dGlvbiIsImF0dHJpYnV0ZURpc3RyaWJ1dGlvbiIsInNhbWVFZGdlRGlzdHJpYnV0aW9uIiwicmFuZG9tRWRnZURpc3RyaWJ1dGlvbiIsInMiLCJqZCIsInYiLCJqcyIsInJuZyIsInNlZWRyYW5kb20iLCJ0YWJsZURpc3QiLCJhdHRyRGlzdCIsImdlbmVyYXRlVGFibGUiLCJnZW5lcmF0ZVByb2plY3Rpb25zIiwiZ2VuZXJhdGVKb2lucyIsImVuc3VyZVVuaXF1ZUVkZ2VzIiwiaW5kZXgiLCJuZXdUYWJsZSIsIlRhYmxlIiwiYWRkQXR0cmlidXRlIiwibGF5ZXIxIiwibGF5ZXIxYXR0cnMiLCJzZWxlY3RUYWJsZSIsInByb2plY3RlZEF0dHJzIiwicHJvamVjdGVkIiwicHJvamVjdGVkQ291bnQiLCJzdHJpY3QiLCJmbG9vciIsImNvdW50UHJvamVjdGlvbnMiLCJhdHRySW5kZXgiLCJzcGxpY2UiLCJuZXdBdHRyIiwiYWRkRWRnZSIsImxlZnRMYXllciIsInJpZ2h0TGF5ZXIiLCJsZWZ0TGF5ZXJBdHRycyIsInJpZ2h0TGF5ZXJBdHRycyIsImxlZnRJbmRleCIsInJpZ2h0SW5kZXgiLCJsYXllciIsImF0dHJzMSIsImF0dHJzMiIsImF0dHIyaW5kZXgiLCJsZWZ0QXR0cnMiLCJjdXJyQXR0cnMiLCJmbGF0IiwicmlnaHRBdHRycyIsInRhIiwicmF0aW8iLCJ0bXBJbmRleCIsIm90aGVyIiwiZ2VuZXJhdGVJbnRlckxheWVySm9pbnMiLCJnZW5lcmF0ZUluTGF5ZXJKb2lucyIsImdlbmVyYXRlUmFuZG9tSm9pbnMiLCJHcm91cCIsImNvb3JkcyIsInhfY29vcmQiLCJ5X2Nvb3JkIiwid2lkdGhfY29vcmQiLCJoZWlnaHRfY29vcmQiLCJtYXJnaW4iLCJsZWZ0TWF4RGVwdGgiLCJtaW4iLCJhcHBseSIsInRvcE1heCIsInRvcFRhYmxlIiwicmlnaHRNYXgiLCJtYXgiLCJib3R0b21NYXgiLCJib3R0b21UYWJsZSIsImRlcHRocmFuZ2UiLCJjdXJfZCIsIm51bXRoaXNEZXB0aCIsImRlcHRoX2Rpc3RhbmNlIiwidGFibGVfdmVydF9zcGFjZSIsImF0dHJfaGVpZ2h0IiwidGFibGVfd2lkdGgiLCJzdWJncm91cF9saXN0IiwiZ3IyIiwiaXNTdWJncm91cCIsImdldF9zdWJncm91cHMiLCJjb21wdXRlWUNvb3JkIiwiTFBCZW5kaW5lc3MiLCJtaXAiLCJtb2RlbCIsImZpbGxNb2RlbCIsIm9iamVjdGl2ZSIsInByb2IiLCJtb2RlbFRvU3RyaW5nIiwicmVzdWx0IiwiZ2xwX3NldF9wcmludF9mdW5jIiwibHAiLCJnbHBfY3JlYXRlX3Byb2IiLCJnbHBfcmVhZF9scF9mcm9tX3N0cmluZyIsImdscF9zY2FsZV9wcm9iIiwiR0xQX1NGX0FVVE8iLCJzbWNwIiwiU01DUCIsInByZXNvbHZlIiwiR0xQX09OIiwiZ2xwX3NpbXBsZXgiLCJnbHBfaW50b3B0IiwiZ2xwX21pcF9vYmpfdmFsIiwiZ2xwX2dldF9udW1fY29scyIsImdscF9nZXRfY29sX25hbWUiLCJnbHBfbWlwX2NvbF92YWwiLCJnbHBfZ2V0X29ial92YWwiLCJnbHBfZ2V0X2NvbF9wcmltIiwiYXBwbHlfc29sdXRpb24iLCJtaW5pbWl6ZSIsInN1YmplY3RUbyIsImJvdW5kcyIsInN1YnN0cmluZyIsInNvbHV0aW9uIiwiTFBCZW5kaW5lc3NDb21iaW5lZCIsImRlZmluaXRpb25zIiwiY3Jvc3NpbmdfdmFycyIsIm1rYyIsInUxIiwidjEiLCJ1MiIsInYyIiwibWt4QmFzZSIsInByZSIsImxheWVyQXR0cmlidXRlcyIsIm0iLCJ0MyIsInUxdjEiLCJ1MnYyIiwicDEiLCJmaW5hbHN1bSIsInAyIiwicDMiLCJwNCIsInpjb3VudCIsInAiLCJhY2N1bXVsYXRvciIsInRtcHN0ciIsImVsZW0iLCJMUEJlbmRpbmVzc0NvbWJpbmVkUGx1c0dyb3VwcyIsIm9wdGlvbnMiLCJudW1Db25zdHJhaW50cyIsIm1vZGVsU3RyaW5nIiwiYmVuZGluZXNzX3JlZHVjdGlvbl9hY3RpdmUiLCJiZW5kaW5lc3NfcmVkdWN0aW9uX3R5cGUiLCJjcm9zc2luZ3NfcmVkdWN0aW9uX2FjdGl2ZSIsImNyb3NzaW5nc19yZWR1Y3Rpb25fd2VpZ2h0IiwiYmVuZGluZXNzX3JlZHVjdGlvbl93ZWlnaHQiLCJiZW5kaW5lc3NfYW5nbGVfb3B0aW1pemF0aW9uX3dlaWdodCIsImJ1ZmZlciIsInR5cGUiLCJta3hEaWN0IiwiYWRkQ3Jvc3NpbmdzUmVkdWN0aW9uIiwiYWRkU2ltcGxlQmVuZGluZXNzIiwiYWRkQmVuZGluZXNzUGx1c01heGltaXplQ3Jvc3NpbmdBbmdsZSIsInNwbGl0Iiwic2lnbiIsIm9wcHNpZ24iLCJ3YXJuIiwibGEiLCJyYSIsImMiLCJjX3NwbGl0IiwiTFBGb3JtdWxhdGlvbiIsImNyb3NzdmFyIiwiU3dlZXAiLCJzd2VlcFJpZ2h0Iiwic3dlZXBMZWZ0IiwiY3VyQ3Jvc3NlcyIsIm5ld0Nyb3NzZXMiLCJoZWFkZXIiLCJhdHRyTWFwcyIsInZpc2liaWxpdHkiLCJvdGhlclRhYmxlIiwiZmluZF9uZWdhdGl2ZV92ZXJ0aWNhbF9zcGFjZSIsIm1pblZhbCIsIkluZmluaXR5IiwidG1wdmFsIiwiZHJhd0dyYXBoIiwic3ZnIiwiYWxnb3JpdGhtIiwibGluZSIsImQzIiwiY3VydmUiLCJjdXJ2ZUJhc2lzIiwic3RyYWlnaHRsaW5lIiwibmVnYXRpdmVfdmVydF9zcGFjZSIsInZpc2ciLCJhcHBlbmQiLCJBcnJheSIsImtleXMiLCJzdHlsZSIsInRhYmxlZ3JvdXBzIiwic2VsZWN0QWxsIiwiZGF0YSIsImVudGVyIiwiaGVhZGVyX2hlaWdodCIsIm9uIiwidGV4dCIsImF0dHJncm91cHMiLCJnZXRfMXN0X2Nvb3JkIiwiZ2V0XzJuZF9jb29yZCIsImZpcnN0Iiwic2Vjb25kIiwiZWRnZUxhYmVscyIsImxhYmVsIiwic2VsZWN0Iiwibm9kZSIsInBhcmVudE5vZGUiLCJhcHBseV9pdGVyYXRpb24iLCJ0cmFuc2l0aW9uIiwiZHVyYXRpb24iLCJwYXJzZVF1ZXJ5IiwicXN0cmluZyIsInNjaGVtYXN0cmluZyIsImFzdCIsIk5vZGVTUUxQYXJzZXIiLCJQYXJzZXIiLCJhc3RpZnkiLCJzY2hlbWEiLCJzY2hlbWFEaWN0IiwidG5hbWUiLCJ0bGlzdCIsInJlYWRTY2hlbWEiLCJ0YWJsZWRlZnMiLCJ0YWJsZWNvdW50IiwiZnJvbSIsImFzIiwibmF2aWdhdGVFeHByIiwicHJldk9wZXJhdG9yIiwibmF2aWdhdGVXaGVyZSIsIndoZXJlIiwiZ2V0VGFibGVBdHRyaWJ1dGUiLCJnZXRUYWJsZUJ5SWQiLCJ0YWJsZUlkIiwic2xpY2UiLCJlcnJvciIsInciLCJwcmV2QXN0Iiwib3BlcmF0b3IiLCJjb2x1bW5zIiwiY29sdW1uIiwiZXhwciIsInZhbHVlIiwidGFibGVuYW1lMSIsInRhYmxlbmFtZTIiLCJhZGQiLCJhZGRHcm91cCIsIm5ld19hIiwiYXR0cm5hbWUiLCJhc3NpZ25UYWJsZXNUb0RlcHRocyIsImFycmFuZ2VUYWJsZXMiLCJjb2wiLCJ0bXBUYWJsZSIsInRtcEF0dHIiLCJzdGFydFRhYmxlIiwib3V0ZWRnZXMiLCJGVU5DX0VSUk9SX1RFWFQiLCJQTEFDRUhPTERFUiIsIndyYXBGbGFncyIsImFyZ3NUYWciLCJhcnJheVRhZyIsImJvb2xUYWciLCJkYXRlVGFnIiwiZXJyb3JUYWciLCJmdW5jVGFnIiwiZ2VuVGFnIiwibWFwVGFnIiwibnVtYmVyVGFnIiwib2JqZWN0VGFnIiwicmVnZXhwVGFnIiwic2V0VGFnIiwic3RyaW5nVGFnIiwic3ltYm9sVGFnIiwid2Vha01hcFRhZyIsImFycmF5QnVmZmVyVGFnIiwiZGF0YVZpZXdUYWciLCJmbG9hdDMyVGFnIiwiZmxvYXQ2NFRhZyIsImludDhUYWciLCJpbnQxNlRhZyIsImludDMyVGFnIiwidWludDhUYWciLCJ1aW50OENsYW1wZWRUYWciLCJ1aW50MTZUYWciLCJ1aW50MzJUYWciLCJyZUVtcHR5U3RyaW5nTGVhZGluZyIsInJlRW1wdHlTdHJpbmdNaWRkbGUiLCJyZUVtcHR5U3RyaW5nVHJhaWxpbmciLCJyZUVzY2FwZWRIdG1sIiwicmVVbmVzY2FwZWRIdG1sIiwicmVIYXNFc2NhcGVkSHRtbCIsIlJlZ0V4cCIsInNvdXJjZSIsInJlSGFzVW5lc2NhcGVkSHRtbCIsInJlRXNjYXBlIiwicmVFdmFsdWF0ZSIsInJlSW50ZXJwb2xhdGUiLCJyZUlzRGVlcFByb3AiLCJyZUlzUGxhaW5Qcm9wIiwicmVQcm9wTmFtZSIsInJlUmVnRXhwQ2hhciIsInJlSGFzUmVnRXhwQ2hhciIsInJlVHJpbSIsInJlVHJpbVN0YXJ0IiwicmVUcmltRW5kIiwicmVXcmFwQ29tbWVudCIsInJlV3JhcERldGFpbHMiLCJyZVNwbGl0RGV0YWlscyIsInJlQXNjaWlXb3JkIiwicmVFc2NhcGVDaGFyIiwicmVFc1RlbXBsYXRlIiwicmVGbGFncyIsInJlSXNCYWRIZXgiLCJyZUlzQmluYXJ5IiwicmVJc0hvc3RDdG9yIiwicmVJc09jdGFsIiwicmVJc1VpbnQiLCJyZUxhdGluIiwicmVOb01hdGNoIiwicmVVbmVzY2FwZWRTdHJpbmciLCJyc0NvbWJvUmFuZ2UiLCJyc0NvbWJvTWFya3NSYW5nZSIsInJzQnJlYWtSYW5nZSIsInJzTWF0aE9wUmFuZ2UiLCJyc0FzdHJhbCIsInJzQnJlYWsiLCJyc0NvbWJvIiwicnNEaWdpdHMiLCJyc0RpbmdiYXQiLCJyc0xvd2VyIiwicnNNaXNjIiwicnNGaXR6IiwicnNOb25Bc3RyYWwiLCJyc1JlZ2lvbmFsIiwicnNTdXJyUGFpciIsInJzVXBwZXIiLCJyc01pc2NMb3dlciIsInJzTWlzY1VwcGVyIiwicmVPcHRNb2QiLCJyc1NlcSIsImpvaW4iLCJyc0Vtb2ppIiwicnNTeW1ib2wiLCJyZUFwb3MiLCJyZUNvbWJvTWFyayIsInJlVW5pY29kZSIsInJlVW5pY29kZVdvcmQiLCJyZUhhc1VuaWNvZGUiLCJyZUhhc1VuaWNvZGVXb3JkIiwiY29udGV4dFByb3BzIiwidGVtcGxhdGVDb3VudGVyIiwidHlwZWRBcnJheVRhZ3MiLCJjbG9uZWFibGVUYWdzIiwic3RyaW5nRXNjYXBlcyIsIlxcIiwiJyIsIlxuIiwiXHIiLCLigKgiLCLigKkiLCJmcmVlUGFyc2VGbG9hdCIsImZyZWVQYXJzZUludCIsInBhcnNlSW50IiwiZnJlZUdsb2JhbCIsImdsb2JhbCIsImZyZWVTZWxmIiwic2VsZiIsInJvb3QiLCJGdW5jdGlvbiIsImZyZWVFeHBvcnRzIiwiZXhwb3J0cyIsIm5vZGVUeXBlIiwiZnJlZU1vZHVsZSIsIm1vZHVsZSIsIm1vZHVsZUV4cG9ydHMiLCJmcmVlUHJvY2VzcyIsInByb2Nlc3MiLCJub2RlVXRpbCIsInR5cGVzIiwicmVxdWlyZSIsImJpbmRpbmciLCJub2RlSXNBcnJheUJ1ZmZlciIsImlzQXJyYXlCdWZmZXIiLCJub2RlSXNEYXRlIiwiaXNEYXRlIiwibm9kZUlzTWFwIiwiaXNNYXAiLCJub2RlSXNSZWdFeHAiLCJpc1JlZ0V4cCIsIm5vZGVJc1NldCIsImlzU2V0Iiwibm9kZUlzVHlwZWRBcnJheSIsImlzVHlwZWRBcnJheSIsImZ1bmMiLCJ0aGlzQXJnIiwiYXJncyIsImNhbGwiLCJhcnJheUFnZ3JlZ2F0b3IiLCJzZXR0ZXIiLCJpdGVyYXRlZSIsImFycmF5RWFjaCIsImFycmF5RWFjaFJpZ2h0IiwiYXJyYXlFdmVyeSIsInByZWRpY2F0ZSIsImFycmF5RmlsdGVyIiwicmVzSW5kZXgiLCJhcnJheUluY2x1ZGVzIiwiYmFzZUluZGV4T2YiLCJhcnJheUluY2x1ZGVzV2l0aCIsImNvbXBhcmF0b3IiLCJhcnJheU1hcCIsImFycmF5UHVzaCIsInZhbHVlcyIsIm9mZnNldCIsImFycmF5UmVkdWNlIiwiaW5pdEFjY3VtIiwiYXJyYXlSZWR1Y2VSaWdodCIsImFycmF5U29tZSIsImFzY2lpU2l6ZSIsImJhc2VQcm9wZXJ0eSIsImJhc2VGaW5kS2V5IiwiY29sbGVjdGlvbiIsImVhY2hGdW5jIiwia2V5IiwiYmFzZUZpbmRJbmRleCIsImZyb21JbmRleCIsImZyb21SaWdodCIsInN0cmljdEluZGV4T2YiLCJiYXNlSXNOYU4iLCJiYXNlSW5kZXhPZldpdGgiLCJiYXNlTWVhbiIsImJhc2VTdW0iLCJvYmplY3QiLCJiYXNlUHJvcGVydHlPZiIsImJhc2VSZWR1Y2UiLCJjdXJyZW50IiwiYmFzZVRpbWVzIiwibiIsImJhc2VVbmFyeSIsImJhc2VWYWx1ZXMiLCJwcm9wcyIsImNhY2hlSGFzIiwiY2FjaGUiLCJoYXMiLCJjaGFyc1N0YXJ0SW5kZXgiLCJzdHJTeW1ib2xzIiwiY2hyU3ltYm9scyIsImNoYXJzRW5kSW5kZXgiLCJjb3VudEhvbGRlcnMiLCJwbGFjZWhvbGRlciIsImRlYnVyckxldHRlciIsIsOAIiwiw4EiLCLDgiIsIsODIiwiw4QiLCLDhSIsIsOgIiwiw6EiLCLDoiIsIsOjIiwiw6QiLCLDpSIsIsOHIiwiw6ciLCLDkCIsIsOwIiwiw4giLCLDiSIsIsOKIiwiw4siLCLDqCIsIsOpIiwiw6oiLCLDqyIsIsOMIiwiw40iLCLDjiIsIsOPIiwiw6wiLCLDrSIsIsOuIiwiw68iLCLDkSIsIsOxIiwiw5IiLCLDkyIsIsOUIiwiw5UiLCLDliIsIsOYIiwiw7IiLCLDsyIsIsO0Iiwiw7UiLCLDtiIsIsO4Iiwiw5kiLCLDmiIsIsObIiwiw5wiLCLDuSIsIsO6Iiwiw7siLCLDvCIsIsOdIiwiw70iLCLDvyIsIsOGIiwiw6YiLCLDniIsIsO+Iiwiw58iLCLEgCIsIsSCIiwixIQiLCLEgSIsIsSDIiwixIUiLCLEhiIsIsSIIiwixIoiLCLEjCIsIsSHIiwixIkiLCLEiyIsIsSNIiwixI4iLCLEkCIsIsSPIiwixJEiLCLEkiIsIsSUIiwixJYiLCLEmCIsIsSaIiwixJMiLCLElSIsIsSXIiwixJkiLCLEmyIsIsScIiwixJ4iLCLEoCIsIsSiIiwixJ0iLCLEnyIsIsShIiwixKMiLCLEpCIsIsSmIiwixKUiLCLEpyIsIsSoIiwixKoiLCLErCIsIsSuIiwixLAiLCLEqSIsIsSrIiwixK0iLCLEryIsIsSxIiwixLQiLCLEtSIsIsS2IiwixLciLCLEuCIsIsS5IiwixLsiLCLEvSIsIsS/IiwixYEiLCLEuiIsIsS8IiwixL4iLCLFgCIsIsWCIiwixYMiLCLFhSIsIsWHIiwixYoiLCLFhCIsIsWGIiwixYgiLCLFiyIsIsWMIiwixY4iLCLFkCIsIsWNIiwixY8iLCLFkSIsIsWUIiwixZYiLCLFmCIsIsWVIiwixZciLCLFmSIsIsWaIiwixZwiLCLFniIsIsWgIiwixZsiLCLFnSIsIsWfIiwixaEiLCLFoiIsIsWkIiwixaYiLCLFoyIsIsWlIiwixaciLCLFqCIsIsWqIiwixawiLCLFriIsIsWwIiwixbIiLCLFqSIsIsWrIiwixa0iLCLFryIsIsWxIiwixbMiLCLFtCIsIsW1IiwixbYiLCLFtyIsIsW4IiwixbkiLCLFuyIsIsW9IiwixboiLCLFvCIsIsW+IiwixLIiLCLEsyIsIsWSIiwixZMiLCLFiSIsIsW/IiwiZXNjYXBlSHRtbENoYXIiLCImIiwiPCIsIj4iLCJcIiIsImVzY2FwZVN0cmluZ0NoYXIiLCJjaHIiLCJoYXNVbmljb2RlIiwic3RyaW5nIiwidGVzdCIsIm1hcFRvQXJyYXkiLCJzaXplIiwiZm9yRWFjaCIsIm92ZXJBcmciLCJ0cmFuc2Zvcm0iLCJhcmciLCJyZXBsYWNlSG9sZGVycyIsInNldFRvQXJyYXkiLCJzZXQiLCJzZXRUb1BhaXJzIiwic3RyaW5nU2l6ZSIsImxhc3RJbmRleCIsInVuaWNvZGVTaXplIiwic3RyaW5nVG9BcnJheSIsIm1hdGNoIiwidW5pY29kZVRvQXJyYXkiLCJhc2NpaVRvQXJyYXkiLCJ1bmVzY2FwZUh0bWxDaGFyIiwiJmFtcDsiLCImbHQ7IiwiJmd0OyIsIiZxdW90OyIsIiYjMzk7IiwicnVuSW5Db250ZXh0IiwiY29udGV4dCIsInVpZCIsImRlZmF1bHRzIiwicGljayIsIkVycm9yIiwiU3RyaW5nIiwiVHlwZUVycm9yIiwiYXJyYXlQcm90byIsInByb3RvdHlwZSIsImZ1bmNQcm90byIsIm9iamVjdFByb3RvIiwiY29yZUpzRGF0YSIsImZ1bmNUb1N0cmluZyIsInRvU3RyaW5nIiwiaGFzT3duUHJvcGVydHkiLCJpZENvdW50ZXIiLCJtYXNrU3JjS2V5IiwiZXhlYyIsIklFX1BST1RPIiwibmF0aXZlT2JqZWN0VG9TdHJpbmciLCJvYmplY3RDdG9yU3RyaW5nIiwib2xkRGFzaCIsInJlSXNOYXRpdmUiLCJCdWZmZXIiLCJTeW1ib2wiLCJVaW50OEFycmF5IiwiYWxsb2NVbnNhZmUiLCJnZXRQcm90b3R5cGUiLCJnZXRQcm90b3R5cGVPZiIsIm9iamVjdENyZWF0ZSIsImNyZWF0ZSIsInByb3BlcnR5SXNFbnVtZXJhYmxlIiwic3ByZWFkYWJsZVN5bWJvbCIsImlzQ29uY2F0U3ByZWFkYWJsZSIsInN5bUl0ZXJhdG9yIiwiaXRlcmF0b3IiLCJzeW1Ub1N0cmluZ1RhZyIsInRvU3RyaW5nVGFnIiwiZGVmaW5lUHJvcGVydHkiLCJnZXROYXRpdmUiLCJjdHhDbGVhclRpbWVvdXQiLCJjbGVhclRpbWVvdXQiLCJjdHhOb3ciLCJub3ciLCJjdHhTZXRUaW1lb3V0Iiwic2V0VGltZW91dCIsIm5hdGl2ZUNlaWwiLCJjZWlsIiwibmF0aXZlRmxvb3IiLCJuYXRpdmVHZXRTeW1ib2xzIiwiZ2V0T3duUHJvcGVydHlTeW1ib2xzIiwibmF0aXZlSXNCdWZmZXIiLCJpc0J1ZmZlciIsIm5hdGl2ZUlzRmluaXRlIiwiaXNGaW5pdGUiLCJuYXRpdmVKb2luIiwibmF0aXZlS2V5cyIsIm5hdGl2ZU1heCIsIm5hdGl2ZU1pbiIsIm5hdGl2ZU5vdyIsIm5hdGl2ZVBhcnNlSW50IiwibmF0aXZlUmFuZG9tIiwicmFuZG9tIiwibmF0aXZlUmV2ZXJzZSIsInJldmVyc2UiLCJEYXRhVmlldyIsIk1hcCIsIlByb21pc2UiLCJTZXQiLCJXZWFrTWFwIiwibmF0aXZlQ3JlYXRlIiwibWV0YU1hcCIsInJlYWxOYW1lcyIsImRhdGFWaWV3Q3RvclN0cmluZyIsInRvU291cmNlIiwibWFwQ3RvclN0cmluZyIsInByb21pc2VDdG9yU3RyaW5nIiwic2V0Q3RvclN0cmluZyIsIndlYWtNYXBDdG9yU3RyaW5nIiwic3ltYm9sUHJvdG8iLCJzeW1ib2xWYWx1ZU9mIiwidmFsdWVPZiIsInN5bWJvbFRvU3RyaW5nIiwibG9kYXNoIiwiaXNPYmplY3RMaWtlIiwiaXNBcnJheSIsIkxhenlXcmFwcGVyIiwiTG9kYXNoV3JhcHBlciIsIndyYXBwZXJDbG9uZSIsImJhc2VDcmVhdGUiLCJwcm90byIsImlzT2JqZWN0IiwiYmFzZUxvZGFzaCIsImNoYWluQWxsIiwiX193cmFwcGVkX18iLCJfX2FjdGlvbnNfXyIsIl9fY2hhaW5fXyIsIl9faW5kZXhfXyIsIl9fdmFsdWVzX18iLCJfX2Rpcl9fIiwiX19maWx0ZXJlZF9fIiwiX19pdGVyYXRlZXNfXyIsIl9fdGFrZUNvdW50X18iLCJfX3ZpZXdzX18iLCJIYXNoIiwiZW50cmllcyIsImNsZWFyIiwiZW50cnkiLCJMaXN0Q2FjaGUiLCJNYXBDYWNoZSIsIlNldENhY2hlIiwiX19kYXRhX18iLCJTdGFjayIsImFycmF5TGlrZUtleXMiLCJpbmhlcml0ZWQiLCJpc0FyciIsImlzQXJnIiwiaXNBcmd1bWVudHMiLCJpc0J1ZmYiLCJpc1R5cGUiLCJza2lwSW5kZXhlcyIsImlzSW5kZXgiLCJhcnJheVNhbXBsZSIsImJhc2VSYW5kb20iLCJhcnJheVNhbXBsZVNpemUiLCJzaHVmZmxlU2VsZiIsImNvcHlBcnJheSIsImJhc2VDbGFtcCIsImFycmF5U2h1ZmZsZSIsImFzc2lnbk1lcmdlVmFsdWUiLCJlcSIsImJhc2VBc3NpZ25WYWx1ZSIsImFzc2lnblZhbHVlIiwib2JqVmFsdWUiLCJhc3NvY0luZGV4T2YiLCJiYXNlQWdncmVnYXRvciIsImJhc2VFYWNoIiwiYmFzZUFzc2lnbiIsImNvcHlPYmplY3QiLCJjb25maWd1cmFibGUiLCJlbnVtZXJhYmxlIiwid3JpdGFibGUiLCJiYXNlQXQiLCJwYXRocyIsInNraXAiLCJnZXQiLCJudW1iZXIiLCJsb3dlciIsInVwcGVyIiwiYmFzZUNsb25lIiwiYml0bWFzayIsImN1c3RvbWl6ZXIiLCJzdGFjayIsImlzRGVlcCIsImlzRmxhdCIsImlzRnVsbCIsImNvbnN0cnVjdG9yIiwiaW5wdXQiLCJpbml0Q2xvbmVBcnJheSIsInRhZyIsImdldFRhZyIsImlzRnVuYyIsImNsb25lQnVmZmVyIiwiaW5pdENsb25lT2JqZWN0IiwiZ2V0U3ltYm9sc0luIiwiY29weVN5bWJvbHNJbiIsImtleXNJbiIsImJhc2VBc3NpZ25JbiIsImdldFN5bWJvbHMiLCJjb3B5U3ltYm9scyIsIkN0b3IiLCJjbG9uZUFycmF5QnVmZmVyIiwiZGF0YVZpZXciLCJieXRlT2Zmc2V0IiwiYnl0ZUxlbmd0aCIsImNsb25lRGF0YVZpZXciLCJjbG9uZVR5cGVkQXJyYXkiLCJyZWdleHAiLCJjbG9uZVJlZ0V4cCIsInN5bWJvbCIsImluaXRDbG9uZUJ5VGFnIiwic3RhY2tlZCIsInN1YlZhbHVlIiwiZ2V0QWxsS2V5c0luIiwiZ2V0QWxsS2V5cyIsImJhc2VDb25mb3Jtc1RvIiwiYmFzZURlbGF5Iiwid2FpdCIsImJhc2VEaWZmZXJlbmNlIiwiaW5jbHVkZXMiLCJpc0NvbW1vbiIsInZhbHVlc0xlbmd0aCIsIm91dGVyIiwiY29tcHV0ZWQiLCJ2YWx1ZXNJbmRleCIsInRlbXBsYXRlU2V0dGluZ3MiLCJlc2NhcGUiLCJldmFsdWF0ZSIsImludGVycG9sYXRlIiwidmFyaWFibGUiLCJpbXBvcnRzIiwicG9wIiwiaGFzaCIsImdldE1hcERhdGEiLCJwYWlycyIsIkxBUkdFX0FSUkFZX1NJWkUiLCJjcmVhdGVCYXNlRWFjaCIsImJhc2VGb3JPd24iLCJiYXNlRWFjaFJpZ2h0IiwiYmFzZUZvck93blJpZ2h0IiwiYmFzZUV2ZXJ5IiwiYmFzZUV4dHJlbXVtIiwiaXNTeW1ib2wiLCJiYXNlRmlsdGVyIiwiYmFzZUZsYXR0ZW4iLCJpc1N0cmljdCIsImlzRmxhdHRlbmFibGUiLCJiYXNlRm9yIiwiY3JlYXRlQmFzZUZvciIsImJhc2VGb3JSaWdodCIsImJhc2VGdW5jdGlvbnMiLCJpc0Z1bmN0aW9uIiwiYmFzZUdldCIsInBhdGgiLCJjYXN0UGF0aCIsInRvS2V5IiwiYmFzZUdldEFsbEtleXMiLCJrZXlzRnVuYyIsInN5bWJvbHNGdW5jIiwiYmFzZUdldFRhZyIsImlzT3duIiwidW5tYXNrZWQiLCJnZXRSYXdUYWciLCJvYmplY3RUb1N0cmluZyIsImJhc2VHdCIsImJhc2VIYXMiLCJiYXNlSGFzSW4iLCJiYXNlSW50ZXJzZWN0aW9uIiwiYXJyYXlzIiwib3RoTGVuZ3RoIiwib3RoSW5kZXgiLCJjYWNoZXMiLCJtYXhMZW5ndGgiLCJzZWVuIiwiYmFzZUludm9rZSIsInBhcmVudCIsImxhc3QiLCJiYXNlSXNBcmd1bWVudHMiLCJiYXNlSXNFcXVhbCIsImVxdWFsRnVuYyIsIm9iaklzQXJyIiwib3RoSXNBcnIiLCJvYmpUYWciLCJvdGhUYWciLCJvYmpJc09iaiIsIm90aElzT2JqIiwiaXNTYW1lVGFnIiwiZXF1YWxBcnJheXMiLCJtZXNzYWdlIiwiY29udmVydCIsImlzUGFydGlhbCIsImVxdWFsQnlUYWciLCJvYmpJc1dyYXBwZWQiLCJvdGhJc1dyYXBwZWQiLCJvYmpVbndyYXBwZWQiLCJvdGhVbndyYXBwZWQiLCJvYmpQcm9wcyIsIm9iakxlbmd0aCIsInNraXBDdG9yIiwib3RoVmFsdWUiLCJjb21wYXJlZCIsIm9iakN0b3IiLCJvdGhDdG9yIiwiZXF1YWxPYmplY3RzIiwiYmFzZUlzRXF1YWxEZWVwIiwiYmFzZUlzTWF0Y2giLCJtYXRjaERhdGEiLCJub0N1c3RvbWl6ZXIiLCJzcmNWYWx1ZSIsIkNPTVBBUkVfUEFSVElBTF9GTEFHIiwiYmFzZUlzTmF0aXZlIiwiYmFzZUl0ZXJhdGVlIiwiaWRlbnRpdHkiLCJiYXNlTWF0Y2hlc1Byb3BlcnR5IiwiYmFzZU1hdGNoZXMiLCJwcm9wZXJ0eSIsImJhc2VLZXlzIiwiaXNQcm90b3R5cGUiLCJiYXNlS2V5c0luIiwibmF0aXZlS2V5c0luIiwiaXNQcm90byIsImJhc2VMdCIsImJhc2VNYXAiLCJpc0FycmF5TGlrZSIsImdldE1hdGNoRGF0YSIsIm1hdGNoZXNTdHJpY3RDb21wYXJhYmxlIiwiaXNLZXkiLCJpc1N0cmljdENvbXBhcmFibGUiLCJoYXNJbiIsImJhc2VNZXJnZSIsInNyY0luZGV4IiwibWVyZ2VGdW5jIiwic2FmZUdldCIsIm5ld1ZhbHVlIiwiaXNUeXBlZCIsImlzQXJyYXlMaWtlT2JqZWN0IiwiaXNQbGFpbk9iamVjdCIsInRvUGxhaW5PYmplY3QiLCJiYXNlTWVyZ2VEZWVwIiwiYmFzZU50aCIsImJhc2VPcmRlckJ5IiwiaXRlcmF0ZWVzIiwib3JkZXJzIiwiZ2V0SXRlcmF0ZWUiLCJjb21wYXJlciIsImJhc2VTb3J0QnkiLCJjcml0ZXJpYSIsIm9iakNyaXRlcmlhIiwib3RoQ3JpdGVyaWEiLCJvcmRlcnNMZW5ndGgiLCJjb21wYXJlQXNjZW5kaW5nIiwiY29tcGFyZU11bHRpcGxlIiwiYmFzZVBpY2tCeSIsImJhc2VTZXQiLCJiYXNlUHVsbEFsbCIsImJhc2VQdWxsQXQiLCJpbmRleGVzIiwicHJldmlvdXMiLCJiYXNlVW5zZXQiLCJiYXNlUmVwZWF0IiwiYmFzZVJlc3QiLCJzdGFydCIsInNldFRvU3RyaW5nIiwib3ZlclJlc3QiLCJiYXNlU2FtcGxlIiwiYmFzZVNhbXBsZVNpemUiLCJuZXN0ZWQiLCJiYXNlU2V0RGF0YSIsImJhc2VTZXRUb1N0cmluZyIsImNvbnN0YW50IiwiYmFzZVNodWZmbGUiLCJiYXNlU2xpY2UiLCJlbmQiLCJiYXNlU29tZSIsImJhc2VTb3J0ZWRJbmRleCIsInJldEhpZ2hlc3QiLCJsb3ciLCJoaWdoIiwiTUFYX0FSUkFZX0xFTkdUSCIsIm1pZCIsImJhc2VTb3J0ZWRJbmRleEJ5IiwidmFsSXNOYU4iLCJ2YWxJc051bGwiLCJ2YWxJc1N5bWJvbCIsInZhbElzVW5kZWZpbmVkIiwib3RoSXNEZWZpbmVkIiwib3RoSXNOdWxsIiwib3RoSXNSZWZsZXhpdmUiLCJvdGhJc1N5bWJvbCIsInNldExvdyIsImJhc2VTb3J0ZWRVbmlxIiwiYmFzZVRvTnVtYmVyIiwiYmFzZVRvU3RyaW5nIiwiYmFzZVVuaXEiLCJjcmVhdGVTZXQiLCJzZWVuSW5kZXgiLCJiYXNlVXBkYXRlIiwidXBkYXRlciIsImJhc2VXaGlsZSIsImlzRHJvcCIsImJhc2VXcmFwcGVyVmFsdWUiLCJhY3Rpb25zIiwiYWN0aW9uIiwiYmFzZVhvciIsImJhc2VaaXBPYmplY3QiLCJhc3NpZ25GdW5jIiwidmFsc0xlbmd0aCIsImNhc3RBcnJheUxpa2VPYmplY3QiLCJjYXN0RnVuY3Rpb24iLCJzdHJpbmdUb1BhdGgiLCJjYXN0UmVzdCIsImNhc3RTbGljZSIsImNvcHkiLCJhcnJheUJ1ZmZlciIsInR5cGVkQXJyYXkiLCJ2YWxJc0RlZmluZWQiLCJ2YWxJc1JlZmxleGl2ZSIsImNvbXBvc2VBcmdzIiwicGFydGlhbHMiLCJob2xkZXJzIiwiaXNDdXJyaWVkIiwiYXJnc0luZGV4IiwiYXJnc0xlbmd0aCIsImhvbGRlcnNMZW5ndGgiLCJsZWZ0TGVuZ3RoIiwicmFuZ2VMZW5ndGgiLCJpc1VuY3VycmllZCIsImNvbXBvc2VBcmdzUmlnaHQiLCJob2xkZXJzSW5kZXgiLCJyaWdodExlbmd0aCIsImlzTmV3IiwiY3JlYXRlQWdncmVnYXRvciIsImluaXRpYWxpemVyIiwiY3JlYXRlQXNzaWduZXIiLCJhc3NpZ25lciIsInNvdXJjZXMiLCJndWFyZCIsImlzSXRlcmF0ZWVDYWxsIiwiaXRlcmFibGUiLCJjcmVhdGVDYXNlRmlyc3QiLCJtZXRob2ROYW1lIiwiY2hhckF0IiwidHJhaWxpbmciLCJjcmVhdGVDb21wb3VuZGVyIiwiY2FsbGJhY2siLCJ3b3JkcyIsImRlYnVyciIsImNyZWF0ZUN0b3IiLCJhcmd1bWVudHMiLCJ0aGlzQmluZGluZyIsImNyZWF0ZUZpbmQiLCJmaW5kSW5kZXhGdW5jIiwiY3JlYXRlRmxvdyIsImZsYXRSZXN0IiwiZnVuY3MiLCJwcmVyZXEiLCJ0aHJ1Iiwid3JhcHBlciIsImdldEZ1bmNOYW1lIiwiZnVuY05hbWUiLCJnZXREYXRhIiwiaXNMYXppYWJsZSIsInBsYW50IiwiY3JlYXRlSHlicmlkIiwicGFydGlhbHNSaWdodCIsImhvbGRlcnNSaWdodCIsImFyZ1BvcyIsImFyeSIsImFyaXR5IiwiaXNBcnkiLCJpc0JpbmQiLCJpc0JpbmRLZXkiLCJpc0ZsaXAiLCJnZXRIb2xkZXIiLCJob2xkZXJzQ291bnQiLCJuZXdIb2xkZXJzIiwiY3JlYXRlUmVjdXJyeSIsImZuIiwiY3JlYXRlSW52ZXJ0ZXIiLCJ0b0l0ZXJhdGVlIiwiYmFzZUludmVydGVyIiwiY3JlYXRlTWF0aE9wZXJhdGlvbiIsImRlZmF1bHRWYWx1ZSIsImNyZWF0ZU92ZXIiLCJhcnJheUZ1bmMiLCJjcmVhdGVQYWRkaW5nIiwiY2hhcnMiLCJjaGFyc0xlbmd0aCIsImNyZWF0ZVJhbmdlIiwic3RlcCIsInRvRmluaXRlIiwiYmFzZVJhbmdlIiwiY3JlYXRlUmVsYXRpb25hbE9wZXJhdGlvbiIsInRvTnVtYmVyIiwid3JhcEZ1bmMiLCJpc0N1cnJ5IiwibmV3RGF0YSIsInNldERhdGEiLCJzZXRXcmFwVG9TdHJpbmciLCJjcmVhdGVSb3VuZCIsInByZWNpc2lvbiIsInRvSW50ZWdlciIsInBhaXIiLCJub29wIiwiY3JlYXRlVG9QYWlycyIsImJhc2VUb1BhaXJzIiwiY3JlYXRlV3JhcCIsInNyY0JpdG1hc2siLCJuZXdCaXRtYXNrIiwiaXNDb21ibyIsIm1lcmdlRGF0YSIsImNyZWF0ZUN1cnJ5IiwiY3JlYXRlUGFydGlhbCIsImNyZWF0ZUJpbmQiLCJjdXN0b21EZWZhdWx0c0Fzc2lnbkluIiwiY3VzdG9tRGVmYXVsdHNNZXJnZSIsImN1c3RvbU9taXRDbG9uZSIsImFyckxlbmd0aCIsImFyclZhbHVlIiwiZmxhdHRlbiIsIm90aGVyRnVuYyIsImdldFZhbHVlIiwic3R1YkFycmF5IiwiaGFzUGF0aCIsImhhc0Z1bmMiLCJpc0xlbmd0aCIsIkFycmF5QnVmZmVyIiwicmVzb2x2ZSIsImN0b3JTdHJpbmciLCJpc01hc2thYmxlIiwic3R1YkZhbHNlIiwib3RoZXJBcmdzIiwib2xkQXJyYXkiLCJzaG9ydE91dCIsInJlZmVyZW5jZSIsImRldGFpbHMiLCJpbnNlcnRXcmFwRGV0YWlscyIsInVwZGF0ZVdyYXBEZXRhaWxzIiwiZ2V0V3JhcERldGFpbHMiLCJsYXN0Q2FsbGVkIiwic3RhbXAiLCJyZW1haW5pbmciLCJyYW5kIiwibWVtb2l6ZSIsIm1lbW9pemVDYXBwZWQiLCJjaGFyQ29kZUF0IiwicXVvdGUiLCJzdWJTdHJpbmciLCJjbG9uZSIsImRpZmZlcmVuY2UiLCJkaWZmZXJlbmNlQnkiLCJkaWZmZXJlbmNlV2l0aCIsImZpbmRJbmRleCIsImZpbmRMYXN0SW5kZXgiLCJoZWFkIiwiaW50ZXJzZWN0aW9uIiwibWFwcGVkIiwiaW50ZXJzZWN0aW9uQnkiLCJpbnRlcnNlY3Rpb25XaXRoIiwicHVsbCIsInB1bGxBbGwiLCJwdWxsQXQiLCJ1bmlvbiIsInVuaW9uQnkiLCJ1bmlvbldpdGgiLCJ1bnppcCIsInVuemlwV2l0aCIsIndpdGhvdXQiLCJ4b3IiLCJ4b3JCeSIsInhvcldpdGgiLCJ6aXAiLCJ6aXBXaXRoIiwiY2hhaW4iLCJpbnRlcmNlcHRvciIsIndyYXBwZXJBdCIsImNvdW50QnkiLCJmaW5kTGFzdCIsImZvckVhY2hSaWdodCIsImdyb3VwQnkiLCJpbnZva2VNYXAiLCJrZXlCeSIsInBhcnRpdGlvbiIsInNvcnRCeSIsImJlZm9yZSIsImJpbmQiLCJiaW5kS2V5IiwiV1JBUF9CSU5EX0ZMQUciLCJkZWJvdW5jZSIsImxhc3RBcmdzIiwibGFzdFRoaXMiLCJtYXhXYWl0IiwidGltZXJJZCIsImxhc3RDYWxsVGltZSIsImxhc3RJbnZva2VUaW1lIiwibGVhZGluZyIsIm1heGluZyIsImludm9rZUZ1bmMiLCJ0aW1lIiwibGVhZGluZ0VkZ2UiLCJ0aW1lckV4cGlyZWQiLCJzaG91bGRJbnZva2UiLCJ0aW1lU2luY2VMYXN0Q2FsbCIsInRyYWlsaW5nRWRnZSIsInRpbWVXYWl0aW5nIiwicmVtYWluaW5nV2FpdCIsImRlYm91bmNlZCIsImlzSW52b2tpbmciLCJjYW5jZWwiLCJmbHVzaCIsImRlZmVyIiwiZGVsYXkiLCJyZXNvbHZlciIsIm1lbW9pemVkIiwiQ2FjaGUiLCJuZWdhdGUiLCJvdmVyQXJncyIsInRyYW5zZm9ybXMiLCJmdW5jc0xlbmd0aCIsInBhcnRpYWwiLCJwYXJ0aWFsUmlnaHQiLCJyZWFyZyIsImd0IiwiZ3RlIiwiaXNFcnJvciIsImlzSW50ZWdlciIsImlzTnVtYmVyIiwiaXNTdHJpbmciLCJsdCIsImx0ZSIsInRvQXJyYXkiLCJuZXh0IiwiZG9uZSIsIml0ZXJhdG9yVG9BcnJheSIsInJlbWFpbmRlciIsInRvTGVuZ3RoIiwiaXNCaW5hcnkiLCJhc3NpZ25JbiIsImFzc2lnbkluV2l0aCIsImFzc2lnbldpdGgiLCJhdCIsInByb3BzSW5kZXgiLCJwcm9wc0xlbmd0aCIsImRlZmF1bHRzRGVlcCIsIm1lcmdlV2l0aCIsImludmVydCIsImludmVydEJ5IiwiaW52b2tlIiwibWVyZ2UiLCJvbWl0IiwiQ0xPTkVfREVFUF9GTEFHIiwiYmFzZVBpY2siLCJwaWNrQnkiLCJwcm9wIiwidG9QYWlycyIsInRvUGFpcnNJbiIsImNhbWVsQ2FzZSIsIndvcmQiLCJ0b0xvd2VyQ2FzZSIsImNhcGl0YWxpemUiLCJ1cHBlckZpcnN0Iiwia2ViYWJDYXNlIiwibG93ZXJDYXNlIiwibG93ZXJGaXJzdCIsInNuYWtlQ2FzZSIsInN0YXJ0Q2FzZSIsInVwcGVyQ2FzZSIsInRvVXBwZXJDYXNlIiwicGF0dGVybiIsImhhc1VuaWNvZGVXb3JkIiwidW5pY29kZVdvcmRzIiwiYXNjaWlXb3JkcyIsImF0dGVtcHQiLCJiaW5kQWxsIiwibWV0aG9kTmFtZXMiLCJmbG93IiwiZmxvd1JpZ2h0IiwibWV0aG9kIiwibWV0aG9kT2YiLCJtaXhpbiIsIm92ZXIiLCJvdmVyRXZlcnkiLCJvdmVyU29tZSIsImJhc2VQcm9wZXJ0eURlZXAiLCJyYW5nZSIsInJhbmdlUmlnaHQiLCJhdWdlbmQiLCJhZGRlbmQiLCJkaXZpZGUiLCJkaXZpZGVuZCIsImRpdmlzb3IiLCJtdWx0aXBseSIsIm11bHRpcGxpZXIiLCJtdWx0aXBsaWNhbmQiLCJzdWJ0cmFjdCIsIm1pbnVlbmQiLCJzdWJ0cmFoZW5kIiwiYWZ0ZXIiLCJjYXN0QXJyYXkiLCJjaHVuayIsImNvbXBhY3QiLCJjb25kIiwiY29uZm9ybXMiLCJiYXNlQ29uZm9ybXMiLCJwcm9wZXJ0aWVzIiwiY3VycnkiLCJjdXJyeVJpZ2h0IiwiZHJvcCIsImRyb3BSaWdodCIsImRyb3BSaWdodFdoaWxlIiwiZHJvcFdoaWxlIiwiZmlsbCIsImJhc2VGaWxsIiwiZmxhdE1hcCIsImZsYXRNYXBEZWVwIiwiZmxhdE1hcERlcHRoIiwiZmxhdHRlbkRlZXAiLCJmbGF0dGVuRGVwdGgiLCJmbGlwIiwiZnJvbVBhaXJzIiwiZnVuY3Rpb25zIiwiZnVuY3Rpb25zSW4iLCJpbml0aWFsIiwibWFwS2V5cyIsIm1hcFZhbHVlcyIsIm1hdGNoZXMiLCJtYXRjaGVzUHJvcGVydHkiLCJudGhBcmciLCJvbWl0QnkiLCJvbmNlIiwib3JkZXJCeSIsInByb3BlcnR5T2YiLCJwdWxsQWxsQnkiLCJwdWxsQWxsV2l0aCIsInJlamVjdCIsInJlbW92ZSIsInJlc3QiLCJzYW1wbGVTaXplIiwic2V0V2l0aCIsInNodWZmbGUiLCJzb3J0ZWRVbmlxIiwic29ydGVkVW5pcUJ5Iiwic2VwYXJhdG9yIiwibGltaXQiLCJzcHJlYWQiLCJ0YWlsIiwidGFrZSIsInRha2VSaWdodCIsInRha2VSaWdodFdoaWxlIiwidGFrZVdoaWxlIiwidGFwIiwidGhyb3R0bGUiLCJ0b1BhdGgiLCJpc0Fyckxpa2UiLCJ1bmFyeSIsInVuaXEiLCJ1bmlxQnkiLCJ1bmlxV2l0aCIsInVuc2V0IiwidXBkYXRlIiwidXBkYXRlV2l0aCIsInZhbHVlc0luIiwid3JhcCIsInppcE9iamVjdCIsInppcE9iamVjdERlZXAiLCJlbnRyaWVzSW4iLCJleHRlbmQiLCJleHRlbmRXaXRoIiwiY2xhbXAiLCJjbG9uZURlZXBXaXRoIiwiY2xvbmVXaXRoIiwiY29uZm9ybXNUbyIsImRlZmF1bHRUbyIsImVuZHNXaXRoIiwidGFyZ2V0IiwicG9zaXRpb24iLCJlc2NhcGVSZWdFeHAiLCJldmVyeSIsImZpbmRLZXkiLCJmaW5kTGFzdEtleSIsImZvckluIiwiZm9ySW5SaWdodCIsImZvck93biIsImZvck93blJpZ2h0IiwiaW5SYW5nZSIsImJhc2VJblJhbmdlIiwiaXNCb29sZWFuIiwiaXNFbGVtZW50IiwiaXNFbXB0eSIsImlzRXF1YWwiLCJpc0VxdWFsV2l0aCIsImlzTWF0Y2giLCJpc01hdGNoV2l0aCIsImlzTmF0aXZlIiwiaXNOaWwiLCJpc051bGwiLCJpc1NhZmVJbnRlZ2VyIiwiaXNVbmRlZmluZWQiLCJpc1dlYWtNYXAiLCJpc1dlYWtTZXQiLCJsYXN0SW5kZXhPZiIsInN0cmljdExhc3RJbmRleE9mIiwibWF4QnkiLCJtZWFuIiwibWVhbkJ5IiwibWluQnkiLCJzdHViT2JqZWN0Iiwic3R1YlN0cmluZyIsInN0dWJUcnVlIiwibnRoIiwibm9Db25mbGljdCIsInBhZCIsInN0ckxlbmd0aCIsInBhZEVuZCIsInBhZFN0YXJ0IiwicmFkaXgiLCJmbG9hdGluZyIsInRlbXAiLCJyZWR1Y2VSaWdodCIsInJlcGVhdCIsInNhbXBsZSIsInNvbWUiLCJzb3J0ZWRJbmRleCIsInNvcnRlZEluZGV4QnkiLCJzb3J0ZWRJbmRleE9mIiwic29ydGVkTGFzdEluZGV4Iiwic29ydGVkTGFzdEluZGV4QnkiLCJzb3J0ZWRMYXN0SW5kZXhPZiIsInN0YXJ0c1dpdGgiLCJzdW0iLCJzdW1CeSIsInRlbXBsYXRlIiwic2V0dGluZ3MiLCJpc0VzY2FwaW5nIiwiaXNFdmFsdWF0aW5nIiwiaW1wb3J0c0tleXMiLCJpbXBvcnRzVmFsdWVzIiwicmVEZWxpbWl0ZXJzIiwic291cmNlVVJMIiwiZXNjYXBlVmFsdWUiLCJpbnRlcnBvbGF0ZVZhbHVlIiwiZXNUZW1wbGF0ZVZhbHVlIiwiZXZhbHVhdGVWYWx1ZSIsInRpbWVzIiwidG9Mb3dlciIsInRvU2FmZUludGVnZXIiLCJ0b1VwcGVyIiwidHJpbSIsInRyaW1FbmQiLCJ0cmltU3RhcnQiLCJ0cnVuY2F0ZSIsIm9taXNzaW9uIiwic2VhcmNoIiwibmV3RW5kIiwidW5lc2NhcGUiLCJ1bmlxdWVJZCIsInByZWZpeCIsImVhY2giLCJlYWNoUmlnaHQiLCJWRVJTSU9OIiwiaXNGaWx0ZXIiLCJ0YWtlTmFtZSIsImRyb3BOYW1lIiwiY2hlY2tJdGVyYXRlZSIsImlzVGFrZXIiLCJsb2Rhc2hGdW5jIiwicmV0VW53cmFwcGVkIiwiaXNMYXp5IiwidXNlTGF6eSIsImlzSHlicmlkIiwiaXNVbndyYXBwZWQiLCJvbmx5TGF6eSIsImNoYWluTmFtZSIsImRpciIsImlzUmlnaHQiLCJ2aWV3IiwiZ2V0VmlldyIsIml0ZXJMZW5ndGgiLCJ0YWtlQ291bnQiLCJpdGVySW5kZXgiLCJjb21taXQiLCJ3cmFwcGVkIiwidG9KU09OIiwiZGVmaW5lIiwiYW1kIl0sIm1hcHBpbmdzIjoiQUFBQSxNQUFNQSxVQUNGQyxZQUFZQyxFQUFPQyxHQUNmQyxLQUFLRixNQUFRQSxFQUNiRSxLQUFLRCxLQUFPQSxFQUNaQyxLQUFLQyxLQUFPRixFQUNaQyxLQUFLRSxPQUFTLEVBQ2RGLEtBQUtHLFVBQVksRUFDakJILEtBQUtJLFlBQWMsRUFDbkJKLEtBQUtLLFVBQVksRUFDakJMLEtBQUtNLFNBQVUsRUFFZk4sS0FBS08sR0FBS1IsRUFHZEYsVUFBVVcsR0FDTixPQUFJUixLQUFLRSxPQUFTTSxFQUFLTixRQUFnQixFQUM5QkYsS0FBS0UsT0FBU00sRUFBS04sT0FBZSxFQUMvQixFQUdoQkwsYUFBYUUsR0FFVCxPQURBQSxFQUFPQSxFQUFLVSxRQUFRLEtBQU0sSUFBSUEsUUFBUSxLQUFNLElBQUlBLFFBQVEsS0FBTTtBQ3JCdEUsTUFBTUMsY0FD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S0MsSUFBUSxJQUFLQyxJQUFRLElBQzFFQyxJQUFRLElBQU1DLElBQVEsSUFBS0MsSUFBUSxJQUFLQyxJQUFRLElBQ2hEQyxJQUFRLElBQU1DLElBQVEsSUFBS0MsSUFBUSxJQUFLQyxJQUFRLElBQ2hEQyxJQUFRLElBQU1DLElBQVEsSUFBS0MsSUFBUSxJQUNuQ0MsSUFBUSxLQUFNQyxJQUFRLEtBQ3RCQyxJQUFRLEtBQU1DLElBQVEsS0FDdEJDLElBQVEsS0FFUkMsSUFBVSxJQUFNQyxJQUFVLElBQUtDLElBQVUsSUFDekNDLElBQVUsSUFBTUMsSUFBVSxJQUFLQyxJQUFVLElBQ3pDQyxJQUFVLElBQU1DLElBQVUsSUFBS0MsSUFBVSxJQUFLQyxJQUFVLElBQ3hEQyxJQUFVLElBQU1DLElBQVUsSUFBS0MsSUFBVSxJQUFLQyxJQUFVLElBQ3hEQyxJQUFVLElBQU1DLElBQVUsSUFBS0MsSUFBVSxJQUFLQyxJQUFVLElBQ3hEQyxJQUFVLElBQU1DLElBQVUsSUFBS0MsSUFBVSxJQUFLQyxJQUFVLElBQUtDLElBQVUsSUFDdkVDLElBQVUsSUFBTUMsSUFBVSxJQUFLQyxJQUFVLElBQUtDLElBQVUsSUFBS0MsSUFBVSxJQUN2RUMsSUFBVSxJQUFNQyxJQUFVLElBQUtDLElBQVUsSUFBS0MsSUFBVSxJQUN4REMsSUFBVSxJQUFNQyxJQUFVLElBQUtDLElBQVUsSUFBS0MsSUFBVSxJQUN4REMsSUFBVSxJQUFNQyxJQUFVLElBQUtDLElBQVUsSUFBS0MsSUFBVSxJQUN4REMsSUFBVSxJQUFNQyxJQUFVLElBQUtDLElBQVUsSUFBS0MsSUFBVSxJQUFLQyxJQUFVLElBQ3ZFQyxJQUFVLElBQU1DLElBQVUsSUFBS0MsSUFBVSxJQUFLQyxJQUFVLElBQUtDLElBQVUsSUFDdkVDLElBQVUsSUFBTUMsSUFBVSxJQUMxQkMsSUFBVSxJQUFNQyxJQUFVLElBQUtDLElBQVUsSUFDekNDLElBQVUsSUFBTUMsSUFBVSxJQUFLQyxJQUFVLElBQUtDLElBQVUsSUFBS0MsSUFBVSxJQUN2RUMsSUFBVSxJQUFNQyxJQUFVLElB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MVB0RSxXQUNFLE9BQU9teUIsR0FBaUJ4ckMsS0FBS282QixZQUFhcDZCLEtBQUtxNkIsY0F3MVBqRFosR0FBTzNFLFVBQVVsZSxNQUFRNmlCLEdBQU8zRSxVQUFVb2dCLEtBRXRDMWUsS0FDRmlELEdBQU8zRSxVQUFVMEIsSUFoOFBuQixXQUNFLE9BQU94MkIsT0FpOFBGeTVCLEdBTURwRixHQUdhLG1CQUFWczFCLFFBQTZDLGlCQUFkQSxPQUFPQyxLQUFtQkQsT0FBT0MsS0FLekUxb0MsR0FBSzdjLEVBQUlBLEdBSVRzbEQsUUFBTyxXQUNMLE9BQU90bEQsT0FJRmtkLEtBRU5BLEdBQVdGLFFBQVVoZCxJQUFHQSxFQUFJQSxHQUU3QitjLEdBQVkvYyxFQUFJQSxJQUloQjZjLEdBQUs3YyxFQUFJQSxLQUVYMGUsS0FBSy9pQiIsImZpbGUiOiJkaXN0LmpzIiwic291cmNlc0NvbnRlbnQiOlsiY2xhc3MgQXR0cmlidXRlIHtcclxuICAgIGNvbnN0cnVjdG9yKHRhYmxlLCBuYW1lKXtcclxuICAgICAgICB0aGlzLnRhYmxlID0gdGFibGU7XHJcbiAgICAgICAgdGhpcy5uYW1lID0gbmFtZTtcclxuICAgICAgICB0aGlzLmF0dHIgPSBuYW1lO1xyXG4gICAgICAgIHRoaXMud2VpZ2h0ID0gMDtcclxuICAgICAgICB0aGlzLmRpZmZFZGdlcyA9IDA7XHJcbiAgICAgICAgdGhpcy5yYW5kb21FZGdlcyA9IDA7XHJcbiAgICAgICAgdGhpcy5zYW1lRWRnZXMgPSAwO1xyXG4gICAgICAgIHRoaXMubXV0YWJsZSA9IHRydWU7XHJcbiAgICAgICAgLy8gdGhpcy5pZCA9IHRoaXMuc2ltcGxpZnlOYW1lKG5hbWUpO1xyXG4gICAgICAgIHRoaXMuaWQgPSBuYW1lO1xyXG4gICAgfVxyXG5cclxuICAgIGNvbXBhcmVUbyhhcmcwKXtcclxuICAgICAgICBpZiAodGhpcy53ZWlnaHQgPiBhcmcwLndlaWdodCkgcmV0dXJuIC0xO1xyXG4gICAgICAgIGVsc2UgaWYgKHRoaXMud2VpZ2h0IDwgYXJnMC53ZWlnaHQpIHJldHVybiAxO1xyXG4gICAgICAgIGVsc2UgcmV0dXJuIDA7XHJcbiAgICB9XHJcblxyXG4gICAgc2ltcGxpZnlOYW1lKG5hbWUpe1xyXG4gICAgICAgIG5hbWUgPSBuYW1lLnJlcGxhY2UoL1wiL2csICcnKS5yZXBsYWNlKC89L2csICcnKS5yZXBsYWNlKC8gL2csICcnKVxyXG4gICAgICAgIHJldHVybiBuYW1lO1xyXG4gICAgfVxyXG59IiwiY2xhc3MgRHVtYkhldXJpc3RpYyB7XHJcbiAgICBjb25zdHJ1Y3RvcihnKXtcclxuICAgICAgICB0aGlzLmcgPSBnO1xyXG4gICAgfVxyXG5cclxuICAgIGFycmFuZ2UoKXtcclxuICAgICAgICBmb3IgKGxldCBpPTA7IGk8dGhpcy5nLm1heERlcHRoOyBpKyspe1xyXG4gICAgICAgICAgICBsZXQgZWRnZXMgPSBnLmVkZ2VJbmRleFtpXTtcclxuICAgICAgICAgICAgZWRnZXMgPSBlZGdlcy5zb3J0KChhLCBiKSA9PiBhLmNvbXBhcmVUbyhiKSlcclxuXHJcbiAgICAgICAgICAgIGZvciAobGV0IGo9MDsgajxlZGdlcy5sZW5ndGgtMTsgaisrKXtcclxuICAgICAgICAgICAgICAgIGxldCBlZGdlMSA9IGVkZ2VzW2pdO1xyXG4gICAgICAgICAgICAgICAgbGV0IGVkZ2UyID0gZWRnZXNbaisxXTtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoZWRnZTEubGVmdFRhYmxlID09IGVkZ2UyLmxlZnRUYWJsZSBcclxuICAgICAgICAgICAgICAgICAgICAmJiAoZWRnZTEubGVmdEF0dHJpYnV0ZS5tdXRhYmxlIHx8IGVkZ2UyLmxlZnRBdHRyaWJ1dGUubXV0YWJsZSkpe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnN3YXAoZWRnZTEubGVmdEF0dHJpYnV0ZSwgZWRnZTIubGVmdEF0dHJpYnV0ZSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGVkZ2UxLnJpZ2h0QXR0cmlidXRlLm11dGFibGUgfHwgZWRnZTIucmlnaHRBdHRyaWJ1dGUubXV0YWJsZSl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZWRnZTEucmlnaHRUYWJsZSA9PSBlZGdlMi5yaWdodFRhYmxlKSBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnN3YXAoZWRnZTEucmlnaHRBdHRyaWJ1dGUsIGVkZ2UyLnJpZ2h0QXR0cmlidXRlKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB0aGlzLnN3YXAoZWRnZTEucmlnaHRUYWJsZSwgZWRnZTIucmlnaHRUYWJsZSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBzd2FwKHcxLCB3Mil7XHJcbiAgICAgICAgbGV0IHRtcHcgPSB3MS53ZWlnaHQ7XHJcbiAgICAgICAgdzEud2VpZ2h0ID0gdzIud2VpZ2h0O1xyXG4gICAgICAgIHcyLndlaWdodCA9IHRtcHc7XHJcbiAgICB9XHJcbn0iLCJjbGFzcyBFZGdlIHtcclxuICAgIGNvbnN0cnVjdG9yKGxlZnRUYWJsZSwgYXR0MSwgcmlnaHRUYWJsZSwgYXR0Mil7XHJcbiAgICAgICAgdGhpcy5sZWZ0VGFibGUgPSBsZWZ0VGFibGU7XHJcbiAgICAgICAgdGhpcy5hdHQxID0gYXR0MTtcclxuICAgICAgICB0aGlzLmxlZnRBdHRyaWJ1dGUgPSBhdHQxO1xyXG4gICAgICAgIHRoaXMucmlnaHRUYWJsZSA9IHJpZ2h0VGFibGU7XHJcbiAgICAgICAgdGhpcy5hdHQyID0gYXR0MjtcclxuICAgICAgICB0aGlzLnJpZ2h0QXR0cmlidXRlID0gYXR0MjtcclxuICAgIH1cclxuXHJcbiAgICBjb21wYXJlVG8ob3RoZXJFZGdlKXtcclxuICAgICAgICBpZiAodGhpcy5sZWZ0VGFibGUgPT0gb3RoZXJFZGdlLmxlZnRUYWJsZSl7XHJcbiAgICAgICAgICAgIC8vIGVkZ2VzIGhhdmUgdGhlIHNhbWUgbGVmdCB0YWJsZVxyXG4gICAgICAgICAgICBpZiAodGhpcy5yaWdodFRhYmxlID09IG90aGVyRWRnZS5yaWdodFRhYmxlKXtcclxuICAgICAgICAgICAgICAgIC8vIGFuZCB0aGUgc2FtZSByaWdodCB0YWJsZVxyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMubGVmdEF0dHJpYnV0ZS53ZWlnaHQgPiBvdGhlckVkZ2UubGVmdEF0dHJpYnV0ZS53ZWlnaHQgJiYgdGhpcy5yaWdodEF0dHJpYnV0ZS53ZWlnaHQgPCBvdGhlckVkZ2UucmlnaHRBdHRyaWJ1dGUud2VpZ2h0KVxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgICAgICAgICAgZWxzZSBpZiAodGhpcy5sZWZ0QXR0cmlidXRlLndlaWdodCA8IG90aGVyRWRnZS5sZWZ0QXR0cmlidXRlLndlaWdodCAmJiB0aGlzLnJpZ2h0QXR0cmlidXRlLndlaWdodCA+IG90aGVyRWRnZS5yaWdodEF0dHJpYnV0ZS53ZWlnaHQpXHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy5yaWdodFRhYmxlLndlaWdodCA8IG90aGVyRWRnZS5yaWdodFRhYmxlLndlaWdodCAmJiB0aGlzLmxlZnRBdHRyaWJ1dGUud2VpZ2h0ID4gb3RoZXJFZGdlLmxlZnRBdHRyaWJ1dGUud2VpZ2h0KVxyXG4gICAgICAgICAgICAgICAgLy8gcmlnaHQgdGFibGUgaXMgdW5kZXIgYnV0IGxlZnQgYXR0cmlidXRlIGlzIG92ZXJcclxuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgICAgICBlbHNlIGlmICh0aGlzLnJpZ2h0VGFibGUud2VpZ2h0ID4gb3RoZXJFZGdlLnJpZ2h0VGFibGUud2VpZ2h0ICYmIHRoaXMubGVmdEF0dHJpYnV0ZS53ZWlnaHQgPCBvdGhlckVkZ2UubGVmdEF0dHJpYnV0ZS53ZWlnaHQpXHJcbiAgICAgICAgICAgICAgICAvLyByaWdodCB0YWJsZSBpcyBvdmVyIGJ1dCBsZWZ0IGF0dHJpYnV0ZSBpcyB1bmRlclxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLnJpZ2h0VGFibGUgPT0gb3RoZXJFZGdlLnJpZ2h0VGFibGUpe1xyXG4gICAgICAgICAgICAvLyBlZGdlcyBoYXZlIHRoZSBzYW1lIHJpZ2h0IHRhYmxlXHJcbiAgICAgICAgICAgIGlmICh0aGlzLmxlZnRUYWJsZSA9PSBvdGhlckVkZ2UubGVmdFRhYmxlKXtcclxuICAgICAgICAgICAgICAgIC8vIGFuZCB0aGUgc2FtZSBsZWZ0IHRhYmxlXHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5sZWZ0QXR0cmlidXRlLndlaWdodCA+IG90aGVyRWRnZS5sZWZ0QXR0cmlidXRlLndlaWdodCAmJiB0aGlzLnJpZ2h0QXR0cmlidXRlLndlaWdodCA8IG90aGVyRWRnZS5yaWdodEF0dHJpYnV0ZS53ZWlnaHQpXHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgICAgICAgICBlbHNlIGlmICh0aGlzLmxlZnRBdHRyaWJ1dGUud2VpZ2h0IDwgb3RoZXJFZGdlLmxlZnRBdHRyaWJ1dGUud2VpZ2h0ICYmIHRoaXMucmlnaHRBdHRyaWJ1dGUud2VpZ2h0ID4gb3RoZXJFZGdlLnJpZ2h0QXR0cmlidXRlLndlaWdodClcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICAgICAgfSBlbHNlIGlmICh0aGlzLmxlZnRUYWJsZS53ZWlnaHQgPCBvdGhlckVkZ2UubGVmdFRhYmxlLndlaWdodCAmJiB0aGlzLnJpZ2h0QXR0cmlidXRlLndlaWdodCA+IG90aGVyRWRnZS5yaWdodEF0dHJpYnV0ZS53ZWlnaHQpXHJcbiAgICAgICAgICAgICAgICAvLyBsZWZ0IHRhYmxlIGlzIHVuZGVyIGJ1dCByaWdodCBhdHRyaWJ1dGUgaXMgb3ZlclxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKHRoaXMubGVmdFRhYmxlLndlaWdodCA+IG90aGVyRWRnZS5sZWZ0VGFibGUud2VpZ2h0ICYmIHRoaXMucmlnaHRBdHRyaWJ1dGUud2VpZ2h0IDwgb3RoZXJFZGdlLnJpZ2h0QXR0cmlidXRlLndlaWdodClcclxuICAgICAgICAgICAgICAgIC8vIGxlZnQgdGFibGUgaXMgb3ZlciBidXQgcmlnaHQgYXR0cmlidXRlIGlzIHVuZGVyXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAvLyBlZGdlcyBoYXZlIGRpZmZlcmVudCB0YWJsZXMgYm90aCBvbiB0aGUgbGVmdCBhbmQgb24gdGhlIHJpZ2h0XHJcbiAgICAgICAgICAgIGlmICh0aGlzLmxlZnRUYWJsZS53ZWlnaHQgPCBvdGhlckVkZ2UubGVmdFRhYmxlLndlaWdodCAmJiB0aGlzLnJpZ2h0VGFibGUud2VpZ2h0ID4gb3RoZXJFZGdlLnJpZ2h0VGFibGUud2VpZ2h0KVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWVcclxuICAgICAgICAgICAgZWxzZSBpZiAodGhpcy5sZWZ0VGFibGUud2VpZ2h0ID4gb3RoZXJFZGdlLmxlZnRUYWJsZS53ZWlnaHQgJiYgdGhpcy5yaWdodFRhYmxlLndlaWdodCA8IG90aGVyRWRnZS5yaWdodFRhYmxlLndlaWdodCl7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcblxyXG4gICAgY29tcGFyZVNlbGZFZGdlVG8ob3RoZXJFZGdlKXtcclxuICAgICAgICBpZiAodGhpcy5sZWZ0VGFibGUuZGVwdGggPT0gdGhpcy5yaWdodFRhYmxlLmRlcHRoICYmIG90aGVyRWRnZS5sZWZ0VGFibGUuZGVwdGggPT0gb3RoZXJFZGdlLnJpZ2h0VGFibGUuZGVwdGgpe1xyXG4gICAgICAgICAgICAvLyB0aGV5IGFyZSBib3RoIHNlbGYgZWRnZXNcclxuICAgICAgICAgICAgaWYgKHRoaXMubGVmdFRhYmxlID09IG90aGVyRWRnZS5sZWZ0VGFibGUpe1xyXG4gICAgICAgICAgICAgICAgLy8gdGhleSBoYXZlIHRoZSBzYW1lIGxlZnQgdGFibGVcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLnJpZ2h0VGFibGUgPT0gb3RoZXJFZGdlLnJpZ2h0VGFibGUpe1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIGFuZCB0aGUgc2FtZSByaWdodCB0YWJsZVxyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmxlZnRBdHRyaWJ1dGUud2VpZ2h0IDwgb3RoZXJFZGdlLmxlZnRBdHRyaWJ1dGUud2VpZ2h0ICYmIHRoaXMucmlnaHRBdHRyaWJ1dGUud2VpZ2h0IDwgb3RoZXJFZGdlLnJpZ2h0QXR0cmlidXRlLndlaWdodClcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWVcclxuICAgICAgICAgICAgICAgICAgICBlbHNlIGlmICh0aGlzLmxlZnRBdHRyaWJ1dGUud2VpZ2h0ID4gb3RoZXJFZGdlLmxlZnRBdHRyaWJ1dGUud2VpZ2h0ICYmIHRoaXMucmlnaHRBdHRyaWJ1dGUud2VpZ2h0ID4gb3RoZXJFZGdlLnJpZ2h0QXR0cmlidXRlLndlaWdodClcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWVcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMubGVmdEF0dHJpYnV0ZS53ZWlnaHQgPCBvdGhlckVkZ2UubGVmdEF0dHJpYnV0ZS53ZWlnaHQgJiYgdGhpcy5yaWdodFRhYmxlLndlaWdodCA8IG90aGVyRWRnZS5yaWdodFRhYmxlLndlaWdodClcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWVcclxuICAgICAgICAgICAgICAgICAgICBlbHNlIGlmICh0aGlzLmxlZnRBdHRyaWJ1dGUud2VpZ2h0ID4gb3RoZXJFZGdlLmxlZnRBdHRyaWJ1dGUud2VpZ2h0ICYmIHRoaXMucmlnaHRUYWJsZS53ZWlnaHQgPiBvdGhlckVkZ2UucmlnaHRUYWJsZS53ZWlnaHQpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy5sZWZ0VGFibGUgPT0gb3RoZXJFZGdlLnJpZ2h0VGFibGUpe1xyXG4gICAgICAgICAgICAgICAgLy8gdGhlIGxlZnQgdGFibGUgb2YgdGhlIGZpcnN0IGlzIHRoZSByaWdodCB0YWJsZSBvZiB0aGUgb3RoZXJcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLnJpZ2h0VGFibGUgPT0gb3RoZXJFZGdlLmxlZnRUYWJsZSl7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gdGhlIGxlZnQgdGFibGUgaXMgdGhlIHNhbWUgYXMgdGhlIHJpZ2h0IHRhYmxlXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMucmlnaHRBdHRyaWJ1dGUud2VpZ2h0IDwgb3RoZXJFZGdlLmxlZnRBdHRyaWJ1dGUud2VpZ2h0ICYmIHRoaXMubGVmdEF0dHJpYnV0ZS53ZWlnaHQgPCBvdGhlckVkZ2UucmlnaHRBdHRyaWJ1dGUud2VpZ2h0KVxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICBlbHNlIGlmICh0aGlzLnJpZ2h0QXR0cmlidXRlLndlaWdodCA+IG90aGVyRWRnZS5sZWZ0QXR0cmlidXRlLndlaWdodCAmJiB0aGlzLmxlZnRBdHRyaWJ1dGUud2VpZ2h0ID4gb3RoZXJFZGdlLnJpZ2h0QXR0cmlidXRlLndlaWdodClcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmxlZnRBdHRyaWJ1dGUud2VpZ2h0IDwgb3RoZXJFZGdlLnJpZ2h0QXR0cmlidXRlLndlaWdodCAmJiB0aGlzLnJpZ2h0VGFibGUud2VpZ2h0IDwgb3RoZXJFZGdlLmxlZnRUYWJsZS53ZWlnaHQpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKHRoaXMubGVmdEF0dHJpYnV0ZS53ZWlnaHQgPiBvdGhlckVkZ2UucmlnaHRBdHRyaWJ1dGUud2VpZ2h0ICYmIHRoaXMucmlnaHRUYWJsZS53ZWlnaHQgPiBvdGhlckVkZ2UubGVmdFRhYmxlLndlaWdodClcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy5yaWdodFRhYmxlID09IG90aGVyRWRnZS5sZWZ0VGFibGUpe1xyXG4gICAgICAgICAgICAgICAgLy8gdGhlIHJpZ2h0IHRhYmxlIG9mIHRoZSBmaXJzdCBpcyB0aGUgbGVmdCB0YWJsZSBvZiB0aGUgc2Vjb25kXHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5sZWZ0VGFibGUgPT0gb3RoZXJFZGdlLnJpZ2h0VGFibGUpe1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLnJpZ2h0QXR0cmlidXRlLndlaWdodCA8IG90aGVyRWRnZS5sZWZ0QXR0cmlidXRlLndlaWdodCAmJiB0aGlzLmxlZnRBdHRyaWJ1dGUud2VpZ2h0IDwgb3RoZXJFZGdlLnJpZ2h0QXR0cmlidXRlLndlaWdodClcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAodGhpcy5yaWdodEF0dHJpYnV0ZS53ZWlnaHQgPiBvdGhlckVkZ2UubGVmdEF0dHJpYnV0ZS53ZWlnaHQgJiYgdGhpcy5sZWZ0QXR0cmlidXRlLndlaWdodCA+IG90aGVyRWRnZS5yaWdodEF0dHJpYnV0ZS53ZWlnaHQpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5yaWdodEF0dHJpYnV0ZS53ZWlnaHQgPCBvdGhlckVkZ2UubGVmdEF0dHJpYnV0ZS53ZWlnaHQgJiYgdGhpcy5sZWZ0VGFibGUud2VpZ2h0IDwgb3RoZXJFZGdlLnJpZ2h0VGFibGUud2VpZ2h0KVxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICBlbHNlIGlmICh0aGlzLnJpZ2h0QXR0cmlidXRlLndlaWdodCA+IG90aGVyRWRnZS5sZWZ0QXR0cmlidXRlLndlaWdodCAmJiB0aGlzLmxlZnRUYWJsZS53ZWlnaHQgPiBvdGhlckVkZ2UucmlnaHRUYWJsZS53ZWlnaHQpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMucmlnaHRUYWJsZSA9PSBvdGhlckVkZ2UucmlnaHRUYWJsZSl7XHJcbiAgICAgICAgICAgICAgICAvLyB0aGV5IGhhdmUgdGhlIHNhbWUgcmlnaHQgdGFibGVcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLmxlZnRUYWJsZSA9PSBvdGhlckVkZ2UubGVmdFRhYmxlKXtcclxuICAgICAgICAgICAgICAgICAgICAvLyBhbmQgdGhlIHNhbWUgcmlnaHQgdGFibGVcclxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5sZWZ0QXR0cmlidXRlLndlaWdodCA8IG90aGVyRWRnZS5sZWZ0QXR0cmlidXRlLndlaWdodCAmJiB0aGlzLnJpZ2h0QXR0cmlidXRlLndlaWdodCA8IG90aGVyRWRnZS5yaWdodEF0dHJpYnV0ZS53ZWlnaHQpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlXHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAodGhpcy5sZWZ0QXR0cmlidXRlLndlaWdodCA+IG90aGVyRWRnZS5sZWZ0QXR0cmlidXRlLndlaWdodCAmJiB0aGlzLnJpZ2h0QXR0cmlidXRlLndlaWdodCA+IG90aGVyRWRnZS5yaWdodEF0dHJpYnV0ZS53ZWlnaHQpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlXHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLnJpZ2h0QXR0cmlidXRlLndlaWdodCA8IG90aGVyRWRnZS5yaWdodEF0dHJpYnV0ZS53ZWlnaHQgJiYgdGhpcy5sZWZ0VGFibGUud2VpZ2h0IDwgb3RoZXJFZGdlLmxlZnRUYWJsZS53ZWlnaHQpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlXHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAodGhpcy5yaWdodEF0dHJpYnV0ZS53ZWlnaHQgPiBvdGhlckVkZ2UucmlnaHRBdHRyaWJ1dGUud2VpZ2h0ICYmIHRoaXMubGVmdFRhYmxlLndlaWdodCA+IG90aGVyRWRnZS5sZWZ0VGFibGUud2VpZ2h0KVxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgLy8gb25lIGlzIGEgc2VsZiBlZGdlIGJ1dCB0aGUgb3RoZXIgaXMgbm90XHJcbiAgICAgICAgICAgIGlmICh0aGlzLmxlZnRUYWJsZS5kZXB0aCA9PSB0aGlzLnJpZ2h0VGFibGUuZGVwdGgpe1xyXG4gICAgICAgICAgICAgICAgLy8gdGhlIGZpcnN0IGlzIGEgc2VsZiBlZGdlXHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5sZWZ0VGFibGUgPT0gb3RoZXJFZGdlLmxlZnRUYWJsZSl7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gdGhlIGZpcnN0J3MgbGVmdCB0YWJsZSBpcyB0aGUgc2FtZSBhcyB0aGUgb3RoZXJcclxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5sZWZ0QXR0cmlidXRlLndlaWdodCA8IG90aGVyRWRnZS5sZWZ0QXR0cmlidXRlLndlaWdodCAmJiB0aGlzLnJpZ2h0VGFibGUud2VpZ2h0ID4gb3RoZXJFZGdlLmxlZnRUYWJsZS53ZWlnaHQpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlXHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAodGhpcy5sZWZ0QXR0cmlidXRlLndlaWdodCA+IG90aGVyRWRnZS5sZWZ0QXR0cmlidXRlLndlaWdodCAmJiB0aGlzLnJpZ2h0VGFibGUud2VpZ2h0IDwgb3RoZXJFZGdlLmxlZnRUYWJsZS53ZWlnaHQpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlXHJcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMucmlnaHRUYWJsZSA9PSBvdGhlckVkZ2UucmlnaHRUYWJsZSl7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gdGhlIGZpcnN0J3MgcmlnaHQgdGFibGUgaXMgdGhlIHNhbWUgYXMgdGhlIG90aGVyXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMucmlnaHRBdHRyaWJ1dGUud2VpZ2h0IDwgb3RoZXJFZGdlLmxlZnRBdHRyaWJ1dGUud2VpZ2h0ICYmIHRoaXMubGVmdFRhYmxlLndlaWdodCA+IG90aGVyRWRnZS5sZWZ0VGFibGUud2VpZ2h0KVxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKHRoaXMucmlnaHRBdHRyaWJ1dGUud2VpZ2h0ID4gb3RoZXJFZGdlLmxlZnRBdHRyaWJ1dGUud2VpZ2h0ICYmIHRoaXMubGVmdFRhYmxlLndlaWdodCA8IG90aGVyRWRnZS5sZWZ0VGFibGUud2VpZ2h0KVxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZVxyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAvLyB0aGV5IGRvbid0IHNoYXJlIGFueSB0YWJsZVxyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmxlZnRUYWJsZS53ZWlnaHQgPiBvdGhlckVkZ2UubGVmdFRhYmxlLndlaWdodCAmJiB0aGlzLnJpZ2h0VGFibGUud2VpZ2h0IDwgb3RoZXJFZGdlLmxlZnRUYWJsZS53ZWlnaHQpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKHRoaXMubGVmdFRhYmxlLndlaWdodCA8IG90aGVyRWRnZS5sZWZ0VGFibGUud2VpZ2h0ICYmIHRoaXMucmlnaHRUYWJsZS53ZWlnaHQgPiBvdGhlckVkZ2UubGVmdFRhYmxlLndlaWdodClcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAvLyB0aGUgc2Vjb25kIGlzIGEgc2VsZiBlZGdlXHJcbiAgICAgICAgICAgICAgICBpZiAob3RoZXJFZGdlLmxlZnRUYWJsZSA9PSB0aGlzLmxlZnRUYWJsZSl7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gdGhlIG90aGVyJ3MgbGVmdCB0YWJsZSBpcyB0aGUgc2FtZSBhcyB0aGUgZmlyc3Qnc1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChvdGhlckVkZ2UubGVmdEF0dHJpYnV0ZS53ZWlnaHQgPCB0aGlzLmxlZnRBdHRyaWJ1dGUud2VpZ2h0ICYmIG90aGVyRWRnZS5yaWdodFRhYmxlLndlaWdodCA+IHRoaXMubGVmdFRhYmxlLndlaWdodClcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWVcclxuICAgICAgICAgICAgICAgICAgICBlbHNlIGlmIChvdGhlckVkZ2UubGVmdEF0dHJpYnV0ZS53ZWlnaHQgPiB0aGlzLmxlZnRBdHRyaWJ1dGUud2VpZ2h0ICYmIG90aGVyRWRnZS5yaWdodFRhYmxlLndlaWdodCA8IHRoaXMubGVmdFRhYmxlLndlaWdodClcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWVcclxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAob3RoZXJFZGdlLnJpZ2h0VGFibGUgPT0gdGhpcy5sZWZ0VGFibGUpe1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIHRoZSBvdGhlcidzIHJpZ2h0IHRhYmxlIGlzIHRoZSBzYW1lIGFzIHRoZSBmaXJzdCdzIHJpZ2h0XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG90aGVyRWRnZS5yaWdodEF0dHJpYnV0ZS53ZWlnaHQgPCB0aGlzLmxlZnRBdHRyaWJ1dGUud2VpZ2h0ICYmIG90aGVyRWRnZS5sZWZ0VGFibGUud2VpZ2h0ID4gdGhpcy5sZWZ0VGFibGUud2VpZ2h0KVxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKG90aGVyRWRnZS5yaWdodEF0dHJpYnV0ZS53ZWlnaHQgPiB0aGlzLmxlZnRBdHRyaWJ1dGUud2VpZ2h0ICYmIG90aGVyRWRnZS5sZWZ0VGFibGUud2VpZ2h0IDwgdGhpcy5sZWZ0VGFibGUud2VpZ2h0KVxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZVxyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAvLyB0aGV5IGRvbid0IHNoYXJlIGFueSB0YWJsZVxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChvdGhlckVkZ2UubGVmdFRhYmxlLndlaWdodCA8IHRoaXMubGVmdEF0dHJpYnV0ZS53ZWlnaHQgJiYgb3RoZXJFZGdlLnJpZ2h0VGFibGUud2VpZ2h0ID4gdGhpcy5sZWZ0QXR0cmlidXRlLndlaWdodClcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAob3RoZXJFZGdlLmxlZnRUYWJsZS53ZWlnaHQgPiB0aGlzLmxlZnRBdHRyaWJ1dGUud2VpZ2h0ICYmIG90aGVyRWRnZS5yaWdodFRhYmxlLndlaWdodCA8IHRoaXMubGVmdEF0dHJpYnV0ZS53ZWlnaHQpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGNyb3NzZXMob3RoZXJFZGdlKXtcclxuICAgICAgICBpZiAodGhpcy5sZWZ0VGFibGUuZGVwdGggPT0gdGhpcy5yaWdodFRhYmxlLmRlcHRoIHx8IG90aGVyRWRnZS5sZWZ0VGFibGUuZGVwdGggPT0gb3RoZXJFZGdlLnJpZ2h0VGFibGUuZGVwdGgpIFxyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5jb21wYXJlU2VsZkVkZ2VUbyhvdGhlckVkZ2UpXHJcblxyXG4gICAgICAgIGlmICh0aGlzLmNvbXBhcmVUbyhvdGhlckVkZ2UpKXtcclxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcblxyXG4gICAgY29tcGFyZShhcmcwKXtcclxuICAgICAgICBpZiAoYXJnMCA9PSB1bmRlZmluZWQpIHJldHVybiAxO1xyXG4gICAgICAgIGxldCByZXQgPSB0aGlzLmNvbXBhcmVBdHRyaWJ1dGVzKHRoaXMubGVmdFRhYmxlLCB0aGlzLmxlZnRBdHRyaWJ1dGUsIGFyZzAubGVmdFRhYmxlLCBhcmcwLmxlZnRBdHRyaWJ1dGUpXHJcbiAgICB9XHJcblxyXG4gICAgY29tcGFyZUF0dHJpYnV0ZXModDEsIGExLCB0MiwgYTIpe1xyXG4gICAgICAgIGxldCByZXQgPSB0MS5jb21wYXJlVG8odDIpXHJcbiAgICAgICAgaWYgKHJldCA9PSAwKSByZXQgPSBhMS5jb21wYXJlVG8oYTIpO1xyXG4gICAgICAgIHJldHVybiByZXQ7XHJcbiAgICB9XHJcblxyXG4gICAgaXNTYW1lUmFua0VkZ2UoKXtcclxuICAgICAgICByZXR1cm4gdGhpcy5sZWZ0VGFibGUuZGVwdGggPT0gdGhpcy5yaWdodFRhYmxlLmRlcHRoXHJcbiAgICB9XHJcblxyXG4gICAgZ2V0QmVuZGluZXNzKCl7XHJcbiAgICAgICAgbGV0IHJlcyA9IDA7XHJcbiAgICAgICAgbGV0IGZhY3RvciA9IDEwLyh0aGlzLmxlZnRUYWJsZS5ncmFwaC5iYXNlUm93RGlzdGFuY2UqMTApO1xyXG4gICAgICAgIC8vaWYgKHRoaXMubGVmdFRhYmxlLm5hbWUgPT0gXCJzZWxlY3RcIikgY29uc29sZS5sb2codGhpcy5yaWdodFRhYmxlLm5hbWUsICdzZWxlY3Rwb3MnLCB0aGlzLmxlZnRUYWJsZS53ZWlnaHQgKyB0aGlzLmxlZnRBdHRyaWJ1dGUud2VpZ2h0ICogZmFjdG9yICsgdGhpcy5sZWZ0VGFibGUudmVydGljYWxBdHRyT2Zmc2V0ICogZmFjdG9yLCAndGhpc3BvcycsIHRoaXMucmlnaHRUYWJsZS53ZWlnaHQgKyB0aGlzLnJpZ2h0QXR0cmlidXRlLndlaWdodCAqIGZhY3RvciArIHRoaXMucmlnaHRUYWJsZS52ZXJ0aWNhbEF0dHJPZmZzZXQgKiBmYWN0b3IpXHJcbiAgICAgICAgcmVzID0gKHRoaXMucmlnaHRUYWJsZS53ZWlnaHQgKyB0aGlzLnJpZ2h0QXR0cmlidXRlLndlaWdodCAqIGZhY3RvciArIHRoaXMucmlnaHRUYWJsZS52ZXJ0aWNhbEF0dHJPZmZzZXQgKiBmYWN0b3IpIC0gKHRoaXMubGVmdFRhYmxlLndlaWdodCArIHRoaXMubGVmdEF0dHJpYnV0ZS53ZWlnaHQgKiBmYWN0b3IgKyB0aGlzLmxlZnRUYWJsZS52ZXJ0aWNhbEF0dHJPZmZzZXQgKiBmYWN0b3IpO1xyXG4gICAgICAgIC8vaWYgKHRoaXMubGVmdFRhYmxlLm5hbWUgPT0gXCJzZWxlY3RcIikgY29uc29sZS5sb2cocmVzKVxyXG4gICAgICAgIHJlcyA9IE1hdGgucm91bmQocmVzKjEwMDApLzEwMDBcclxuICAgICAgICAvL2lmICh0aGlzLmxlZnRUYWJsZS5uYW1lID09IFwic2VsZWN0XCIpIGNvbnNvbGUubG9nKHJlcylcclxuICAgICAgICByZXR1cm4gTWF0aC5hYnMocmVzKTtcclxuICAgIH1cclxufSIsImNsYXNzIEdhbnNuZXIge1xyXG4gICAgY29uc3RydWN0b3IoZ3JhcGgpe1xyXG4gICAgICAgIHRoaXMuZyA9IGdyYXBoO1xyXG4gICAgICAgIHRoaXMubWF4X2l0ZXJhdGlvbnMgPSAxMTtcclxuICAgICAgICB0aGlzLmVsYXBzZWRUaW1lID0gMDtcclxuICAgIH1cclxuXHJcbiAgICBtZWRpYW4oYXJyYXkpIHtcclxuICAgICAgICBhcnJheSA9IGFycmF5LnNvcnQoKTtcclxuICAgICAgICBpZiAoYXJyYXkubGVuZ3RoICUgMiA9PT0gMCkge1xyXG4gICAgICAgICAgcmV0dXJuIChhcnJheVthcnJheS5sZW5ndGgvMl0gKyBhcnJheVsoYXJyYXkubGVuZ3RoIC8gMikgLSAxXSkgLyAyO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHJldHVybiBhcnJheVsoYXJyYXkubGVuZ3RoIC0gMSkgLyAyXTsgXHJcbiAgICAgIH1cclxuXHJcbiAgICBhcHBseUFycmFuZ2VtZW50KGNsb25lR3JhcGgpe1xyXG4gICAgICAgIGZvciAobGV0IHRhYmxlIG9mIGNsb25lR3JhcGgudGFibGVzKXtcclxuICAgICAgICAgICAgbGV0IHRhYmxlMiA9IHRoaXMuZy50YWJsZXMuZmluZCh0ID0+IHQubmFtZSA9PSB0YWJsZS5uYW1lKVxyXG4gICAgICAgICAgICB0YWJsZTIud2VpZ2h0ID0gdGFibGUud2VpZ2h0O1xyXG5cclxuICAgICAgICAgICAgZm9yIChsZXQgYXR0cmlidXRlIG9mIHRhYmxlLmF0dHJpYnV0ZXMpe1xyXG4gICAgICAgICAgICAgICAgbGV0IGF0dHJpYnV0ZTIgPSB0YWJsZTIuYXR0cmlidXRlcy5maW5kKGEgPT4gYS5uYW1lID09IGF0dHJpYnV0ZS5uYW1lKVxyXG4gICAgICAgICAgICAgICAgYXR0cmlidXRlMi53ZWlnaHQgPSBhdHRyaWJ1dGUud2VpZ2h0XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgYXJyYW5nZSgpe1xyXG4gICAgICAgIGxldCBzdGFydFRpbWUgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKVxyXG5cclxuICAgICAgICBsZXQgYmVzdF9jcm9zc2luZ3MgPSB0aGlzLmcuZ2V0RWRnZUNyb3NzaW5ncygpXHJcblxyXG4gICAgICAgIGZvciAobGV0IGk9MDsgaTx0aGlzLm1heF9pdGVyYXRpb25zOyBpKyspe1xyXG4gICAgICAgICAgICBsZXQgY2xvbmVHcmFwaCA9IF8uY2xvbmVEZWVwKHRoaXMuZylcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIGlmIChpJTIgPT0gMCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5hcnJhbmdlTGVmdChjbG9uZUdyYXBoKVxyXG4gICAgICAgICAgICB9IGVsc2UgdGhpcy5hcnJhbmdlUmlnaHQoY2xvbmVHcmFwaClcclxuXHJcbiAgICAgICAgICAgIHRoaXMudHJhbnNwb3NlKGNsb25lR3JhcGgpO1xyXG5cclxuICAgICAgICAgICAgbGV0IGN1cl9jcm9zc2luZ3MgPSBjbG9uZUdyYXBoLmdldEVkZ2VDcm9zc2luZ3MoKVxyXG4gICAgICAgICAgICAvL2NvbnNvbGUubG9nKCdjdXIgY3Jvc3NpbmdzOiAnLCBjdXJfY3Jvc3NpbmdzKVxyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgaWYgKGN1cl9jcm9zc2luZ3MgPD0gYmVzdF9jcm9zc2luZ3MpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuYXBwbHlBcnJhbmdlbWVudChjbG9uZUdyYXBoKVxyXG4gICAgICAgICAgICAgICAgYmVzdF9jcm9zc2luZ3MgPSBjdXJfY3Jvc3NpbmdzXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuZWxhcHNlZFRpbWUgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKSAtIHN0YXJ0VGltZTtcclxuICAgIH1cclxuXHJcbiAgICBhcnJhbmdlTGVmdChnKXtcclxuICAgICAgICBmb3IgKGxldCBpPTE7IGk8PWcubWF4RGVwdGg7IGkrKyl7XHJcbiAgICAgICAgICAgIGxldCBsYXllclRhYmxlcyA9IGcudGFibGVJbmRleFtpXTtcclxuICAgICAgICAgICAgbGV0IGxheWVyRWRnZXMgPSBnLmVkZ2VJbmRleFtpLTFdO1xyXG5cclxuICAgICAgICAgICAgZm9yIChsZXQgdGFibGUgb2YgbGF5ZXJUYWJsZXMpe1xyXG4gICAgICAgICAgICAgICAgbGV0IHdlaWdodHMgPSBsYXllckVkZ2VzXHJcbiAgICAgICAgICAgICAgICAgICAgLmZpbHRlcihlID0+IGUucmlnaHRUYWJsZSA9PSB0YWJsZSAmJiBlLmxlZnRUYWJsZS5kZXB0aCAhPSBlLnJpZ2h0VGFibGUuZGVwdGgpXHJcbiAgICAgICAgICAgICAgICAgICAgLm1hcChlID0+IHBhcnNlRmxvYXQoZS5sZWZ0VGFibGUud2VpZ2h0KSlcclxuICAgICAgICAgICAgICAgIHRhYmxlLndlaWdodCA9IHRoaXMubWVkaWFuKHdlaWdodHMpXHJcblxyXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgYXR0cmlidXRlIG9mIHRhYmxlLmF0dHJpYnV0ZXMpe1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCB0YWJsZVdlaWdodHMgPSBsYXllckVkZ2VzXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC5maWx0ZXIoZSA9PiBlLnJpZ2h0QXR0cmlidXRlID09IGF0dHJpYnV0ZSAgJiYgZS5sZWZ0VGFibGUuZGVwdGggIT0gZS5yaWdodFRhYmxlLmRlcHRoKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAubWFwKGUgPT4gcGFyc2VGbG9hdChlLmxlZnRUYWJsZS53ZWlnaHQpKVxyXG5cclxuICAgICAgICAgICAgICAgICAgICBsZXQgYXR0cmlidXRlV2VpZ2h0cyA9IGxheWVyRWRnZXNcclxuICAgICAgICAgICAgICAgICAgICAgICAgLmZpbHRlcihlID0+IGUucmlnaHRBdHRyaWJ1dGUgPT0gYXR0cmlidXRlICAmJiBlLmxlZnRUYWJsZS5kZXB0aCAhPSBlLnJpZ2h0VGFibGUuZGVwdGgpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC5tYXAoZSA9PiBwYXJzZUZsb2F0KGUubGVmdEF0dHJpYnV0ZS53ZWlnaHQpKVxyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAodGFibGVXZWlnaHRzLmxlbmd0aCAhPSAwKSBcclxuICAgICAgICAgICAgICAgICAgICAgICAgYXR0cmlidXRlLndlaWdodCA9IHRoaXMubWVkaWFuKHRhYmxlV2VpZ2h0cykgKyB0aGlzLm1lZGlhbihhdHRyaWJ1dGVXZWlnaHRzKS90YWJsZS5hdHRyaWJ1dGVzLmxlbmd0aFxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBnLnNldEV4YWN0V2VpZ2h0cygpXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGFycmFuZ2VSaWdodChnKXtcclxuICAgICAgICBmb3IgKGxldCBpPWcubWF4RGVwdGgtMTsgaT4wOyBpLS0pe1xyXG4gICAgICAgICAgICBsZXQgbGF5ZXJUYWJsZXMgPSBnLnRhYmxlSW5kZXhbaV07XHJcbiAgICAgICAgICAgIGxldCBsYXllckVkZ2VzID0gZy5lZGdlSW5kZXhbaV07XHJcblxyXG4gICAgICAgICAgICBmb3IgKGxldCB0YWJsZSBvZiBsYXllclRhYmxlcyl7XHJcbiAgICAgICAgICAgICAgICBsZXQgd2VpZ2h0cyA9IGxheWVyRWRnZXNcclxuICAgICAgICAgICAgICAgICAgICAuZmlsdGVyKGUgPT4gZS5sZWZ0VGFibGUgPT0gdGFibGUgJiYgZS5sZWZ0VGFibGUuZGVwdGggIT0gZS5yaWdodFRhYmxlLmRlcHRoKVxyXG4gICAgICAgICAgICAgICAgICAgIC5tYXAoZSA9PiBwYXJzZUZsb2F0KGUucmlnaHRUYWJsZS53ZWlnaHQpKVxyXG5cclxuICAgICAgICAgICAgICAgIHRhYmxlLndlaWdodCA9IHRoaXMubWVkaWFuKHdlaWdodHMpXHJcblxyXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgYXR0cmlidXRlIG9mIHRhYmxlLmF0dHJpYnV0ZXMpe1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCB0YWJsZVdlaWdodHMgPSBsYXllckVkZ2VzXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC5maWx0ZXIoZSA9PiBlLmxlZnRBdHRyaWJ1dGUgPT0gYXR0cmlidXRlICAmJiBlLmxlZnRUYWJsZS5kZXB0aCAhPSBlLnJpZ2h0VGFibGUuZGVwdGgpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC5tYXAoZSA9PiBwYXJzZUZsb2F0KGUucmlnaHRUYWJsZS53ZWlnaHQpKVxyXG5cclxuICAgICAgICAgICAgICAgICAgICBsZXQgYXR0cmlidXRlV2VpZ2h0cyA9IGxheWVyRWRnZXNcclxuICAgICAgICAgICAgICAgICAgICAgICAgLmZpbHRlcihlID0+IGUubGVmdEF0dHJpYnV0ZSA9PSBhdHRyaWJ1dGUgICYmIGUubGVmdFRhYmxlLmRlcHRoICE9IGUucmlnaHRUYWJsZS5kZXB0aClcclxuICAgICAgICAgICAgICAgICAgICAgICAgLm1hcChlID0+IHBhcnNlRmxvYXQoZS5yaWdodEF0dHJpYnV0ZS53ZWlnaHQpKVxyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAodGFibGVXZWlnaHRzLmxlbmd0aCAhPSAwKSBcclxuICAgICAgICAgICAgICAgICAgICAgICAgYXR0cmlidXRlLndlaWdodCA9IHRoaXMubWVkaWFuKHRhYmxlV2VpZ2h0cykgKyB0aGlzLm1lZGlhbihhdHRyaWJ1dGVXZWlnaHRzKS90YWJsZS5hdHRyaWJ1dGVzLmxlbmd0aFxyXG4gICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGcuc2V0RXhhY3RXZWlnaHRzKClcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgdHJhbnNwb3NlKGcpe1xyXG4gICAgICAgIGxldCBpbXByb3ZlZCA9IHRydWU7XHJcbiAgICAgICAgd2hpbGUgKGltcHJvdmVkKXtcclxuICAgICAgICAgICAgaW1wcm92ZWQgPSBmYWxzZTtcclxuICAgICAgICAgICAgZm9yIChsZXQgaT0wOyBpPD1nLm1heERlcHRoOyBpKyspe1xyXG5cclxuICAgICAgICAgICAgICAgIGxldCBpbml0Q3Jvc3NpbmdzID0gZy5nZXRFZGdlQ3Jvc3NpbmdzQXREZXB0aChpKTtcclxuXHJcbiAgICAgICAgICAgICAgICBsZXQgbGF5ZXJUYWJsZXMgPSBnLnRhYmxlSW5kZXhbaV07XHJcbiAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgbGF5ZXJUYWJsZXMubGVuZ3RoIC0gMTsgaisrKXtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgdGFibGUxID0gbGF5ZXJUYWJsZXNbal07XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IHRhYmxlMiA9IGxheWVyVGFibGVzW2orMV07XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc3dhcCh0YWJsZTEsIHRhYmxlMik7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGxldCBjdXJDcm9zc2luZ3MgPSBnLmdldEVkZ2VDcm9zc2luZ3NBdERlcHRoKGkpICsgZy5nZXRFZGdlQ3Jvc3NpbmdzQXREZXB0aChpKzEpXHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChjdXJDcm9zc2luZ3MgPCBpbml0Q3Jvc3NpbmdzKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaW1wcm92ZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB0aGlzLnN3YXAodGFibGUxLCB0YWJsZTIpXHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgdGFibGUgb2YgbGF5ZXJUYWJsZXMpe1xyXG4gICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgIGZvciAobGV0IGs9MDsgayA8IHRhYmxlLmF0dHJpYnV0ZXMubGVuZ3RoIC0gMTsgaysrKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGF0dHIxID0gdGFibGUuYXR0cmlidXRlc1trXVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgYXR0cjIgPSB0YWJsZS5hdHRyaWJ1dGVzW2srMV1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc3dhcChhdHRyMSwgYXR0cjIpXHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgY3VyQ3Jvc3NpbmdzMiA9IGcuZ2V0RWRnZUNyb3NzaW5nc0F0RGVwdGgoaSkgKyBnLmdldEVkZ2VDcm9zc2luZ3NBdERlcHRoKGkrMSlcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjdXJDcm9zc2luZ3MyIDwgaW5pdENyb3NzaW5ncyl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbXByb3ZlZCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB0aGlzLnN3YXAoYXR0cjEsIGF0dHIyKVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBzd2FwKHcxLCB3Mil7XHJcbiAgICAgICAgbGV0IHRtcHcgPSB3MS53ZWlnaHQ7XHJcbiAgICAgICAgdzEud2VpZ2h0ID0gdzIud2VpZ2h0O1xyXG4gICAgICAgIHcyLndlaWdodCA9IHRtcHc7XHJcbiAgICB9XHJcbn0iLCJjbGFzcyBHYW5zbmVyU2FtZVJhbmsge1xyXG4gICAgY29uc3RydWN0b3IoZ3JhcGgpe1xyXG4gICAgICAgIHRoaXMuZyA9IGdyYXBoO1xyXG4gICAgICAgIHRoaXMubWF4X2l0ZXJhdGlvbnMgPSA2O1xyXG4gICAgICAgIHRoaXMuZWxhcHNlZFRpbWUgPSAwO1xyXG5cclxuICAgICAgICB0aGlzLml0ZXJhdGlvbnMgPSBbXTtcclxuICAgICAgICB0aGlzLmN1cl9pdGVyYXRpb24gPSAwO1xyXG4gICAgfVxyXG5cclxuICAgIGFwcGx5X2l0ZXJhdGlvbihpdGVyX251bSl7XHJcbiAgICAgICAgdGhpcy5hcHBseUFycmFuZ2VtZW50KHRoaXMuaXRlcmF0aW9uc1tpdGVyX251bV0pO1xyXG4gICAgfVxyXG5cclxuICAgIHF1aWNrc29ydChhcnJheSkge1xyXG4gICAgICAgIGlmIChhcnJheS5sZW5ndGggPD0gMSkge1xyXG4gICAgICAgICAgcmV0dXJuIGFycmF5O1xyXG4gICAgICAgIH1cclxuICAgICAgXHJcbiAgICAgICAgdmFyIHBpdm90ID0gYXJyYXlbMF07XHJcbiAgICAgICAgXHJcbiAgICAgICAgdmFyIGxlZnQgPSBbXTsgXHJcbiAgICAgICAgdmFyIHJpZ2h0ID0gW107XHJcbiAgICAgIFxyXG4gICAgICAgIGZvciAodmFyIGkgPSAxOyBpIDwgYXJyYXkubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgIGFycmF5W2ldIDwgcGl2b3QgPyBsZWZ0LnB1c2goYXJyYXlbaV0pIDogcmlnaHQucHVzaChhcnJheVtpXSk7XHJcbiAgICAgICAgfVxyXG4gICAgICBcclxuICAgICAgICByZXR1cm4gcXVpY2tzb3J0KGxlZnQpLmNvbmNhdChwaXZvdCwgcXVpY2tzb3J0KHJpZ2h0KSk7XHJcbiAgICAgIH07XHJcblxyXG4gICAgbWVkaWFuKGFycmF5KSB7XHJcbiAgICAgICAgYXJyYXkgPSBhcnJheS5zb3J0KCk7XHJcbiAgICAgICAgaWYgKGFycmF5Lmxlbmd0aCAlIDIgPT09IDApIHtcclxuICAgICAgICAgIHJldHVybiAoYXJyYXlbYXJyYXkubGVuZ3RoLzJdICsgYXJyYXlbKGFycmF5Lmxlbmd0aCAvIDIpIC0gMV0pIC8gMjtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSByZXR1cm4gYXJyYXlbKGFycmF5Lmxlbmd0aCAtIDEpIC8gMl07IFxyXG4gICAgICB9XHJcblxyXG4gICAgYXBwbHlBcnJhbmdlbWVudChjbG9uZUdyYXBoKXtcclxuICAgICAgICAvL2NvbnNvbGUubG9nKGNsb25lR3JhcGgpO1xyXG4gICAgICAgIGZvciAobGV0IHRhYmxlIG9mIGNsb25lR3JhcGgudGFibGVzKXtcclxuICAgICAgICAgICAgbGV0IHRhYmxlMiA9IHRoaXMuZy50YWJsZXMuZmluZCh0ID0+IHQubmFtZSA9PSB0YWJsZS5uYW1lKVxyXG4gICAgICAgICAgICB0YWJsZTIud2VpZ2h0ID0gdGFibGUud2VpZ2h0O1xyXG4gICAgICAgICAgICB0YWJsZTIuYXNzaWduZWRXZWlnaHQgPSB0YWJsZS5hc3NpZ25lZFdlaWdodDtcclxuXHJcbiAgICAgICAgICAgIGZvciAobGV0IGF0dHJpYnV0ZSBvZiB0YWJsZS5hdHRyaWJ1dGVzKXtcclxuICAgICAgICAgICAgICAgIGxldCBhdHRyaWJ1dGUyID0gdGFibGUyLmF0dHJpYnV0ZXMuZmluZChhID0+IGEubmFtZSA9PSBhdHRyaWJ1dGUubmFtZSlcclxuICAgICAgICAgICAgICAgIGF0dHJpYnV0ZTIud2VpZ2h0ID0gYXR0cmlidXRlLndlaWdodFxyXG4gICAgICAgICAgICAgICAgYXR0cmlidXRlMi5hc3NpZ25lZFdlaWdodCA9IGF0dHJpYnV0ZS5hc3NpZ25lZFdlaWdodFxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGFycmFuZ2UoKXtcclxuICAgICAgICBsZXQgc3RhcnRUaW1lID0gbmV3IERhdGUoKS5nZXRUaW1lKClcclxuXHJcbiAgICAgICAgdGhpcy5nLnNldEV4YWN0V2VpZ2h0cygpO1xyXG5cclxuICAgICAgICBsZXQgYmVzdF9jcm9zc2luZ3MgPSB0aGlzLmcuZ2V0RWRnZUNyb3NzaW5ncygpXHJcblxyXG4gICAgICAgIGZvciAobGV0IGk9MDsgaTx0aGlzLm1heF9pdGVyYXRpb25zOyBpKyspe1xyXG4gICAgICAgICAgICB0aGlzLmN1cl9pdGVyYXRpb24gPSBpO1xyXG4gICAgICAgICAgICBsZXQgY2xvbmVHcmFwaCA9IF8uY2xvbmVEZWVwKHRoaXMuZylcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIGlmIChpJTIgPT0gMCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5hcnJhbmdlTGVmdChjbG9uZUdyYXBoKVxyXG4gICAgICAgICAgICB9IGVsc2UgdGhpcy5hcnJhbmdlUmlnaHQoY2xvbmVHcmFwaClcclxuXHJcbiAgICAgICAgICAgIHRoaXMudHJhbnNwb3NlKGNsb25lR3JhcGgpO1xyXG5cclxuICAgICAgICAgICAgbGV0IGN1cl9jcm9zc2luZ3MgPSBjbG9uZUdyYXBoLmdldEVkZ2VDcm9zc2luZ3MoKVxyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgaWYgKGN1cl9jcm9zc2luZ3MgPD0gYmVzdF9jcm9zc2luZ3MpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuYXBwbHlBcnJhbmdlbWVudChjbG9uZUdyYXBoKVxyXG4gICAgICAgICAgICAgICAgYmVzdF9jcm9zc2luZ3MgPSBjdXJfY3Jvc3NpbmdzXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHRoaXMuaXRlcmF0aW9uc1t0aGlzLmN1cl9pdGVyYXRpb25dID0gXy5jbG9uZURlZXAoY2xvbmVHcmFwaCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLmVsYXBzZWRUaW1lID0gbmV3IERhdGUoKS5nZXRUaW1lKCkgLSBzdGFydFRpbWU7XHJcbiAgICB9XHJcblxyXG4gICAgYXJyYW5nZUxlZnQoZyl7XHJcbiAgICAgICAgY29uc29sZS5sb2coJ0xlZnQnKVxyXG4gICAgICAgIGxldCB0bXBXZWlnaHRzVGFibGVzID0ge307XHJcbiAgICAgICAgbGV0IHRtcEF0dHJpYnV0ZVdlaWdodHMgPSB7fTtcclxuXHJcbiAgICAgICAgZm9yIChsZXQgaT0xOyBpPD1nLm1heERlcHRoICsgMTsgaSsrKXtcclxuICAgICAgICAgICAgbGV0IGxheWVyVGFibGVzID0gZy50YWJsZUluZGV4W2ldO1xyXG4gICAgICAgICAgICBsZXQgbGF5ZXJFZGdlcyA9IGcuZWRnZUluZGV4W2ktMV07XHJcblxyXG4gICAgICAgICAgICBmb3IgKGxldCB0IGluIGxheWVyVGFibGVzKXtcclxuICAgICAgICAgICAgICAgIGxldCB0YWJsZSA9IGxheWVyVGFibGVzW3RdO1xyXG5cclxuICAgICAgICAgICAgICAgIGxldCB3ZWlnaHRzID0gbGF5ZXJFZGdlc1xyXG4gICAgICAgICAgICAgICAgICAgIC5maWx0ZXIoZSA9PiBlLnJpZ2h0VGFibGUgPT0gdGFibGUgJiYgIXRoaXMuaXNTYW1lUmFua0VkZ2UoZSkpXHJcbiAgICAgICAgICAgICAgICAgICAgLm1hcChlID0+IHBhcnNlRmxvYXQoZS5sZWZ0VGFibGUud2VpZ2h0KSlcclxuICAgICAgIFxyXG4gICAgICAgICAgICAgICAgbGV0IHZhbCA9IHRoaXMubWVkaWFuKHdlaWdodHMpO1xyXG4gICAgICAgICAgICAgICAgaWYgKCFpc05hTih2YWwpKSB0bXBXZWlnaHRzVGFibGVzW3RhYmxlLm5hbWVdID0gdmFsO1xyXG4gICAgICAgICAgICAgICAgdG1wQXR0cmlidXRlV2VpZ2h0c1t0YWJsZS5uYW1lXSA9IHt9O1xyXG5cclxuICAgICAgICAgICAgICAgIGZvciAobGV0IGF0dHJpYnV0ZSBvZiB0YWJsZS5hdHRyaWJ1dGVzKXtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgdGFibGVXZWlnaHRzID0gbGF5ZXJFZGdlc1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAuZmlsdGVyKGUgPT4gZS5yaWdodEF0dHJpYnV0ZSA9PSBhdHRyaWJ1dGUgICYmICF0aGlzLmlzU2FtZVJhbmtFZGdlKGUpKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAubWFwKGUgPT4gcGFyc2VGbG9hdChlLmxlZnRUYWJsZS53ZWlnaHQpKVxyXG5cclxuICAgICAgICAgICAgICAgICAgICBsZXQgYXR0cmlidXRlV2VpZ2h0cyA9IGxheWVyRWRnZXNcclxuICAgICAgICAgICAgICAgICAgICAgICAgLmZpbHRlcihlID0+IGUucmlnaHRBdHRyaWJ1dGUgPT0gYXR0cmlidXRlICAmJiAhdGhpcy5pc1NhbWVSYW5rRWRnZShlKSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgLm1hcChlID0+IHBhcnNlRmxvYXQoZS5sZWZ0QXR0cmlidXRlLndlaWdodCkpXHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGxldCB2YWwgPSBwYXJzZUZsb2F0KHRoaXMubWVkaWFuKHRhYmxlV2VpZ2h0cykpICsgcGFyc2VGbG9hdCh0aGlzLm1lZGlhbihhdHRyaWJ1dGVXZWlnaHRzKS90YWJsZS5hdHRyaWJ1dGVzLmxlbmd0aCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmICghaXNOYU4odmFsKSkgdG1wQXR0cmlidXRlV2VpZ2h0c1t0YWJsZS5uYW1lXVthdHRyaWJ1dGUubmFtZV0gPSB2YWw7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMucmVvcmRlcihnLCB0bXBXZWlnaHRzVGFibGVzLCB0bXBBdHRyaWJ1dGVXZWlnaHRzKTtcclxuICAgIH1cclxuXHJcbiAgICBhcnJhbmdlUmlnaHQoZyl7XHJcbiAgICAgICAgY29uc29sZS5sb2coJ1JpZ2h0JylcclxuICAgICAgICBsZXQgdG1wV2VpZ2h0c1RhYmxlcyA9IHt9O1xyXG4gICAgICAgIGxldCB0bXBBdHRyaWJ1dGVXZWlnaHRzID0ge307XHJcblxyXG4gICAgICAgIGZvciAobGV0IGkgPSBnLm1heERlcHRoIC0gMTsgaT4wOyBpLS0pe1xyXG4gICAgICAgICAgICBsZXQgbGF5ZXJUYWJsZXMgPSBnLnRhYmxlSW5kZXhbaV07XHJcbiAgICAgICAgICAgIGxldCBsYXllckVkZ2VzID0gZy5lZGdlSW5kZXhbaV07XHJcblxyXG4gICAgICAgICAgICBmb3IgKGxldCB0YWJsZSBvZiBsYXllclRhYmxlcyl7XHJcbiAgICAgICAgICAgICAgICBsZXQgd2VpZ2h0cyA9IGxheWVyRWRnZXNcclxuICAgICAgICAgICAgICAgICAgICAuZmlsdGVyKGUgPT4gZS5sZWZ0VGFibGUgPT0gdGFibGUpXHJcbiAgICAgICAgICAgICAgICAgICAgLm1hcChlID0+IHBhcnNlRmxvYXQoZS5yaWdodFRhYmxlLndlaWdodCkpXHJcblxyXG4gICAgICAgICAgICAgICAgbGV0IHZhbCA9IHBhcnNlRmxvYXQodGhpcy5tZWRpYW4od2VpZ2h0cykpO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmICghaXNOYU4odmFsKSkgdG1wV2VpZ2h0c1RhYmxlc1t0YWJsZS5uYW1lXSA9IHZhbDtcclxuICAgICAgICAgICAgICAgIHRtcEF0dHJpYnV0ZVdlaWdodHNbdGFibGUubmFtZV0gPSB7fTtcclxuXHJcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBhdHRyaWJ1dGUgb2YgdGFibGUuYXR0cmlidXRlcyl7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IHRhYmxlV2VpZ2h0cyA9IGxheWVyRWRnZXNcclxuICAgICAgICAgICAgICAgICAgICAgICAgLmZpbHRlcihlID0+IGUubGVmdEF0dHJpYnV0ZSA9PSBhdHRyaWJ1dGUpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC5tYXAoZSA9PiBwYXJzZUZsb2F0KGUucmlnaHRUYWJsZS53ZWlnaHQpKVxyXG5cclxuICAgICAgICAgICAgICAgICAgICBsZXQgYXR0cmlidXRlV2VpZ2h0cyA9IGxheWVyRWRnZXNcclxuICAgICAgICAgICAgICAgICAgICAgICAgLmZpbHRlcihlID0+IGUubGVmdEF0dHJpYnV0ZSA9PSBhdHRyaWJ1dGUpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC5tYXAoZSA9PiBwYXJzZUZsb2F0KGUucmlnaHRBdHRyaWJ1dGUud2VpZ2h0KSlcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IHZhbCA9IHBhcnNlRmxvYXQodGhpcy5tZWRpYW4odGFibGVXZWlnaHRzKSkgKyBwYXJzZUZsb2F0KHRoaXMubWVkaWFuKGF0dHJpYnV0ZVdlaWdodHMpL3RhYmxlLmF0dHJpYnV0ZXMubGVuZ3RoKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFpc05hTih2YWwpKSB0bXBBdHRyaWJ1dGVXZWlnaHRzW3RhYmxlLm5hbWVdW2F0dHJpYnV0ZS5uYW1lXSA9IHZhbDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5yZW9yZGVyKGcsIHRtcFdlaWdodHNUYWJsZXMsIHRtcEF0dHJpYnV0ZVdlaWdodHMpXHJcbiAgICB9XHJcblxyXG4gICAgaXNTYW1lUmFua0VkZ2UoZSl7XHJcbiAgICAgICAgcmV0dXJuIGUubGVmdFRhYmxlLmRlcHRoID09IGUucmlnaHRUYWJsZS5kZXB0aDtcclxuICAgIH1cclxuXHJcbiAgICByZW9yZGVyKGcsIHRtcFdlaWdodHNUYWJsZXMsIHRtcEF0dHJpYnV0ZVdlaWdodHMpe1xyXG4gICAgICAgIGZvciAobGV0IGkgaW4gZy50YWJsZUluZGV4KXtcclxuXHJcbiAgICAgICAgICAgIC8vIGlzIHRoaXMgY29ycmVjdD9cclxuICAgICAgICAgICAgaWYgKGkgPT0gMCkgY29udGludWU7XHJcblxyXG4gICAgICAgICAgICBmb3IgKGxldCBqIGluIGcudGFibGVJbmRleFtpXSl7XHJcbiAgICAgICAgICAgICAgICBsZXQgdGFibCA9IGcudGFibGVJbmRleFtpXVtqXTtcclxuXHJcbiAgICAgICAgICAgICAgICAvLyBpcyB0aGlzIGNvcnJlY3Q/XHJcbiAgICAgICAgICAgICAgICBpZiAodG1wV2VpZ2h0c1RhYmxlc1t0YWJsLm5hbWVdID09IHVuZGVmaW5lZCkgY29udGludWU7XHJcblxyXG4gICAgICAgICAgICAgICAgdGFibC53ZWlnaHQgPSB0bXBXZWlnaHRzVGFibGVzW3RhYmwubmFtZV07XHJcbiAgICAgICAgICAgICAgICB0YWJsLmFzc2lnbmVkV2VpZ2h0ID0gdG1wV2VpZ2h0c1RhYmxlc1t0YWJsLm5hbWVdO1xyXG5cclxuICAgICAgICAgICAgICAgIGZvciAobGV0IGsgaW4gdGFibC5hdHRyaWJ1dGVzKXtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgYXR0ciA9IHRhYmwuYXR0cmlidXRlc1trXVxyXG4gICAgICAgICAgICAgICAgICAgIGF0dHIud2VpZ2h0ID0gdG1wQXR0cmlidXRlV2VpZ2h0c1t0YWJsLm5hbWVdW2F0dHIubmFtZV1cclxuICAgICAgICAgICAgICAgICAgICBhdHRyLmFzc2lnbmVkV2VpZ2h0ID0gdG1wQXR0cmlidXRlV2VpZ2h0c1t0YWJsLm5hbWVdW2F0dHIubmFtZV1cclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICB0YWJsLmF0dHJpYnV0ZXMuc29ydCgoYSwgYikgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChpc05hTihhLndlaWdodCkgfHwgaXNOYU4oYi53ZWlnaHQpKSByZXR1cm4gMDtcclxuICAgICAgICAgICAgICAgICAgICBlbHNlIHJldHVybiBhLndlaWdodCA+IGIud2VpZ2h0ID8gMSA6IC0xO1xyXG4gICAgICAgICAgICAgICAgfSlcclxuXHJcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBrIGluIHRhYmwuYXR0cmlidXRlcyl7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IGF0dHIgPSB0YWJsLmF0dHJpYnV0ZXNba11cclxuICAgICAgICAgICAgICAgICAgICBhdHRyLndlaWdodCA9IGs7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGcudGFibGVJbmRleFtpXS5zb3J0KChhLCBiKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBpZiAoaXNOYU4oYS53ZWlnaHQpIHx8IGlzTmFOKGIud2VpZ2h0KSkgcmV0dXJuIDA7XHJcbiAgICAgICAgICAgICAgICBlbHNlIHJldHVybiBhLndlaWdodCA+IGIud2VpZ2h0ID8gMSA6IC0xO1xyXG4gICAgICAgICAgICB9KVxyXG5cclxuICAgICAgICAgICAgZm9yIChsZXQgaiBpbiBnLnRhYmxlSW5kZXhbaV0pe1xyXG4gICAgICAgICAgICAgICAgbGV0IHRhYmwgPSBnLnRhYmxlSW5kZXhbaV1bal07XHJcbiAgICAgICAgICAgICAgICB0YWJsLndlaWdodCA9IGo7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgdHJhbnNwb3NlKGcpe1xyXG4gICAgICAgIGxldCBpbXByb3ZlZCA9IHRydWU7XHJcbiAgICAgICAgd2hpbGUgKGltcHJvdmVkKXtcclxuICAgICAgICAgICAgaW1wcm92ZWQgPSBmYWxzZTtcclxuICAgICAgICAgICAgZm9yIChsZXQgaT0wOyBpPD1nLm1heERlcHRoOyBpKyspe1xyXG5cclxuICAgICAgICAgICAgICAgIGxldCBpbml0Q3Jvc3NpbmdzID0gZy5nZXRFZGdlQ3Jvc3NpbmdzQXREZXB0aChpKTtcclxuXHJcbiAgICAgICAgICAgICAgICBsZXQgbGF5ZXJUYWJsZXMgPSBnLnRhYmxlSW5kZXhbaV07XHJcbiAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgbGF5ZXJUYWJsZXMubGVuZ3RoIC0gMTsgaisrKXtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgdGFibGUxID0gbGF5ZXJUYWJsZXNbal07XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IHRhYmxlMiA9IGxheWVyVGFibGVzW2orMV07XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc3dhcCh0YWJsZTEsIHRhYmxlMik7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGxldCBjdXJDcm9zc2luZ3MgPSBnLmdldEVkZ2VDcm9zc2luZ3NBdERlcHRoKGkpICsgZy5nZXRFZGdlQ3Jvc3NpbmdzQXREZXB0aChpKzEpXHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChjdXJDcm9zc2luZ3MgPCBpbml0Q3Jvc3NpbmdzKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaW1wcm92ZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB0aGlzLnN3YXAodGFibGUxLCB0YWJsZTIpXHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgdGFibGUgb2YgbGF5ZXJUYWJsZXMpe1xyXG4gICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgIGZvciAobGV0IGs9MDsgayA8IHRhYmxlLmF0dHJpYnV0ZXMubGVuZ3RoIC0gMTsgaysrKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGF0dHIxID0gdGFibGUuYXR0cmlidXRlc1trXVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgYXR0cjIgPSB0YWJsZS5hdHRyaWJ1dGVzW2srMV1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc3dhcChhdHRyMSwgYXR0cjIpXHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgY3VyQ3Jvc3NpbmdzMiA9IGcuZ2V0RWRnZUNyb3NzaW5nc0F0RGVwdGgoaSkgKyBnLmdldEVkZ2VDcm9zc2luZ3NBdERlcHRoKGkrMSlcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjdXJDcm9zc2luZ3MyIDwgaW5pdENyb3NzaW5ncyl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbXByb3ZlZCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB0aGlzLnN3YXAoYXR0cjEsIGF0dHIyKVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBzd2FwKHcxLCB3Mil7XHJcbiAgICAgICAgbGV0IHRtcHcgPSB3MS53ZWlnaHQ7XHJcbiAgICAgICAgdzEud2VpZ2h0ID0gdzIud2VpZ2h0O1xyXG4gICAgICAgIHcyLndlaWdodCA9IHRtcHc7XHJcbiAgICB9XHJcbn0iLCJjbGFzcyBHcmFwaCB7XHJcbiAgICBjb25zdHJ1Y3RvcihvYmope1xyXG4gICAgICAgIGlmIChvYmogPT0gdW5kZWZpbmVkKXtcclxuICAgICAgICAgICAgdGhpcy5lZGdlcyA9IFtdOyBcclxuICAgICAgICAgICAgdGhpcy50YWJsZXMgPSBbXTsgXHJcbiAgICAgICAgICAgIHRoaXMudGFibGVJbmRleCA9IFtdOyBcclxuICAgICAgICAgICAgdGhpcy5lZGdlSW5kZXggPSBbXTtcclxuICAgICAgICAgICAgdGhpcy5tYXhEZXB0aCA9IDA7XHJcbiAgICAgICAgICAgIHRoaXMuZ3JvdXBzID0gW107XHJcbiAgICAgICAgICAgIHRoaXMuYmFzZVJvd0Rpc3RhbmNlID0gNjtcclxuICAgICAgICAgICAgdGhpcy5hdHRyaWJ1dGVDb3VudGVyID0gMDtcclxuICAgICAgICAgICAgdGhpcy5uZXdMYXllcigpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIG9iaiAmJiBPYmplY3QuYXNzaWduKHRoaXMsIG9iaik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIFxyXG4gICAgfVxyXG5cclxuICAgIGFkZEdyb3VwKGdyb3VwKXtcclxuICAgICAgICB0aGlzLmdyb3Vwcy5wdXNoKGdyb3VwKTtcclxuICAgICAgICBncm91cC5ncmFwaCA9IHRoaXM7XHJcbiAgICAgICAgZ3JvdXAuaWQgPSBcImdcIiArIHRoaXMuZ3JvdXBzLmluZGV4T2YoZ3JvdXApO1xyXG4gICAgICAgIGlmIChncm91cC5ncm91cEhlYWRlciAhPSB1bmRlZmluZWQpeyBcclxuICAgICAgICAgICAgbGV0IGdyb3VwSGVhZGVyVGFibGUgPSBncm91cC5ncm91cEhlYWRlclRhYmxlO1xyXG4gICAgICAgICAgICB0aGlzLmFkZFRhYmxlKGdyb3VwSGVhZGVyVGFibGUpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICB1cGRhdGVHcm91cENvb3Jkcygpe1xyXG4gICAgICAgIGZvciAobGV0IGdyb3VwIG9mIHRoaXMuZ3JvdXBzKXtcclxuICAgICAgICAgICAgZ3JvdXAudXBkYXRlQ29vcmRzKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIG5ld0xheWVyKCl7XHJcbiAgICAgICAgdGhpcy50YWJsZUluZGV4LnB1c2goW10pXHJcbiAgICAgICAgdGhpcy5lZGdlSW5kZXgucHVzaChbXSlcclxuICAgIH1cclxuXHJcbiAgICBhZGRUYWJsZSh0YWJsZSl7XHJcbiAgICAgICAgd2hpbGUodGhpcy5tYXhEZXB0aCA8PSB0YWJsZS5kZXB0aCl7XHJcbiAgICAgICAgICAgIHRoaXMubWF4RGVwdGgrPTE7XHJcbiAgICAgICAgICAgIHRoaXMubmV3TGF5ZXIoKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRhYmxlLmdyYXBoID0gdGhpcztcclxuXHJcbiAgICAgICAgdGhpcy50YWJsZXMucHVzaCh0YWJsZSk7XHJcbiAgICAgICAgdGhpcy50YWJsZUluZGV4W3RhYmxlLmRlcHRoXS5wdXNoKHRhYmxlKTtcclxuICAgIH1cclxuXHJcbiAgICBhZGRFZGdlKGVkZ2Upe1xyXG4gICAgICAgIHRoaXMuZWRnZXMucHVzaChlZGdlKVxyXG4gICAgICAgIHRoaXMuZWRnZUluZGV4W2VkZ2UubGVmdFRhYmxlLmRlcHRoXS5wdXNoKGVkZ2UpXHJcbiAgICB9XHJcblxyXG4gICAgYWRkQXR0cmlidXRlKHRhYmxlLCBhdHRyaWJ1dGUpe1xyXG4gICAgICAgIGF0dHJpYnV0ZS5pZCA9IGF0dHJpYnV0ZS5pZCArIHRoaXMuYXR0cmlidXRlQ291bnRlcjtcclxuICAgICAgICB0aGlzLmF0dHJpYnV0ZUNvdW50ZXIgKz0gMTtcclxuICAgICAgICB0YWJsZS5hdHRyaWJ1dGVzLnB1c2goYXR0cmlidXRlKTtcclxuICAgIH1cclxuXHJcbiAgICBlbnN1cmVVbmlxdWVFZGdlcygpe1xyXG4gICAgICAgIC8vIGZpbmlzaFxyXG4gICAgfVxyXG5cclxuICAgIGdldEVkZ2VDcm9zc2luZ3MoKXtcclxuICAgICAgICBsZXQgY291bnQgPSAwO1xyXG4gICAgICAgIGZvciAobGV0IGQgaW4gdGhpcy5lZGdlSW5kZXgpIGNvdW50ICs9IHRoaXMuZ2V0RWRnZUNyb3NzaW5nc0F0RGVwdGgoZCk7XHJcbiAgICAgICAgcmV0dXJuIGNvdW50O1xyXG4gICAgfVxyXG5cclxuICAgIGdldEVkZ2VDcm9zc2luZ3NBdERlcHRoKGQsIHZlcmJvc2U9ZmFsc2Upe1xyXG4gICAgICAgIGxldCBjcm9zc2luZ3MgPSAwO1xyXG4gICAgICAgIGxldCBsYXllckVkZ2VzID0gdGhpcy5lZGdlSW5kZXhbZF07XHJcblxyXG4gICAgICAgIGZvciAobGV0IGkgaW4gbGF5ZXJFZGdlcyl7XHJcbiAgICAgICAgICAgIGxldCBjdXJyRWRnZSA9IGxheWVyRWRnZXNbaV07XHJcbiAgICAgICAgICAgIGZvciAobGV0IGogPSBwYXJzZUZsb2F0KGkpKzE7IGogPCBsYXllckVkZ2VzLmxlbmd0aDsgaisrKXtcclxuICAgICAgICAgICAgICAgIGxldCBvdGhlckVkZ2UgPSBsYXllckVkZ2VzW2pdO1xyXG4gICAgICAgICAgICAgICAgaWYgKGN1cnJFZGdlLmNyb3NzZXMob3RoZXJFZGdlKSl7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHZlcmJvc2UpIGNvbnNvbGUubG9nKFwiRWRnZSBcIiArIGN1cnJFZGdlLmxlZnRBdHRyaWJ1dGUubmFtZSArIGN1cnJFZGdlLnJpZ2h0QXR0cmlidXRlLm5hbWUgKyBcIiBjcm9zc2VzIFwiICsgb3RoZXJFZGdlLmxlZnRBdHRyaWJ1dGUubmFtZSArIG90aGVyRWRnZS5yaWdodEF0dHJpYnV0ZS5uYW1lKVxyXG4gICAgICAgICAgICAgICAgICAgIGNyb3NzaW5ncys9MTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBcclxuICAgICAgICByZXR1cm4gY3Jvc3NpbmdzXHJcbiAgICB9XHJcblxyXG4gICAgc29ydEdyYXBoKCl7XHJcbiAgICAgICAgZm9yIChsZXQgdCBvZiB0aGlzLnRhYmxlcyl7XHJcbiAgICAgICAgICAgIGlmICghdC5tYWluKSB7XHJcbiAgICAgICAgICAgICAgICB0LmF0dHJpYnV0ZXMgPSB0LmF0dHJpYnV0ZXMuc29ydCgoYSwgYikgPT4gYS53ZWlnaHQgPiBiLndlaWdodD8gMSA6IC0xKVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLnRhYmxlcyA9IHRoaXMudGFibGVzLnNvcnQoKGEsIGIpID0+IGEud2VpZ2h0ID4gYi53ZWlnaHQ/IDEgOiAtMSlcclxuXHJcbiAgICAgICAgZm9yIChsZXQgdF9pbmQgb2YgdGhpcy50YWJsZUluZGV4KXtcclxuICAgICAgICAgICAgdF9pbmQuc29ydCgoYSwgYikgPT4gYS53ZWlnaHQgPiBiLndlaWdodD8gMSA6IC0xKVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBzZXRFeGFjdFdlaWdodHMoKXtcclxuICAgICAgICBmb3IgKGxldCBpIGluIHRoaXMudGFibGVJbmRleCl7XHJcbiAgICAgICAgICAgIGxldCBsYXllclRhYmxlcyA9IHRoaXMudGFibGVJbmRleFtpXTtcclxuICAgICAgICAgICAgbGF5ZXJUYWJsZXMgPSBsYXllclRhYmxlcy5zb3J0KChhLCBiKSA9PiB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gYS53ZWlnaHQgPiBiLndlaWdodD8gMSA6IC0xXHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICBmb3IgKGxldCBqIGluIGxheWVyVGFibGVzKXtcclxuICAgICAgICAgICAgICAgIGxldCB0YWJsZSA9IGxheWVyVGFibGVzW2pdXHJcbiAgICAgICAgICAgICAgICB0YWJsZS53ZWlnaHQgPSBwYXJzZUZsb2F0KGopXHJcblxyXG4gICAgICAgICAgICAgICAgbGV0IGF0dHJzID0gdGFibGUuYXR0cmlidXRlcztcclxuICAgICAgICAgICAgICAgIGF0dHJzID0gYXR0cnMuc29ydCgoYSwgYikgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBhLndlaWdodCA+IGIud2VpZ2h0PyAxIDogLTFcclxuICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgIGZvciAobGV0IGsgaW4gYXR0cnMpe1xyXG4gICAgICAgICAgICAgICAgICAgIGF0dHJzW2tdLndlaWdodCA9IHBhcnNlRmxvYXQoaylcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIFxyXG4gICAgICAgIHRoaXMudXBkYXRlR3JvdXBDb29yZHMoKVxyXG5cclxuICAgIH1cclxuXHJcbiAgICBnZXROdW1TdHJhaWdodEVkZ2VzKCl7XHJcbiAgICAgICAgbGV0IHJlcyA9IDA7XHJcbiAgICAgICAgZm9yIChsZXQgaSBpbiB0aGlzLmVkZ2VJbmRleCl7XHJcbiAgICAgICAgICAgIHJlcyArPSB0aGlzLmdldE51bVN0cmFpZ2h0RWRnZXNBdERlcHRoKGkpXHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiByZXM7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0TnVtU3RyYWlnaHRFZGdlc0F0RGVwdGgoaSl7XHJcbiAgICAgICAgbGV0IHJlcyA9IDBcclxuICAgICAgICBmb3IgKGxldCBlIG9mIHRoaXMuZWRnZUluZGV4W2ldKXtcclxuICAgICAgICAgICAgaWYgKGUubGVmdFRhYmxlLndlaWdodCA9PSBlLnJpZ2h0VGFibGUud2VpZ2h0KSByZXMgKz0gMVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gcmVzO1xyXG4gICAgfVxyXG5cclxuICAgIGFkanVzdFRhYmxlWVBvc2l0aW9uKCl7XHJcbiAgICAgICAgbGV0IGltcHJvdmVkID0gdHJ1ZTtcclxuICAgICAgICBcclxuICAgICAgICAvLyB3aGlsZSAoaW1wcm92ZWQpe1xyXG4gICAgICAgIC8vICAgICBpbXByb3ZlZCA9IGZhbHNlOyAgICAgXHJcblxyXG4gICAgICAgIC8vICAgICBmb3IgKGxldCBpPTE7IGk8dGhpcy50YWJsZUluZGV4Lmxlbmd0aDsgaSsrKXtcclxuICAgICAgICAvLyAgICAgICAgIGxldCB0YWJsZUNvbCA9IHRoaXMudGFibGVJbmRleFtpXTtcclxuICAgICAgICAvLyAgICAgICAgIGxldCBpbml0Q29sTGVuZ3RoID0gdGFibGVDb2wubGVuZ3RoO1xyXG5cclxuICAgICAgICAvLyAgICAgICAgIGxldCBiZXN0UG9zaXRpb24gPSB1bmRlZmluZWQ7XHJcbiAgICAgICAgLy8gICAgICAgICBsZXQgYmVzdE51bU9mU3RyYWlnaHRFZGdlcyA9IHRoaXMuZ2V0TnVtU3RyYWlnaHRFZGdlcygpO1xyXG4gICAgXHJcbiAgICAgICAgLy8gICAgICAgICBsZXQgY3VyU3RyYWlnaHRFZGdlcyA9IHRoaXMuZ2V0TnVtU3RyYWlnaHRFZGdlcygpO1xyXG4gICAgICAgICAgICAgICAgXHJcbiAgICAgICAgLy8gICAgICAgICBmb3IgKGxldCBqPTA7IGo8aW5pdENvbExlbmd0aDsgaisrKXtcclxuICAgICAgICAvLyAgICAgICAgICAgICBsZXQgdGVtcHRhYmxlID0gbmV3IFRhYmxlKCdibGFua18nICsgaSArIFwiX1wiICsgaiwgJ2JsYW5rXycgKyBpICsgXCJfXCIgKyBqLCBmYWxzZSwgaSk7XHJcbiAgICAgICAgLy8gICAgICAgICAgICAgdGVtcHRhYmxlLndlaWdodCA9IGogLSAwLjU7XHJcbiAgICBcclxuICAgICAgICAvLyAgICAgICAgICAgICB0aGlzLmFkZFRhYmxlKHRlbXB0YWJsZSk7XHJcbiAgICAgICAgLy8gICAgICAgICAgICAgdGhpcy5zZXRFeGFjdFdlaWdodHMoKTtcclxuXHJcbiAgICAgICAgLy8gICAgICAgICAgICAgaWYgKHRoaXMuZ2V0TnVtU3RyYWlnaHRFZGdlcygpID4gYmVzdE51bU9mU3RyYWlnaHRFZGdlcyl7XHJcbiAgICAgICAgLy8gICAgICAgICAgICAgICAgIGJlc3RQb3NpdGlvbiA9IGo7XHJcbiAgICAgICAgLy8gICAgICAgICAgICAgICAgIGJlc3ROdW1PZlN0cmFpZ2h0RWRnZXMgPSB0aGlzLmdldE51bVN0cmFpZ2h0RWRnZXMoKTtcclxuICAgICAgICAvLyAgICAgICAgICAgICAgICAgaW1wcm92ZWQgPSB0cnVlO1xyXG4gICAgICAgIC8vICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gICAgICAgICAgICAgdGhpcy50YWJsZXMuc3BsaWNlKHRoaXMudGFibGVzLmluZGV4T2YodGVtcHRhYmxlKSwgMSk7XHJcbiAgICAgICAgLy8gICAgICAgICAgICAgdGFibGVDb2wuc3BsaWNlKHRhYmxlQ29sLmluZGV4T2YodGVtcHRhYmxlKSwgMSk7XHJcbiAgICAgICAgLy8gICAgICAgICAgICAgdGhpcy5zZXRFeGFjdFdlaWdodHMoKTtcclxuICAgICAgICAvLyAgICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gICAgICAgICBpZiAoYmVzdFBvc2l0aW9uICE9IHVuZGVmaW5lZCl7XHJcbiAgICAgICAgLy8gICAgICAgICAgICAgbGV0IHRlbXB0YWJsZSA9IG5ldyBUYWJsZSgnYmxhbmtfJyArIGkgKyBcIl9cIiArIGJlc3RQb3NpdGlvbiwgJ2JsYW5rXycgKyBpICsgXCJfXCIgKyBiZXN0UG9zaXRpb24sIGZhbHNlLCBpKTtcclxuICAgICAgICAvLyAgICAgICAgICAgICB0ZW1wdGFibGUud2VpZ2h0ID0gYmVzdFBvc2l0aW9uIC0gMC41O1xyXG4gICAgICAgIC8vICAgICAgICAgICAgIHRlbXB0YWJsZS52aXNpYmlsaXR5ID0gJ2hpZGRlbic7XHJcblxyXG4gICAgICAgIC8vICAgICAgICAgICAgIHRoaXMuYWRkVGFibGUodGVtcHRhYmxlKTtcclxuICAgICAgICAvLyAgICAgICAgICAgICB0aGlzLnNldEV4YWN0V2VpZ2h0cygpO1xyXG4gICAgICAgIC8vICAgICAgICAgICAgIHRoaXMudXBkYXRlR3JvdXBDb29yZHMoKTtcclxuICAgICAgICAvLyAgICAgICAgIH0gIFxyXG4gICAgICAgIC8vICAgICB9XHJcbiAgICAgICAgLy8gfVxyXG5cclxuICAgICAgICB0aGlzLmFkanVzdEF0dHJPZmZzZXQoKVxyXG4gICAgfVxyXG5cclxuICAgIGdldEJlbmRMZWZ0KHRhYmxlKXtcclxuICAgICAgICBsZXQgZGVwdGggPSB0YWJsZS5kZXB0aDtcclxuXHJcbiAgICAgICAgbGV0IGVkZ2VDb2xMZWZ0ID0gdGhpcy5lZGdlSW5kZXhbZGVwdGgtMV07XHJcbiAgICAgICAgbGV0IGVkZ2VzTGVmdCA9IGVkZ2VDb2xMZWZ0LmZpbHRlcihlID0+IGUucmlnaHRUYWJsZSA9PSB0YWJsZSAmJiAhZS5pc1NhbWVSYW5rRWRnZSgpKTtcclxuXHJcbiAgICAgICAgaWYgKGVkZ2VzTGVmdC5sZW5ndGggPT0gMCkgcmV0dXJuIDBcclxuICAgICAgICBlbHNlIHJldHVybiBNYXRoLmFicyhlZGdlc0xlZnQubWFwKGUgPT4gZS5nZXRCZW5kaW5lc3MoKSkucmVkdWNlKChhLCBiKSA9PiB7XHJcbiAgICAgICAgICAgIHJldHVybiBNYXRoLnJvdW5kKGEqMTAwMCArIGIqMTAwMCkvMTAwMDtcclxuICAgICAgICB9KSk7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0QmVuZFJpZ2h0KHRhYmxlKXtcclxuICAgICAgICBsZXQgZGVwdGggPSB0YWJsZS5kZXB0aDtcclxuICAgICAgICBsZXQgZWRnZUNvbFJpZ2h0ID0gdGhpcy5lZGdlSW5kZXhbZGVwdGhdO1xyXG4gICAgICAgIGxldCBlZGdlc1JpZ2h0ID0gZWRnZUNvbFJpZ2h0LmZpbHRlcihlID0+IGUubGVmdFRhYmxlID09IHRhYmxlICYmICFlLmlzU2FtZVJhbmtFZGdlKCkpO1xyXG5cclxuICAgICAgICBpZiAoZWRnZXNSaWdodC5sZW5ndGggPT0gMCkgcmV0dXJuIDA7XHJcbiAgICAgICAgZWxzZSByZXR1cm4gTWF0aC5hYnMoZWRnZXNSaWdodC5tYXAoZSA9PiBlLmdldEJlbmRpbmVzcygpKS5yZWR1Y2UoKGEsIGIpID0+IHtcclxuICAgICAgICAgICAgcmV0dXJuIE1hdGgucm91bmQoYSoxMDAwICsgYioxMDAwKS8xMDAwO1xyXG4gICAgICAgIH0pKTtcclxuICAgIH1cclxuXHJcbiAgICBnZXRUYWJsZUJlbmRpbmVzcyh0YWJsZSl7XHJcbiAgICAgICAgbGV0IGRlcHRoID0gdGFibGUuZGVwdGg7XHJcblxyXG4gICAgICAgIGlmIChkZXB0aCA9PSAwKSByZXR1cm4gTWF0aC5yb3VuZCh0aGlzLmdldEJlbmRSaWdodCh0YWJsZSkqMTAwMCkvMTAwMDtcclxuICAgICAgICBlbHNlIHJldHVybiBNYXRoLnJvdW5kKHRoaXMuZ2V0QmVuZExlZnQodGFibGUpKjEwMDAgKyB0aGlzLmdldEJlbmRSaWdodCh0YWJsZSkqMTAwMCkvMTAwMDtcclxuICAgIH1cclxuXHJcbiAgICBnZXRHcmFwaFRvdGFsRWRnZUJlbmRpbmVzcygpe1xyXG4gICAgICAgIHJldHVybiBNYXRoLnJvdW5kKDEwMDAqdGhpcy50YWJsZXMubWFwKHQgPT4gdGhpcy5nZXRUYWJsZUJlbmRpbmVzcyh0KSkucmVkdWNlKChhLCBiKSA9PiBhICsgYikpLzEwMDA7XHJcbiAgICB9XHJcblxyXG4gICAgYWRqdXN0QXR0ck9mZnNldCgpe1xyXG4gICAgICAgIGxldCBpbXByb3ZlZCA9IHRydWU7XHJcbiAgICAgICAgbGV0IGN5Y2xlSW5kZXggPSAwO1xyXG5cclxuICAgICAgICBsZXQgZ2V0VXBwZXJCb3VuZCA9ICh0YWJsZUNvbCwgaykgPT4ge1xyXG4gICAgICAgICAgICBsZXQgdXBwZXJCb3VuZCA9IC0yO1xyXG4gICAgICAgICAgICBpZiAoayA9PSAwKSB1cHBlckJvdW5kID0gMDtcclxuICAgICAgICAgICAgZWxzZSB1cHBlckJvdW5kID0gdGFibGVDb2xbay0xXS52ZXJ0aWNhbEF0dHJPZmZzZXQgLSB0aGlzLmJhc2VSb3dEaXN0YW5jZSArIHRhYmxlQ29sW2stMV0uYXR0cmlidXRlcy5sZW5ndGggKyAyOyBcclxuICAgICAgICAgICAgcmV0dXJuIHVwcGVyQm91bmQ7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBsZXQgZ2V0TG93ZXJCb3VuZCA9ICh0YWJsZUNvbCwgaykgPT4ge1xyXG4gICAgICAgICAgICBsZXQgbG93ZXJCb3VuZCA9IDI7XHJcbiAgICAgICAgICAgIGlmICh0YWJsZUNvbC5sZW5ndGggPT0gMSB8fCB0YWJsZUNvbFtrKzFdID09IHVuZGVmaW5lZCkgbG93ZXJCb3VuZCA9IDIwOyAvLyByYW5kb20gYmlnIG51bWJlclxyXG4gICAgICAgICAgICBlbHNlIGxvd2VyQm91bmQgPSB0YWJsZUNvbFtrKzFdLnZlcnRpY2FsQXR0ck9mZnNldCArIHRoaXMuYmFzZVJvd0Rpc3RhbmNlIC0gdGFibGVDb2xba10uYXR0cmlidXRlcy5sZW5ndGggLSAyOyBcclxuICAgICAgICAgICAgLy9pZiAodGFibGVDb2xbaysxXSAhPSB1bmRlZmluZWQpIGNvbnNvbGUubG9nKHRhYmxlQ29sW2srMV0sIHRhYmxlQ29sW2srMV0udmVydGljYWxBdHRyT2Zmc2V0LCB0aGlzLmJhc2VSb3dEaXN0YW5jZSwgdGFibGUuYXR0cmlidXRlcy5sZW5ndGgpXHJcbiAgICAgICAgICAgIHJldHVybiBsb3dlckJvdW5kXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBsZXQgc3dpcGVSaWdodCA9ICgpID0+IHtcclxuICAgICAgICAgICAgZm9yIChsZXQgaT0wOyBpPHRoaXMudGFibGVJbmRleC5sZW5ndGg7IGkrKyl7XHJcbiAgICAgICAgICAgICAgICBsZXQgdGFibGVDb2wgPSB0aGlzLnRhYmxlSW5kZXhbaV07XHJcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBrPTA7IGs8dGFibGVDb2wubGVuZ3RoOyBrKyspe1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCB0YWJsZSA9IHRhYmxlQ29sW2tdO1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCBjdXJyQmVuZGluZXNzU3VtID0gdGhpcy5nZXRUYWJsZUJlbmRpbmVzcyh0YWJsZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgLy9sZXQgY3VyckJlbmRpbmVzc1N1bSA9IHRoaXMuZ2V0QmVuZFJpZ2h0KHRhYmxlKTtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgY3VyckJlc3RPZmZzZXQgPSB0YWJsZS52ZXJ0aWNhbEF0dHJPZmZzZXQ7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGxldCB1cHBlckJvdW5kID0gZ2V0VXBwZXJCb3VuZCh0YWJsZUNvbCwgayk7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IGxvd2VyQm91bmQgPSBnZXRMb3dlckJvdW5kKHRhYmxlQ29sLCBrKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gaWYgKGkgPT0gMyAmJiB0YWJsZUNvbFtrKzFdICE9IHVuZGVmaW5lZCkgY29uc29sZS5sb2codGFibGUubmFtZSwgJ2xvd2VyIGJvdW5kJywgbG93ZXJCb3VuZCxcclxuICAgICAgICAgICAgICAgICAgICAvLyAgICAgJ25leHQgb2Zmc2V0JywgdGFibGVDb2xbaysxXS52ZXJ0aWNhbEF0dHJPZmZzZXQsICdhdHRyaWJ1dGVzJywgdGFibGVDb2xba10uYXR0cmlidXRlcy5sZW5ndGgpXHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGZvciAobGV0IGogPSB1cHBlckJvdW5kOyBqIDw9IGxvd2VyQm91bmQ7IGorKyl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRhYmxlLnZlcnRpY2FsQXR0ck9mZnNldCA9IGo7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCB0ZW1wQmVuZGluZXNzU3VtID0gdGhpcy5nZXRUYWJsZUJlbmRpbmVzcyh0YWJsZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vbGV0IHRlbXBCZW5kaW5lc3NTdW0gPSB0aGlzLmdldEJlbmRSaWdodCh0YWJsZSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBpZiAoaSA9PSAzKSBjb25zb2xlLmxvZyh0YWJsZS5uYW1lLCAnY2hhbmdlIHByb3Bvc2FsJywgaiwgJ2JlbmRzJyAsdGVtcEJlbmRpbmVzc1N1bSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0ZW1wQmVuZGluZXNzU3VtIDw9IGN1cnJCZW5kaW5lc3NTdW0pe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY3VyckJlc3RPZmZzZXQgPSBqO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY3VyckJlbmRpbmVzc1N1bSA9IHRlbXBCZW5kaW5lc3NTdW07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbXByb3ZlZCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBpZiAoaSA9PSAzKSBjb25zb2xlLmxvZyh0YWJsZS5uYW1lLCAnY2hhbmdlIGFjY2VwdGVkJylcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgIFxyXG4gICAgICAgICAgICAgICAgICAgIHRhYmxlLnZlcnRpY2FsQXR0ck9mZnNldCA9IGN1cnJCZXN0T2Zmc2V0O1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBsZXQgc3dpcGVMZWZ0ID0gKCkgPT4ge1xyXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gdGhpcy50YWJsZUluZGV4Lmxlbmd0aCAtIDE7IGk+MDsgaS0tKXtcclxuICAgICAgICAgICAgICAgIGxldCB0YWJsZUNvbCA9IHRoaXMudGFibGVJbmRleFtpXTtcclxuXHJcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBrPXRhYmxlQ29sLmxlbmd0aCAtIDE7IGsgPj0gMDsgay0tKXtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgdGFibGUgPSB0YWJsZUNvbFtrXTtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgY3VyckJlbmRpbmVzc1N1bSA9IHRoaXMuZ2V0VGFibGVCZW5kaW5lc3ModGFibGUpO1xyXG4gICAgICAgICAgICAgICAgICAgIC8vbGV0IGN1cnJCZW5kaW5lc3NTdW0gPSB0aGlzLmdldEJlbmRMZWZ0KHRhYmxlKTtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgY3VyckJlc3RPZmZzZXQgPSB0YWJsZS52ZXJ0aWNhbEF0dHJPZmZzZXQ7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGxldCB1cHBlckJvdW5kID0gZ2V0VXBwZXJCb3VuZCh0YWJsZUNvbCwgayk7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IGxvd2VyQm91bmQgPSBnZXRMb3dlckJvdW5kKHRhYmxlQ29sLCBrKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgXHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGZvciAobGV0IGogPSB1cHBlckJvdW5kOyBqIDw9IGxvd2VyQm91bmQ7IGorKyl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRhYmxlLnZlcnRpY2FsQXR0ck9mZnNldCA9IGo7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCB0ZW1wQmVuZGluZXNzU3VtID0gdGhpcy5nZXRUYWJsZUJlbmRpbmVzcyh0YWJsZSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvL2lmICh0YWJsZS5uYW1lID09IFwiVDF5MFwiKSBjb25zb2xlLmxvZygncHJvcG9zYWwnLCBqLCAncHJvcG9zYWwgYmVuZCcsIHRlbXBCZW5kaW5lc3NTdW0sIHRoaXMuYmFzZVJvd0Rpc3RhbmNlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0ZW1wQmVuZGluZXNzU3VtIDwgY3VyckJlbmRpbmVzc1N1bSl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdXJyQmVzdE9mZnNldCA9IGo7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdXJyQmVuZGluZXNzU3VtID0gdGVtcEJlbmRpbmVzc1N1bTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgIFxyXG4gICAgICAgICAgICAgICAgICAgIHRhYmxlLnZlcnRpY2FsQXR0ck9mZnNldCA9IGN1cnJCZXN0T2Zmc2V0O1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB3aGlsZSAoY3ljbGVJbmRleCA8IDEwKXtcclxuICAgICAgICAgICAgLy9jb25zb2xlLmxvZyhjeWNsZUluZGV4LCAoY3ljbGVJbmRleCAlIDIgPT0gMD8gJ3JpZ2h0JyA6ICdsZWZ0JyksIHRoaXMuZ2V0R3JhcGhUb3RhbEVkZ2VCZW5kaW5lc3MoKSk7XHJcbiAgICAgICAgICAgIGN5Y2xlSW5kZXgrKztcclxuXHJcbiAgICAgICAgICAgIGlmIChjeWNsZUluZGV4ICUgMiA9PSAwKSBzd2lwZVJpZ2h0KClcclxuICAgICAgICAgICAgZWxzZSBzd2lwZUxlZnQoKVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy51cGRhdGVHcm91cENvb3JkcygpO1xyXG4gICAgfVxyXG59XHJcblxyXG4iLCJjbGFzcyBHcmFwaEdlbmVyYXRvciB7XHJcbiAgICBjb25zdHJ1Y3RvcihkZXB0aD0zLCBzZWVkPVwiaGVsbG9cIiwgdGFibGVEaXN0cmlidXRpb24gPSBbMiwzXSwgYXR0cmlidXRlRGlzdHJpYnV0aW9uPVsxLCA1XSwgc2FtZUVkZ2VEaXN0cmlidXRpb249MC4wNSwgcmFuZG9tRWRnZURpc3RyaWJ1dGlvbj0wLjA1KXtcclxuICAgICAgICB0aGlzLmQgPSBkZXB0aDtcclxuICAgICAgICB0aGlzLnMgPSAzO1xyXG4gICAgICAgIHRoaXMuamQgPSAwLjE7XHJcbiAgICAgICAgdGhpcy52ID0gcmFuZG9tRWRnZURpc3RyaWJ1dGlvbjtcclxuICAgICAgICB0aGlzLmpzID0gc2FtZUVkZ2VEaXN0cmlidXRpb247XHJcbiAgICAgICAgdGhpcy5hdHRyaWJ1dGVDb3VudGVyID0gMDtcclxuICAgICAgICB0aGlzLnNlZWQgPSBzZWVkO1xyXG5cclxuICAgICAgICB0aGlzLnRhYmxlRGlzdHJpYnV0aW9uID0gdGFibGVEaXN0cmlidXRpb247XHJcbiAgICAgICAgdGhpcy5hdHRyaWJ1dGVEaXN0cmlidXRpb24gPSBhdHRyaWJ1dGVEaXN0cmlidXRpb247XHJcblxyXG4gICAgICAgIC8vIHJhbmRvbSBudW1iZXIgZ2VuZXJhdG9yc1xyXG4gICAgICAgIHRoaXMucm5nID0gbmV3IE1hdGguc2VlZHJhbmRvbSh0aGlzLnNlZWQpO1xyXG4gICAgICAgIHRoaXMudGFibGVEaXN0ID0gKCkgPT4gdGFibGVEaXN0cmlidXRpb25bMF0gKyBNYXRoLnJvdW5kKHRoaXMucm5nKCkgKiAodGFibGVEaXN0cmlidXRpb25bMV0gLSB0YWJsZURpc3RyaWJ1dGlvblswXSkpXHJcbiAgICAgICAgdGhpcy5hdHRyRGlzdCA9ICgpID0+IGF0dHJpYnV0ZURpc3RyaWJ1dGlvblswXSArIE1hdGgucm91bmQodGhpcy5ybmcoKSAqIChhdHRyaWJ1dGVEaXN0cmlidXRpb25bMV0gLSBhdHRyaWJ1dGVEaXN0cmlidXRpb25bMF0pKVxyXG4gICAgfVxyXG5cclxuICAgIGdlbmVyYXRlKCl7XHJcbiAgICAgICAgZyA9IG5ldyBHcmFwaCgpXHJcbiAgICAgICAgZy5iYXNlUm93RGlzdGFuY2UgPSB0aGlzLmF0dHJpYnV0ZURpc3RyaWJ1dGlvblsxXSArIDI7XHJcblxyXG4gICAgICAgIGZvciAodmFyIGk9MTsgaTx0aGlzLmQ7IGkrKyl7XHJcbiAgICAgICAgICAgIGcubmV3TGF5ZXIoKVxyXG4gICAgICAgICAgICBmb3IgKHZhciBqPTA7IGo8dGhpcy50YWJsZURpc3QoKTsgaisrKXtcclxuICAgICAgICAgICAgICAgIGcuYWRkVGFibGUodGhpcy5nZW5lcmF0ZVRhYmxlKGksIGopKVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLmdlbmVyYXRlUHJvamVjdGlvbnMoZyk7XHJcbiAgICAgICAgdGhpcy5nZW5lcmF0ZUpvaW5zKGcpO1xyXG4gICAgICAgIFxyXG4gICAgICAgIGcuZW5zdXJlVW5pcXVlRWRnZXMoKTtcclxuXHJcbiAgICAgICAgcmV0dXJuIGc7XHJcbiAgICB9XHJcblxyXG4gICAgZ2VuZXJhdGVUYWJsZShkZXB0aCwgaW5kZXgpe1xyXG4gICAgICAgIG5hbWUgPSBcIlRcIiArIGRlcHRoICsgXCJ5XCIgKyBpbmRleFxyXG4gICAgICAgIHZhciBuZXdUYWJsZSA9IG5ldyBUYWJsZShuYW1lLCBuYW1lLCBmYWxzZSwgZGVwdGgpO1xyXG5cclxuICAgICAgICBmb3IgKHZhciBpPTA7IGk8dGhpcy5hdHRyRGlzdCgpOyBpKyspe1xyXG4gICAgICAgICAgICBuZXdUYWJsZS5hZGRBdHRyaWJ1dGUoXCJhXCIgKyB0aGlzLmF0dHJpYnV0ZUNvdW50ZXIpO1xyXG4gICAgICAgICAgICB0aGlzLmF0dHJpYnV0ZUNvdW50ZXIgKz0gMTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBuZXdUYWJsZVxyXG4gICAgfVxyXG5cclxuICAgIGdlbmVyYXRlUHJvamVjdGlvbnMoZyl7XHJcbiAgICAgICAgbGV0IGxheWVyMSA9IGcudGFibGVJbmRleFsxXTtcclxuICAgICAgICBsZXQgbGF5ZXIxYXR0cnMgPSBbXTtcclxuICAgICAgICBsZXQgc2VsZWN0VGFibGUgPSBuZXcgVGFibGUoXCJzZWxlY3RcIiwgXCJTRUxFQ1RcIiwgdHJ1ZSwgMClcclxuICAgICAgICBsZXQgcHJvamVjdGVkQXR0cnMgPSBbXTtcclxuICAgICAgICBsZXQgcHJvamVjdGVkID0gW107XHJcbiAgICAgICAgbGV0IHByb2plY3RlZENvdW50ID0gMDtcclxuXHJcbiAgICAgICAgZm9yIChsZXQgdCBvZiBsYXllcjEpe1xyXG4gICAgICAgICAgICBsZXQgYXR0cnMgPSB0LmF0dHJpYnV0ZXM7XHJcbiAgICAgICAgICAgIGxldCBzdHJpY3RJbmRleCA9IE1hdGguZmxvb3IodGhpcy5ybmcoKSphdHRycy5sZW5ndGgpXHJcbiAgICAgICAgICAgIGxldCBzdHJpY3QgPSBhdHRyc1tzdHJpY3RJbmRleF1cclxuICAgICAgICAgICAgcHJvamVjdGVkQXR0cnMucHVzaChzdHJpY3QpXHJcbiAgICAgICAgICAgIHByb2plY3RlZC5wdXNoKHN0cmljdClcclxuXHJcbiAgICAgICAgICAgIGZvciAobGV0IGF0dHIgb2YgYXR0cnMpe1xyXG4gICAgICAgICAgICAgICAgaWYgKGF0dHIgIT0gc3RyaWN0KXtcclxuICAgICAgICAgICAgICAgICAgICBsYXllcjFhdHRycy5wdXNoKG5ldyBBdHRyaWJ1dGUodCwgYXR0cikpXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcHJvamVjdGVkQ291bnQrKztcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGxldCBjb3VudFByb2plY3Rpb25zID0gdGhpcy5zICogKGxheWVyMWF0dHJzLmxlbmd0aCArIHByb2plY3RlZENvdW50KVxyXG5cclxuICAgICAgICBnLmFkZFRhYmxlKHNlbGVjdFRhYmxlKVxyXG5cclxuICAgICAgICBmb3IgKDsgcHJvamVjdGVkQ291bnQ8Y291bnRQcm9qZWN0aW9uczsgcHJvamVjdGVkQ291bnQrKyl7XHJcbiAgICAgICAgICAgIGxldCBhdHRySW5kZXggPSBNYXRoLmZsb29yKHRoaXMucm5nKCkqbGF5ZXIxYXR0cnMubGVuZ3RoKVxyXG4gICAgICAgICAgICBsZXQgYXR0ciA9IGxheWVyMWF0dHJzW2F0dHJJbmRleF1cclxuICAgICAgICAgICAgbGF5ZXIxYXR0cnMuc3BsaWNlKGF0dHJJbmRleCwgMSlcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZvciAobGV0IGF0dHIgb2YgcHJvamVjdGVkQXR0cnMpe1xyXG4gICAgICAgICAgICBsZXQgbmV3QXR0ciA9IG5ldyBBdHRyaWJ1dGUoc2VsZWN0VGFibGUsIFwiYVwiICsgdGhpcy5hdHRyaWJ1dGVDb3VudGVyKyspXHJcbiAgICAgICAgICAgIG5ld0F0dHIubXV0YWJsZSA9IGZhbHNlO1xyXG4gICAgICAgICAgICBzZWxlY3RUYWJsZS5hdHRyaWJ1dGVzLnB1c2gobmV3QXR0cilcclxuICAgICAgICAgICAgZy5hZGRFZGdlKG5ldyBFZGdlKHNlbGVjdFRhYmxlLCBuZXdBdHRyLCBhdHRyLnRhYmxlLCBhdHRyKSlcclxuICAgICAgICB9XHJcbiAgICBcclxuICAgICAgICAvLyB3ZWlyZC4gbm90IGZpbmlzaGVkLlxyXG4gICAgfVxyXG5cclxuICAgIGdlbmVyYXRlSW50ZXJMYXllckpvaW5zKGcpe1xyXG4gICAgICAgIGZvciAodmFyIGkgPSAxOyBpIDwgdGhpcy5kOyBpKyspe1xyXG4gICAgICAgICAgICBsZXQgbGVmdExheWVyID0gZy50YWJsZUluZGV4W2ldO1xyXG4gICAgICAgICAgICBsZXQgcmlnaHRMYXllciA9IGcudGFibGVJbmRleFtpICsgMV07XHJcblxyXG4gICAgICAgICAgICBsZXQgbGVmdExheWVyQXR0cnMgPSBbXTtcclxuICAgICAgICAgICAgbGV0IHJpZ2h0TGF5ZXJBdHRycyA9IFtdO1xyXG5cclxuICAgICAgICAgICAgZm9yIChsZXQgdGFibGUgb2YgbGVmdExheWVyKXtcclxuICAgICAgICAgICAgICAgIGxldCBhdHRycyA9IHRhYmxlLmF0dHJpYnV0ZXM7XHJcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBhdHRyIG9mIGF0dHJzKXtcclxuICAgICAgICAgICAgICAgICAgICBsZWZ0TGF5ZXJBdHRycy5wdXNoKG5ldyBBdHRyaWJ1dGUodGFibGUsIGF0dHIpKVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBmb3IgKGxldCB0YWJsZSBvZiByaWdodExheWVyKXtcclxuICAgICAgICAgICAgICAgIGlmIChsZWZ0TGF5ZXJBdHRycy5sZW5ndGggPT0gMCkgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBsZXQgYXR0cnMgPSB0YWJsZS5hdHRyaWJ1dGVzO1xyXG5cclxuICAgICAgICAgICAgICAgIGxldCBzdHJpY3QgPSBhdHRyc1tNYXRoLmZsb29yKHRoaXMucm5nKCkqYXR0cnMubGVuZ3RoKV1cclxuICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgbGV0IGxlZnRJbmRleCA9IE1hdGguZmxvb3IodGhpcy5ybmcoKSpsZWZ0TGF5ZXJBdHRycy5sZW5ndGgpXHJcbiAgICAgICAgICAgICAgICBsZXQgbGVmdCA9IGxlZnRMYXllckF0dHJzW2xlZnRJbmRleF1cclxuICAgICAgICAgICAgICAgIGxlZnRMYXllckF0dHJzLnNwbGljZShsZWZ0SW5kZXgsIDEpXHJcblxyXG4gICAgICAgICAgICAgICAgZy5hZGRFZGdlKG5ldyBFZGdlKGxlZnQudGFibGUsIGxlZnQuYXR0ciwgdGFibGUsIHN0cmljdCkpXHJcblxyXG4gICAgICAgICAgICAgICAgbGVmdC5kaWZmRWRnZXMrKztcclxuICAgICAgICAgICAgICAgIHN0cmljdC5kaWZmRWRnZXMrKztcclxuXHJcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBhdHRyIG9mIGF0dHJzKXtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoYXR0ciAhPSBzdHJpY3QpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJpZ2h0TGF5ZXJBdHRycy5wdXNoKG5ldyBBdHRyaWJ1dGUodGFibGUsIGF0dHIpKVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBmb3IgKGxldCBsZWZ0IG9mIGxlZnRMYXllckF0dHJzKXtcclxuICAgICAgICAgICAgICAgIGlmIChyaWdodExheWVyQXR0cnMubGVuZ3RoID09IDApIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMucm5nKCkgPCB0aGlzLmpkKXtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgcmlnaHRJbmRleCA9IE1hdGguZmxvb3IodGhpcy5ybmcoKSpyaWdodExheWVyQXR0cnMubGVuZ3RoKVxyXG4gICAgICAgICAgICAgICAgICAgIGxldCByaWdodCA9IHJpZ2h0TGF5ZXJBdHRyc1tyaWdodEluZGV4XVxyXG4gICAgICAgICAgICAgICAgICAgIHJpZ2h0TGF5ZXJBdHRycy5zcGxpY2UocmlnaHRJbmRleCwgMSlcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgZy5hZGRFZGdlKG5ldyBFZGdlKGxlZnQudGFibGUsIGxlZnQuYXR0ciwgcmlnaHQudGFibGUsIHJpZ2h0LmF0dHIpKVxyXG5cclxuICAgICAgICAgICAgICAgICAgICBsZWZ0LmRpZmZFZGdlcysrO1xyXG4gICAgICAgICAgICAgICAgICAgIHJpZ2h0LmRpZmZFZGdlcysrO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGdlbmVyYXRlSW5MYXllckpvaW5zKCl7XHJcbiAgICAgICAgZm9yICh2YXIgaT0xOyBpPHRoaXMuZDsgaSsrKXtcclxuICAgICAgICAgICAgbGV0IGxheWVyID0gZy50YWJsZUluZGV4W2ldO1xyXG5cclxuICAgICAgICAgICAgZm9yIChsZXQgdDEgb2YgbGF5ZXIpe1xyXG4gICAgICAgICAgICAgICAgbGV0IGF0dHJzMSA9IFtdO1xyXG4gICAgICAgICAgICAgICAgbGV0IGF0dHJzMiA9IFtdO1xyXG5cclxuICAgICAgICAgICAgICAgIGZvciAobGV0IGF0dHIgb2YgdDEuYXR0cmlidXRlcyl7XHJcbiAgICAgICAgICAgICAgICAgICAgYXR0cnMxLnB1c2gobmV3IEF0dHJpYnV0ZSh0MSwgYXR0cikpXHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgdDIgb2YgbGF5ZXIpe1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0MSA9PSB0MikgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgYXR0ciBvZiB0Mi5hdHRyaWJ1dGVzKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGF0dHIuc2FtZUVkZ2VzID09IDApXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhdHRyczIucHVzaChuZXcgQXR0cmlidXRlKHQyLCBhdHRyKSlcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgYXR0cjEgb2YgYXR0cnMxKXtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoYXR0cnMyLmxlbmd0aCA9PSAwKSBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5ybmcoKSA8IHRoaXMuanMpe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgYXR0cjJpbmRleCA9IE1hdGguZmxvb3IodGhpcy5ybmcoKSphdHRyczIubGVuZ3RoKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgYXR0cjIgPSBhdHRyczJbYXR0cjJpbmRleF1cclxuICAgICAgICAgICAgICAgICAgICAgICAgYXR0cnMyLnNwbGljZShhdHRyMmluZGV4LCAxKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICAgICAgZy5hZGRFZGdlKG5ldyBFZGdlKGF0dHIxLnRhYmxlLCBhdHRyMS5hdHRyLCBhdHRyMi50YWJsZSwgYXR0cjIuYXR0cikpXHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBhdHRyMS5zYW1lRWRnZXMrKztcclxuICAgICAgICAgICAgICAgICAgICAgICAgYXR0cjIuc2FtZUVkZ2VzKys7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGdlbmVyYXRlUmFuZG9tSm9pbnMoZyl7XHJcbiAgICAgICAgbGV0IGxlZnRBdHRycyA9IFtdO1xyXG5cclxuICAgICAgICBmb3IgKGxldCBpPTE7IGk8dGhpcy5kOyBpKyspe1xyXG4gICAgICAgICAgICBsZXQgY3VyckF0dHJzID0gZy50YWJsZUluZGV4W2ldLm1hcCh0ID0+IHQuYXR0cmlidXRlcykuZmxhdCgpLmZpbHRlcihhID0+IGcuZWRnZXMuZmluZChlID0+IGUucmlnaHRBdHRyaWJ1dGUgPT0gYSkgPT0gdW5kZWZpbmVkKVxyXG4gICAgICAgICAgICBsZXQgcmlnaHRBdHRycyA9IGcudGFibGVJbmRleFtpICsgMV0ubWFwKHQgPT4gdC5hdHRyaWJ1dGVzKS5mbGF0KClcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIGZvciAobGV0IHRhIG9mIGN1cnJBdHRycyl7XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5ybmcoKSA8IHRoaXMudil7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IHJhdGlvID0gbGVmdEF0dHJzLmxlbmd0aCAvIChsZWZ0QXR0cnMubGVuZ3RoICsgcmlnaHRBdHRycy5sZW5ndGgpXHJcbiAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMucm5nKCkgPCByYXRpbyl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCB0bXBJbmRleCA9IE1hdGguZmxvb3IodGhpcy5ybmcoKSpsZWZ0QXR0cnMubGVuZ3RoKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgb3RoZXIgPSBsZWZ0QXR0cnNbdG1wSW5kZXhdXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxlZnRBdHRycy5zcGxpY2UodG1wSW5kZXgsIDEpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGcuYWRkRWRnZShuZXcgRWRnZShvdGhlci50YWJsZSwgb3RoZXIsIHRhLnRhYmxlLCB0YSkpXHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBsZWZ0QXR0cnMgPSBjdXJyQXR0cnMuZmlsdGVyKGEgPT4gZy5lZGdlcy5maW5kKGUgPT4gZS5sZWZ0QXR0cmlidXRlID09IGEpID09IHVuZGVmaW5lZCk7XHJcbiAgICAgICAgICAgIGN1cnJBdHRycyA9IFtdO1xyXG4gICAgICAgICAgICByaWdodEF0dHJzID0gW107XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGdlbmVyYXRlSm9pbnMoZyl7XHJcbiAgICAgICAgdGhpcy5nZW5lcmF0ZUludGVyTGF5ZXJKb2lucyhnKTtcclxuICAgICAgICB0aGlzLmdlbmVyYXRlSW5MYXllckpvaW5zKGcpO1xyXG4gICAgICAgIHRoaXMuZ2VuZXJhdGVSYW5kb21Kb2lucyhnKTtcclxuICAgIH1cclxufSIsImNsYXNzIEdyb3VwIHtcbiAgICBjb25zdHJ1Y3Rvcihncm91cEhlYWRlciA9IHVuZGVmaW5lZCl7XG4gICAgICAgIHRoaXMudGFibGVzID0gW107XG4gICAgICAgIHRoaXMuY29vcmRzID0gW107XG4gICAgICAgIHRoaXMueF9jb29yZCA9IDA7XG4gICAgICAgIHRoaXMueV9jb29yZCA9IDA7XG4gICAgICAgIHRoaXMud2lkdGhfY29vcmQgPSAwO1xuICAgICAgICB0aGlzLmhlaWdodF9jb29yZCA9IDA7XG4gICAgICAgIHRoaXMuaWQgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMubWFyZ2luID0gNTtcbiAgICAgICAgdGhpcy5ncmFwaCA9IHVuZGVmaW5lZDtcblxuICAgICAgICBpZiAoZ3JvdXBIZWFkZXIgIT0gdW5kZWZpbmVkKXtcbiAgICAgICAgICAgIHRoaXMuZ3JvdXBIZWFkZXIgPSBcImNvdW50XCI7XG4gICAgICAgICAgICB0aGlzLmdyb3VwSGVhZGVyVGFibGUgPSBuZXcgVGFibGUodGhpcy5ncm91cEhlYWRlciwgdGhpcy5ncm91cEhlYWRlciwgdHJ1ZSwgMjAsIFwiZ3JvdXBoZWFkZXJcIik7XG4gICAgICAgICAgICB0aGlzLmFkZFRhYmxlKHRoaXMuZ3JvdXBIZWFkZXJUYWJsZSk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLmNvb3JkcyA9IFtdO1xuICAgIH1cblxuICAgIGFkZFRhYmxlKHRhYmxlKXtcbiAgICAgICAgdGFibGUuZ3JvdXAgPSB0aGlzO1xuICAgICAgICB0YWJsZS5ncm91cHMucHVzaCh0aGlzKTtcbiAgICAgICAgdGhpcy50YWJsZXMucHVzaCh0YWJsZSk7XG4gICAgICAgIHRoaXMudXBkYXRlQ29vcmRzKCk7XG4gICAgfVxuXG4gICAgdXBkYXRlQ29vcmRzUHJlY2lzZSgpe1xuICAgICAgICB0aGlzLmNvb3JkcyA9IFtdO1xuICAgICAgICAvLyB0aGlzIHdpbGwgbmVlZCB0byBiZSBjaGFuZ2VkIGluIGNhc2Ugd2UgZGVjaWRlIHRvIHVzZSBhIHZlcnRpY2FsIHBvc2l0aW9uaW5nIHRoYXQgaXMgbm90IGZpeGVkXG5cbiAgICAgICAgbGV0IGxlZnRNYXhEZXB0aCA9IE1hdGgubWluLmFwcGx5KDAsIHRoaXMudGFibGVzLm1hcCh0ID0+IHQuZGVwdGgpKTtcbiAgICAgICAgbGV0IGxlZnRUYWJsZSA9IHRoaXMudGFibGVzLmZpbmQodCA9PiB0LmRlcHRoID09IGxlZnRNYXhEZXB0aCk7XG4gICAgICAgIHRoaXMueF9jb29yZCA9IGxlZnRUYWJsZS5kZXB0aDtcblxuICAgICAgICBsZXQgdG9wTWF4ID0gTWF0aC5taW4uYXBwbHkoMCwgdGhpcy50YWJsZXMubWFwKHQgPT4gdC53ZWlnaHQpKTtcbiAgICAgICAgbGV0IHRvcFRhYmxlID0gdGhpcy50YWJsZXMuZmluZCh0ID0+IHQud2VpZ2h0ID09IHRvcE1heCk7XG4gICAgICAgIHRoaXMueV9jb29yZCA9IHRvcFRhYmxlLndlaWdodDtcblxuICAgICAgICBsZXQgcmlnaHRNYXggPSBNYXRoLm1heC5hcHBseSgwLCB0aGlzLnRhYmxlcy5tYXAodCA9PiB0LmRlcHRoKSk7XG4gICAgICAgIGxldCByaWdodFRhYmxlID0gdGhpcy50YWJsZXMuZmluZCh0ID0+IHQuZGVwdGggPT0gcmlnaHRNYXgpO1xuICAgICAgICB0aGlzLndpZHRoX2Nvb3JkID0gcmlnaHRUYWJsZS5kZXB0aCAtIGxlZnRUYWJsZS5kZXB0aDtcbiAgICAgICAgXG4gICAgICAgIGxldCBib3R0b21NYXggPSBNYXRoLm1heC5hcHBseSgwLCB0aGlzLnRhYmxlcy5tYXAodCA9PiB0LndlaWdodCkpO1xuICAgICAgICBsZXQgYm90dG9tVGFibGUgPSB0aGlzLnRhYmxlcy5maW5kKHQgPT4gdC53ZWlnaHQgPT0gYm90dG9tTWF4KTtcbiAgICAgICAgdGhpcy5oZWlnaHRfY29vcmQgPSBib3R0b21UYWJsZS53ZWlnaHQgLSB0b3BUYWJsZS53ZWlnaHQ7XG5cbiAgICAgICAgbGV0IGRlcHRocmFuZ2UgPSBbbGVmdFRhYmxlLmRlcHRoLCByaWdodFRhYmxlLmRlcHRoXTtcbiAgICAgICAgXG4gICAgICAgIGZvciAobGV0IGk9MDsgaTxkZXB0aHJhbmdlLmxlbmd0aDsgaSsrKXtcbiAgICAgICAgICAgIGxldCBjdXJfZCA9IGRlcHRocmFuZ2VbaV07XG4gICAgICAgICAgICBsZXQgbnVtdGhpc0RlcHRoID0gTWF0aC5taW4uYXBwbHkoMCwgdGhpcy50YWJsZXMuZmlsdGVyKHQgPT4gdC5kZXB0aCA9PSBjdXJfZCkubWFwKGQgPT4gZC53ZWlnaHQpKTtcbiAgICAgICAgICAgIGxldCB0b3BUYWJsZSA9IHRoaXMudGFibGVzLmZpbmQodCA9PiB0LmRlcHRoID09IGN1cl9kICYmIHQud2VpZ2h0ID09IG51bXRoaXNEZXB0aCk7XG5cbiAgICAgICAgICAgIHRoaXMuY29vcmRzLnB1c2goW3RvcFRhYmxlLmRlcHRoKmRlcHRoX2Rpc3RhbmNlIC0gdGhpcy5tYXJnaW4sIHRvcFRhYmxlLndlaWdodCp0YWJsZV92ZXJ0X3NwYWNlICsgdG9wVGFibGUudmVydGljYWxBdHRyT2Zmc2V0KmF0dHJfaGVpZ2h0IC0gdGhpcy5tYXJnaW5dKVxuICAgICAgICAgICAgdGhpcy5jb29yZHMucHVzaChbdG9wVGFibGUuZGVwdGgqZGVwdGhfZGlzdGFuY2UgKyB0YWJsZV93aWR0aCArIHRoaXMubWFyZ2luLCB0b3BUYWJsZS53ZWlnaHQqdGFibGVfdmVydF9zcGFjZSArIHRvcFRhYmxlLnZlcnRpY2FsQXR0ck9mZnNldCphdHRyX2hlaWdodCAtIHRoaXMubWFyZ2luXSlcbiAgICAgICAgfVxuXG4gICAgICAgIGZvciAobGV0IGk9ZGVwdGhyYW5nZS5sZW5ndGggLSAxOyBpPj0wOyBpLS0pe1xuICAgICAgICAgICAgbGV0IGN1cl9kID0gZGVwdGhyYW5nZVtpXTtcbiAgICAgICAgICAgIGxldCBudW10aGlzRGVwdGggPSBNYXRoLm1heC5hcHBseSgwLCB0aGlzLnRhYmxlcy5maWx0ZXIodCA9PiB0LmRlcHRoID09IGN1cl9kKS5tYXAoZCA9PiBkLndlaWdodCkpO1xuICAgICAgICAgICAgbGV0IGJvdHRvbVRhYmxlID0gdGhpcy50YWJsZXMuZmluZCh0ID0+IHQuZGVwdGggPT0gY3VyX2QgJiYgdC53ZWlnaHQgPT0gbnVtdGhpc0RlcHRoKTtcblxuICAgICAgICAgICAgdGhpcy5jb29yZHMucHVzaChbYm90dG9tVGFibGUuZGVwdGgqZGVwdGhfZGlzdGFuY2UgKyB0YWJsZV93aWR0aCArIHRoaXMubWFyZ2luLCBib3R0b21UYWJsZS53ZWlnaHQqdGFibGVfdmVydF9zcGFjZSArICgxICsgYm90dG9tVGFibGUuYXR0cmlidXRlcy5sZW5ndGgpKmF0dHJfaGVpZ2h0ICsgYm90dG9tVGFibGUudmVydGljYWxBdHRyT2Zmc2V0KmF0dHJfaGVpZ2h0ICsgdGhpcy5tYXJnaW5dKVxuICAgICAgICAgICAgdGhpcy5jb29yZHMucHVzaChbYm90dG9tVGFibGUuZGVwdGgqZGVwdGhfZGlzdGFuY2UgLSB0aGlzLm1hcmdpbiwgYm90dG9tVGFibGUud2VpZ2h0KnRhYmxlX3ZlcnRfc3BhY2UgKyAoMSArIGJvdHRvbVRhYmxlLmF0dHJpYnV0ZXMubGVuZ3RoKSphdHRyX2hlaWdodCArIGJvdHRvbVRhYmxlLnZlcnRpY2FsQXR0ck9mZnNldCphdHRyX2hlaWdodCArIHRoaXMubWFyZ2luXSlcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuY29vcmRzLnB1c2godGhpcy5jb29yZHNbMF0pO1xuICAgIH1cblxuICAgIGdldF9zdWJncm91cHMoKXtcbiAgICAgICAgbGV0IHN1Ymdyb3VwX2xpc3QgPSBbXTtcbiAgICAgICAgaWYgKHRoaXMudGFibGVzLmxlbmd0aCA9PSAxKSByZXR1cm4gW107XG4gICAgICAgIC8vIGNvbnNvbGUubG9nKCdudW1UYWJsZXMnLCB0aGlzLnRhYmxlcy5sZW5ndGgpXG5cbiAgICAgICAgZm9yIChsZXQgdCBvZiB0aGlzLnRhYmxlcyl7XG4gICAgICAgICAgICBmb3IgKGxldCBncjIgb2YgdC5ncm91cHMpe1xuICAgICAgICAgICAgICAgIGlmIChzdWJncm91cF9saXN0LmluZGV4T2YoZ3IyKSAhPSAtMSB8fCBncjIgPT0gdGhpcykgY29udGludWU7XG4gICAgICAgICAgICAgICAgbGV0IGlzU3ViZ3JvdXAgPSB0cnVlO1xuICAgICAgICAgICAgICAgIGZvciAobGV0IHQyIG9mIGdyMi50YWJsZXMpe1xuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy50YWJsZXMuaW5kZXhPZih0MikgPT0gLTEpIGlzU3ViZ3JvdXAgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKGlzU3ViZ3JvdXApIHN1Ymdyb3VwX2xpc3QucHVzaChncjIpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzdWJncm91cF9saXN0O1xuICAgIH1cblxuICAgIHVwZGF0ZUNvb3Jkcygpe1xuICAgICAgICB0aGlzLm1hcmdpbiArPSB0aGlzLmdldF9zdWJncm91cHMoKS5sZW5ndGggKiA1O1xuICAgICAgICBcbiAgICAgICAgdGhpcy5jb29yZHMgPSBbXTtcblxuICAgICAgICBsZXQgbGVmdE1heERlcHRoID0gTWF0aC5taW4uYXBwbHkoMCwgdGhpcy50YWJsZXMubWFwKHQgPT4gdC5kZXB0aCkpO1xuICAgICAgICBsZXQgbGVmdFRhYmxlID0gdGhpcy50YWJsZXMuZmluZCh0ID0+IHQuZGVwdGggPT0gbGVmdE1heERlcHRoKTtcbiAgICAgICAgdGhpcy54X2Nvb3JkID0gbGVmdFRhYmxlLmRlcHRoO1xuXG4gICAgICAgIGxldCBjb21wdXRlWUNvb3JkID0gKHRhYmxlKSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gdGFibGUud2VpZ2h0ICogdGFibGVfdmVydF9zcGFjZSArIHRhYmxlLnZlcnRpY2FsQXR0ck9mZnNldCAqIGF0dHJfaGVpZ2h0O1xuICAgICAgICB9XG5cbiAgICAgICAgbGV0IHRvcE1heCA9IE1hdGgubWluLmFwcGx5KDAsIHRoaXMudGFibGVzLm1hcCh0ID0+IGNvbXB1dGVZQ29vcmQodCkpKTtcbiAgICAgICAgbGV0IHRvcFRhYmxlID0gdGhpcy50YWJsZXMuZmluZCh0ID0+IChjb21wdXRlWUNvb3JkKHQpID09IHRvcE1heCkpO1xuICAgICAgICB0aGlzLnlfY29vcmQgPSBjb21wdXRlWUNvb3JkKHRvcFRhYmxlKTtcblxuICAgICAgICBsZXQgcmlnaHRNYXggPSBNYXRoLm1heC5hcHBseSgwLCB0aGlzLnRhYmxlcy5tYXAodCA9PiB0LmRlcHRoKSk7XG4gICAgICAgIGxldCByaWdodFRhYmxlID0gdGhpcy50YWJsZXMuZmluZCh0ID0+IHQuZGVwdGggPT0gcmlnaHRNYXgpO1xuICAgICAgICB0aGlzLndpZHRoX2Nvb3JkID0gcmlnaHRUYWJsZS5kZXB0aCAtIGxlZnRUYWJsZS5kZXB0aDtcbiAgICAgICAgXG4gICAgICAgIGxldCBib3R0b21NYXggPSBNYXRoLm1heC5hcHBseSgwLCB0aGlzLnRhYmxlcy5tYXAodCA9PiB0LndlaWdodCkpO1xuICAgICAgICBsZXQgYm90dG9tVGFibGUgPSB0aGlzLnRhYmxlcy5maW5kKHQgPT4gdC53ZWlnaHQgPT0gYm90dG9tTWF4KTtcbiAgICAgICAgdGhpcy5oZWlnaHRfY29vcmQgPSBib3R0b21UYWJsZS53ZWlnaHQgLSB0b3BUYWJsZS53ZWlnaHQ7XG4gICAgICAgIFxuICAgICAgICB0aGlzLmNvb3Jkcy5wdXNoKFtsZWZ0VGFibGUuZGVwdGgqZGVwdGhfZGlzdGFuY2UgLSB0aGlzLm1hcmdpbiwgdGhpcy55X2Nvb3JkIC0gdGhpcy5tYXJnaW5dKVxuICAgICAgICB0aGlzLmNvb3Jkcy5wdXNoKFtsZWZ0VGFibGUuZGVwdGgqZGVwdGhfZGlzdGFuY2UgKyB0aGlzLm1hcmdpbiArIHRoaXMud2lkdGhfY29vcmQqZGVwdGhfZGlzdGFuY2UgKyB0YWJsZV93aWR0aCwgdGhpcy55X2Nvb3JkIC0gdGhpcy5tYXJnaW5dKVxuICAgICAgICB0aGlzLmNvb3Jkcy5wdXNoKFtsZWZ0VGFibGUuZGVwdGgqZGVwdGhfZGlzdGFuY2UgKyB0aGlzLm1hcmdpbiArIHRoaXMud2lkdGhfY29vcmQqZGVwdGhfZGlzdGFuY2UgKyB0YWJsZV93aWR0aCwgYm90dG9tVGFibGUud2VpZ2h0KnRhYmxlX3ZlcnRfc3BhY2UgKyAoMSArIGJvdHRvbVRhYmxlLmF0dHJpYnV0ZXMubGVuZ3RoKSphdHRyX2hlaWdodCArIGJvdHRvbVRhYmxlLnZlcnRpY2FsQXR0ck9mZnNldCphdHRyX2hlaWdodCArIHRoaXMubWFyZ2luXSlcbiAgICAgICAgdGhpcy5jb29yZHMucHVzaChbbGVmdFRhYmxlLmRlcHRoKmRlcHRoX2Rpc3RhbmNlIC0gdGhpcy5tYXJnaW4sIGJvdHRvbVRhYmxlLndlaWdodCp0YWJsZV92ZXJ0X3NwYWNlICsgKDEgKyBib3R0b21UYWJsZS5hdHRyaWJ1dGVzLmxlbmd0aCkqYXR0cl9oZWlnaHQgKyBib3R0b21UYWJsZS52ZXJ0aWNhbEF0dHJPZmZzZXQqYXR0cl9oZWlnaHQgKyB0aGlzLm1hcmdpbl0pXG4gICAgICAgIFxuICAgICAgICB0aGlzLmNvb3Jkcy5wdXNoKHRoaXMuY29vcmRzWzBdKTtcblxuICAgICAgICBpZiAodGhpcy5ncm91cEhlYWRlciAhPSB1bmRlZmluZWQpIHRoaXMuZ3JvdXBIZWFkZXJUYWJsZS5kZXB0aCA9IGxlZnRNYXhEZXB0aDtcbiAgICAgICAgLy8gXCJ0cmFuc2xhdGUoXCIgKyAoZC5kZXB0aCpkZXB0aF9kaXN0YW5jZSkgKyBcIixcIiBcbiAgICAgICAgLy8gKyAoZy50YWJsZUluZGV4W2QuZGVwdGhdLmluZGV4T2YoZCkgKiB0YWJsZV92ZXJ0X3NwYWNlICsgZC52ZXJ0aWNhbEF0dHJPZmZzZXQgKiBhdHRyX2hlaWdodCkgKyBcIilcIiApXG4gICAgfVxufSIsImNsYXNzIExQQmVuZGluZXNzIHtcbiAgICBjb25zdHJ1Y3RvciAoZykge1xuICAgICAgICB0aGlzLmcgPSBnO1xuICAgICAgICB0aGlzLm1pcCA9IHRydWU7XG4gICAgICAgIHRoaXMudmVyYm9zZSA9IGZhbHNlO1xuICAgICAgICB0aGlzLmVsYXBzZWRUaW1lID0gMFxuICAgIH1cblxuICAgIC8vIGlzTWlwIChscCkge1xuICAgIC8vICAgICByZXR1cm4gZ2xwX2dldF9udW1faW50KGxwKSArIGdscF9nZXRfbnVtX2JpbihscCkgPiAwO1xuICAgIC8vICAgfTtcblxuICAgIC8vIGFzeW5jIGFycmFuZ2UoKXtcblxuICAgIC8vICAgICBnbHBfc2V0X3ByaW50X2Z1bmMoY29uc29sZS5sb2cpXG5cbiAgICAvLyAgICAgbGV0IGNvZGUgPSBcInZhciB4MSA+PSAwOyBcXG4gXFxcbiAgICAvLyAgICAgICAgIHZhciB4MiA+PSAwOyBcXG4gXFxcbiAgICAvLyAgICAgICAgIFxcbiBcXFxuICAgIC8vICAgICAgICAgbWF4aW1pemUgejogICAgIDMqeDEgKyAyKngyOyBcXG4gXFxcbiAgICAvLyAgICAgICAgIFxcbiBcXFxuICAgIC8vICAgICAgICAgc3ViamVjdCB0byBjMTE6ICAgeDEgKyAgIHgyIDw9ICA5OyBcXG4gXFxcbiAgICAvLyAgICAgICAgIHN1YmplY3QgdG8gYzEyOiAzKngxICsgICB4MiA8PSAxODsgXFxuIFxcXG4gICAgLy8gICAgICAgICBzdWJqZWN0IHRvIGMxMzogICB4MSAgICAgICAgPD0gIDc7IFxcbiBcXFxuICAgIC8vICAgICAgICAgc3ViamVjdCB0byBjMTQ6ICAgICAgICAgIHgyIDw9ICA2OyBcXG4gXFxcbiAgICAvLyAgICAgICAgIFxcbiBcXFxuICAgIC8vICAgICAgICAgZW5kO1wiXG5cbiAgICAvLyAgICAgdmFyIHdvcmtzcGFjZSA9IGdscF9tcGxfYWxsb2Nfd2tzcCgpO1xuICAgIC8vICAgICB2YXIgbHAgPSBnbHBfY3JlYXRlX3Byb2IoKTtcbiAgICAvLyAgICAgdmFyIG1vZGVsbmFtZSA9IFwidGVzdG1vZGVsXCJcbiAgICAvLyAgICAgdmFyIGlzTWlwID0gdGhpcy5pc01pcChscCk7XG5cbiAgICAvLyAgICAgZ2xwX21wbF9yZWFkX21vZGVsX2Zyb21fc3RyaW5nKHdvcmtzcGFjZSwgbW9kZWxuYW1lLCBjb2RlKTtcbiAgICAvLyAgICAgZ2xwX21wbF9nZW5lcmF0ZSh3b3Jrc3BhY2UsIG1vZGVsbmFtZSwgY29uc29sZS5sb2csIHVuZGVmaW5lZCk7XG4gICAgLy8gICAgIGdscF9tcGxfYnVpbGRfcHJvYih3b3Jrc3BhY2UsIGxwKTtcbiAgICAvLyAgICAgZ2xwX3NjYWxlX3Byb2IobHAsIEdMUF9TRl9BVVRPKTtcblxuICAgIC8vICAgICBpZiAoIWlzTWlwKSB7XG4gICAgLy8gICAgICAgICBjb25zb2xlLmxvZyhcIlNvbHZpbmcgdGhlIG1vZGVsIHVzaW5nIHRoZSBzaW1wbGV4IG9wdGltaXplclwiKTtcbiAgICAvLyAgICAgICAgIHZhciBzbWNwID0gbmV3IFNNQ1Aoe3ByZXNvbHZlOiBHTFBfT059KTtcbiAgICAvLyAgICAgICAgIHZhciBnbHBrU3RhdHVzID0gZ2xwX3NpbXBsZXgobHAsIHNtY3ApO1xuICAgIC8vICAgICAgICAgLy92YXIgc3RhdHVzID0gZ2V0THBTdGF0dXMoZ2xwa1N0YXR1cywgbHApO1xuICAgIC8vICAgICAgIH0gZWxzZSB7XG4gICAgLy8gICAgICAgICBjb25zb2xlLmxvZyhcIlRoZSBtb2RlbCBoYXMgaW50ZWdlciB2YXJpYWJsZXM6IHNvbHZpbmcgdGhlIG1vZGVsIHVzaW5nIHRoZSBtaXhlZC1pbnRlZ2VyIG9wdGltaXplclwiKTtcbiAgICAvLyAgICAgICAgIHZhciBpb2NwID0gbmV3IElPQ1Aoe3ByZXNvbHZlOiBHTFBfT059KTtcbiAgICAvLyAgICAgICAgIHZhciBnbHBrU3RhdHVzID0gZ2xwX2ludG9wdChscCwgaW9jcCk7XG4gICAgLy8gICAgICAgICAvL3ZhciBzdGF0dXMgPSBnZXRNaXBTdGF0dXMoZ2xwa1N0YXR1cywgbHApO1xuICAgIC8vICAgICAgIH1cblxuICAgIC8vICAgICBnbHBfbXBsX3Bvc3Rzb2x2ZSh3b3Jrc3BhY2UsIGxwLCB0aGlzLmlzTWlwKGxwKSA/IEdMUF9NSVAgOiBHTFBfU09MKTtcblxuICAgIC8vICAgICBjb25zb2xlLmxvZygnaXNtaXAnLCBpc01pcClcbiAgICAvLyAgICAgZm9yICh2YXIgYyA9IDE7IGMgPD0gZ2xwX2dldF9udW1fY29scyhscCk7IGMrKykge1xuICAgIC8vICAgICAgICAgY29uc29sZS5sb2coZ2xwX2dldF9jb2xfbmFtZShscCwgYykpXG4gICAgLy8gICAgICAgICBjb25zb2xlLmxvZyhpc01pcCA/IGdscF9taXBfY29sX3ZhbChscCwgYykgOiBnbHBfZ2V0X2NvbF9wcmltKGxwLCBjKSlcbiAgICAvLyAgICAgfVxuICAgIC8vIH1cblxuICAgIGFzeW5jIGFycmFuZ2UoKXtcblxuICAgICAgICBsZXQgc3RhcnRUaW1lID0gbmV3IERhdGUoKS5nZXRUaW1lKClcblxuICAgICAgICAvLyBidWlsZCBtb2RlbCBmcm9tIGdyYXBoXG4gICAgICAgIGxldCBtb2RlbCA9IHt9XG5cbiAgICAgICAgdGhpcy5maWxsTW9kZWwobW9kZWwpXG4gICAgICAgIGxldCBwcm9iID0gdGhpcy5tb2RlbFRvU3RyaW5nKG1vZGVsKVxuXG4gICAgICAgIC8vIHNvbHZlXG4gICAgICAgIGxldCByZXN1bHQgPSB7fSwgb2JqZWN0aXZlLCBpO1xuXG4gICAgICAgIGlmICh0aGlzLnZlcmJvc2UpIGdscF9zZXRfcHJpbnRfZnVuYyhjb25zb2xlLmxvZyk7XG5cbiAgICAgICAgbGV0IGxwID0gZ2xwX2NyZWF0ZV9wcm9iKCk7XG4gICAgICAgIGdscF9yZWFkX2xwX2Zyb21fc3RyaW5nKGxwLCBudWxsLCBwcm9iKTtcblxuICAgICAgICBnbHBfc2NhbGVfcHJvYihscCwgR0xQX1NGX0FVVE8pO1xuICAgICAgICAgICAgXG4gICAgICAgIGxldCBzbWNwID0gbmV3IFNNQ1Aoe3ByZXNvbHZlOiBHTFBfT059KTtcbiAgICAgICAgZ2xwX3NpbXBsZXgobHAsIHNtY3ApO1xuXG4gICAgICAgIGlmICh0aGlzLm1pcCl7XG4gICAgICAgICAgICBnbHBfaW50b3B0KGxwKTtcbiAgICAgICAgICAgIG9iamVjdGl2ZSA9IGdscF9taXBfb2JqX3ZhbChscCk7XG5cbiAgICAgICAgICAgIGZvcihpID0gMTsgaSA8PSBnbHBfZ2V0X251bV9jb2xzKGxwKTsgaSsrKXtcbiAgICAgICAgICAgICAgICByZXN1bHRbZ2xwX2dldF9jb2xfbmFtZShscCwgaSldID0gZ2xwX21pcF9jb2xfdmFsKGxwLCBpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG9iamVjdGl2ZSA9IGdscF9nZXRfb2JqX3ZhbChscCk7XG4gICAgICAgICAgICBmb3IoaSA9IDE7IGkgPD0gZ2xwX2dldF9udW1fY29scyhscCk7IGkrKyl7XG4gICAgICAgICAgICAgICAgcmVzdWx0W2dscF9nZXRfY29sX25hbWUobHAsIGkpXSA9IGdscF9nZXRfY29sX3ByaW0gKGxwLCBpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuYXBwbHlfc29sdXRpb24ocmVzdWx0KVxuXG4gICAgICAgIHRoaXMuZWxhcHNlZFRpbWUgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKSAtIHN0YXJ0VGltZVxuICAgICAgICBcbiAgICB9XG5cbiAgICBmaWxsTW9kZWwobW9kZWwpe1xuICAgICAgICBtb2RlbC5taW5pbWl6ZSA9IFwiTWluaW1pemUgXFxuXCJcbiAgICAgICAgbW9kZWwuc3ViamVjdFRvID0gXCJTdWJqZWN0IFRvIFxcblwiXG4gICAgICAgIG1vZGVsLmJvdW5kcyA9IFwiXFxuQm91bmRzIFxcblwiXG4gICAgICAgIC8vbW9kZWwuYm91bmRzID0gXCJcIlxuXG4gICAgICAgIGZvciAobGV0IGUgb2YgdGhpcy5nLmVkZ2VzKXtcbiAgICAgICAgICAgIGlmICh0aGlzLmlzU2FtZVJhbmtFZGdlKGUpKSBjb250aW51ZVxuXG4gICAgICAgICAgICBtb2RlbC5taW5pbWl6ZSArPSBcImJlbmRfXCIgKyBlLmxlZnRBdHRyaWJ1dGUubmFtZSArIFwiX1wiICsgZS5yaWdodEF0dHJpYnV0ZS5uYW1lICsgXCIgKyBcIlxuXG4gICAgICAgICAgICBtb2RlbC5zdWJqZWN0VG8gKz0gXG4gICAgICAgICAgICAgICAgXCJ5X1wiICsgZS5sZWZ0QXR0cmlidXRlLm5hbWUgKyBcIiAtIFwiICsgXG4gICAgICAgICAgICAgICAgXCJ5X1wiICsgZS5yaWdodEF0dHJpYnV0ZS5uYW1lICsgXCIgLSBcIiArIFxuICAgICAgICAgICAgICAgIFwiYmVuZF9cIiArIGUubGVmdEF0dHJpYnV0ZS5uYW1lICsgXCJfXCIgKyBlLnJpZ2h0QXR0cmlidXRlLm5hbWUgK1xuICAgICAgICAgICAgICAgIFwiIDw9IDBcXG5cIlxuXG4gICAgICAgICAgICBtb2RlbC5zdWJqZWN0VG8gKz0gXG4gICAgICAgICAgICAgICAgXCJ5X1wiICsgZS5yaWdodEF0dHJpYnV0ZS5uYW1lICsgXCIgLSBcIiArIFxuICAgICAgICAgICAgICAgIFwieV9cIiArIGUubGVmdEF0dHJpYnV0ZS5uYW1lICsgXCIgLSBcIiArIFxuICAgICAgICAgICAgICAgIFwiYmVuZF9cIiArIGUubGVmdEF0dHJpYnV0ZS5uYW1lICsgXCJfXCIgKyBlLnJpZ2h0QXR0cmlidXRlLm5hbWUgK1xuICAgICAgICAgICAgICAgIFwiIDw9IDBcXG5cIlxuICAgICAgICB9XG5cbiAgICAgICAgZm9yIChsZXQgaT0wOyBpPHRoaXMuZy50YWJsZUluZGV4Lmxlbmd0aDsgaSsrKXtcbiAgICAgICAgICAgIGxldCB0YWJsZUNvbCA9IHRoaXMuZy50YWJsZUluZGV4W2ldO1xuICAgICAgICAgICAgZm9yIChsZXQgaj0wOyBqPHRhYmxlQ29sLmxlbmd0aCAtIDE7IGorKyl7XG4gICAgICAgICAgICAgICAgbGV0IHQgPSB0YWJsZUNvbFtqXTtcbiAgICAgICAgICAgICAgICBsZXQgdDIgPSB0YWJsZUNvbFtqKzFdO1xuICAgICAgICAgICAgICAgIG1vZGVsLnN1YmplY3RUbyArPSBcInlfXCIgKyB0Mi5uYW1lICsgXCIgLSB5X1wiICsgdC5uYW1lICsgXCIgPiBcIiArICgyICsgdC5hdHRyaWJ1dGVzLmxlbmd0aCkgKyBcIlxcblwiXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBmb3IgKGxldCB0IG9mIHRoaXMuZy50YWJsZXMpe1xuICAgICAgICAgICAgZm9yIChsZXQgaT0wOyBpPHQuYXR0cmlidXRlcy5sZW5ndGg7IGkrKyl7XG4gICAgICAgICAgICAgICAgbGV0IGF0dHIgPSB0LmF0dHJpYnV0ZXNbaV07XG4gICAgICAgICAgICAgICAgbW9kZWwuc3ViamVjdFRvICs9IFwieV9cIiArIGF0dHIubmFtZSArIFwiIC0geV9cIiArIHQubmFtZSArIFwiID0gXCIgKyAoaSArIDEpICsgXCJcXG5cIlxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy9tb2RlbC5zdWJqZWN0VG8gKz0gXCJ5X3NlbGVjdCA9IDRcXG5cIlxuXG4gICAgICAgIG1vZGVsLm1pbmltaXplID0gbW9kZWwubWluaW1pemUuc3Vic3RyaW5nKDAsIG1vZGVsLm1pbmltaXplLmxlbmd0aCAtIDIpICsgXCJcXG5cXG5cIlxuXG4gICAgfVxuXG4gICAgaXNTYW1lUmFua0VkZ2UoZWRnZSl7XG4gICAgICAgIHJldHVybiBlZGdlLmxlZnRUYWJsZS5kZXB0aCA9PSBlZGdlLnJpZ2h0VGFibGUuZGVwdGhcbiAgICB9XG5cbiAgICBtb2RlbFRvU3RyaW5nKG1vZGVsKXtcbiAgICAgICAgcmV0dXJuIG1vZGVsLm1pbmltaXplICsgbW9kZWwuc3ViamVjdFRvICsgbW9kZWwuYm91bmRzICsgJ1xcbkVuZFxcbidcbiAgICB9XG5cbiAgICBhcHBseV9zb2x1dGlvbihzb2x1dGlvbil7XG4gICAgICAgIGZvciAobGV0IGk9MDsgaTx0aGlzLmcudGFibGVJbmRleC5sZW5ndGg7IGkrKyl7XG4gICAgICAgICAgICBsZXQgdGFibGVDb2wgPSB0aGlzLmcudGFibGVJbmRleFtpXTtcbiAgICAgICAgICAgIGZvciAobGV0IGo9MDsgajx0YWJsZUNvbC5sZW5ndGg7IGorKyl7XG4gICAgICAgICAgICAgICAgbGV0IHQgPSB0YWJsZUNvbFtqXTtcblxuICAgICAgICAgICAgICAgIGxldCB2YWwgPSBzb2x1dGlvbltcInlfXCIgKyB0Lm5hbWVdXG4gICAgICAgICAgICAgICAgdC52ZXJ0aWNhbEF0dHJPZmZzZXQgPSB2YWwgLSB0LndlaWdodCAqIHRoaXMuZy5iYXNlUm93RGlzdGFuY2U7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG59IiwiY2xhc3MgTFBCZW5kaW5lc3NDb21iaW5lZCB7XHJcbiAgICBjb25zdHJ1Y3RvciAoZykge1xyXG4gICAgICAgIHRoaXMuZyA9IGc7XHJcbiAgICAgICAgdGhpcy5taXAgPSB0cnVlO1xyXG4gICAgICAgIHRoaXMudmVyYm9zZSA9IGZhbHNlO1xyXG4gICAgICAgIHRoaXMuZWxhcHNlZFRpbWUgPSAwXHJcbiAgICB9XHJcblxyXG4gICAgYXN5bmMgYXJyYW5nZSgpe1xyXG5cclxuICAgICAgICBsZXQgc3RhcnRUaW1lID0gbmV3IERhdGUoKS5nZXRUaW1lKClcclxuXHJcbiAgICAgICAgLy8gYnVpbGQgbW9kZWwgZnJvbSBncmFwaFxyXG4gICAgICAgIGxldCBtb2RlbCA9IHt9XHJcblxyXG4gICAgICAgIHRoaXMuZmlsbE1vZGVsKG1vZGVsKVxyXG4gICAgICAgIGxldCBwcm9iID0gdGhpcy5tb2RlbFRvU3RyaW5nKG1vZGVsKVxyXG4gICAgICAgIC8vY29uc29sZS5sb2cocHJvYilcclxuXHJcbiAgICAgICAgLy8gc29sdmVcclxuICAgICAgICBsZXQgcmVzdWx0ID0ge30sIG9iamVjdGl2ZSwgaTtcclxuXHJcbiAgICAgICAgaWYgKHRoaXMudmVyYm9zZSkgZ2xwX3NldF9wcmludF9mdW5jKGNvbnNvbGUubG9nKTtcclxuXHJcbiAgICAgICAgbGV0IGxwID0gZ2xwX2NyZWF0ZV9wcm9iKCk7XHJcbiAgICAgICAgZ2xwX3JlYWRfbHBfZnJvbV9zdHJpbmcobHAsIG51bGwsIHByb2IpO1xyXG5cclxuICAgICAgICBnbHBfc2NhbGVfcHJvYihscCwgR0xQX1NGX0FVVE8pO1xyXG4gICAgICAgICAgICBcclxuICAgICAgICBsZXQgc21jcCA9IG5ldyBTTUNQKHtwcmVzb2x2ZTogR0xQX09OfSk7XHJcbiAgICAgICAgZ2xwX3NpbXBsZXgobHAsIHNtY3ApO1xyXG5cclxuICAgICAgICBpZiAodGhpcy5taXApe1xyXG4gICAgICAgICAgICBnbHBfaW50b3B0KGxwKTtcclxuICAgICAgICAgICAgb2JqZWN0aXZlID0gZ2xwX21pcF9vYmpfdmFsKGxwKTtcclxuXHJcbiAgICAgICAgICAgIGZvcihpID0gMTsgaSA8PSBnbHBfZ2V0X251bV9jb2xzKGxwKTsgaSsrKXtcclxuICAgICAgICAgICAgICAgIHJlc3VsdFtnbHBfZ2V0X2NvbF9uYW1lKGxwLCBpKV0gPSBnbHBfbWlwX2NvbF92YWwobHAsIGkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgb2JqZWN0aXZlID0gZ2xwX2dldF9vYmpfdmFsKGxwKTtcclxuICAgICAgICAgICAgZm9yKGkgPSAxOyBpIDw9IGdscF9nZXRfbnVtX2NvbHMobHApOyBpKyspe1xyXG4gICAgICAgICAgICAgICAgcmVzdWx0W2dscF9nZXRfY29sX25hbWUobHAsIGkpXSA9IGdscF9nZXRfY29sX3ByaW0gKGxwLCBpKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5hcHBseV9zb2x1dGlvbihyZXN1bHQpXHJcblxyXG4gICAgICAgIHRoaXMuZWxhcHNlZFRpbWUgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKSAtIHN0YXJ0VGltZVxyXG4gICAgICAgIFxyXG4gICAgfVxyXG5cclxuICAgIGZpbGxNb2RlbChtb2RlbCl7XHJcbiAgICAgICAgbW9kZWwubWluaW1pemUgPSBcIk1pbmltaXplIFxcblwiXHJcbiAgICAgICAgbW9kZWwuc3ViamVjdFRvID0gXCJTdWJqZWN0IFRvIFxcblwiXHJcbiAgICAgICAgbW9kZWwuYm91bmRzID0gXCJcXG5Cb3VuZHMgXFxuXCJcclxuXHJcbiAgICAgICAgbGV0IGRlZmluaXRpb25zID0ge31cclxuICAgICAgICBsZXQgY3Jvc3NpbmdfdmFycyA9IHt9XHJcblxyXG4gICAgICAgIGxldCBta2MgPSAodTEsIHYxLCB1MiwgdjIpID0+IHtcclxuICAgICAgICAgICAgbGV0IHJlcyA9IFwiY19cIiArIHUxICsgdjEgKyBcIl9cIiArIHUyICsgdjI7XHJcbiAgICAgICAgICAgIGNyb3NzaW5nX3ZhcnNbcmVzXSA9IFwiXCJcclxuICAgICAgICAgICAgcmV0dXJuIHJlc1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgbGV0IG1reCA9ICh1MSwgdTIsIHByZT1cIlwiKSA9PiB7XHJcbiAgICAgICAgICAgIGxldCByZXMgPSBcInhfXCIgKyBwcmUgKyB1MSArIFwiX1wiICsgcHJlICsgdTJcclxuICAgICAgICAgICAgbGV0IG9wcG9zaXRlcmVzID0gXCJ4X1wiICsgcHJlICsgdTIgKyBcIl9cIiArIHByZSArIHUxXHJcbiAgICAgICAgICAgIGxldCBvZmZzZXQgPSAwXHJcblxyXG4gICAgICAgICAgICBpZiAoZGVmaW5pdGlvbnNbb3Bwb3NpdGVyZXNdICE9IHVuZGVmaW5lZCl7XHJcbiAgICAgICAgICAgICAgICBvZmZzZXQgLT0gMVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFtcIiAtIFwiICsgb3Bwb3NpdGVyZXMsIG9mZnNldF1cclxuICAgICAgICAgICAgfSBlbHNlIGlmIChkZWZpbml0aW9uc1tyZXNdID09IHVuZGVmaW5lZCl7XHJcbiAgICAgICAgICAgICAgICAvL2RlZmluaXRpb25zW3Jlc10gPSAnJ1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBbXCIgKyBcIiArIHJlcywgb2Zmc2V0XVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgbGV0IG1reEJhc2UgPSAodTEsIHUyLCBwcmU9XCJcIikgPT4ge1xyXG4gICAgICAgICAgICByZXR1cm4gXCJ4X1wiICsgcHJlICsgdTEgKyBcIl9cIiArIHByZSArIHUyXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBzdG9yZSBhbGwgdmFyaWFibGUgbmFtZXMgaW4gb3JkZXJcclxuICAgICAgICBmb3IgKGxldCBrPTA7IGsgPCB0aGlzLmcubWF4RGVwdGggKyAxOyBrKyspe1xyXG4gICAgICAgICAgICBsZXQgbGF5ZXJUYWJsZXMgPSB0aGlzLmcudGFibGVJbmRleFtrXTtcclxuICAgICAgICAgICAgbGV0IGxheWVyQXR0cmlidXRlcyA9IGxheWVyVGFibGVzLm1hcCh0ID0+IHQuYXR0cmlidXRlcykuZmxhdCgpO1xyXG5cclxuICAgICAgICAgICAgLy8gc3RvcmUgdGFibGVzXHJcbiAgICAgICAgICAgIGZvciAobGV0IGk9MDsgaTxsYXllclRhYmxlcy5sZW5ndGg7IGkrKyl7XHJcbiAgICAgICAgICAgICAgICBsZXQgdDEgPSBsYXllclRhYmxlc1tpXS5uYW1lO1xyXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgaj1pKzE7IGo8bGF5ZXJUYWJsZXMubGVuZ3RoOyBqKyspe1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCB0MiA9IGxheWVyVGFibGVzW2pdLm5hbWU7XHJcbiAgICAgICAgICAgICAgICAgICAgZGVmaW5pdGlvbnNbbWt4QmFzZSh0MSwgdDIsICdUJyldID0gJydcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLy8gc3RvcmUgYXR0cmlidXRlc1xyXG4gICAgICAgICAgICBmb3IgKGxldCBpPTA7IGk8bGF5ZXJBdHRyaWJ1dGVzLmxlbmd0aDsgaSsrKXtcclxuICAgICAgICAgICAgICAgIGxldCBhMSA9IGxheWVyQXR0cmlidXRlc1tpXS5uYW1lO1xyXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgaj1pKzE7IGo8bGF5ZXJBdHRyaWJ1dGVzLmxlbmd0aDsgaisrKXtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgYTIgPSBsYXllckF0dHJpYnV0ZXNbal0ubmFtZTtcclxuICAgICAgICAgICAgICAgICAgICBkZWZpbml0aW9uc1tta3hCYXNlKGExLCBhMildID0gJydcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgXHJcbiAgICAgICAgZm9yIChsZXQgaz0wOyBrIDwgdGhpcy5nLm1heERlcHRoICsgMTsgaysrKXtcclxuICAgICAgICAgICAgbGV0IGxheWVyVGFibGVzID0gdGhpcy5nLnRhYmxlSW5kZXhba107XHJcbiAgICAgICAgICAgIGxldCBsYXllckF0dHJpYnV0ZXMgPSBsYXllclRhYmxlcy5tYXAodCA9PiB0LmF0dHJpYnV0ZXMpLmZsYXQoKVxyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgLy8gZ2xvYmFsIG9yZGVyaW5nIG9mIHRhYmxlcyBcclxuICAgICAgICAgICAgZm9yIChsZXQgaT0wOyBpPGxheWVyVGFibGVzLmxlbmd0aDsgaSsrKXtcclxuICAgICAgICAgICAgICAgIGxldCB0MSA9IGxheWVyVGFibGVzW2ldLm5hbWU7XHJcblxyXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgaiA9IGkrMTsgaiA8IGxheWVyVGFibGVzLmxlbmd0aDsgaisrKXtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgdDIgPSBsYXllclRhYmxlc1tqXS5uYW1lO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBtID0gaiArIDE7IG0gPCBsYXllclRhYmxlcy5sZW5ndGg7IG0rKyl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCB0MyA9IGxheWVyVGFibGVzW21dLm5hbWU7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBtb2RlbC5zdWJqZWN0VG8gKz0gXCJcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKyBta3hCYXNlKHQxLCB0MiwgJ1QnKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKyBcIiArIFwiICsgbWt4QmFzZSh0MiwgdDMsICdUJylcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICsgXCIgLSBcIiArIG1reEJhc2UodDEsIHQzLCAnVCcpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICArIFwiID49IDBcXG5cIlxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgbW9kZWwuc3ViamVjdFRvICs9IFwiXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICsgXCItIFwiICsgbWt4QmFzZSh0MSwgdDIsICdUJylcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICsgXCIgLSBcIiArIG1reEJhc2UodDIsIHQzLCAnVCcpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICArIFwiICsgXCIgKyBta3hCYXNlKHQxLCB0MywgJ1QnKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKyBcIiA+PSAtMVxcblwiXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAvLyBnbG9iYWwgb3JkZXJpbmcgb2YgYXR0cmlidXRlc1xyXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxheWVyQXR0cmlidXRlcy5sZW5ndGg7IGkrKyl7XHJcbiAgICAgICAgICAgICAgICBsZXQgdDEgPSBsYXllckF0dHJpYnV0ZXNbaV0ubmFtZTtcclxuICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgaiA9IGkrMTsgaiA8IGxheWVyQXR0cmlidXRlcy5sZW5ndGg7IGorKyl7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IHQyID0gbGF5ZXJBdHRyaWJ1dGVzW2pdLm5hbWU7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGkgPT0gaikgY29udGludWU7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChsYXllckF0dHJpYnV0ZXNbaV0udGFibGUubmFtZSAhPSBsYXllckF0dHJpYnV0ZXNbal0udGFibGUubmFtZSkgY29udGludWVcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgbSA9IGorMTsgbSA8IGxheWVyQXR0cmlidXRlcy5sZW5ndGg7IG0rKyl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChtID09IGogfHwgbSA9PSBpKSBjb250aW51ZVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGxheWVyQXR0cmlidXRlc1ttXS50YWJsZS5uYW1lICE9IGxheWVyQXR0cmlidXRlc1tpXS50YWJsZS5uYW1lKSBjb250aW51ZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobGF5ZXJBdHRyaWJ1dGVzW21dLnRhYmxlLm5hbWUgIT0gbGF5ZXJBdHRyaWJ1dGVzW2pdLnRhYmxlLm5hbWUpIGNvbnRpbnVlXHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgdDMgPSBsYXllckF0dHJpYnV0ZXNbbV0ubmFtZTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1vZGVsLnN1YmplY3RUbyArPSBcIlwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICArIG1reEJhc2UodDEsIHQyKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKyBcIiArIFwiICsgbWt4QmFzZSh0MiwgdDMpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICArIFwiIC0gXCIgKyBta3hCYXNlKHQxLCB0MylcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICsgXCIgPj0gMFxcblwiXHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBtb2RlbC5zdWJqZWN0VG8gKz0gXCJcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKyBcIi0gXCIgKyBta3hCYXNlKHQxLCB0MilcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICsgXCIgLSBcIiArIG1reEJhc2UodDIsIHQzKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKyBcIiArIFwiICsgbWt4QmFzZSh0MSwgdDMpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICArIFwiID49IC0xXFxuXCJcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIGRldGVybWluaW5nIGNyb3NzaW5nc1xyXG4gICAgICAgIGZvciAobGV0IGs9MDsgayA8IHRoaXMuZy5tYXhEZXB0aCArIDE7IGsrKyl7XHJcbiAgICAgICAgICAgIGxldCBsYXllckVkZ2VzID0gdGhpcy5nLmVkZ2VJbmRleFtrXVxyXG5cclxuICAgICAgICAgICAgZm9yIChsZXQgaT0wOyBpPGxheWVyRWRnZXMubGVuZ3RoOyBpKyspe1xyXG4gICAgICAgICAgICAgICAgbGV0IHUxdjEgPSBsYXllckVkZ2VzW2ldO1xyXG5cclxuICAgICAgICAgICAgICAgIGZvciAobGV0IGo9aSsxOyBqPGxheWVyRWRnZXMubGVuZ3RoOyBqKyspe1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCB1MnYyID0gbGF5ZXJFZGdlc1tqXTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gbmV3OiBtYW5hZ2luZyBncm91cHNcclxuICAgICAgICAgICAgICAgICAgICAvLyBlZGdlcyB0aGF0IGFyZSBvdXRzaWRlIG9mIGdyb3VwcyBzaG91bGQgbmV2ZXIgY3Jvc3Mgd2l0aCBlZGdlcyB0aGF0IGFyZSBpbnNpZGUgb2YgZ3JvdXBzXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHUxdjEubGVmdFRhYmxlLmdyb3VwICE9IHVuZGVmaW5lZCAmJiB1MXYxLnJpZ2h0VGFibGUuZ3JvdXAgIT0gdW5kZWZpbmVkKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHUydjIubGVmdFRhYmxlLmdyb3VwICE9IHUydjIubGVmdFRhYmxlLmdyb3VwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtb2RlbC5zdWJqZWN0VG8gKz0gbWtjKHUxLCB2MSwgdTIsIHYyKSArIFwiID0gMFxcblwiO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAoIXRoaXMuaXNTYW1lUmFua0VkZ2UodTF2MSkgJiYgIXRoaXMuaXNTYW1lUmFua0VkZ2UodTJ2Mikpe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgdTEgPSB1MXYxLmxlZnRBdHRyaWJ1dGUubmFtZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgdjEgPSB1MXYxLnJpZ2h0QXR0cmlidXRlLm5hbWVcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHUyID0gdTJ2Mi5sZWZ0QXR0cmlidXRlLm5hbWVcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHYyID0gdTJ2Mi5yaWdodEF0dHJpYnV0ZS5uYW1lXHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodTEgPT0gdTIgfHwgdjEgPT0gdjIpIGNvbnRpbnVlXHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgcDEgPSBta2ModTEsIHYxLCB1MiwgdjIpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBmaW5hbHN1bSA9IDFcclxuICAgICAgICAgICAgICAgICAgICAgICAgbW9kZWwuc3ViamVjdFRvICs9IHAxICsgXCJcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgcDIgPSBta3hCYXNlKHUyLCB1MSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGRlZmluaXRpb25zW3AyXSAhPSB1bmRlZmluZWQpe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbW9kZWwuc3ViamVjdFRvICs9IFwiICsgXCIgKyBwMlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcDIgPSBta3hCYXNlKHUxLCB1MilcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpbmFsc3VtIC09IDFcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1vZGVsLnN1YmplY3RUbyArPSBcIiAtIFwiICsgcDJcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHAzID0gbWt4QmFzZSh2MSwgdjIpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkZWZpbml0aW9uc1twM10gIT0gdW5kZWZpbmVkKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1vZGVsLnN1YmplY3RUbyArPSBcIiArIFwiICsgcDNcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHAzID0gbWt4QmFzZSh2MiwgdjEpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaW5hbHN1bSAtPSAxXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtb2RlbC5zdWJqZWN0VG8gKz0gXCIgLSBcIiArIHAzXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgbW9kZWwuc3ViamVjdFRvICs9IFwiID49IFwiICsgZmluYWxzdW0gKyBcIlxcblwiXHJcblxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgcDEgPSBta2ModTEsIHYxLCB1MiwgdjIpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZpbmFsc3VtID0gMVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBtb2RlbC5zdWJqZWN0VG8gKz0gcDEgKyBcIlwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHAyID0gbWt4QmFzZSh1MSwgdTIpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkZWZpbml0aW9uc1twMl0gIT0gdW5kZWZpbmVkKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1vZGVsLnN1YmplY3RUbyArPSBcIiArIFwiICsgcDJcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHAyID0gbWt4QmFzZSh1MiwgdTEpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaW5hbHN1bSAtPSAxXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtb2RlbC5zdWJqZWN0VG8gKz0gXCIgLSBcIiArIHAyXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHAzID0gbWt4QmFzZSh2MiwgdjEpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkZWZpbml0aW9uc1twM10gIT0gdW5kZWZpbmVkKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1vZGVsLnN1YmplY3RUbyArPSBcIiArIFwiICsgcDNcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHAzID0gbWt4QmFzZSh2MSwgdjIpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaW5hbHN1bSAtPSAxXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtb2RlbC5zdWJqZWN0VG8gKz0gXCIgLSBcIiArIHAzXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgbW9kZWwuc3ViamVjdFRvICs9IFwiID49IFwiICsgZmluYWxzdW0gKyBcIlxcblwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgIC8vIGlmIHRoZXkgYXJlIGJvdGggc2FtZSByYW5rIGVkZ2VzXHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICh0aGlzLmlzU2FtZVJhbmtFZGdlKHUxdjEpICYmIHRoaXMuaXNTYW1lUmFua0VkZ2UodTJ2MikpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHUxID0gdTF2MS5sZWZ0QXR0cmlidXRlLm5hbWVcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHYxID0gdTF2MS5yaWdodEF0dHJpYnV0ZS5uYW1lXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCB1MiA9IHUydjIubGVmdEF0dHJpYnV0ZS5uYW1lXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCB2MiA9IHUydjIucmlnaHRBdHRyaWJ1dGUubmFtZVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHAxID0gbWtjKHUxLCB2MSwgdTIsIHYyKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgZmluYWxzdW0gPSAxXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1vZGVsLnN1YmplY3RUbyArPSBwMSArIFwiXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHAyID0gbWt4QmFzZSh1MSwgdTIpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkZWZpbml0aW9uc1twMl0gIT0gdW5kZWZpbmVkKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1vZGVsLnN1YmplY3RUbyArPSBcIiArIFwiICsgcDJcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHAyID0gbWt4QmFzZSh1MiwgdTEpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaW5hbHN1bSAtPSAxXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtb2RlbC5zdWJqZWN0VG8gKz0gXCIgLSBcIiArIHAyXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBwMyA9IG1reEJhc2UodjEsIHYyKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZGVmaW5pdGlvbnNbcDNdICE9IHVuZGVmaW5lZCl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtb2RlbC5zdWJqZWN0VG8gKz0gXCIgKyBcIiArIHAzXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaW5hbHN1bSAtPSAxXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwMyA9IG1reEJhc2UodjIsIHYxKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbW9kZWwuc3ViamVjdFRvICs9IFwiIC0gXCIgKyBwM1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgcDQgPSBta3hCYXNlKHUyLCB2MSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGRlZmluaXRpb25zW3A0XSAhPSB1bmRlZmluZWQpe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbW9kZWwuc3ViamVjdFRvICs9IHA0XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaW5hbHN1bSAtPSAxXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwNCA9IG1reEJhc2UodjEsIHUyKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbW9kZWwuc3ViamVjdFRvICs9IFwiICsgXCIgKyBwNFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1vZGVsLnN1YmplY3RUbyArPSBcIiA+PSBcIiArIGZpbmFsc3VtICsgXCJcXG5cIlxyXG5cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHAxID0gbWtjKHUxLCB2MSwgdTIsIHYyKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBmaW5hbHN1bSA9IDFcclxuICAgICAgICAgICAgICAgICAgICAgICAgbW9kZWwuc3ViamVjdFRvICs9IHAxICsgXCJcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBwMiA9IG1reEJhc2UodTEsIHUyKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZGVmaW5pdGlvbnNbcDJdICE9IHVuZGVmaW5lZCl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtb2RlbC5zdWJqZWN0VG8gKz0gXCIgKyBcIiArIHAyXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwMiA9IG1reEJhc2UodTIsIHUxKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZmluYWxzdW0gLT0gMVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbW9kZWwuc3ViamVjdFRvICs9IFwiIC0gXCIgKyBwMlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBwMyA9IG1reEJhc2UodjEsIHYyKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZGVmaW5pdGlvbnNbcDNdICE9IHVuZGVmaW5lZCl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtb2RlbC5zdWJqZWN0VG8gKz0gXCIgKyBcIiArIHAzXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaW5hbHN1bSAtPSAxXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwMyA9IG1reEJhc2UodjIsIHYxKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbW9kZWwuc3ViamVjdFRvICs9IFwiIC0gXCIgKyBwM1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBwNCA9IG1reEJhc2UodjIsIHUxKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZGVmaW5pdGlvbnNbcDRdICE9IHVuZGVmaW5lZCl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtb2RlbC5zdWJqZWN0VG8gKz0gcDRcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpbmFsc3VtIC09IDFcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHA0ID0gbWt4QmFzZSh1MSwgdjIpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtb2RlbC5zdWJqZWN0VG8gKz0gXCIgKyBcIiArIHA0XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgbW9kZWwuc3ViamVjdFRvICs9IFwiID49IFwiICsgZmluYWxzdW0gKyBcIlxcblwiXHJcblxyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy5pc1NhbWVSYW5rRWRnZSh1MXYxKSAmJiAhdGhpcy5pc1NhbWVSYW5rRWRnZSh1MnYyKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgdTEgPSB1MXYxLmxlZnRBdHRyaWJ1dGUubmFtZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgdjEgPSB1MXYxLnJpZ2h0QXR0cmlidXRlLm5hbWVcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHUyID0gdTJ2Mi5sZWZ0QXR0cmlidXRlLm5hbWVcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHYyID0gdTJ2Mi5yaWdodEF0dHJpYnV0ZS5uYW1lXHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgcDEgPSBta2ModTEsIHYxLCB1MiwgdjIpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBmaW5hbHN1bSA9IDFcclxuICAgICAgICAgICAgICAgICAgICAgICAgbW9kZWwuc3ViamVjdFRvICs9IHAxICsgXCJcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgcDIgPSBta3hCYXNlKHUyLCB1MSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGRlZmluaXRpb25zW3AyXSAhPSB1bmRlZmluZWQpe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbW9kZWwuc3ViamVjdFRvICs9IFwiICsgXCIgKyBwMlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcDIgPSBta3hCYXNlKHUxLCB1MilcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpbmFsc3VtIC09IDFcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1vZGVsLnN1YmplY3RUbyArPSBcIiAtIFwiICsgcDJcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHAzID0gbWt4QmFzZSh2MSwgdTIpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkZWZpbml0aW9uc1twM10gIT0gdW5kZWZpbmVkKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1vZGVsLnN1YmplY3RUbyArPSBcIiArIFwiICsgcDNcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpbmFsc3VtIC09IDFcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHAzID0gbWt4QmFzZSh1MiwgdjEpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtb2RlbC5zdWJqZWN0VG8gKz0gXCIgLSBcIiArIHAzXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgbW9kZWwuc3ViamVjdFRvICs9IFwiID49IFwiICsgZmluYWxzdW0gKyBcIlxcblwiXHJcblxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgcDEgPSBta2ModTEsIHYxLCB1MiwgdjIpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZpbmFsc3VtID0gMVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBtb2RlbC5zdWJqZWN0VG8gKz0gcDEgKyBcIlwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHAyID0gbWt4QmFzZSh1MiwgdjEpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkZWZpbml0aW9uc1twMl0gIT0gdW5kZWZpbmVkKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1vZGVsLnN1YmplY3RUbyArPSBcIiArIFwiICsgcDJcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHAyID0gbWt4QmFzZSh2MSwgdTIpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaW5hbHN1bSAtPSAxXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtb2RlbC5zdWJqZWN0VG8gKz0gXCIgLSBcIiArIHAyXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHAzID0gbWt4QmFzZSh1MSwgdTIpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkZWZpbml0aW9uc1twM10gIT0gdW5kZWZpbmVkKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1vZGVsLnN1YmplY3RUbyArPSBcIiArIFwiICsgcDNcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpbmFsc3VtIC09IDFcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHAzID0gbWt4QmFzZSh1MiwgdTEpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtb2RlbC5zdWJqZWN0VG8gKz0gXCIgLSBcIiArIHAzXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgbW9kZWwuc3ViamVjdFRvICs9IFwiID49IFwiICsgZmluYWxzdW0gKyBcIlxcblwiXHJcblxyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoIXRoaXMuaXNTYW1lUmFua0VkZ2UodTF2MSkgJiYgdGhpcy5pc1NhbWVSYW5rRWRnZSh1MnYyKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgdTEgPSB1MXYxLmxlZnRBdHRyaWJ1dGUubmFtZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgdjEgPSB1MXYxLnJpZ2h0QXR0cmlidXRlLm5hbWVcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHUyID0gdTJ2Mi5sZWZ0QXR0cmlidXRlLm5hbWVcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHYyID0gdTJ2Mi5yaWdodEF0dHJpYnV0ZS5uYW1lXHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgcDEgPSBta2ModTEsIHYxLCB1MiwgdjIpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBmaW5hbHN1bSA9IDFcclxuICAgICAgICAgICAgICAgICAgICAgICAgbW9kZWwuc3ViamVjdFRvICs9IHAxICsgXCJcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgcDIgPSBta3hCYXNlKHUxLCB1MilcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGRlZmluaXRpb25zW3AyXSAhPSB1bmRlZmluZWQpe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbW9kZWwuc3ViamVjdFRvICs9IFwiICsgXCIgKyBwMlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcDIgPSBta3hCYXNlKHUyLCB1MSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpbmFsc3VtIC09IDFcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1vZGVsLnN1YmplY3RUbyArPSBcIiAtIFwiICsgcDJcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHAzID0gbWt4QmFzZSh2MiwgdTEpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkZWZpbml0aW9uc1twM10gIT0gdW5kZWZpbmVkKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1vZGVsLnN1YmplY3RUbyArPSBcIiArIFwiICsgcDNcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpbmFsc3VtIC09IDFcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHAzID0gbWt4QmFzZSh1MSwgdjIpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtb2RlbC5zdWJqZWN0VG8gKz0gXCIgLSBcIiArIHAzXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgbW9kZWwuc3ViamVjdFRvICs9IFwiID49IFwiICsgZmluYWxzdW0gKyBcIlxcblwiXHJcblxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgcDEgPSBta2ModTEsIHYxLCB1MiwgdjIpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZpbmFsc3VtID0gMVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBtb2RlbC5zdWJqZWN0VG8gKz0gcDEgKyBcIlwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHAyID0gbWt4QmFzZSh1MSwgdjIpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkZWZpbml0aW9uc1twMl0gIT0gdW5kZWZpbmVkKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1vZGVsLnN1YmplY3RUbyArPSBcIiArIFwiICsgcDJcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHAyID0gbWt4QmFzZSh2MiwgdTEpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaW5hbHN1bSAtPSAxXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtb2RlbC5zdWJqZWN0VG8gKz0gXCIgLSBcIiArIHAyXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHAzID0gbWt4QmFzZSh1MiwgdTEpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkZWZpbml0aW9uc1twM10gIT0gdW5kZWZpbmVkKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1vZGVsLnN1YmplY3RUbyArPSBcIiArIFwiICsgcDNcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpbmFsc3VtIC09IDFcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHAzID0gbWt4QmFzZSh1MSwgdTIpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtb2RlbC5zdWJqZWN0VG8gKz0gXCIgLSBcIiArIHAzXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgbW9kZWwuc3ViamVjdFRvICs9IFwiID49IFwiICsgZmluYWxzdW0gKyBcIlxcblwiXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuXHJcbiAgICAgICAvLyBncm91cGluZyBjb25zdHJhaW50IG9mIGF0dHJpYnV0ZXMgd2l0aGluIHRhYmxlc1xyXG4gICAgICAgZm9yIChsZXQgaz0wOyBrPHRoaXMuZy5tYXhEZXB0aCArIDE7IGsrKyl7XHJcbiAgICAgICAgICAgIGxldCBsYXllclRhYmxlcyA9IHRoaXMuZy50YWJsZUluZGV4W2tdO1xyXG4gICAgICAgICAgICBsZXQgbGF5ZXJBdHRyaWJ1dGVzID0gbGF5ZXJUYWJsZXMubWFwKHQgPT4gdC5hdHRyaWJ1dGVzKS5mbGF0KClcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIGZvciAobGV0IGk9MDsgaTxsYXllckF0dHJpYnV0ZXMubGVuZ3RoOyBpKyspe1xyXG4gICAgICAgICAgICAgICAgbGV0IGF0dHIxID0gbGF5ZXJBdHRyaWJ1dGVzW2ldLm5hbWU7XHJcbiAgICAgICAgICAgICAgICBsZXQgdDEgPSBsYXllckF0dHJpYnV0ZXNbaV0udGFibGUubmFtZTtcclxuXHJcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBqPWkrMTsgajxsYXllckF0dHJpYnV0ZXMubGVuZ3RoOyBqKyspe1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCBhdHRyMiA9IGxheWVyQXR0cmlidXRlc1tqXS5uYW1lO1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCB0MiA9IGxheWVyQXR0cmlidXRlc1tqXS50YWJsZS5uYW1lXHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0MSAhPSB0Mil7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIG1vZGVsLnN1YmplY3RUbyArPSBcInhfXCIgKyBhdHRyMS5uYW1lICsgXCJfXCIgKyBhdHRyMi5uYW1lICsgXCIgLSBcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyAgICAgKyBcInhfVFwiICsgYXR0cjEudGFibGUubmFtZSArIFwiX1RcIiArIGF0dHIyLnRhYmxlLm5hbWUgKyBcIiA9IDBcXG5cIlxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgbW9kZWwuc3ViamVjdFRvICs9IG1reEJhc2UoYXR0cjEsIGF0dHIyKSArIFwiXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICsgXCIgLSBcIiArIG1reEJhc2UodDEsIHQyLCAnVCcpIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKyBcIiA9IDBcXG5cIlxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gKioqKioqKioqKioqXHJcbiAgICAgICAgLy8gYmVuZGluZXNzXHJcbiAgICAgICAgLy8gKioqKioqKioqKioqXHJcbiAgICAgICAgZm9yIChsZXQgZSBvZiB0aGlzLmcuZWRnZXMpe1xyXG4gICAgICAgICAgICBtb2RlbC5zdWJqZWN0VG8gKz0gXHJcbiAgICAgICAgICAgICAgICBcInlfXCIgKyBlLmxlZnRBdHRyaWJ1dGUubmFtZSArIFwiIC0gXCIgKyBcclxuICAgICAgICAgICAgICAgIFwieV9cIiArIGUucmlnaHRBdHRyaWJ1dGUubmFtZSArIFwiIC0gXCIgKyBcclxuICAgICAgICAgICAgICAgIFwiYmVuZF9cIiArIGUubGVmdEF0dHJpYnV0ZS5uYW1lICsgXCJfXCIgKyBlLnJpZ2h0QXR0cmlidXRlLm5hbWUgK1xyXG4gICAgICAgICAgICAgICAgXCIgPD0gMFxcblwiXHJcblxyXG4gICAgICAgICAgICBtb2RlbC5zdWJqZWN0VG8gKz0gXHJcbiAgICAgICAgICAgICAgICBcInlfXCIgKyBlLnJpZ2h0QXR0cmlidXRlLm5hbWUgKyBcIiAtIFwiICsgXHJcbiAgICAgICAgICAgICAgICBcInlfXCIgKyBlLmxlZnRBdHRyaWJ1dGUubmFtZSArIFwiIC0gXCIgKyBcclxuICAgICAgICAgICAgICAgIFwiYmVuZF9cIiArIGUubGVmdEF0dHJpYnV0ZS5uYW1lICsgXCJfXCIgKyBlLnJpZ2h0QXR0cmlidXRlLm5hbWUgK1xyXG4gICAgICAgICAgICAgICAgXCIgPD0gMFxcblwiXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBmb3IgKGxldCBpIGluIHRoaXMuZy50YWJsZUluZGV4KXtcclxuICAgICAgICAvLyAgICAgbGV0IHRhYmxlQ29sID0gdGhpcy5nLnRhYmxlSW5kZXhbaV07XHJcbiAgICAgICAgLy8gICAgIGZvciAobGV0IGogaW4gdGFibGVDb2wpe1xyXG4gICAgICAgIC8vICAgICAgICAgbGV0IHQxID0gdGFibGVDb2xbal07XHJcbiAgICAgICAgLy8gICAgICAgICBsZXQgdG1wc3RyID0gXCJ5X1wiICsgdDEubmFtZSBcclxuICAgICAgICAvLyAgICAgICAgIGxldCBhY2N1bXVsYXRvciA9IDBcclxuICAgICAgICAvLyAgICAgICAgIGZvciAobGV0IGsgaW4gdGFibGVDb2wpe1xyXG4gICAgICAgIC8vICAgICAgICAgICAgIGlmIChqID09IGspIGNvbnRpbnVlO1xyXG4gICAgICAgIC8vICAgICAgICAgICAgIGxldCB0MiA9IHRhYmxlQ29sW2tdO1xyXG4gICAgICAgIC8vICAgICAgICAgICAgIGxldCBwID0gbWt4QmFzZSh0Mi5uYW1lLCB0MS5uYW1lLCAnVCcpXHJcbiAgICAgICAgLy8gICAgICAgICAgICAgaWYgKGRlZmluaXRpb25zW3BdICE9IHVuZGVmaW5lZCl7XHJcbiAgICAgICAgLy8gICAgICAgICAgICAgICAgIC8vY29uc29sZS5sb2cocClcclxuICAgICAgICAvLyAgICAgICAgICAgICAgICAgdG1wc3RyICs9IFwiIC0gXCIgKyAodDIuYXR0cmlidXRlcy5sZW5ndGggKyAyKSArIFwiIFwiICsgcCBcclxuICAgICAgICAvLyAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgIC8vICAgICAgICAgICAgICAgICBwID0gbWt4QmFzZSh0MS5uYW1lLCB0Mi5uYW1lLCAnVCcpXHJcbiAgICAgICAgLy8gICAgICAgICAgICAgICAgIHRtcHN0ciArPSBcIiArIFwiICsgKHQyLmF0dHJpYnV0ZXMubGVuZ3RoICsgMikgKyBcIiBcIiArIHBcclxuICAgICAgICAvLyAgICAgICAgICAgICAgICAgYWNjdW11bGF0b3IgKz0gKHQyLmF0dHJpYnV0ZXMubGVuZ3RoICsgMilcclxuICAgICAgICAvLyAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgIC8vICAgICAgICAgfVxyXG4gICAgICAgIC8vICAgICAgICAgdG1wc3RyICs9IFwiID49IFwiICsgYWNjdW11bGF0b3IgKyBcIlxcblwiXHJcbiAgICAgICAgLy8gICAgICAgICBtb2RlbC5zdWJqZWN0VG8gKz0gdG1wc3RyXHJcbiAgICAgICAgLy8gICAgIH1cclxuICAgICAgICAvLyB9XHJcbiAgICAgICAgbGV0IG0gPSAyMDtcclxuICAgICAgICAvLyBsZXQgYmNvdW50ID0gMDtcclxuICAgICAgICAvLyBmb3IgKGxldCB0YWJsZUNvbCBvZiB0aGlzLmcudGFibGVJbmRleCl7XHJcbiAgICAgICAgLy8gICAgIGZvciAobGV0IGkgaW4gdGFibGVDb2wpe1xyXG4gICAgICAgIC8vICAgICAgICAgaWYgKHRhYmxlQ29sLmxlbmd0aCA9PSAxKSBjb250aW51ZVxyXG4gICAgICAgIC8vICAgICAgICAgbGV0IHAgPSBcIlwiXHJcbiAgICAgICAgLy8gICAgICAgICBsZXQgdDEgPSB0YWJsZUNvbFtpXTtcclxuICAgICAgICAvLyAgICAgICAgIGZvciAobGV0IGogaW4gdGFibGVDb2wpe1xyXG4gICAgICAgIC8vICAgICAgICAgICAgIGlmIChqID09IGkpIGNvbnRpbnVlO1xyXG4gICAgICAgIC8vICAgICAgICAgICAgIGxldCB0MiA9IHRhYmxlQ29sW2pdO1xyXG4gICAgICAgIC8vICAgICAgICAgICAgIGxldCB0bXBzdHIgPSBcIlwiXHJcbiAgICAgICAgLy8gICAgICAgICAgICAgbGV0IGFjY3VtdWxhdG9yID0gMlxyXG4gICAgICAgIC8vICAgICAgICAgICAgIHRtcHN0ciArPSBcInlfXCIgKyB0MS5uYW1lICsgXCIgLSB5X1wiICsgdDIubmFtZSArIFwiICsgXCIgKyBtICsgXCIgYl9cIiArIGJjb3VudFxyXG4gICAgICAgIC8vICAgICAgICAgICAgIG1vZGVsLnN1YmplY3RUbyArPSB0bXBzdHIgKyBcIiA+PSBcIiArIChhY2N1bXVsYXRvcikgKyBcIlxcblwiXHJcblxyXG4gICAgICAgIC8vICAgICAgICAgICAgIHRtcHN0ciA9IFwiXCJcclxuICAgICAgICAvLyAgICAgICAgICAgICB0bXBzdHIgKz0gXCJ5X1wiICsgdDEubmFtZSArIFwiIC0geV9cIiArIHQyLm5hbWUgKyBcIiArIFwiICsgbSArIFwiIGJfXCIgKyBiY291bnRcclxuICAgICAgICAvLyAgICAgICAgICAgICBtb2RlbC5zdWJqZWN0VG8gKz0gdG1wc3RyICsgXCIgPD0gXCIgKyAobSAtIDIpICsgXCJcXG5cIlxyXG4gICAgICAgIC8vICAgICAgICAgICAgIGRlZmluaXRpb25zW1wiYl9cIiArIGJjb3VudF0gPSBbXVxyXG4gICAgICAgIC8vICAgICAgICAgICAgIGJjb3VudCArPSAxIFxyXG4gICAgICAgIC8vICAgICAgICAgfVxyXG4gICAgICAgIC8vICAgICB9XHJcbiAgICAgICAgLy8gfVxyXG5cclxuICAgICAgICBsZXQgemNvdW50ID0gMDtcclxuICAgICAgICBmb3IgKGxldCB0YWJsZUNvbCBvZiB0aGlzLmcudGFibGVJbmRleCl7XHJcbiAgICAgICAgICAgIGZvciAobGV0IGkgaW4gdGFibGVDb2wpe1xyXG4gICAgICAgICAgICAgICAgbGV0IHQxID0gdGFibGVDb2xbaV07XHJcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBqIGluIHRhYmxlQ29sKXtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoaSA9PSBqKSBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgdDIgPSB0YWJsZUNvbFtqXTtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgcCA9IG1reEJhc2UodDIubmFtZSwgdDEubmFtZSwgJ1QnKVxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChkZWZpbml0aW9uc1twXSAhPSB1bmRlZmluZWQpe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBtb2RlbC5zdWJqZWN0VG8gKz0gXCJ6X1wiICsgemNvdW50ICsgXCIgLSBcIiArIG0gKyBcIiBcIiArIHAgKyBcIiA8PSAwXFxuXCIgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1vZGVsLnN1YmplY3RUbyArPSBcInpfXCIgKyB6Y291bnQgKyBcIiAtIFwiICsgXCJ5X1wiICsgdDIubmFtZSArIFwiIDw9IDBcXG5cIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBtb2RlbC5zdWJqZWN0VG8gKz0gXCJ6X1wiICsgemNvdW50ICsgXCIgLSBcIiArIFwieV9cIiArIHQyLm5hbWUgKyBcIiAtIFwiICsgbSArIFwiIFwiICsgcCArIFwiID49IC0gXCIgKyBtICsgXCJcXG5cIiAgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1vZGVsLnN1YmplY3RUbyArPSBcInpfXCIgKyB6Y291bnQgKyBcIiA+PSAwXFxuXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgbW9kZWwuc3ViamVjdFRvICs9IFwieV9cIiArIHQxLm5hbWUgKyBcIiAtIFwiICsgXCJ6X1wiICsgemNvdW50ICsgXCIgLSBcIiArICgyICsgdDIuYXR0cmlidXRlcy5sZW5ndGgpICsgXCIgXCIgKyBwICsgXCIgPj0gMFxcblwiXHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcCA9IG1reEJhc2UodDEubmFtZSwgdDIubmFtZSwgJ1QnKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBtb2RlbC5zdWJqZWN0VG8gKz0gXCJ6X1wiICsgemNvdW50ICsgXCIgKyBcIiArIG0gKyBcIiBcIiArIHAgKyBcIiA8PSBcIiArIG0gKyBcIlxcblwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1vZGVsLnN1YmplY3RUbyArPSBcInpfXCIgKyB6Y291bnQgKyBcIiAtIFwiICsgXCJ5X1wiICsgdDIubmFtZSArIFwiIDw9IDBcXG5cIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBtb2RlbC5zdWJqZWN0VG8gKz0gXCJ6X1wiICsgemNvdW50ICsgXCIgLSBcIiArIFwieV9cIiArIHQyLm5hbWUgKyBcIiArIFwiICsgbSArIFwiIFwiICsgcCArIFwiID49IDBcXG5cIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBtb2RlbC5zdWJqZWN0VG8gKz0gXCJ6X1wiICsgemNvdW50ICsgXCIgPj0gMFxcblwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1vZGVsLnN1YmplY3RUbyArPSBcInlfXCIgKyB0MS5uYW1lICsgXCIgLSBcIiArIFwiel9cIiArIHpjb3VudCArIFwiICsgXCIgKyAoMiArIHQyLmF0dHJpYnV0ZXMubGVuZ3RoKSArIFwiIFwiICsgcCArIFwiID49IFwiICsgKDIgKyB0Mi5hdHRyaWJ1dGVzLmxlbmd0aCkgKyBcIlxcblwiXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgIHpjb3VudCArPSAxXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZvciAobGV0IHQgb2YgdGhpcy5nLnRhYmxlcyl7XHJcbiAgICAgICAgICAgIGZvciAobGV0IGkgaW4gdC5hdHRyaWJ1dGVzKXtcclxuICAgICAgICAgICAgICAgIGxldCBhMSA9IHQuYXR0cmlidXRlc1tpXVxyXG4gICAgICAgICAgICAgICAgbGV0IGFjY3VtdWxhdG9yID0gMVxyXG4gICAgICAgICAgICAgICAgbGV0IHRtcHN0ciA9IFwieV9cIiArIGExLm5hbWUgKyBcIiAtIFwiICsgXCJ5X1wiICsgdC5uYW1lXHJcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBqIGluIHQuYXR0cmlidXRlcyl7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGkgPT0gaikgY29udGludWVcclxuICAgICAgICAgICAgICAgICAgICBsZXQgYTIgPSB0LmF0dHJpYnV0ZXNbal1cclxuICAgICAgICAgICAgICAgICAgICBsZXQgcCA9IG1reEJhc2UoYTIubmFtZSwgYTEubmFtZSlcclxuICAgICAgICAgICAgICAgICAgICBpZiAoZGVmaW5pdGlvbnNbcF0gIT0gdW5kZWZpbmVkKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdG1wc3RyICs9IFwiIC0gXCIgKyBwXHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHAgPSBta3hCYXNlKGExLm5hbWUsIGEyLm5hbWUpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRtcHN0ciArPSBcIiArIFwiICsgcFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBhY2N1bXVsYXRvciArPSAxXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIHRtcHN0ciArPSBcIiA9IFwiICsgYWNjdW11bGF0b3IgKyBcIlxcblwiXHJcbiAgICAgICAgICAgICAgICBtb2RlbC5zdWJqZWN0VG8gKz0gdG1wc3RyXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIGZpbGwgZnVuY3Rpb24gdG8gbWluaW1pemVcclxuICAgICAgICBmb3IgKGxldCBlbGVtIGluIGNyb3NzaW5nX3ZhcnMpe1xyXG4gICAgICAgICAgICBtb2RlbC5taW5pbWl6ZSArPSBlbGVtICsgXCIgKyBcIlxyXG4gICAgICAgIH1cclxuICAgICAgICBmb3IgKGxldCBlIG9mIHRoaXMuZy5lZGdlcyl7XHJcbiAgICAgICAgICAgIG1vZGVsLm1pbmltaXplICs9IFwiMC4xIGJlbmRfXCIgKyBlLmxlZnRBdHRyaWJ1dGUubmFtZSArIFwiX1wiICsgZS5yaWdodEF0dHJpYnV0ZS5uYW1lICsgXCIgKyBcIlxyXG4gICAgICAgIH1cclxuICAgICAgICBtb2RlbC5taW5pbWl6ZSA9IG1vZGVsLm1pbmltaXplLnN1YnN0cmluZygwLCBtb2RlbC5taW5pbWl6ZS5sZW5ndGggLSAyKSArIFwiXFxuXFxuXCJcclxuXHJcbiAgICAgICAgZm9yIChsZXQgZWxlbSBpbiBkZWZpbml0aW9ucyl7XHJcbiAgICAgICAgICAgIG1vZGVsLmJvdW5kcyArPSBcImJpbmFyeSBcIiArIGVsZW0gKyBcIlxcblwiXHJcbiAgICAgICAgfVxyXG5cclxuICAgIH1cclxuXHJcbiAgICBpc1NhbWVSYW5rRWRnZShlZGdlKXtcclxuICAgICAgICByZXR1cm4gZWRnZS5sZWZ0VGFibGUuZGVwdGggPT0gZWRnZS5yaWdodFRhYmxlLmRlcHRoXHJcbiAgICB9XHJcblxyXG4gICAgbW9kZWxUb1N0cmluZyhtb2RlbCl7XHJcbiAgICAgICAgcmV0dXJuIG1vZGVsLm1pbmltaXplICsgbW9kZWwuc3ViamVjdFRvICsgbW9kZWwuYm91bmRzICsgJ1xcbkVuZFxcbidcclxuICAgIH1cclxuXHJcbiAgICBhcHBseV9zb2x1dGlvbihzb2x1dGlvbil7XHJcbiAgICAgICAgY29uc29sZS5sb2coc29sdXRpb24pXHJcbiAgICAgICAgZm9yIChsZXQgaT0wOyBpPHRoaXMuZy5tYXhEZXB0aCArIDE7IGkrKyl7XHJcbiAgICAgICAgICAgIGxldCBsYXllclRhYmxlcyA9IHRoaXMuZy50YWJsZUluZGV4W2ldO1xyXG5cclxuICAgICAgICAgICAgbGF5ZXJUYWJsZXMuc29ydCgoYSwgYikgPT4ge1xyXG4gICAgICAgICAgICAgICAgLy9jb25zb2xlLmxvZyhhLm5hbWUsIGIubmFtZSwgc29sdXRpb25bXCJ4X1RcIiArIGEubmFtZSArIFwiX1RcIiArIGIubmFtZV0sIHNvbHV0aW9uW1wieF9UXCIgKyBiLm5hbWUgKyBcIl9UXCIgKyBhLm5hbWVdKVxyXG4gICAgICAgICAgICAgICAgaWYgKHNvbHV0aW9uW1wieF9UXCIgKyBhLm5hbWUgKyBcIl9UXCIgKyBiLm5hbWVdID09IDApIHJldHVybiAxXHJcbiAgICAgICAgICAgICAgICBlbHNlIGlmIChzb2x1dGlvbltcInhfVFwiICsgYS5uYW1lICsgXCJfVFwiICsgYi5uYW1lXSA9PSAxKSByZXR1cm4gLTFcclxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKHNvbHV0aW9uW1wieF9UXCIgKyBiLm5hbWUgKyBcIl9UXCIgKyBhLm5hbWVdID09IDEpIHJldHVybiAxXHJcbiAgICAgICAgICAgICAgICBlbHNlIGlmIChzb2x1dGlvbltcInhfVFwiICsgYi5uYW1lICsgXCJfVFwiICsgYS5uYW1lXSA9PSAwKSByZXR1cm4gLTFcclxuICAgICAgICAgICAgfSlcclxuXHJcbiAgICAgICAgICAgIGZvciAobGV0IGsgaW4gbGF5ZXJUYWJsZXMpe1xyXG4gICAgICAgICAgICAgICAgbGF5ZXJUYWJsZXNba10ud2VpZ2h0ID0gaztcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgZm9yIChsZXQgdGFibGUgb2YgbGF5ZXJUYWJsZXMpe1xyXG4gICAgICAgICAgICAgICAgdGFibGUuYXR0cmlidXRlcy5zb3J0KChhLCBiKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy9pZiAoYi50YWJsZS5uYW1lID09IFwiVDh5NFwiKSBjb25zb2xlLmxvZyhhLm5hbWUsIGIubmFtZSwgc29sdXRpb25bXCJ4X1wiICsgYi5uYW1lICsgXCJfXCIgKyBhLm5hbWVdKVxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChzb2x1dGlvbltcInhfXCIgKyBhLm5hbWUgKyBcIl9cIiArIGIubmFtZV0gPT0gMCkgcmV0dXJuIDFcclxuICAgICAgICAgICAgICAgICAgICBlbHNlIGlmIChzb2x1dGlvbltcInhfXCIgKyBhLm5hbWUgKyBcIl9cIiArIGIubmFtZV0gPT0gMSkgcmV0dXJuIC0xXHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAoc29sdXRpb25bXCJ4X1wiICsgYi5uYW1lICsgXCJfXCIgKyBhLm5hbWVdID09IDEpIHJldHVybiAxXHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAoc29sdXRpb25bXCJ4X1wiICsgYi5uYW1lICsgXCJfXCIgKyBhLm5hbWVdID09IDApIHJldHVybiAtMVxyXG4gICAgICAgICAgICAgICAgfSlcclxuXHJcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBqPTA7IGo8dGFibGUuYXR0cmlidXRlcy5sZW5ndGg7IGorKyl7XHJcbiAgICAgICAgICAgICAgICAgICAgdGFibGUuYXR0cmlidXRlc1tqXS53ZWlnaHQgPSBqO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyAqKioqKioqKioqXHJcbiAgICAgICAgLy8gYmVuZGluZXNzXHJcbiAgICAgICAgLy8gKioqKioqKioqKlxyXG4gICAgICAgIGZvciAobGV0IGk9MDsgaTx0aGlzLmcudGFibGVJbmRleC5sZW5ndGg7IGkrKyl7XHJcbiAgICAgICAgICAgIGxldCB0YWJsZUNvbCA9IHRoaXMuZy50YWJsZUluZGV4W2ldO1xyXG4gICAgICAgICAgICBmb3IgKGxldCBqPTA7IGo8dGFibGVDb2wubGVuZ3RoOyBqKyspe1xyXG4gICAgICAgICAgICAgICAgbGV0IHQgPSB0YWJsZUNvbFtqXTtcclxuXHJcbiAgICAgICAgICAgICAgICBsZXQgdmFsID0gc29sdXRpb25bXCJ5X1wiICsgdC5uYW1lXVxyXG4gICAgICAgICAgICAgICAgaWYgKHZhbCA9PSB1bmRlZmluZWQpIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgdC52ZXJ0aWNhbEF0dHJPZmZzZXQgPSB2YWwgLSB0LndlaWdodCAqIHRoaXMuZy5iYXNlUm93RGlzdGFuY2U7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbn0iLCJjbGFzcyBMUEJlbmRpbmVzc0NvbWJpbmVkUGx1c0dyb3VwcyB7XHJcbiAgICBjb25zdHJ1Y3RvciAoZywgb3B0aW9ucykge1xyXG4gICAgICAgIHRoaXMuZyA9IGc7XHJcbiAgICAgICAgdGhpcy5taXAgPSB0cnVlO1xyXG4gICAgICAgIHRoaXMudmVyYm9zZSA9IGZhbHNlO1xyXG4gICAgICAgIHRoaXMuZWxhcHNlZFRpbWUgPSAwO1xyXG4gICAgICAgIHRoaXMubnVtQ29uc3RyYWludHMgPSAwO1xyXG4gICAgICAgIHRoaXMubW9kZWxTdHJpbmcgPSBcIlwiO1xyXG5cclxuICAgICAgICBpZiAob3B0aW9ucyA9PSB1bmRlZmluZWQpe1xyXG4gICAgICAgICAgICB0aGlzLm9wdGlvbnMgPSB7XHJcbiAgICAgICAgICAgICAgICBiZW5kaW5lc3NfcmVkdWN0aW9uX2FjdGl2ZTogdHJ1ZSxcclxuICAgICAgICAgICAgICAgIGJlbmRpbmVzc19yZWR1Y3Rpb25fdHlwZTogXCJvcHRpbWl6ZV9hbmdsZXNcIixcclxuICAgICAgICAgICAgICAgIGNyb3NzaW5nc19yZWR1Y3Rpb25fYWN0aXZlOiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgY3Jvc3NpbmdzX3JlZHVjdGlvbl93ZWlnaHQ6IDEsXHJcbiAgICAgICAgICAgICAgICBiZW5kaW5lc3NfcmVkdWN0aW9uX3dlaWdodDogMC4xLFxyXG4gICAgICAgICAgICAgICAgYmVuZGluZXNzX2FuZ2xlX29wdGltaXphdGlvbl93ZWlnaHQ6IDAuMDFcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0gZWxzZSB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xyXG4gICAgICAgIFxyXG4gICAgfVxyXG5cclxuICAgIGFzeW5jIGFycmFuZ2UoKXtcclxuXHJcbiAgICAgICAgLy8gVE9ETzogdGVtcG9yYXJ5IGZpeFxyXG4gICAgICAgIGlmICh0aGlzLm9wdGlvbnMuY3Jvc3NpbmdzX3JlZHVjdGlvbl9hY3RpdmUgPT0gZmFsc2UgJiYgdGhpcy5vcHRpb25zLmJlbmRpbmVzc19yZWR1Y3Rpb25fYWN0aXZlID09IGZhbHNlKSByZXR1cm47XHJcblxyXG4gICAgICAgIGxldCBzdGFydFRpbWUgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKVxyXG5cclxuICAgICAgICAvLyBidWlsZCBtb2RlbCBmcm9tIGdyYXBoXHJcbiAgICAgICAgbGV0IG1vZGVsID0ge31cclxuXHJcbiAgICAgICAgdGhpcy5maWxsTW9kZWwobW9kZWwpXHJcbiAgICAgICAgbGV0IHByb2IgPSB0aGlzLm1vZGVsVG9TdHJpbmcobW9kZWwpXHJcbiAgICAgICAgdGhpcy5tb2RlbFN0cmluZyA9IHByb2I7XHJcbiAgICAgICAgaWYgKG1vZGVsLm1pbmltaXplLmxlbmd0aCA8PSAxMCkgcmV0dXJuO1xyXG5cclxuICAgICAgICAvLyBzb2x2ZVxyXG4gICAgICAgIGxldCByZXN1bHQgPSB7fSwgb2JqZWN0aXZlLCBpO1xyXG5cclxuICAgICAgICBpZiAodGhpcy52ZXJib3NlKSBnbHBfc2V0X3ByaW50X2Z1bmMoY29uc29sZS5sb2cpO1xyXG5cclxuICAgICAgICBsZXQgbHAgPSBnbHBfY3JlYXRlX3Byb2IoKTtcclxuICAgICAgICBnbHBfcmVhZF9scF9mcm9tX3N0cmluZyhscCwgbnVsbCwgcHJvYik7XHJcblxyXG4gICAgICAgIGdscF9zY2FsZV9wcm9iKGxwLCBHTFBfU0ZfQVVUTyk7XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgIGxldCBzbWNwID0gbmV3IFNNQ1Aoe3ByZXNvbHZlOiBHTFBfT059KTtcclxuICAgICAgICBnbHBfc2ltcGxleChscCwgc21jcCk7XHJcblxyXG4gICAgICAgIGlmICh0aGlzLm1pcCl7XHJcbiAgICAgICAgICAgIGdscF9pbnRvcHQobHApO1xyXG4gICAgICAgICAgICBvYmplY3RpdmUgPSBnbHBfbWlwX29ial92YWwobHApO1xyXG5cclxuICAgICAgICAgICAgZm9yKGkgPSAxOyBpIDw9IGdscF9nZXRfbnVtX2NvbHMobHApOyBpKyspe1xyXG4gICAgICAgICAgICAgICAgcmVzdWx0W2dscF9nZXRfY29sX25hbWUobHAsIGkpXSA9IGdscF9taXBfY29sX3ZhbChscCwgaSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBvYmplY3RpdmUgPSBnbHBfZ2V0X29ial92YWwobHApO1xyXG4gICAgICAgICAgICBmb3IoaSA9IDE7IGkgPD0gZ2xwX2dldF9udW1fY29scyhscCk7IGkrKyl7XHJcbiAgICAgICAgICAgICAgICByZXN1bHRbZ2xwX2dldF9jb2xfbmFtZShscCwgaSldID0gZ2xwX2dldF9jb2xfcHJpbSAobHAsIGkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLmFwcGx5X3NvbHV0aW9uKHJlc3VsdClcclxuXHJcbiAgICAgICAgdGhpcy5lbGFwc2VkVGltZSA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpIC0gc3RhcnRUaW1lXHJcbiAgICAgICAgXHJcbiAgICB9XHJcblxyXG4gICAgZmlsbE1vZGVsKG1vZGVsKXtcclxuXHJcbiAgICAgICAgdGhpcy5tID0gMzA7IC8vIFRPRE86IGNoYW5nZSB0aGlzXHJcbiAgICAgICAgdGhpcy56Y291bnQgPSAwO1xyXG4gICAgICAgIHRoaXMuYnVmZmVyID0gMjtcclxuXHJcbiAgICAgICAgbW9kZWwubWluaW1pemUgPSBcIk1pbmltaXplIFxcblwiXHJcbiAgICAgICAgbW9kZWwuc3ViamVjdFRvID0gXCJTdWJqZWN0IFRvIFxcblwiXHJcbiAgICAgICAgbW9kZWwuYm91bmRzID0gXCJcXG5Cb3VuZHMgXFxuXCJcclxuXHJcbiAgICAgICAgdGhpcy5kZWZpbml0aW9ucyA9IHt9XHJcbiAgICAgICAgdGhpcy5jcm9zc2luZ192YXJzID0ge31cclxuXHJcbiAgICAgICAgLy8gc3RvcmUgYWxsIHZhcmlhYmxlIG5hbWVzIGluIG9yZGVyXHJcbiAgICAgICAgZm9yIChsZXQgaz0wOyBrIDwgdGhpcy5nLm1heERlcHRoICsgMTsgaysrKXtcclxuICAgICAgICAgICAgbGV0IGxheWVyVGFibGVzID0gdGhpcy5nLnRhYmxlSW5kZXhba107XHJcbiAgICAgICAgICAgIGxldCBsYXllckF0dHJpYnV0ZXMgPSBsYXllclRhYmxlcy5tYXAodCA9PiB0LmF0dHJpYnV0ZXMpLmZsYXQoKTtcclxuXHJcbiAgICAgICAgICAgIC8vIHN0b3JlIHRhYmxlc1xyXG4gICAgICAgICAgICBmb3IgKGxldCBpPTA7IGk8bGF5ZXJUYWJsZXMubGVuZ3RoOyBpKyspe1xyXG4gICAgICAgICAgICAgICAgbGV0IHQxID0gbGF5ZXJUYWJsZXNbaV0uaWQ7XHJcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBqPWkrMTsgajxsYXllclRhYmxlcy5sZW5ndGg7IGorKyl7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IHQyID0gbGF5ZXJUYWJsZXNbal0uaWQ7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5kZWZpbml0aW9uc1t0aGlzLm1reEJhc2UodDEsIHQyLCAnVCcpXSA9ICcnXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8vIHN0b3JlIGF0dHJpYnV0ZXNcclxuICAgICAgICAgICAgZm9yIChsZXQgaT0wOyBpPGxheWVyQXR0cmlidXRlcy5sZW5ndGg7IGkrKyl7XHJcbiAgICAgICAgICAgICAgICBsZXQgYTEgPSBsYXllckF0dHJpYnV0ZXNbaV0uaWQ7XHJcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBqPWkrMTsgajxsYXllckF0dHJpYnV0ZXMubGVuZ3RoOyBqKyspe1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCBhMiA9IGxheWVyQXR0cmlidXRlc1tqXS5pZDtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmRlZmluaXRpb25zW3RoaXMubWt4QmFzZShhMSwgYTIpXSA9ICcnXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIGFsbCBncm91cHMgc2hvdWxkIGhhdmUgdGhlIHNhbWUgeV9zdGFydCBhbmQgeV9lbmQgb24gZXZlcnkgZGVwdGhcclxuICAgICAgICBmb3IgKGxldCBncm91cCBvZiB0aGlzLmcuZ3JvdXBzKXtcclxuICAgICAgICAgICAgZm9yIChsZXQgdGFibGUgb2YgZ3JvdXAudGFibGVzKXtcclxuICAgICAgICAgICAgICAgIG1vZGVsLnN1YmplY3RUbyArPSBcInlfZ3JvdXBzdGFydF9cIiArIGdyb3VwLmlkICsgXCIgLSB5X1wiICsgdGFibGUuaWQgKyBcIiA8PSAwXFxuXCI7XHJcbiAgICAgICAgICAgICAgICBtb2RlbC5zdWJqZWN0VG8gKz0gXCJ5X2dyb3VwZW5kX1wiICsgZ3JvdXAuaWQgKyBcIiAtIHlfXCIgKyB0YWJsZS5pZCArIFwiID49IFwiICsgKHRhYmxlLmF0dHJpYnV0ZXMubGVuZ3RoICsgdGhpcy5idWZmZXIpICsgXCJcXG5cIjtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgZm9yIChsZXQgdGFibGUgb2YgdGhpcy5nLnRhYmxlcyl7XHJcbiAgICAgICAgICAgICAgICBpZiAoZ3JvdXAudGFibGVzLmluZGV4T2YodGFibGUpID09IC0xICYmIGdyb3VwLnRhYmxlcy5tYXAodCA9PiB0LmRlcHRoKS5pbmRleE9mKHRhYmxlLmRlcHRoKSAhPSAtMSl7XHJcbiAgICAgICAgICAgICAgICAgICAgbW9kZWwuc3ViamVjdFRvICs9IFwieV9cIiArIHRhYmxlLmlkICsgXCIgLSBcIiArIHRoaXMubSArIFwiIHpfXCIgKyB0aGlzLnpjb3VudCArIFwiIC0geV9ncm91cHN0YXJ0X1wiICsgZ3JvdXAuaWQgKyBcIiA8PSAtIFwiICsgKHRhYmxlLmF0dHJpYnV0ZXMubGVuZ3RoICsgdGhpcy5idWZmZXIpICsgXCJcXG5cIjtcclxuICAgICAgICAgICAgICAgICAgICBtb2RlbC5zdWJqZWN0VG8gKz0gXCItIHlfXCIgKyB0YWJsZS5pZCArIFwiICsgXCIgKyB0aGlzLm0gKyBcIiB6X1wiICsgdGhpcy56Y291bnQgKyBcIiArIHlfZ3JvdXBlbmRfXCIgKyBncm91cC5pZCArIFwiIDw9IFwiICsgdGhpcy5tICsgXCJcXG5cIlxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuemNvdW50ICs9IDE7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0gICAgICAgICAgICBcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZvciAobGV0IGk9MDsgaTw9dGhpcy56Y291bnQ7IGkrKyl7XHJcbiAgICAgICAgICAgIG1vZGVsLmJvdW5kcyArPSBcImJpbmFyeSB6X1wiICsgaSArIFwiXFxuXCIgXHJcbiAgICAgICAgfVxyXG4gICAgICAgIFxyXG4gICAgICAgIGZvciAobGV0IGs9MDsgayA8IHRoaXMuZy5tYXhEZXB0aCArIDE7IGsrKyl7XHJcbiAgICAgICAgICAgIGxldCBsYXllclRhYmxlcyA9IHRoaXMuZy50YWJsZUluZGV4W2tdO1xyXG4gICAgICAgICAgICBsZXQgbGF5ZXJBdHRyaWJ1dGVzID0gbGF5ZXJUYWJsZXMubWFwKHQgPT4gdC5hdHRyaWJ1dGVzKS5mbGF0KClcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIC8vIGdsb2JhbCBvcmRlcmluZyBvZiB0YWJsZXMgXHJcbiAgICAgICAgICAgIGZvciAobGV0IGk9MDsgaTxsYXllclRhYmxlcy5sZW5ndGg7IGkrKyl7XHJcbiAgICAgICAgICAgICAgICBsZXQgdDEgPSBsYXllclRhYmxlc1tpXS5pZDtcclxuXHJcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBqID0gaSsxOyBqIDwgbGF5ZXJUYWJsZXMubGVuZ3RoOyBqKyspe1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCB0MiA9IGxheWVyVGFibGVzW2pdLmlkO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBtID0gaiArIDE7IG0gPCBsYXllclRhYmxlcy5sZW5ndGg7IG0rKyl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCB0MyA9IGxheWVyVGFibGVzW21dLmlkO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHQxID09IHQyIHx8IHQyID09IHQzIHx8IHQxID09IHQzKSBjb250aW51ZTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1vZGVsLnN1YmplY3RUbyArPSBcIlwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICArIHRoaXMubWt4QmFzZSh0MSwgdDIsICdUJylcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICsgXCIgKyBcIiArIHRoaXMubWt4QmFzZSh0MiwgdDMsICdUJylcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICsgXCIgLSBcIiArIHRoaXMubWt4QmFzZSh0MSwgdDMsICdUJylcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICsgXCIgPj0gMFxcblwiXHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBtb2RlbC5zdWJqZWN0VG8gKz0gXCJcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKyBcIi0gXCIgKyB0aGlzLm1reEJhc2UodDEsIHQyLCAnVCcpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICArIFwiIC0gXCIgKyB0aGlzLm1reEJhc2UodDIsIHQzLCAnVCcpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICArIFwiICsgXCIgKyB0aGlzLm1reEJhc2UodDEsIHQzLCAnVCcpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICArIFwiID49IC0xXFxuXCJcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8vIGdsb2JhbCBvcmRlcmluZyBvZiBhdHRyaWJ1dGVzXHJcbiAgICAgICAgICAgIC8vIGNvbnN0cmFpbnRzIGdlbmVyYXRlZDogTyAoIG51bV90YWJsZXMgKiBudW1fYXR0cmlidXRlc19wZXJfdGFibGVbdmFyaWFibGVdIClcclxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsYXllckF0dHJpYnV0ZXMubGVuZ3RoOyBpKyspe1xyXG4gICAgICAgICAgICAgICAgbGV0IHQxID0gbGF5ZXJBdHRyaWJ1dGVzW2ldLmlkO1xyXG4gICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBqID0gaSsxOyBqIDwgbGF5ZXJBdHRyaWJ1dGVzLmxlbmd0aDsgaisrKXtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgdDIgPSBsYXllckF0dHJpYnV0ZXNbal0uaWQ7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGkgPT0gaikgY29udGludWU7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIC8vIGF0dHJzIGRvbid0IG5lZWQgdHJhbnNpdGl2aXR5IGlmIHRoZXkgYXJlIG5vdCBpbiB0aGUgc2FtZSB0YWJsZSAtIGl0J3MgYWxyZWFkeSBnaXZlbiBieSB0aGUgdGFibGVcclxuICAgICAgICAgICAgICAgICAgICBpZiAobGF5ZXJBdHRyaWJ1dGVzW2ldLnRhYmxlLmlkICE9IGxheWVyQXR0cmlidXRlc1tqXS50YWJsZS5pZCkgY29udGludWVcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgbSA9IGorMTsgbSA8IGxheWVyQXR0cmlidXRlcy5sZW5ndGg7IG0rKyl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChtID09IGogfHwgbSA9PSBpKSBjb250aW51ZVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gYWdhaW4sIGFsbCBhdHRyaWJ1dGVzIHNob3VsZCBiZSBpbiB0aGUgc2FtZSB0YWJsZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobGF5ZXJBdHRyaWJ1dGVzW21dLnRhYmxlLmlkICE9IGxheWVyQXR0cmlidXRlc1tpXS50YWJsZS5pZCkgY29udGludWVcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGxheWVyQXR0cmlidXRlc1ttXS50YWJsZS5pZCAhPSBsYXllckF0dHJpYnV0ZXNbal0udGFibGUuaWQpIGNvbnRpbnVlXHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgdDMgPSBsYXllckF0dHJpYnV0ZXNbbV0uaWQ7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodDEgPT0gdDIgfHwgdDIgPT0gdDMgfHwgdDEgPT0gdDMpIGNvbnRpbnVlO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgbW9kZWwuc3ViamVjdFRvICs9IFwiXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICsgdGhpcy5ta3hCYXNlKHQxLCB0MilcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICsgXCIgKyBcIiArIHRoaXMubWt4QmFzZSh0MiwgdDMpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICArIFwiIC0gXCIgKyB0aGlzLm1reEJhc2UodDEsIHQzKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKyBcIiA+PSAwXFxuXCJcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1vZGVsLnN1YmplY3RUbyArPSBcIlwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICArIFwiLSBcIiArIHRoaXMubWt4QmFzZSh0MSwgdDIpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICArIFwiIC0gXCIgKyB0aGlzLm1reEJhc2UodDIsIHQzKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKyBcIiArIFwiICsgdGhpcy5ta3hCYXNlKHQxLCB0MylcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICsgXCIgPj0gLTFcXG5cIlxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gYXR0cmlidXRlcyB3aXRoIHZhbHVlIGNvbnN0cmFpbnRzIHNob3VsZCBhbHdheXMgYmUgb24gdGhlIGJvdHRvbVxyXG4gICAgICAgICAgICAgICAgICAgIC8vIHRoaXMgaXMgcmVtb3ZhYmxlIGZvciBnZW5lcmFsIGZvcm11bGF0aW9uc1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChsYXllckF0dHJpYnV0ZXNbal0udHlwZSA9PSBcImNvbnN0cmFpbnRcIil7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1vZGVsLnN1YmplY3RUbyArPSBcIlwiIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKyB0aGlzLm1reERpY3QoXCIgKyBcIiwgdDEsIHQyKVswXVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKyBcIiA9IFwiICsgKDEgKyB0aGlzLm1reERpY3QoXCIgKyBcIiwgdDEsIHQyKVsxXSkgKyBcIlxcblwiO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAobGF5ZXJBdHRyaWJ1dGVzW2ldLnR5cGUgPT0gXCJjb25zdHJhaW50XCIpe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBtb2RlbC5zdWJqZWN0VG8gKz0gXCJcIiBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICsgdGhpcy5ta3hEaWN0KFwiICsgXCIsIHQyLCB0MSlbMF1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICsgXCIgPSBcIiArICgxICsgdGhpcy5ta3hEaWN0KFwiICsgXCIsIHQyLCB0MSlbMV0pICsgXCJcXG5cIjtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICh0aGlzLm9wdGlvbnMuY3Jvc3NpbmdzX3JlZHVjdGlvbl9hY3RpdmUpIHRoaXMuYWRkQ3Jvc3NpbmdzUmVkdWN0aW9uKG1vZGVsKVxyXG5cclxuICAgICAgIC8vIGdyb3VwaW5nIGNvbnN0cmFpbnQgb2YgYXR0cmlidXRlcyB3aXRoaW4gdGFibGVzXHJcbiAgICAgICBmb3IgKGxldCBrPTA7IGs8dGhpcy5nLm1heERlcHRoICsgMTsgaysrKXtcclxuICAgICAgICAgICAgbGV0IGxheWVyVGFibGVzID0gdGhpcy5nLnRhYmxlSW5kZXhba107XHJcbiAgICAgICAgICAgIGxldCBsYXllckF0dHJpYnV0ZXMgPSBsYXllclRhYmxlcy5tYXAodCA9PiB0LmF0dHJpYnV0ZXMpLmZsYXQoKVxyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgZm9yIChsZXQgaT0wOyBpPGxheWVyQXR0cmlidXRlcy5sZW5ndGg7IGkrKyl7XHJcbiAgICAgICAgICAgICAgICBsZXQgYXR0cjEgPSBsYXllckF0dHJpYnV0ZXNbaV0uaWQ7XHJcbiAgICAgICAgICAgICAgICBsZXQgdDEgPSBsYXllckF0dHJpYnV0ZXNbaV0udGFibGUuaWQ7XHJcblxyXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgaj1pKzE7IGo8bGF5ZXJBdHRyaWJ1dGVzLmxlbmd0aDsgaisrKXtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgYXR0cjIgPSBsYXllckF0dHJpYnV0ZXNbal0uaWQ7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IHQyID0gbGF5ZXJBdHRyaWJ1dGVzW2pdLnRhYmxlLmlkXHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0MSAhPSB0Mil7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1vZGVsLnN1YmplY3RUbyArPSB0aGlzLm1reEJhc2UoYXR0cjEsIGF0dHIyKSArIFwiXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICsgXCIgLSBcIiArIHRoaXMubWt4QmFzZSh0MSwgdDIsICdUJykgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICArIFwiID0gMFxcblwiXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAodGhpcy5vcHRpb25zLmJlbmRpbmVzc19yZWR1Y3Rpb25fYWN0aXZlKXtcclxuICAgICAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5iZW5kaW5lc3NfcmVkdWN0aW9uX3R5cGUgPT0gXCJzaW1wbGVcIikgdGhpcy5hZGRTaW1wbGVCZW5kaW5lc3ModGhpcy5nLCBtb2RlbClcclxuICAgICAgICAgICAgZWxzZSBpZiAodGhpcy5vcHRpb25zLmJlbmRpbmVzc19yZWR1Y3Rpb25fdHlwZSA9PSBcIm9wdGltaXplX2FuZ2xlc1wiKSB0aGlzLmFkZEJlbmRpbmVzc1BsdXNNYXhpbWl6ZUNyb3NzaW5nQW5nbGUodGhpcy5nLCBtb2RlbClcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBtb2RlbC5taW5pbWl6ZSA9IG1vZGVsLm1pbmltaXplLnN1YnN0cmluZygwLCBtb2RlbC5taW5pbWl6ZS5sZW5ndGggLSAyKSArIFwiXFxuXFxuXCJcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZvciAobGV0IGVsZW0gaW4gdGhpcy5kZWZpbml0aW9ucyl7XHJcbiAgICAgICAgICAgIG1vZGVsLmJvdW5kcyArPSBcImJpbmFyeSBcIiArIGVsZW0gKyBcIlxcblwiXHJcbiAgICAgICAgfVxyXG4gICAgICAgIGZvciAobGV0IGVsZW0gaW4gdGhpcy5jcm9zc2luZ192YXJzKXtcclxuICAgICAgICAgICAgbW9kZWwuYm91bmRzICs9IFwiYmluYXJ5IFwiICsgZWxlbSArIFwiXFxuXCJcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIGNvbnNvbGUubG9nKHRoaXMubW9kZWxUb1N0cmluZyhtb2RlbCkpXHJcbiAgICAgICAgdGhpcy5udW1Db25zdHJhaW50cyA9IG1vZGVsLnN1YmplY3RUby5zcGxpdChcIlxcblwiKS5sZW5ndGg7XHJcbiAgICAgICAgY29uc29sZS5sb2coXCJudW1iZXIgb2YgY29uc3RyYWludHM6IFwiLCB0aGlzLm51bUNvbnN0cmFpbnRzKVxyXG4gICAgfVxyXG5cclxuICAgIG1rYyh1MSwgdjEsIHUyLCB2Mil7XHJcbiAgICAgICAgbGV0IHJlcyA9IFwiY19cIiArIHUxICsgdjEgKyBcIl9cIiArIHUyICsgdjI7XHJcbiAgICAgICAgdGhpcy5jcm9zc2luZ192YXJzW3Jlc10gPSBcIlwiXHJcbiAgICAgICAgcmV0dXJuIHJlc1xyXG4gICAgfVxyXG5cclxuICAgIG1reERpY3QgKHNpZ24sIHUxLCB1Mikge1xyXG4gICAgICAgIGxldCByZXMgPSBcIlwiXHJcbiAgICAgICAgbGV0IGFjY3VtdWxhdG9yID0gMFxyXG4gICAgICAgIGxldCBvcHBzaWduID0gXCIgLSBcIlxyXG5cclxuICAgICAgICBpZiAoc2lnbiA9PSBcIiAtIFwiKSBvcHBzaWduID0gXCIgKyBcIlxyXG5cclxuICAgICAgICBsZXQgcCA9IHRoaXMubWt4QmFzZSh1MSwgdTIpXHJcbiAgICAgICAgaWYgKHRoaXMuZGVmaW5pdGlvbnNbcF0gIT0gdW5kZWZpbmVkKXtcclxuICAgICAgICAgICAgcmVzICs9IHNpZ24gKyBwXHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgcCA9IHRoaXMubWt4QmFzZSh1MiwgdTEpXHJcbiAgICAgICAgICAgIGlmICh0aGlzLmRlZmluaXRpb25zW3BdID09IHVuZGVmaW5lZCkgY29uc29sZS53YXJuKHAgKyBcIiBub3QgZGVmaW5lZFwiKTtcclxuICAgICAgICAgICAgYWNjdW11bGF0b3IgLT0gMVxyXG4gICAgICAgICAgICByZXMgKz0gb3Bwc2lnbiArIHBcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBbcmVzLCBhY2N1bXVsYXRvcl07XHJcbiAgICB9XHJcblxyXG4gICAgYWRkQ3Jvc3NpbmdzUmVkdWN0aW9uKG1vZGVsKXtcclxuICAgICAgICAvLyBkZXRlcm1pbmluZyBjcm9zc2luZ3NcclxuICAgICAgICBmb3IgKGxldCBrPTA7IGsgPCB0aGlzLmcubWF4RGVwdGggKyAxOyBrKyspe1xyXG4gICAgICAgICAgICBsZXQgbGF5ZXJFZGdlcyA9IHRoaXMuZy5lZGdlSW5kZXhba11cclxuXHJcbiAgICAgICAgICAgIGZvciAobGV0IGk9MDsgaTxsYXllckVkZ2VzLmxlbmd0aDsgaSsrKXtcclxuICAgICAgICAgICAgICAgIGxldCB1MXYxID0gbGF5ZXJFZGdlc1tpXTtcclxuXHJcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBqPWkrMTsgajxsYXllckVkZ2VzLmxlbmd0aDsgaisrKXtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgdTJ2MiA9IGxheWVyRWRnZXNbal07XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIC8vIG5ldzogbWFuYWdpbmcgZ3JvdXBzXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gZWRnZXMgdGhhdCBhcmUgb3V0c2lkZSBvZiBncm91cHMgc2hvdWxkIG5ldmVyIGNyb3NzIHdpdGggZWRnZXMgdGhhdCBhcmUgaW5zaWRlIG9mIGdyb3Vwc1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIGlmICh1MXYxLmxlZnRUYWJsZS5ncm91cCAhPSB1bmRlZmluZWQgJiYgdTF2MS5yaWdodFRhYmxlLmdyb3VwICE9IHVuZGVmaW5lZCl7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gICAgIGlmICh1MnYyLmxlZnRUYWJsZS5ncm91cCAhPSB1MnYyLmxlZnRUYWJsZS5ncm91cCkge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vICAgICAgICAgbW9kZWwuc3ViamVjdFRvICs9IHRoaXMubWtjKHUxLCB2MSwgdTIsIHYyKSArIFwiID0gMFxcblwiO1xyXG4gICAgICAgICAgICAgICAgICAgIC8vICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICBsZXQgdTEgPSB1MXYxLmxlZnRBdHRyaWJ1dGUuaWRcclxuICAgICAgICAgICAgICAgICAgICBsZXQgdjEgPSB1MXYxLnJpZ2h0QXR0cmlidXRlLmlkXHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IHUyID0gdTJ2Mi5sZWZ0QXR0cmlidXRlLmlkXHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IHYyID0gdTJ2Mi5yaWdodEF0dHJpYnV0ZS5pZFxyXG5cclxuICAgICAgICAgICAgICAgICAgICAvLyBub3Qgbm90XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCF0aGlzLmlzU2FtZVJhbmtFZGdlKHUxdjEpICYmICF0aGlzLmlzU2FtZVJhbmtFZGdlKHUydjIpKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHUxID09IHUyIHx8IHYxID09IHYyKSBjb250aW51ZVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHAxID0gdGhpcy5ta2ModTEsIHYxLCB1MiwgdjIpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBmaW5hbHN1bSA9IDEgKyB0aGlzLm1reERpY3QoXCIgKyBcIiwgdTIsIHUxKVsxXSArIHRoaXMubWt4RGljdChcIiArIFwiLCB2MSwgdjIpWzFdXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1vZGVsLnN1YmplY3RUbyArPSBwMSArIFwiXCIgKyB0aGlzLm1reERpY3QoXCIgKyBcIiwgdTIsIHUxKVswXSArIHRoaXMubWt4RGljdChcIiArIFwiLCB2MSwgdjIpWzBdXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1vZGVsLnN1YmplY3RUbyArPSBcIiA+PSBcIiArIGZpbmFsc3VtICsgXCJcXG5cIlxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgcDEgPSB0aGlzLm1rYyh1MSwgdjEsIHUyLCB2MilcclxuICAgICAgICAgICAgICAgICAgICAgICAgZmluYWxzdW0gPSAxICsgdGhpcy5ta3hEaWN0KFwiICsgXCIsIHUxLCB1MilbMV0gKyB0aGlzLm1reERpY3QoXCIgKyBcIiwgdjIsIHYxKVsxXVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBtb2RlbC5zdWJqZWN0VG8gKz0gcDEgKyBcIlwiICsgdGhpcy5ta3hEaWN0KFwiICsgXCIsIHUxLCB1MilbMF0gKyB0aGlzLm1reERpY3QoXCIgKyBcIiwgdjIsIHYxKVswXVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBtb2RlbC5zdWJqZWN0VG8gKz0gXCIgPj0gXCIgKyBmaW5hbHN1bSArIFwiXFxuXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gaWYgdGhleSBhcmUgYm90aCBzYW1lIHJhbmsgZWRnZXNcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMuaXNTYW1lUmFua0VkZ2UodTF2MSkgJiYgdGhpcy5pc1NhbWVSYW5rRWRnZSh1MnYyKSkge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHAxID0gdGhpcy5ta2ModTEsIHYxLCB1MiwgdjIpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBmaW5hbHN1bSA9IDEgKyB0aGlzLm1reERpY3QoXCIgKyBcIiwgdTEsIHUyKVsxXSArIHRoaXMubWt4RGljdChcIiArIFwiLCB2MSwgdjIpWzFdICsgdGhpcy5ta3hEaWN0KFwiICsgXCIsIHUyLCB2MSlbMV1cclxuICAgICAgICAgICAgICAgICAgICAgICAgbW9kZWwuc3ViamVjdFRvICs9IHAxICsgXCJcIiArIHRoaXMubWt4RGljdChcIiArIFwiLCB1MSwgdTIpWzBdICsgdGhpcy5ta3hEaWN0KFwiICsgXCIsIHYxLCB2MilbMF0gKyB0aGlzLm1reERpY3QoXCIgKyBcIiwgdTIsIHYxKVswXVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBtb2RlbC5zdWJqZWN0VG8gKz0gXCIgPj0gXCIgKyBmaW5hbHN1bSArIFwiXFxuXCJcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHAxID0gdGhpcy5ta2ModTEsIHYxLCB1MiwgdjIpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZpbmFsc3VtID0gMSArIHRoaXMubWt4RGljdChcIiArIFwiLCB1MSwgdTIpWzFdICsgdGhpcy5ta3hEaWN0KFwiICsgXCIsIHYxLCB2MilbMV0gKyB0aGlzLm1reERpY3QoXCIgKyBcIiwgdjIsIHUxKVsxXVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBtb2RlbC5zdWJqZWN0VG8gKz0gcDEgKyBcIlwiICsgdGhpcy5ta3hEaWN0KFwiICsgXCIsIHUxLCB1MilbMF0gKyB0aGlzLm1reERpY3QoXCIgKyBcIiwgdjEsIHYyKVswXSArIHRoaXMubWt4RGljdChcIiArIFwiLCB2MiwgdTEpWzBdXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1vZGVsLnN1YmplY3RUbyArPSBcIiA+PSBcIiArIGZpbmFsc3VtICsgXCJcXG5cIlxyXG5cclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMuaXNTYW1lUmFua0VkZ2UodTF2MSkgJiYgIXRoaXMuaXNTYW1lUmFua0VkZ2UodTJ2MikpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBwMSA9IHRoaXMubWtjKHUxLCB2MSwgdTIsIHYyKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgZmluYWxzdW0gPSAxICsgdGhpcy5ta3hEaWN0KFwiICsgXCIsIHUyLCB1MSlbMV0gKyB0aGlzLm1reERpY3QoXCIgKyBcIiwgdjEsIHUyKVsxXVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBtb2RlbC5zdWJqZWN0VG8gKz0gcDEgKyBcIlwiICsgdGhpcy5ta3hEaWN0KFwiICsgXCIsIHUyLCB1MSlbMF0gKyB0aGlzLm1reERpY3QoXCIgKyBcIiwgdjEsIHUyKVswXVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBtb2RlbC5zdWJqZWN0VG8gKz0gXCIgPj0gXCIgKyBmaW5hbHN1bSArIFwiXFxuXCJcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHAxID0gdGhpcy5ta2ModTEsIHYxLCB1MiwgdjIpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZpbmFsc3VtID0gMSArIHRoaXMubWt4RGljdChcIiArIFwiLCB1MiwgdjEpWzFdICsgdGhpcy5ta3hEaWN0KFwiICsgXCIsIHUxLCB1MilbMV1cclxuICAgICAgICAgICAgICAgICAgICAgICAgbW9kZWwuc3ViamVjdFRvICs9IHAxICsgXCJcIiArIHRoaXMubWt4RGljdChcIiArIFwiLCB1MiwgdjEpWzBdICsgdGhpcy5ta3hEaWN0KFwiICsgXCIsIHUxLCB1MilbMF1cclxuICAgICAgICAgICAgICAgICAgICAgICAgbW9kZWwuc3ViamVjdFRvICs9IFwiID49IFwiICsgZmluYWxzdW0gKyBcIlxcblwiXHJcblxyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoIXRoaXMuaXNTYW1lUmFua0VkZ2UodTF2MSkgJiYgdGhpcy5pc1NhbWVSYW5rRWRnZSh1MnYyKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBjb25zb2xlLmxvZyh1MSwgdjEsIHUyLCB2MilcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHAxID0gdGhpcy5ta2ModTEsIHYxLCB1MiwgdjIpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBmaW5hbHN1bSA9IDEgKyB0aGlzLm1reERpY3QoXCIgKyBcIiwgdTEsIHUyKVsxXSArIHRoaXMubWt4RGljdChcIiArIFwiLCB2MiwgdTEpWzFdXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1vZGVsLnN1YmplY3RUbyArPSBwMSArIFwiXCIgKyB0aGlzLm1reERpY3QoXCIgKyBcIiwgdTEsIHUyKVswXSArIHRoaXMubWt4RGljdChcIiArIFwiLCB2MiwgdTEpWzBdXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1vZGVsLnN1YmplY3RUbyArPSBcIiA+PSBcIiArIGZpbmFsc3VtICsgXCJcXG5cIlxyXG5cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHAxID0gdGhpcy5ta2ModTEsIHYxLCB1MiwgdjIpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZpbmFsc3VtID0gMSArIHRoaXMubWt4RGljdChcIiArIFwiLCB1MSwgdjIpWzFdICsgdGhpcy5ta3hEaWN0KFwiICsgXCIsIHUyLCB1MSlbMV0gXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1vZGVsLnN1YmplY3RUbyArPSBwMSArIFwiXCIgKyB0aGlzLm1reERpY3QoXCIgKyBcIiwgdTEsIHYyKVswXSArIHRoaXMubWt4RGljdChcIiArIFwiLCB1MiwgdTEpWzBdXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1vZGVsLnN1YmplY3RUbyArPSBcIiA+PSBcIiArIGZpbmFsc3VtICsgXCJcXG5cIlxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gZmlsbCBmdW5jdGlvbiB0byBtaW5pbWl6ZVxyXG4gICAgICAgIGZvciAobGV0IGVsZW0gaW4gdGhpcy5jcm9zc2luZ192YXJzKXtcclxuICAgICAgICAgICAgbW9kZWwubWluaW1pemUgKz0gdGhpcy5vcHRpb25zLmNyb3NzaW5nc19yZWR1Y3Rpb25fd2VpZ2h0ICsgXCIgXCIgKyBlbGVtICsgXCIgKyBcIlxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBpc1NhbWVSYW5rRWRnZShlZGdlKXtcclxuICAgICAgICByZXR1cm4gZWRnZS5sZWZ0VGFibGUuZGVwdGggPT0gZWRnZS5yaWdodFRhYmxlLmRlcHRoXHJcbiAgICB9XHJcblxyXG4gICAgbW9kZWxUb1N0cmluZyhtb2RlbCl7XHJcbiAgICAgICAgcmV0dXJuIG1vZGVsLm1pbmltaXplICsgbW9kZWwuc3ViamVjdFRvICsgbW9kZWwuYm91bmRzICsgJ1xcbkVuZFxcbidcclxuICAgIH1cclxuXHJcbiAgICBta3hCYXNlKHUxLCB1MiwgcHJlPVwiXCIpe1xyXG4gICAgICAgIHJldHVybiBcInhfXCIgKyBwcmUgKyB1MSArIFwiX1wiICsgcHJlICsgdTJcclxuICAgIH1cclxuXHJcbiAgICBhZGRCZW5kaW5lc3NQbHVzTWF4aW1pemVDcm9zc2luZ0FuZ2xlKGcsIG1vZGVsKXtcclxuICAgICAgICBmb3IgKGxldCBlIG9mIGcuZWRnZXMpe1xyXG4gICAgICAgICAgICBpZiAodGhpcy5pc1NhbWVSYW5rRWRnZShlKSkgY29udGludWU7XHJcblxyXG4gICAgICAgICAgICBtb2RlbC5zdWJqZWN0VG8gKz0gXHJcbiAgICAgICAgICAgICAgICBcInlfXCIgKyBlLmxlZnRBdHRyaWJ1dGUuaWQgKyBcIiAtIFwiICsgXHJcbiAgICAgICAgICAgICAgICBcInlfXCIgKyBlLnJpZ2h0QXR0cmlidXRlLmlkICsgXCIgLSBcIiArIFxyXG4gICAgICAgICAgICAgICAgXCJiZW5kX1wiICsgZS5sZWZ0QXR0cmlidXRlLmlkICsgXCJfXCIgKyBlLnJpZ2h0QXR0cmlidXRlLmlkICtcclxuICAgICAgICAgICAgICAgIFwiIDw9IDBcXG5cIlxyXG5cclxuICAgICAgICAgICAgbW9kZWwuc3ViamVjdFRvICs9IFxyXG4gICAgICAgICAgICAgICAgXCJ5X1wiICsgZS5yaWdodEF0dHJpYnV0ZS5pZCArIFwiIC0gXCIgKyBcclxuICAgICAgICAgICAgICAgIFwieV9cIiArIGUubGVmdEF0dHJpYnV0ZS5pZCArIFwiIC0gXCIgKyBcclxuICAgICAgICAgICAgICAgIFwiYmVuZF9cIiArIGUubGVmdEF0dHJpYnV0ZS5pZCArIFwiX1wiICsgZS5yaWdodEF0dHJpYnV0ZS5pZCArXHJcbiAgICAgICAgICAgICAgICBcIiA8PSAwXFxuXCJcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIGRlZmluaXRpb24gb2YgdGhlIHZlcnRpY2FsIHBvc2l0aW9uIG9mIHRoZSB0YWJsZXMgYmFzZWQgb24geCB2YXJzXHJcbiAgICAgICAgZm9yIChsZXQgdGFibGVDb2wgb2YgZy50YWJsZUluZGV4KXtcclxuICAgICAgICAgICAgZm9yIChsZXQgaSBpbiB0YWJsZUNvbCl7XHJcbiAgICAgICAgICAgICAgICBsZXQgdDEgPSB0YWJsZUNvbFtpXTtcclxuICAgICAgICAgICAgICAgIGZvciAobGV0IGogaW4gdGFibGVDb2wpe1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChpID09IGopIGNvbnRpbnVlO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBsZXQgdDIgPSB0YWJsZUNvbFtqXTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IHAgPSB0aGlzLm1reEJhc2UodDIuaWQsIHQxLmlkLCAnVCcpXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuZGVmaW5pdGlvbnNbcF0gIT0gdW5kZWZpbmVkKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbW9kZWwuc3ViamVjdFRvICs9IFwiel9cIiArIHRoaXMuemNvdW50ICsgXCIgLSBcIiArIHRoaXMubSArIFwiIFwiICsgcCArIFwiIDw9IDBcXG5cIiBcclxuICAgICAgICAgICAgICAgICAgICAgICAgbW9kZWwuc3ViamVjdFRvICs9IFwiel9cIiArIHRoaXMuemNvdW50ICsgXCIgLSBcIiArIFwieV9cIiArIHQyLmlkICsgXCIgPD0gMFxcblwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1vZGVsLnN1YmplY3RUbyArPSBcInpfXCIgKyB0aGlzLnpjb3VudCArIFwiIC0gXCIgKyBcInlfXCIgKyB0Mi5pZCArIFwiIC0gXCIgKyB0aGlzLm0gKyBcIiBcIiArIHAgKyBcIiA+PSAtIFwiICsgdGhpcy5tICsgXCJcXG5cIiAgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1vZGVsLnN1YmplY3RUbyArPSBcInpfXCIgKyB0aGlzLnpjb3VudCArIFwiID49IDBcXG5cIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBtb2RlbC5zdWJqZWN0VG8gKz0gXCJ5X1wiICsgdDEuaWQgKyBcIiAtIFwiICsgXCJ6X1wiICsgdGhpcy56Y291bnQgKyBcIiAtIFwiICsgKHRoaXMuYnVmZmVyICsgdDIuYXR0cmlidXRlcy5sZW5ndGgpICsgXCIgXCIgKyBwICsgXCIgPj0gMFxcblwiXHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcCA9IHRoaXMubWt4QmFzZSh0MS5pZCwgdDIuaWQsICdUJylcclxuICAgICAgICAgICAgICAgICAgICAgICAgbW9kZWwuc3ViamVjdFRvICs9IFwiel9cIiArIHRoaXMuemNvdW50ICsgXCIgKyBcIiArIHRoaXMubSArIFwiIFwiICsgcCArIFwiIDw9IFwiICsgdGhpcy5tICsgXCJcXG5cIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBtb2RlbC5zdWJqZWN0VG8gKz0gXCJ6X1wiICsgdGhpcy56Y291bnQgKyBcIiAtIFwiICsgXCJ5X1wiICsgdDIuaWQgKyBcIiA8PSAwXFxuXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgbW9kZWwuc3ViamVjdFRvICs9IFwiel9cIiArIHRoaXMuemNvdW50ICsgXCIgLSBcIiArIFwieV9cIiArIHQyLmlkICsgXCIgKyBcIiArIHRoaXMubSArIFwiIFwiICsgcCArIFwiID49IDBcXG5cIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBtb2RlbC5zdWJqZWN0VG8gKz0gXCJ6X1wiICsgdGhpcy56Y291bnQgKyBcIiA+PSAwXFxuXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgbW9kZWwuc3ViamVjdFRvICs9IFwieV9cIiArIHQxLmlkICsgXCIgLSBcIiArIFwiel9cIiArIHRoaXMuemNvdW50ICsgXCIgKyBcIiArICh0aGlzLmJ1ZmZlciArIHQyLmF0dHJpYnV0ZXMubGVuZ3RoKSArIFwiIFwiICsgcCArIFwiID49IFwiICsgKHRoaXMuYnVmZmVyICsgdDIuYXR0cmlidXRlcy5sZW5ndGgpICsgXCJcXG5cIlxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnpjb3VudCArPSAxXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIGRlZmludGlvbiBvZiB0aGUgdmVydGljYWwgcG9zaXRpb24gb2YgdGhlIGF0dHJpYnV0ZXMgYmFzZWQgb24gdGhlIHRhYmxlcyBhbmQgdGhlIHggdmFycyBvZiB0aGUgb3RoZXIgYXR0cmlidXRlcyBpbiB0aGUgdGFibGVcclxuICAgICAgICBmb3IgKGxldCB0IG9mIGcudGFibGVzKXtcclxuICAgICAgICAgICAgZm9yIChsZXQgaSBpbiB0LmF0dHJpYnV0ZXMpe1xyXG4gICAgICAgICAgICAgICAgbGV0IGExID0gdC5hdHRyaWJ1dGVzW2ldXHJcbiAgICAgICAgICAgICAgICBsZXQgYWNjdW11bGF0b3IgPSAxXHJcbiAgICAgICAgICAgICAgICBsZXQgdG1wc3RyID0gXCJ5X1wiICsgYTEuaWQgKyBcIiAtIFwiICsgXCJ5X1wiICsgdC5pZFxyXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgaiBpbiB0LmF0dHJpYnV0ZXMpe1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChpID09IGopIGNvbnRpbnVlXHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IGEyID0gdC5hdHRyaWJ1dGVzW2pdXHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IHAgPSAgdGhpcy5ta3hCYXNlKGEyLmlkLCBhMS5pZClcclxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5kZWZpbml0aW9uc1twXSAhPSB1bmRlZmluZWQpe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0bXBzdHIgKz0gXCIgLSBcIiArIHBcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgcCA9IHRoaXMubWt4QmFzZShhMS5pZCwgYTIuaWQpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRtcHN0ciArPSBcIiArIFwiICsgcFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBhY2N1bXVsYXRvciArPSAxXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIHRtcHN0ciArPSBcIiA9IFwiICsgYWNjdW11bGF0b3IgKyBcIlxcblwiXHJcbiAgICAgICAgICAgICAgICBtb2RlbC5zdWJqZWN0VG8gKz0gdG1wc3RyXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIG5ldyBwYXJ0XHJcbiAgICAgICAgZm9yIChsZXQgZSBvZiBnLmVkZ2VzKXtcclxuICAgICAgICAgICAgaWYgKHRoaXMuaXNTYW1lUmFua0VkZ2UoZSkpIGNvbnRpbnVlO1xyXG5cclxuICAgICAgICAgICAgbGV0IGxhID0gZS5sZWZ0QXR0cmlidXRlLmlkO1xyXG4gICAgICAgICAgICBsZXQgcmEgPSBlLnJpZ2h0QXR0cmlidXRlLmlkO1xyXG5cclxuICAgICAgICAgICAgZm9yIChsZXQgYyBpbiB0aGlzLmNyb3NzaW5nX3ZhcnMpe1xyXG4gICAgICAgICAgICAgICAgbGV0IGNfc3BsaXQgPSBjLnNwbGl0KFwiX1wiKVxyXG4gICAgICAgICAgICAgICAgaWYgKGNfc3BsaXRbMV0gPT0gbGEgKyByYSB8fCBjX3NwbGl0WzJdID09IGxhICsgcmEpIHtcclxuICAgICAgICAgICAgICAgICAgICBtb2RlbC5zdWJqZWN0VG8gKz0gXCJvbmVjcm9zc19cIiArIGxhICsgXCJfXCIgKyByYSArIFwiIC0gXCIgKyBjICsgXCIgPj0gMFxcblwiXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIG1vZGVsLmJvdW5kcyArPSBcImJpbmFyeSBcIiArIFwib25lY3Jvc3NfXCIgKyBsYSArIFwiX1wiICsgcmEgKyBcIlxcblwiXHJcblxyXG4gICAgICAgICAgICBtb2RlbC5zdWJqZWN0VG8gKz0gXCJhdXhiZW5kX1wiICsgbGEgKyBcIl9cIiArIHJhICsgXCIgKyBcIiArIHRoaXMubSArIFwiIG9uZWNyb3NzX1wiICsgbGEgKyBcIl9cIiArIHJhICsgXCIgPD0gXCIgKyB0aGlzLm0gKyBcIlxcblwiICBcclxuICAgICAgICAgICAgbW9kZWwuc3ViamVjdFRvICs9IFwiYXV4YmVuZF9cIiArIGxhICsgXCJfXCIgKyByYSArIFwiIC0gYmVuZF9cIiArIGxhICsgXCJfXCIgKyByYSArIFwiIDw9IDBcXG5cIiBcclxuICAgICAgICAgICAgbW9kZWwuc3ViamVjdFRvICs9IFwiYXV4YmVuZF9cIiArIGxhICsgXCJfXCIgKyByYSArIFwiIC0gYmVuZF9cIiArIGxhICsgXCJfXCIgKyByYSArIFwiICsgXCIgKyB0aGlzLm0gKyBcIiBvbmVjcm9zc19cIiArIGxhICsgXCJfXCIgKyByYSArIFwiID49IDBcXG5cIlxyXG4gICAgICAgICAgICBtb2RlbC5zdWJqZWN0VG8gKz0gXCJhdXhiZW5kX1wiICsgbGEgKyBcIl9cIiArIHJhICsgXCIgPj0gMFxcblwiXHJcblxyXG4gICAgICAgICAgICBtb2RlbC5zdWJqZWN0VG8gKz0gXCJhdXgyYmVuZF9cIiArIGxhICsgXCJfXCIgKyByYSArIFwiIC0gXCIgKyB0aGlzLm0gKyBcIiBvbmVjcm9zc19cIiArIGxhICsgXCJfXCIgKyByYSArIFwiIDw9IDBcXG5cIlxyXG4gICAgICAgICAgICBtb2RlbC5zdWJqZWN0VG8gKz0gXCJhdXgyYmVuZF9cIiArIGxhICsgXCJfXCIgKyByYSArIFwiICsgYmVuZF9cIiArIGxhICsgXCJfXCIgKyByYSArIFwiIDw9IFwiICsgdGhpcy5tICsgXCJcXG5cIlxyXG4gICAgICAgICAgICBtb2RlbC5zdWJqZWN0VG8gKz0gXCJhdXgyYmVuZF9cIiArIGxhICsgXCJfXCIgKyByYSArIFwiICsgYmVuZF9cIiArIGxhICsgXCJfXCIgKyByYSArIFwiIC0gXCIgKyB0aGlzLm0gKyBcIiBvbmVjcm9zc19cIiArIGxhICsgXCJfXCIgKyByYSArIFwiID49IDBcXG5cIlxyXG4gICAgICAgICAgICBtb2RlbC5zdWJqZWN0VG8gKz0gXCJhdXgyYmVuZF9cIiArIGxhICsgXCJfXCIgKyByYSArIFwiID49IDBcXG5cIlxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gYWRkIHRvIG9iamVjdGl2ZSBmdW5jdGlvblxyXG4gICAgICAgIGZvciAobGV0IGUgb2YgZy5lZGdlcyl7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLmlzU2FtZVJhbmtFZGdlKGUpKSBjb250aW51ZTtcclxuICAgICAgICAgICAgLy8gbW9kZWwubWluaW1pemUgKz0gXCIwLjEgYmVuZF9cIiArIGUubGVmdEF0dHJpYnV0ZS5pZCArIFwiX1wiICsgZS5yaWdodEF0dHJpYnV0ZS5pZCArIFwiICsgXCJcclxuICAgICAgICAgICAgbW9kZWwubWluaW1pemUgKz0gdGhpcy5vcHRpb25zLmJlbmRpbmVzc19yZWR1Y3Rpb25fd2VpZ2h0ICsgXCIgYXV4YmVuZF9cIiArIGUubGVmdEF0dHJpYnV0ZS5pZCArIFwiX1wiICsgZS5yaWdodEF0dHJpYnV0ZS5pZCArIFwiICsgXCJcclxuICAgICAgICAgICAgbW9kZWwubWluaW1pemUgKz0gdGhpcy5vcHRpb25zLmJlbmRpbmVzc19hbmdsZV9vcHRpbWl6YXRpb25fd2VpZ2h0ICsgXCIgYXV4MmJlbmRfXCIgKyBlLmxlZnRBdHRyaWJ1dGUuaWQgKyBcIl9cIiArIGUucmlnaHRBdHRyaWJ1dGUuaWQgKyBcIiArIFwiXHJcbiAgICAgICAgfVxyXG4gICAgICAgIG1vZGVsLm1pbmltaXplID0gbW9kZWwubWluaW1pemUuc3Vic3RyaW5nKDAsIG1vZGVsLm1pbmltaXplLmxlbmd0aCAtIDIpICsgXCJcXG5cXG5cIlxyXG4gICAgfVxyXG5cclxuICAgIGFkZFNpbXBsZUJlbmRpbmVzcyhnLCBtb2RlbCl7XHJcbiAgICAgICAgLy8gKioqKioqKioqKioqXHJcbiAgICAgICAgLy8gYmVuZGluZXNzXHJcbiAgICAgICAgLy8gKioqKioqKioqKioqXHJcbiAgICAgICAgZm9yIChsZXQgZSBvZiBnLmVkZ2VzKXtcclxuICAgICAgICAgICAgaWYgKHRoaXMuaXNTYW1lUmFua0VkZ2UoZSkpIGNvbnRpbnVlO1xyXG5cclxuICAgICAgICAgICAgbW9kZWwuc3ViamVjdFRvICs9IFxyXG4gICAgICAgICAgICAgICAgXCJ5X1wiICsgZS5sZWZ0QXR0cmlidXRlLmlkICsgXCIgLSBcIiArIFxyXG4gICAgICAgICAgICAgICAgXCJ5X1wiICsgZS5yaWdodEF0dHJpYnV0ZS5pZCArIFwiIC0gXCIgKyBcclxuICAgICAgICAgICAgICAgIFwiYmVuZF9cIiArIGUubGVmdEF0dHJpYnV0ZS5pZCArIFwiX1wiICsgZS5yaWdodEF0dHJpYnV0ZS5pZCArXHJcbiAgICAgICAgICAgICAgICBcIiA8PSAwXFxuXCJcclxuXHJcbiAgICAgICAgICAgIG1vZGVsLnN1YmplY3RUbyArPSBcclxuICAgICAgICAgICAgICAgIFwieV9cIiArIGUucmlnaHRBdHRyaWJ1dGUuaWQgKyBcIiAtIFwiICsgXHJcbiAgICAgICAgICAgICAgICBcInlfXCIgKyBlLmxlZnRBdHRyaWJ1dGUuaWQgKyBcIiAtIFwiICsgXHJcbiAgICAgICAgICAgICAgICBcImJlbmRfXCIgKyBlLmxlZnRBdHRyaWJ1dGUuaWQgKyBcIl9cIiArIGUucmlnaHRBdHRyaWJ1dGUuaWQgK1xyXG4gICAgICAgICAgICAgICAgXCIgPD0gMFxcblwiXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBkZWZpbml0aW9uIG9mIHRoZSB2ZXJ0aWNhbCBwb3NpdGlvbiBvZiB0aGUgdGFibGVzIGJhc2VkIG9uIHggdmFyc1xyXG4gICAgICAgIGZvciAobGV0IHRhYmxlQ29sIG9mIGcudGFibGVJbmRleCl7XHJcbiAgICAgICAgICAgIGZvciAobGV0IGkgaW4gdGFibGVDb2wpe1xyXG4gICAgICAgICAgICAgICAgbGV0IHQxID0gdGFibGVDb2xbaV07XHJcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBqIGluIHRhYmxlQ29sKXtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoaSA9PSBqKSBjb250aW51ZTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IHQyID0gdGFibGVDb2xbal07XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGxldCBwID0gdGhpcy5ta3hCYXNlKHQyLmlkLCB0MS5pZCwgJ1QnKVxyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmRlZmluaXRpb25zW3BdICE9IHVuZGVmaW5lZCl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1vZGVsLnN1YmplY3RUbyArPSBcInpfXCIgKyB0aGlzLnpjb3VudCArIFwiIC0gXCIgKyB0aGlzLm0gKyBcIiBcIiArIHAgKyBcIiA8PSAwXFxuXCIgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1vZGVsLnN1YmplY3RUbyArPSBcInpfXCIgKyB0aGlzLnpjb3VudCArIFwiIC0gXCIgKyBcInlfXCIgKyB0Mi5pZCArIFwiIDw9IDBcXG5cIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBtb2RlbC5zdWJqZWN0VG8gKz0gXCJ6X1wiICsgdGhpcy56Y291bnQgKyBcIiAtIFwiICsgXCJ5X1wiICsgdDIuaWQgKyBcIiAtIFwiICsgdGhpcy5tICsgXCIgXCIgKyBwICsgXCIgPj0gLSBcIiArIHRoaXMubSArIFwiXFxuXCIgIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBtb2RlbC5zdWJqZWN0VG8gKz0gXCJ6X1wiICsgdGhpcy56Y291bnQgKyBcIiA+PSAwXFxuXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgbW9kZWwuc3ViamVjdFRvICs9IFwieV9cIiArIHQxLmlkICsgXCIgLSBcIiArIFwiel9cIiArIHRoaXMuemNvdW50ICsgXCIgLSBcIiArICh0aGlzLmJ1ZmZlciArIHQyLmF0dHJpYnV0ZXMubGVuZ3RoKSArIFwiIFwiICsgcCArIFwiID49IDBcXG5cIlxyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHAgPSB0aGlzLm1reEJhc2UodDEuaWQsIHQyLmlkLCAnVCcpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1vZGVsLnN1YmplY3RUbyArPSBcInpfXCIgKyB0aGlzLnpjb3VudCArIFwiICsgXCIgKyB0aGlzLm0gKyBcIiBcIiArIHAgKyBcIiA8PSBcIiArIHRoaXMubSArIFwiXFxuXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgbW9kZWwuc3ViamVjdFRvICs9IFwiel9cIiArIHRoaXMuemNvdW50ICsgXCIgLSBcIiArIFwieV9cIiArIHQyLmlkICsgXCIgPD0gMFxcblwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1vZGVsLnN1YmplY3RUbyArPSBcInpfXCIgKyB0aGlzLnpjb3VudCArIFwiIC0gXCIgKyBcInlfXCIgKyB0Mi5pZCArIFwiICsgXCIgKyB0aGlzLm0gKyBcIiBcIiArIHAgKyBcIiA+PSAwXFxuXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgbW9kZWwuc3ViamVjdFRvICs9IFwiel9cIiArIHRoaXMuemNvdW50ICsgXCIgPj0gMFxcblwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1vZGVsLnN1YmplY3RUbyArPSBcInlfXCIgKyB0MS5pZCArIFwiIC0gXCIgKyBcInpfXCIgKyB0aGlzLnpjb3VudCArIFwiICsgXCIgKyAodGhpcy5idWZmZXIgKyB0Mi5hdHRyaWJ1dGVzLmxlbmd0aCkgKyBcIiBcIiArIHAgKyBcIiA+PSBcIiArICh0aGlzLmJ1ZmZlciArIHQyLmF0dHJpYnV0ZXMubGVuZ3RoKSArIFwiXFxuXCJcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy56Y291bnQgKz0gMVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBkZWZpbnRpb24gb2YgdGhlIHZlcnRpY2FsIHBvc2l0aW9uIG9mIHRoZSBhdHRyaWJ1dGVzIGJhc2VkIG9uIHRoZSB0YWJsZXMgYW5kIHRoZSB4IHZhcnMgb2YgdGhlIG90aGVyIGF0dHJpYnV0ZXMgaW4gdGhlIHRhYmxlXHJcbiAgICAgICAgZm9yIChsZXQgdCBvZiBnLnRhYmxlcyl7XHJcbiAgICAgICAgICAgIGZvciAobGV0IGkgaW4gdC5hdHRyaWJ1dGVzKXtcclxuICAgICAgICAgICAgICAgIGxldCBhMSA9IHQuYXR0cmlidXRlc1tpXVxyXG4gICAgICAgICAgICAgICAgbGV0IGFjY3VtdWxhdG9yID0gMVxyXG4gICAgICAgICAgICAgICAgbGV0IHRtcHN0ciA9IFwieV9cIiArIGExLmlkICsgXCIgLSBcIiArIFwieV9cIiArIHQuaWRcclxuICAgICAgICAgICAgICAgIGZvciAobGV0IGogaW4gdC5hdHRyaWJ1dGVzKXtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoaSA9PSBqKSBjb250aW51ZVxyXG4gICAgICAgICAgICAgICAgICAgIGxldCBhMiA9IHQuYXR0cmlidXRlc1tqXVxyXG4gICAgICAgICAgICAgICAgICAgIGxldCBwID0gIHRoaXMubWt4QmFzZShhMi5pZCwgYTEuaWQpXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuZGVmaW5pdGlvbnNbcF0gIT0gdW5kZWZpbmVkKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdG1wc3RyICs9IFwiIC0gXCIgKyBwXHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHAgPSB0aGlzLm1reEJhc2UoYTEuaWQsIGEyLmlkKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0bXBzdHIgKz0gXCIgKyBcIiArIHBcclxuICAgICAgICAgICAgICAgICAgICAgICAgYWNjdW11bGF0b3IgKz0gMVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICB0bXBzdHIgKz0gXCIgPSBcIiArIGFjY3VtdWxhdG9yICsgXCJcXG5cIlxyXG4gICAgICAgICAgICAgICAgbW9kZWwuc3ViamVjdFRvICs9IHRtcHN0clxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBhZGQgdG8gb2JqZWN0aXZlIGZ1bmN0aW9uXHJcbiAgICAgICAgZm9yIChsZXQgZSBvZiBnLmVkZ2VzKXtcclxuICAgICAgICAgICAgaWYgKHRoaXMuaXNTYW1lUmFua0VkZ2UoZSkpIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICBtb2RlbC5taW5pbWl6ZSArPSAgdGhpcy5vcHRpb25zLmJlbmRpbmVzc19yZWR1Y3Rpb25fd2VpZ2h0ICsgXCIgYmVuZF9cIiArIGUubGVmdEF0dHJpYnV0ZS5pZCArIFwiX1wiICsgZS5yaWdodEF0dHJpYnV0ZS5pZCArIFwiICsgXCJcclxuICAgICAgICB9XHJcbiAgICAgICAgbW9kZWwubWluaW1pemUgPSBtb2RlbC5taW5pbWl6ZS5zdWJzdHJpbmcoMCwgbW9kZWwubWluaW1pemUubGVuZ3RoIC0gMikgKyBcIlxcblxcblwiXHJcbiAgICB9XHJcblxyXG5cclxuICAgIGFwcGx5X3NvbHV0aW9uKHNvbHV0aW9uKXtcclxuICAgICAgICBjb25zb2xlLmxvZyhzb2x1dGlvbilcclxuICAgICAgICBmb3IgKGxldCBpPTA7IGk8dGhpcy5nLm1heERlcHRoICsgMTsgaSsrKXtcclxuICAgICAgICAgICAgbGV0IGxheWVyVGFibGVzID0gdGhpcy5nLnRhYmxlSW5kZXhbaV07XHJcblxyXG4gICAgICAgICAgICBsYXllclRhYmxlcy5zb3J0KChhLCBiKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAvL2NvbnNvbGUubG9nKGEuaWQsIGIuaWQsIHNvbHV0aW9uW1wieF9UXCIgKyBhLmlkICsgXCJfVFwiICsgYi5pZF0sIHNvbHV0aW9uW1wieF9UXCIgKyBiLmlkICsgXCJfVFwiICsgYS5pZF0pXHJcbiAgICAgICAgICAgICAgICBpZiAoc29sdXRpb25bXCJ4X1RcIiArIGEuaWQgKyBcIl9UXCIgKyBiLmlkXSA9PSAwKSByZXR1cm4gMVxyXG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoc29sdXRpb25bXCJ4X1RcIiArIGEuaWQgKyBcIl9UXCIgKyBiLmlkXSA9PSAxKSByZXR1cm4gLTFcclxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKHNvbHV0aW9uW1wieF9UXCIgKyBiLmlkICsgXCJfVFwiICsgYS5pZF0gPT0gMSkgcmV0dXJuIDFcclxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKHNvbHV0aW9uW1wieF9UXCIgKyBiLmlkICsgXCJfVFwiICsgYS5pZF0gPT0gMCkgcmV0dXJuIC0xXHJcbiAgICAgICAgICAgIH0pXHJcblxyXG4gICAgICAgICAgICBmb3IgKGxldCBrIGluIGxheWVyVGFibGVzKXtcclxuICAgICAgICAgICAgICAgIGxheWVyVGFibGVzW2tdLndlaWdodCA9IGs7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGZvciAobGV0IHRhYmxlIG9mIGxheWVyVGFibGVzKXtcclxuICAgICAgICAgICAgICAgIHRhYmxlLmF0dHJpYnV0ZXMuc29ydCgoYSwgYikgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vaWYgKGIudGFibGUuaWQgPT0gXCJUOHk0XCIpIGNvbnNvbGUubG9nKGEuaWQsIGIuaWQsIHNvbHV0aW9uW1wieF9cIiArIGIuaWQgKyBcIl9cIiArIGEuaWRdKVxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChzb2x1dGlvbltcInhfXCIgKyBhLmlkICsgXCJfXCIgKyBiLmlkXSA9PSAwKSByZXR1cm4gMVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKHNvbHV0aW9uW1wieF9cIiArIGEuaWQgKyBcIl9cIiArIGIuaWRdID09IDEpIHJldHVybiAtMVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKHNvbHV0aW9uW1wieF9cIiArIGIuaWQgKyBcIl9cIiArIGEuaWRdID09IDEpIHJldHVybiAxXHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAoc29sdXRpb25bXCJ4X1wiICsgYi5pZCArIFwiX1wiICsgYS5pZF0gPT0gMCkgcmV0dXJuIC0xXHJcbiAgICAgICAgICAgICAgICB9KVxyXG5cclxuICAgICAgICAgICAgICAgIGZvciAobGV0IGo9MDsgajx0YWJsZS5hdHRyaWJ1dGVzLmxlbmd0aDsgaisrKXtcclxuICAgICAgICAgICAgICAgICAgICB0YWJsZS5hdHRyaWJ1dGVzW2pdLndlaWdodCA9IGo7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vICoqKioqKioqKipcclxuICAgICAgICAvLyBiZW5kaW5lc3NcclxuICAgICAgICAvLyAqKioqKioqKioqXHJcbiAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5iZW5kaW5lc3NfcmVkdWN0aW9uX2FjdGl2ZSl7XHJcbiAgICAgICAgICAgIGZvciAobGV0IGk9MDsgaTx0aGlzLmcudGFibGVJbmRleC5sZW5ndGg7IGkrKyl7XHJcbiAgICAgICAgICAgICAgICBsZXQgdGFibGVDb2wgPSB0aGlzLmcudGFibGVJbmRleFtpXTtcclxuICAgICAgICAgICAgICAgIGZvciAobGV0IGo9MDsgajx0YWJsZUNvbC5sZW5ndGg7IGorKyl7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IHQgPSB0YWJsZUNvbFtqXTtcclxuICAgIFxyXG4gICAgICAgICAgICAgICAgICAgIGxldCB2YWwgPSBzb2x1dGlvbltcInlfXCIgKyB0LmlkXVxyXG4gICAgICAgICAgICAgICAgICAgIGlmICh2YWwgPT0gdW5kZWZpbmVkKSBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgICAgICB0LnZlcnRpY2FsQXR0ck9mZnNldCA9IHZhbCAtIHQud2VpZ2h0ICogdGhpcy5nLmJhc2VSb3dEaXN0YW5jZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxufSIsImNsYXNzIExQRm9ybXVsYXRpb24ge1xyXG4gICAgY29uc3RydWN0b3IgKGcpIHtcclxuICAgICAgICB0aGlzLmcgPSBnO1xyXG4gICAgICAgIHRoaXMubWlwID0gdHJ1ZTtcclxuICAgICAgICB0aGlzLnZlcmJvc2UgPSBmYWxzZTtcclxuICAgICAgICB0aGlzLmVsYXBzZWRUaW1lID0gMFxyXG4gICAgfVxyXG5cclxuICAgIGFzeW5jIGFycmFuZ2UoKXtcclxuXHJcbiAgICAgICAgbGV0IHN0YXJ0VGltZSA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpXHJcblxyXG4gICAgICAgIC8vIGJ1aWxkIG1vZGVsIGZyb20gZ3JhcGhcclxuICAgICAgICBsZXQgbW9kZWwgPSB7fVxyXG5cclxuICAgICAgICB0aGlzLmZpbGxNb2RlbChtb2RlbClcclxuICAgICAgICBsZXQgcHJvYiA9IHRoaXMubW9kZWxUb1N0cmluZyhtb2RlbClcclxuXHJcblxyXG4gICAgICAgIC8vIHNvbHZlXHJcbiAgICAgICAgbGV0IHJlc3VsdCA9IHt9LCBvYmplY3RpdmUsIGk7XHJcblxyXG4gICAgICAgIGlmICh0aGlzLnZlcmJvc2UpIGdscF9zZXRfcHJpbnRfZnVuYyhjb25zb2xlLmxvZyk7XHJcblxyXG4gICAgICAgIGxldCBscCA9IGdscF9jcmVhdGVfcHJvYigpO1xyXG4gICAgICAgIGdscF9yZWFkX2xwX2Zyb21fc3RyaW5nKGxwLCBudWxsLCBwcm9iKTtcclxuXHJcbiAgICAgICAgZ2xwX3NjYWxlX3Byb2IobHAsIEdMUF9TRl9BVVRPKTtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgbGV0IHNtY3AgPSBuZXcgU01DUCh7cHJlc29sdmU6IEdMUF9PTn0pO1xyXG4gICAgICAgIGdscF9zaW1wbGV4KGxwLCBzbWNwKTtcclxuXHJcbiAgICAgICAgaWYgKHRoaXMubWlwKXtcclxuICAgICAgICAgICAgZ2xwX2ludG9wdChscCk7XHJcbiAgICAgICAgICAgIG9iamVjdGl2ZSA9IGdscF9taXBfb2JqX3ZhbChscCk7XHJcblxyXG4gICAgICAgICAgICBmb3IoaSA9IDE7IGkgPD0gZ2xwX2dldF9udW1fY29scyhscCk7IGkrKyl7XHJcbiAgICAgICAgICAgICAgICByZXN1bHRbZ2xwX2dldF9jb2xfbmFtZShscCwgaSldID0gZ2xwX21pcF9jb2xfdmFsKGxwLCBpKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIG9iamVjdGl2ZSA9IGdscF9nZXRfb2JqX3ZhbChscCk7XHJcbiAgICAgICAgICAgIGZvcihpID0gMTsgaSA8PSBnbHBfZ2V0X251bV9jb2xzKGxwKTsgaSsrKXtcclxuICAgICAgICAgICAgICAgIHJlc3VsdFtnbHBfZ2V0X2NvbF9uYW1lKGxwLCBpKV0gPSBnbHBfZ2V0X2NvbF9wcmltIChscCwgaSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuYXBwbHlfc29sdXRpb24ocmVzdWx0KVxyXG5cclxuICAgICAgICB0aGlzLmVsYXBzZWRUaW1lID0gbmV3IERhdGUoKS5nZXRUaW1lKCkgLSBzdGFydFRpbWVcclxuICAgICAgICBcclxuICAgIH1cclxuXHJcbiAgICBmaWxsTW9kZWwobW9kZWwpe1xyXG4gICAgICAgIG1vZGVsLm1pbmltaXplID0gXCJNaW5pbWl6ZSBcXG5cIlxyXG4gICAgICAgIG1vZGVsLnN1YmplY3RUbyA9IFwiU3ViamVjdCBUbyBcXG5cIlxyXG4gICAgICAgIG1vZGVsLmJvdW5kcyA9IFwiXFxuQm91bmRzIFxcblwiXHJcblxyXG4gICAgICAgIGxldCBkZWZpbml0aW9ucyA9IHt9XHJcbiAgICAgICAgbGV0IGNyb3NzaW5nX3ZhcnMgPSB7fVxyXG5cclxuICAgICAgICBsZXQgbWtjID0gKHUxLCB2MSwgdTIsIHYyKSA9PiB7XHJcbiAgICAgICAgICAgIGxldCByZXMgPSBcImNfXCIgKyB1MSArIHYxICsgXCJfXCIgKyB1MiArIHYyO1xyXG4gICAgICAgICAgICBjcm9zc2luZ192YXJzW3Jlc10gPSBcIlwiXHJcbiAgICAgICAgICAgIHJldHVybiByZXNcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGxldCBta3ggPSAodTEsIHUyLCBwcmU9XCJcIikgPT4ge1xyXG4gICAgICAgICAgICBsZXQgcmVzID0gXCJ4X1wiICsgcHJlICsgdTEgKyBcIl9cIiArIHByZSArIHUyXHJcbiAgICAgICAgICAgIGxldCBvcHBvc2l0ZXJlcyA9IFwieF9cIiArIHByZSArIHUyICsgXCJfXCIgKyBwcmUgKyB1MVxyXG4gICAgICAgICAgICBsZXQgb2Zmc2V0ID0gMFxyXG5cclxuICAgICAgICAgICAgaWYgKGRlZmluaXRpb25zW29wcG9zaXRlcmVzXSAhPSB1bmRlZmluZWQpe1xyXG4gICAgICAgICAgICAgICAgb2Zmc2V0IC09IDFcclxuICAgICAgICAgICAgICAgIHJldHVybiBbXCIgLSBcIiArIG9wcG9zaXRlcmVzLCBvZmZzZXRdXHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoZGVmaW5pdGlvbnNbcmVzXSA9PSB1bmRlZmluZWQpe1xyXG4gICAgICAgICAgICAgICAgLy9kZWZpbml0aW9uc1tyZXNdID0gJydcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gW1wiICsgXCIgKyByZXMsIG9mZnNldF1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGxldCBta3hCYXNlID0gKHUxLCB1MiwgcHJlPVwiXCIpID0+IHtcclxuICAgICAgICAgICAgcmV0dXJuIFwieF9cIiArIHByZSArIHUxICsgXCJfXCIgKyBwcmUgKyB1MlxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gc3RvcmUgYWxsIHZhcmlhYmxlIG5hbWVzIGluIG9yZGVyXHJcbiAgICAgICAgZm9yIChsZXQgaz0wOyBrIDwgdGhpcy5nLm1heERlcHRoICsgMTsgaysrKXtcclxuICAgICAgICAgICAgbGV0IGxheWVyVGFibGVzID0gdGhpcy5nLnRhYmxlSW5kZXhba107XHJcbiAgICAgICAgICAgIGxldCBsYXllckF0dHJpYnV0ZXMgPSBsYXllclRhYmxlcy5tYXAodCA9PiB0LmF0dHJpYnV0ZXMpLmZsYXQoKTtcclxuXHJcbiAgICAgICAgICAgIC8vIHN0b3JlIHRhYmxlc1xyXG4gICAgICAgICAgICBmb3IgKGxldCBpPTA7IGk8bGF5ZXJUYWJsZXMubGVuZ3RoOyBpKyspe1xyXG4gICAgICAgICAgICAgICAgbGV0IHQxID0gbGF5ZXJUYWJsZXNbaV0ubmFtZTtcclxuICAgICAgICAgICAgICAgIGZvciAobGV0IGo9aSsxOyBqPGxheWVyVGFibGVzLmxlbmd0aDsgaisrKXtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgdDIgPSBsYXllclRhYmxlc1tqXS5uYW1lO1xyXG4gICAgICAgICAgICAgICAgICAgIGRlZmluaXRpb25zW21reEJhc2UodDEsIHQyLCAnVCcpXSA9ICcnXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8vIHN0b3JlIGF0dHJpYnV0ZXNcclxuICAgICAgICAgICAgZm9yIChsZXQgaT0wOyBpPGxheWVyQXR0cmlidXRlcy5sZW5ndGg7IGkrKyl7XHJcbiAgICAgICAgICAgICAgICBsZXQgYTEgPSBsYXllckF0dHJpYnV0ZXNbaV0ubmFtZTtcclxuICAgICAgICAgICAgICAgIGZvciAobGV0IGo9aSsxOyBqPGxheWVyQXR0cmlidXRlcy5sZW5ndGg7IGorKyl7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IGEyID0gbGF5ZXJBdHRyaWJ1dGVzW2pdLm5hbWU7XHJcbiAgICAgICAgICAgICAgICAgICAgZGVmaW5pdGlvbnNbbWt4QmFzZShhMSwgYTIpXSA9ICcnXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIFxyXG4gICAgICAgIGZvciAobGV0IGs9MDsgayA8IHRoaXMuZy5tYXhEZXB0aCArIDE7IGsrKyl7XHJcbiAgICAgICAgICAgIGxldCBsYXllclRhYmxlcyA9IHRoaXMuZy50YWJsZUluZGV4W2tdO1xyXG4gICAgICAgICAgICBsZXQgbGF5ZXJBdHRyaWJ1dGVzID0gbGF5ZXJUYWJsZXMubWFwKHQgPT4gdC5hdHRyaWJ1dGVzKS5mbGF0KClcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIC8vIGdsb2JhbCBvcmRlcmluZyBvZiB0YWJsZXMgXHJcbiAgICAgICAgICAgIGZvciAobGV0IGk9MDsgaTxsYXllclRhYmxlcy5sZW5ndGg7IGkrKyl7XHJcbiAgICAgICAgICAgICAgICBsZXQgdDEgPSBsYXllclRhYmxlc1tpXS5uYW1lO1xyXG5cclxuICAgICAgICAgICAgICAgIGZvciAobGV0IGogPSBpKzE7IGogPCBsYXllclRhYmxlcy5sZW5ndGg7IGorKyl7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IHQyID0gbGF5ZXJUYWJsZXNbal0ubmFtZTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgbSA9IGogKyAxOyBtIDwgbGF5ZXJUYWJsZXMubGVuZ3RoOyBtKyspe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgdDMgPSBsYXllclRhYmxlc1ttXS5uYW1lO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgbW9kZWwuc3ViamVjdFRvICs9IFwiXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICsgbWt4QmFzZSh0MSwgdDIsICdUJylcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICsgXCIgKyBcIiArIG1reEJhc2UodDIsIHQzLCAnVCcpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICArIFwiIC0gXCIgKyBta3hCYXNlKHQxLCB0MywgJ1QnKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKyBcIiA+PSAwXFxuXCJcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1vZGVsLnN1YmplY3RUbyArPSBcIlwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICArIFwiLSBcIiArIG1reEJhc2UodDEsIHQyLCAnVCcpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICArIFwiIC0gXCIgKyBta3hCYXNlKHQyLCB0MywgJ1QnKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKyBcIiArIFwiICsgbWt4QmFzZSh0MSwgdDMsICdUJylcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICsgXCIgPj0gLTFcXG5cIlxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLy8gZ2xvYmFsIG9yZGVyaW5nIG9mIGF0dHJpYnV0ZXNcclxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsYXllckF0dHJpYnV0ZXMubGVuZ3RoOyBpKyspe1xyXG4gICAgICAgICAgICAgICAgbGV0IHQxID0gbGF5ZXJBdHRyaWJ1dGVzW2ldLm5hbWU7XHJcbiAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgIGZvciAobGV0IGogPSBpKzE7IGogPCBsYXllckF0dHJpYnV0ZXMubGVuZ3RoOyBqKyspe1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCB0MiA9IGxheWVyQXR0cmlidXRlc1tqXS5uYW1lO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChpID09IGopIGNvbnRpbnVlO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAobGF5ZXJBdHRyaWJ1dGVzW2ldLnRhYmxlLm5hbWUgIT0gbGF5ZXJBdHRyaWJ1dGVzW2pdLnRhYmxlLm5hbWUpIGNvbnRpbnVlXHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGZvciAobGV0IG0gPSBqKzE7IG0gPCBsYXllckF0dHJpYnV0ZXMubGVuZ3RoOyBtKyspe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobSA9PSBqIHx8IG0gPT0gaSkgY29udGludWVcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChsYXllckF0dHJpYnV0ZXNbbV0udGFibGUubmFtZSAhPSBsYXllckF0dHJpYnV0ZXNbaV0udGFibGUubmFtZSkgY29udGludWVcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGxheWVyQXR0cmlidXRlc1ttXS50YWJsZS5uYW1lICE9IGxheWVyQXR0cmlidXRlc1tqXS50YWJsZS5uYW1lKSBjb250aW51ZVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHQzID0gbGF5ZXJBdHRyaWJ1dGVzW21dLm5hbWU7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBtb2RlbC5zdWJqZWN0VG8gKz0gXCJcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKyBta3hCYXNlKHQxLCB0MilcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICsgXCIgKyBcIiArIG1reEJhc2UodDIsIHQzKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKyBcIiAtIFwiICsgbWt4QmFzZSh0MSwgdDMpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICArIFwiID49IDBcXG5cIlxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgbW9kZWwuc3ViamVjdFRvICs9IFwiXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICsgXCItIFwiICsgbWt4QmFzZSh0MSwgdDIpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICArIFwiIC0gXCIgKyBta3hCYXNlKHQyLCB0MylcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICsgXCIgKyBcIiArIG1reEJhc2UodDEsIHQzKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKyBcIiA+PSAtMVxcblwiXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBkZXRlcm1pbmluZyBjcm9zc2luZ3NcclxuICAgICAgICBmb3IgKGxldCBrPTA7IGsgPCB0aGlzLmcubWF4RGVwdGggKyAxOyBrKyspe1xyXG4gICAgICAgICAgICBsZXQgbGF5ZXJFZGdlcyA9IHRoaXMuZy5lZGdlSW5kZXhba11cclxuXHJcbiAgICAgICAgICAgIGZvciAobGV0IGk9MDsgaTxsYXllckVkZ2VzLmxlbmd0aDsgaSsrKXtcclxuICAgICAgICAgICAgICAgIGxldCB1MXYxID0gbGF5ZXJFZGdlc1tpXTtcclxuXHJcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBqPWkrMTsgajxsYXllckVkZ2VzLmxlbmd0aDsgaisrKXtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgdTJ2MiA9IGxheWVyRWRnZXNbal07XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIC8vIG5ldzogbWFuYWdpbmcgZ3JvdXBzXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gZWRnZXMgdGhhdCBhcmUgb3V0c2lkZSBvZiBncm91cHMgc2hvdWxkIG5ldmVyIGNyb3NzIHdpdGggZWRnZXMgdGhhdCBhcmUgaW5zaWRlIG9mIGdyb3Vwc1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh1MXYxLmxlZnRUYWJsZS5ncm91cCAhPSB1bmRlZmluZWQgJiYgdTF2MS5yaWdodFRhYmxlLmdyb3VwICE9IHVuZGVmaW5lZCl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh1MnYyLmxlZnRUYWJsZS5ncm91cCAhPSB1MnYyLmxlZnRUYWJsZS5ncm91cCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbW9kZWwuc3ViamVjdFRvICs9IG1rYyh1MSwgdjEsIHUyLCB2MikgKyBcIiA9IDBcXG5cIjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCF0aGlzLmlzU2FtZVJhbmtFZGdlKHUxdjEpICYmICF0aGlzLmlzU2FtZVJhbmtFZGdlKHUydjIpKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHUxID0gdTF2MS5sZWZ0QXR0cmlidXRlLm5hbWVcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHYxID0gdTF2MS5yaWdodEF0dHJpYnV0ZS5uYW1lXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCB1MiA9IHUydjIubGVmdEF0dHJpYnV0ZS5uYW1lXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCB2MiA9IHUydjIucmlnaHRBdHRyaWJ1dGUubmFtZVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHUxID09IHUyIHx8IHYxID09IHYyKSBjb250aW51ZVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHAxID0gbWtjKHUxLCB2MSwgdTIsIHYyKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgZmluYWxzdW0gPSAxXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1vZGVsLnN1YmplY3RUbyArPSBwMSArIFwiXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHAyID0gbWt4QmFzZSh1MiwgdTEpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkZWZpbml0aW9uc1twMl0gIT0gdW5kZWZpbmVkKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1vZGVsLnN1YmplY3RUbyArPSBcIiArIFwiICsgcDJcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHAyID0gbWt4QmFzZSh1MSwgdTIpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaW5hbHN1bSAtPSAxXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtb2RlbC5zdWJqZWN0VG8gKz0gXCIgLSBcIiArIHAyXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBwMyA9IG1reEJhc2UodjEsIHYyKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZGVmaW5pdGlvbnNbcDNdICE9IHVuZGVmaW5lZCl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtb2RlbC5zdWJqZWN0VG8gKz0gXCIgKyBcIiArIHAzXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwMyA9IG1reEJhc2UodjIsIHYxKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZmluYWxzdW0gLT0gMVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbW9kZWwuc3ViamVjdFRvICs9IFwiIC0gXCIgKyBwM1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1vZGVsLnN1YmplY3RUbyArPSBcIiA+PSBcIiArIGZpbmFsc3VtICsgXCJcXG5cIlxyXG5cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHAxID0gbWtjKHUxLCB2MSwgdTIsIHYyKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBmaW5hbHN1bSA9IDFcclxuICAgICAgICAgICAgICAgICAgICAgICAgbW9kZWwuc3ViamVjdFRvICs9IHAxICsgXCJcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBwMiA9IG1reEJhc2UodTEsIHUyKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZGVmaW5pdGlvbnNbcDJdICE9IHVuZGVmaW5lZCl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtb2RlbC5zdWJqZWN0VG8gKz0gXCIgKyBcIiArIHAyXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwMiA9IG1reEJhc2UodTIsIHUxKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZmluYWxzdW0gLT0gMVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbW9kZWwuc3ViamVjdFRvICs9IFwiIC0gXCIgKyBwMlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBwMyA9IG1reEJhc2UodjIsIHYxKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZGVmaW5pdGlvbnNbcDNdICE9IHVuZGVmaW5lZCl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtb2RlbC5zdWJqZWN0VG8gKz0gXCIgKyBcIiArIHAzXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwMyA9IG1reEJhc2UodjEsIHYyKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZmluYWxzdW0gLT0gMVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbW9kZWwuc3ViamVjdFRvICs9IFwiIC0gXCIgKyBwM1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1vZGVsLnN1YmplY3RUbyArPSBcIiA+PSBcIiArIGZpbmFsc3VtICsgXCJcXG5cIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICAvLyBpZiB0aGV5IGFyZSBib3RoIHNhbWUgcmFuayBlZGdlc1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy5pc1NhbWVSYW5rRWRnZSh1MXYxKSAmJiB0aGlzLmlzU2FtZVJhbmtFZGdlKHUydjIpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCB1MSA9IHUxdjEubGVmdEF0dHJpYnV0ZS5uYW1lXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCB2MSA9IHUxdjEucmlnaHRBdHRyaWJ1dGUubmFtZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgdTIgPSB1MnYyLmxlZnRBdHRyaWJ1dGUubmFtZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgdjIgPSB1MnYyLnJpZ2h0QXR0cmlidXRlLm5hbWVcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBwMSA9IG1rYyh1MSwgdjEsIHUyLCB2MilcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGZpbmFsc3VtID0gMVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBtb2RlbC5zdWJqZWN0VG8gKz0gcDEgKyBcIlwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBwMiA9IG1reEJhc2UodTEsIHUyKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZGVmaW5pdGlvbnNbcDJdICE9IHVuZGVmaW5lZCl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtb2RlbC5zdWJqZWN0VG8gKz0gXCIgKyBcIiArIHAyXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwMiA9IG1reEJhc2UodTIsIHUxKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZmluYWxzdW0gLT0gMVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbW9kZWwuc3ViamVjdFRvICs9IFwiIC0gXCIgKyBwMlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgcDMgPSBta3hCYXNlKHYxLCB2MilcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGRlZmluaXRpb25zW3AzXSAhPSB1bmRlZmluZWQpe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbW9kZWwuc3ViamVjdFRvICs9IFwiICsgXCIgKyBwM1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZmluYWxzdW0gLT0gMVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcDMgPSBta3hCYXNlKHYyLCB2MSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1vZGVsLnN1YmplY3RUbyArPSBcIiAtIFwiICsgcDNcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHA0ID0gbWt4QmFzZSh1MiwgdjEpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkZWZpbml0aW9uc1twNF0gIT0gdW5kZWZpbmVkKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1vZGVsLnN1YmplY3RUbyArPSBwNFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZmluYWxzdW0gLT0gMVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcDQgPSBta3hCYXNlKHYxLCB1MilcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1vZGVsLnN1YmplY3RUbyArPSBcIiArIFwiICsgcDRcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBtb2RlbC5zdWJqZWN0VG8gKz0gXCIgPj0gXCIgKyBmaW5hbHN1bSArIFwiXFxuXCJcclxuXHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBwMSA9IG1rYyh1MSwgdjEsIHUyLCB2MilcclxuICAgICAgICAgICAgICAgICAgICAgICAgZmluYWxzdW0gPSAxXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1vZGVsLnN1YmplY3RUbyArPSBwMSArIFwiXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgcDIgPSBta3hCYXNlKHUxLCB1MilcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGRlZmluaXRpb25zW3AyXSAhPSB1bmRlZmluZWQpe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbW9kZWwuc3ViamVjdFRvICs9IFwiICsgXCIgKyBwMlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcDIgPSBta3hCYXNlKHUyLCB1MSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpbmFsc3VtIC09IDFcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1vZGVsLnN1YmplY3RUbyArPSBcIiAtIFwiICsgcDJcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgcDMgPSBta3hCYXNlKHYxLCB2MilcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGRlZmluaXRpb25zW3AzXSAhPSB1bmRlZmluZWQpe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbW9kZWwuc3ViamVjdFRvICs9IFwiICsgXCIgKyBwM1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZmluYWxzdW0gLT0gMVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcDMgPSBta3hCYXNlKHYyLCB2MSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1vZGVsLnN1YmplY3RUbyArPSBcIiAtIFwiICsgcDNcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgcDQgPSBta3hCYXNlKHYyLCB1MSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGRlZmluaXRpb25zW3A0XSAhPSB1bmRlZmluZWQpe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbW9kZWwuc3ViamVjdFRvICs9IHA0XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaW5hbHN1bSAtPSAxXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwNCA9IG1reEJhc2UodTEsIHYyKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbW9kZWwuc3ViamVjdFRvICs9IFwiICsgXCIgKyBwNFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1vZGVsLnN1YmplY3RUbyArPSBcIiA+PSBcIiArIGZpbmFsc3VtICsgXCJcXG5cIlxyXG5cclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMuaXNTYW1lUmFua0VkZ2UodTF2MSkgJiYgIXRoaXMuaXNTYW1lUmFua0VkZ2UodTJ2MikpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHUxID0gdTF2MS5sZWZ0QXR0cmlidXRlLm5hbWVcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHYxID0gdTF2MS5yaWdodEF0dHJpYnV0ZS5uYW1lXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCB1MiA9IHUydjIubGVmdEF0dHJpYnV0ZS5uYW1lXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCB2MiA9IHUydjIucmlnaHRBdHRyaWJ1dGUubmFtZVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHAxID0gbWtjKHUxLCB2MSwgdTIsIHYyKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgZmluYWxzdW0gPSAxXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1vZGVsLnN1YmplY3RUbyArPSBwMSArIFwiXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHAyID0gbWt4QmFzZSh1MiwgdTEpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkZWZpbml0aW9uc1twMl0gIT0gdW5kZWZpbmVkKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1vZGVsLnN1YmplY3RUbyArPSBcIiArIFwiICsgcDJcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHAyID0gbWt4QmFzZSh1MSwgdTIpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaW5hbHN1bSAtPSAxXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtb2RlbC5zdWJqZWN0VG8gKz0gXCIgLSBcIiArIHAyXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBwMyA9IG1reEJhc2UodjEsIHUyKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZGVmaW5pdGlvbnNbcDNdICE9IHVuZGVmaW5lZCl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtb2RlbC5zdWJqZWN0VG8gKz0gXCIgKyBcIiArIHAzXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaW5hbHN1bSAtPSAxXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwMyA9IG1reEJhc2UodTIsIHYxKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbW9kZWwuc3ViamVjdFRvICs9IFwiIC0gXCIgKyBwM1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1vZGVsLnN1YmplY3RUbyArPSBcIiA+PSBcIiArIGZpbmFsc3VtICsgXCJcXG5cIlxyXG5cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHAxID0gbWtjKHUxLCB2MSwgdTIsIHYyKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBmaW5hbHN1bSA9IDFcclxuICAgICAgICAgICAgICAgICAgICAgICAgbW9kZWwuc3ViamVjdFRvICs9IHAxICsgXCJcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBwMiA9IG1reEJhc2UodTIsIHYxKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZGVmaW5pdGlvbnNbcDJdICE9IHVuZGVmaW5lZCl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtb2RlbC5zdWJqZWN0VG8gKz0gXCIgKyBcIiArIHAyXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwMiA9IG1reEJhc2UodjEsIHUyKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZmluYWxzdW0gLT0gMVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbW9kZWwuc3ViamVjdFRvICs9IFwiIC0gXCIgKyBwMlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBwMyA9IG1reEJhc2UodTEsIHUyKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZGVmaW5pdGlvbnNbcDNdICE9IHVuZGVmaW5lZCl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtb2RlbC5zdWJqZWN0VG8gKz0gXCIgKyBcIiArIHAzXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaW5hbHN1bSAtPSAxXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwMyA9IG1reEJhc2UodTIsIHUxKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbW9kZWwuc3ViamVjdFRvICs9IFwiIC0gXCIgKyBwM1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1vZGVsLnN1YmplY3RUbyArPSBcIiA+PSBcIiArIGZpbmFsc3VtICsgXCJcXG5cIlxyXG5cclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKCF0aGlzLmlzU2FtZVJhbmtFZGdlKHUxdjEpICYmIHRoaXMuaXNTYW1lUmFua0VkZ2UodTJ2MikpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHUxID0gdTF2MS5sZWZ0QXR0cmlidXRlLm5hbWVcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHYxID0gdTF2MS5yaWdodEF0dHJpYnV0ZS5uYW1lXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCB1MiA9IHUydjIubGVmdEF0dHJpYnV0ZS5uYW1lXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCB2MiA9IHUydjIucmlnaHRBdHRyaWJ1dGUubmFtZVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHAxID0gbWtjKHUxLCB2MSwgdTIsIHYyKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgZmluYWxzdW0gPSAxXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1vZGVsLnN1YmplY3RUbyArPSBwMSArIFwiXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHAyID0gbWt4QmFzZSh1MSwgdTIpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkZWZpbml0aW9uc1twMl0gIT0gdW5kZWZpbmVkKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1vZGVsLnN1YmplY3RUbyArPSBcIiArIFwiICsgcDJcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHAyID0gbWt4QmFzZSh1MiwgdTEpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaW5hbHN1bSAtPSAxXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtb2RlbC5zdWJqZWN0VG8gKz0gXCIgLSBcIiArIHAyXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBwMyA9IG1reEJhc2UodjIsIHUxKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZGVmaW5pdGlvbnNbcDNdICE9IHVuZGVmaW5lZCl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtb2RlbC5zdWJqZWN0VG8gKz0gXCIgKyBcIiArIHAzXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaW5hbHN1bSAtPSAxXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwMyA9IG1reEJhc2UodTEsIHYyKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbW9kZWwuc3ViamVjdFRvICs9IFwiIC0gXCIgKyBwM1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1vZGVsLnN1YmplY3RUbyArPSBcIiA+PSBcIiArIGZpbmFsc3VtICsgXCJcXG5cIlxyXG5cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHAxID0gbWtjKHUxLCB2MSwgdTIsIHYyKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBmaW5hbHN1bSA9IDFcclxuICAgICAgICAgICAgICAgICAgICAgICAgbW9kZWwuc3ViamVjdFRvICs9IHAxICsgXCJcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBwMiA9IG1reEJhc2UodTEsIHYyKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZGVmaW5pdGlvbnNbcDJdICE9IHVuZGVmaW5lZCl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtb2RlbC5zdWJqZWN0VG8gKz0gXCIgKyBcIiArIHAyXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwMiA9IG1reEJhc2UodjIsIHUxKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZmluYWxzdW0gLT0gMVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbW9kZWwuc3ViamVjdFRvICs9IFwiIC0gXCIgKyBwMlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBwMyA9IG1reEJhc2UodTIsIHUxKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZGVmaW5pdGlvbnNbcDNdICE9IHVuZGVmaW5lZCl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtb2RlbC5zdWJqZWN0VG8gKz0gXCIgKyBcIiArIHAzXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaW5hbHN1bSAtPSAxXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwMyA9IG1reEJhc2UodTEsIHUyKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbW9kZWwuc3ViamVjdFRvICs9IFwiIC0gXCIgKyBwM1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1vZGVsLnN1YmplY3RUbyArPSBcIiA+PSBcIiArIGZpbmFsc3VtICsgXCJcXG5cIlxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcblxyXG4gICAgICAgLy8gZ3JvdXBpbmcgY29uc3RyYWludCBvZiBhdHRyaWJ1dGVzIHdpdGhpbiB0YWJsZXNcclxuICAgICAgIGZvciAobGV0IGs9MDsgazx0aGlzLmcubWF4RGVwdGggKyAxOyBrKyspe1xyXG4gICAgICAgICAgICBsZXQgbGF5ZXJUYWJsZXMgPSB0aGlzLmcudGFibGVJbmRleFtrXTtcclxuICAgICAgICAgICAgbGV0IGxheWVyQXR0cmlidXRlcyA9IGxheWVyVGFibGVzLm1hcCh0ID0+IHQuYXR0cmlidXRlcykuZmxhdCgpXHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICBmb3IgKGxldCBpPTA7IGk8bGF5ZXJBdHRyaWJ1dGVzLmxlbmd0aDsgaSsrKXtcclxuICAgICAgICAgICAgICAgIGxldCBhdHRyMSA9IGxheWVyQXR0cmlidXRlc1tpXS5uYW1lO1xyXG4gICAgICAgICAgICAgICAgbGV0IHQxID0gbGF5ZXJBdHRyaWJ1dGVzW2ldLnRhYmxlLm5hbWU7XHJcblxyXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgaj1pKzE7IGo8bGF5ZXJBdHRyaWJ1dGVzLmxlbmd0aDsgaisrKXtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgYXR0cjIgPSBsYXllckF0dHJpYnV0ZXNbal0ubmFtZTtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgdDIgPSBsYXllckF0dHJpYnV0ZXNbal0udGFibGUubmFtZVxyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAodDEgIT0gdDIpe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBtb2RlbC5zdWJqZWN0VG8gKz0gXCJ4X1wiICsgYXR0cjEubmFtZSArIFwiX1wiICsgYXR0cjIubmFtZSArIFwiIC0gXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gICAgICsgXCJ4X1RcIiArIGF0dHIxLnRhYmxlLm5hbWUgKyBcIl9UXCIgKyBhdHRyMi50YWJsZS5uYW1lICsgXCIgPSAwXFxuXCJcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1vZGVsLnN1YmplY3RUbyArPSBta3hCYXNlKGF0dHIxLCBhdHRyMikgKyBcIlwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICArIFwiIC0gXCIgKyBta3hCYXNlKHQxLCB0MiwgJ1QnKSBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICsgXCIgPSAwXFxuXCJcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIGZpbGwgZnVuY3Rpb24gdG8gbWluaW1pemVcclxuICAgICAgICBmb3IgKGxldCBlbGVtIGluIGNyb3NzaW5nX3ZhcnMpe1xyXG4gICAgICAgICAgICBtb2RlbC5taW5pbWl6ZSArPSBlbGVtICsgXCIgKyBcIlxyXG4gICAgICAgIH1cclxuICAgICAgICBtb2RlbC5taW5pbWl6ZSA9IG1vZGVsLm1pbmltaXplLnN1YnN0cmluZygwLCBtb2RlbC5taW5pbWl6ZS5sZW5ndGggLSAyKSArIFwiXFxuXFxuXCJcclxuXHJcbiAgICAgICAgZm9yIChsZXQgZWxlbSBpbiBkZWZpbml0aW9ucyl7XHJcbiAgICAgICAgICAgIG1vZGVsLmJvdW5kcyArPSBcImJpbmFyeSBcIiArIGVsZW0gKyBcIlxcblwiXHJcbiAgICAgICAgfVxyXG5cclxuICAgIH1cclxuXHJcblxyXG4gICAgZmlsbE1vZGVsMihtb2RlbCl7XHJcbiAgICAgICAgbW9kZWwubWluaW1pemUgPSBcIk1pbmltaXplIFxcbmNyb3NzaW5nczogXCJcclxuICAgICAgICBtb2RlbC5zdWJqZWN0VG8gPSBcIlN1YmplY3QgVG8gXFxuXCJcclxuICAgICAgICBtb2RlbC5ib3VuZHMgPSBcIlxcbkJvdW5kcyBcXG5cIlxyXG5cclxuICAgICAgICAvLyBvYmplY3RpdmUgZnVuY3Rpb25cclxuICAgICAgICBmb3IgKGxldCBrPTA7IGs8dGhpcy5nLm1heERlcHRoICsgMTsgaysrKXtcclxuICAgICAgICAgICAgbGV0IGxheWVyRWRnZXMgPSB0aGlzLmcuZWRnZUluZGV4W2tdXHJcbiAgICAgICAgICAgIGZvciAobGV0IGk9MDsgaTxsYXllckVkZ2VzLmxlbmd0aDsgaSsrKXtcclxuICAgICAgICAgICAgICAgIGZvciAobGV0IGo9MDsgajxsYXllckVkZ2VzLmxlbmd0aDsgaisrKXtcclxuICAgICAgICAgICAgICAgICAgICBpZiAobGF5ZXJFZGdlc1tpXSAhPSBsYXllckVkZ2VzW2pdKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGNyb3NzdmFyID0gXCJjX1wiICsgbGF5ZXJFZGdlc1tpXS5sZWZ0QXR0cmlidXRlLm5hbWUgKyBsYXllckVkZ2VzW2ldLnJpZ2h0QXR0cmlidXRlLm5hbWUgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICArIFwiX1wiICsgbGF5ZXJFZGdlc1tqXS5sZWZ0QXR0cmlidXRlLm5hbWUgKyBsYXllckVkZ2VzW2pdLnJpZ2h0QXR0cmlidXRlLm5hbWVcclxuICAgICAgICAgICAgICAgICAgICAgICAgbW9kZWwubWluaW1pemUgKz0gY3Jvc3N2YXIgKyAnICsgJ1xyXG4gICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1vZGVsLmJvdW5kcyArPSBcImJpbmFyeSBcIiArIGNyb3NzdmFyICsgXCJcXG5cIlxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSAgICAgIFxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgbW9kZWwubWluaW1pemUgPSBtb2RlbC5taW5pbWl6ZS5zdWJzdHJpbmcoMCwgbW9kZWwubWluaW1pemUubGVuZ3RoIC0gMikgKyAnXFxuXFxuJztcclxuICAgICAgICBcclxuICAgICAgICAvLyBlYWNoIHRhYmxlIG11c3QgYmUgYWJvdmUgb3IgYmVsb3cgYW5vdGhlciBvbmVcclxuICAgICAgICBmb3IgKGxldCBrPTA7IGs8dGhpcy5nLm1heERlcHRoICsgMTsgaysrKXtcclxuICAgICAgICAgICAgbGV0IGxheWVyVGFibGVzID0gdGhpcy5nLnRhYmxlSW5kZXhba107XHJcbiAgICAgICAgICAgIGZvciAobGV0IGk9MDsgaTxsYXllclRhYmxlcy5sZW5ndGg7IGkrKyl7XHJcbiAgICAgICAgICAgICAgICBsZXQgdDEgPSBsYXllclRhYmxlc1tpXVxyXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgaj0wOyBqPGxheWVyVGFibGVzLmxlbmd0aDsgaisrKXtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoaT09aikgY29udGludWVcclxuICAgICAgICAgICAgICAgICAgICBsZXQgdDIgPSBsYXllclRhYmxlc1tqXVxyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0MSAhPSB0Mil7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1vZGVsLnN1YmplY3RUbyArPSBcInhfVFwiICsgdDEubmFtZSArIFwiX1RcIiArIHQyLm5hbWUgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICArIFwiICsgeF9UXCIgKyB0Mi5uYW1lICsgXCJfVFwiICsgdDEubmFtZSArIFwiID0gMVxcblwiXHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBhZGQgdmFycyB0byBib3VuZHNcclxuICAgICAgICAgICAgICAgICAgICAgICAgbW9kZWwuYm91bmRzICs9IFwiYmluYXJ5IHhfVFwiICsgdDEubmFtZSArIFwiX1RcIiArIHQyLm5hbWUgKyBcIlxcblwiXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyB0cmFuc2l0aXZpdHkgb2YgcmVsYXRpb25zaGlwIGFib3ZlXHJcbiAgICAgICAgZm9yIChsZXQgaz0wOyBrIDwgdGhpcy5nLm1heERlcHRoICsgMTsgaysrKXtcclxuICAgICAgICAgICAgIGxldCBsYXllclRhYmxlcyA9IHRoaXMuZy50YWJsZUluZGV4W2tdO1xyXG4gICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsYXllclRhYmxlcy5sZW5ndGg7IGkrKyl7XHJcbiAgICAgICAgICAgICAgICAgbGV0IHQxID0gbGF5ZXJUYWJsZXNbaV07XHJcbiAgICAgICAgICAgICAgICAgZm9yIChsZXQgaiA9MDsgaiA8IGxheWVyVGFibGVzLmxlbmd0aDsgaisrKXtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoaT09aikgY29udGludWVcclxuICAgICAgICAgICAgICAgICAgICBsZXQgdDIgPSBsYXllclRhYmxlc1tqXTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgbSA9IGogKyAxOyBtIDwgbGF5ZXJUYWJsZXMubGVuZ3RoOyBtKyspe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgdDMgPSBsYXllclRhYmxlc1ttXTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1vZGVsLnN1YmplY3RUbyArPSBcInhfVFwiICsgdDMubmFtZSArIFwiX1RcIiArIHQxLm5hbWUgKyBcIiAtIHhfVFwiICsgdDMubmFtZSArIFwiX1RcIiBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICsgdDIubmFtZSArIFwiIC0geF9UXCIgKyB0Mi5uYW1lICsgXCJfVFwiICsgdDEubmFtZSArIFwiID49IC0gMVxcblwiIFxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIGVhY2ggYXR0cmlidXRlIG11c3QgYmUgYWJvdmUgb3IgYmVsb3cgYW5vdGhlciBvbmVcclxuICAgICAgICBmb3IgKGxldCBrPTA7IGs8dGhpcy5nLm1heERlcHRoICsgMTsgaysrKXtcclxuICAgICAgICAgICAgbGV0IGxheWVyVGFibGVzID0gdGhpcy5nLnRhYmxlSW5kZXhba107XHJcbiAgICAgICAgICAgIGxldCBsYXllckF0dHJpYnV0ZXMgPSBsYXllclRhYmxlcy5tYXAodCA9PiB0LmF0dHJpYnV0ZXMpLmZsYXQoKVxyXG4gICAgICAgICAgICBmb3IgKGxldCBpPTA7IGk8bGF5ZXJBdHRyaWJ1dGVzLmxlbmd0aDsgaSsrKXtcclxuICAgICAgICAgICAgICAgIGxldCB0MSA9IGxheWVyQXR0cmlidXRlc1tpXVxyXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgaj1pKzE7IGo8bGF5ZXJBdHRyaWJ1dGVzLmxlbmd0aDsgaisrKXtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgdDIgPSBsYXllckF0dHJpYnV0ZXNbal1cclxuICAgICAgICAgICAgICAgICAgICBpZiAodDEgIT0gdDIpe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBtb2RlbC5zdWJqZWN0VG8gKz0gXCJ4X1wiICsgdDEubmFtZSArIFwiX1wiICsgdDIubmFtZSBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICsgXCIgKyB4X1wiICsgdDIubmFtZSArIFwiX1wiICsgdDEubmFtZSArIFwiID0gMVxcblwiXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBncm91cGluZyBjb25zdHJhaW50IG9mIGF0dHJpYnV0ZXMgd2l0aGluIHRhYmxlc1xyXG4gICAgICAgIGZvciAobGV0IGs9MDsgazx0aGlzLmcubWF4RGVwdGggKyAxOyBrKyspe1xyXG4gICAgICAgICAgICBsZXQgbGF5ZXJUYWJsZXMgPSB0aGlzLmcudGFibGVJbmRleFtrXTtcclxuICAgICAgICAgICAgbGV0IGxheWVyQXR0cmlidXRlcyA9IGxheWVyVGFibGVzLm1hcCh0ID0+IHQuYXR0cmlidXRlcykuZmxhdCgpXHJcbiAgICAgICAgICAgIGZvciAobGV0IGF0dHIxIG9mIGxheWVyQXR0cmlidXRlcyl7XHJcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBhdHRyMiBvZiBsYXllckF0dHJpYnV0ZXMpe1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChhdHRyMS50YWJsZSAhPSBhdHRyMi50YWJsZSl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1vZGVsLnN1YmplY3RUbyArPSBcInhfXCIgKyBhdHRyMS5uYW1lICsgXCJfXCIgKyBhdHRyMi5uYW1lICsgXCIgLSBcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKyBcInhfVFwiICsgYXR0cjEudGFibGUubmFtZSArIFwiX1RcIiArIGF0dHIyLnRhYmxlLm5hbWUgKyBcIiA9IDBcXG5cIlxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcblxyXG4gICAgICAgIC8vIHRyYW5zaXRpdml0eSBvZiByZWxhdGlvbnNoaXAgYWJvdmVcclxuICAgICAgICBmb3IgKGxldCBrPTA7IGsgPCB0aGlzLmcubWF4RGVwdGggKyAxOyBrKyspe1xyXG4gICAgICAgICAgICBsZXQgbGF5ZXJUYWJsZXMgPSB0aGlzLmcudGFibGVJbmRleFtrXTtcclxuICAgICAgICAgICAgbGV0IGxheWVyQXR0cmlidXRlcyA9IGxheWVyVGFibGVzLm1hcCh0ID0+IHQuYXR0cmlidXRlcykuZmxhdCgpXHJcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGF5ZXJBdHRyaWJ1dGVzLmxlbmd0aDsgaSsrKXtcclxuICAgICAgICAgICAgICAgIGxldCB0MSA9IGxheWVyQXR0cmlidXRlc1tpXTtcclxuICAgICAgICAgICAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgbGF5ZXJBdHRyaWJ1dGVzLmxlbmd0aDsgaisrKXtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgdDIgPSBsYXllckF0dHJpYnV0ZXNbal07XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGkgPT0gaikgY29udGludWUgXHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGZvciAobGV0IG0gPSAwOyBtIDwgbGF5ZXJBdHRyaWJ1dGVzLmxlbmd0aDsgbSsrKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG0gPT0gaSB8fCBtID09IGopIGNvbnRpbnVlXHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgdDMgPSBsYXllckF0dHJpYnV0ZXNbbV07XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBtb2RlbC5zdWJqZWN0VG8gKz0gXCJ4X1wiICsgdDMubmFtZSArIFwiX1wiICsgdDEubmFtZSArIFwiIC0geF9cIiArIHQzLm5hbWUgKyBcIl9cIiBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgKyB0Mi5uYW1lICsgXCIgLSB4X1wiICsgdDIubmFtZSArIFwiX1wiICsgdDEubmFtZSArIFwiID49IC0gMVxcblwiIFxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gYWRkIHZhcnMgdG8gYm91bmRzXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vbW9kZWwuYm91bmRzICs9IFwiYmluYXJ5IHhfVFwiICsgdDMubmFtZSArIFwiX1RcIiArIHQxLm5hbWUgKyBcIlxcblwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vbW9kZWwuYm91bmRzICs9IFwiYmluYXJ5IHhfVFwiICsgdDMubmFtZSArIFwiX1RcIiArIHQyLm5hbWUgKyBcIlxcblwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vbW9kZWwuYm91bmRzICs9IFwiYmluYXJ5IHhfVFwiICsgdDIubmFtZSArIFwiX1RcIiArIHQxLm5hbWUgKyBcIlxcblwiXHJcbiAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgfVxyXG4gICAgICAgfVxyXG5cclxuICAgICAgICAvLyBhdHRyaWJ1dGUgcG9zaXRpb25zIGRldGVybWluZSBjcm9zc2luZ3MgZm9yIG5vbi1zYW1lLXJhbmsgZWRnZXNcclxuICAgICAgICBmb3IgKGxldCBrPTA7IGsgPCB0aGlzLmcubWF4RGVwdGg7IGsrKyl7XHJcbiAgICAgICAgICAgIGxldCBsYXllckVkZ2VzID0gdGhpcy5nLmVkZ2VJbmRleFtrXVxyXG4gICAgICAgICAgICBmb3IgKGxldCBpPTA7IGk8bGF5ZXJFZGdlcy5sZW5ndGg7IGkrKyl7XHJcbiAgICAgICAgICAgICAgICBsZXQgdTF2MSA9IGxheWVyRWRnZXNbaV1cclxuICAgICAgICAgICAgICAgIGZvciAobGV0IGo9MDsgajxsYXllckVkZ2VzLmxlbmd0aDsgaisrKXtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoaT09aikgY29udGludWVcclxuICAgICAgICAgICAgICAgICAgICBsZXQgdTJ2MiA9IGxheWVyRWRnZXNbal1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gbGVhdmUgc2FtZSByYW5rIGVkZ2VzIG91dCBmb3Igbm93XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHUxdjEubGVmdFRhYmxlLmRlcHRoID09IHUxdjEucmlnaHRUYWJsZS5kZXB0aCB8fCB1MnYyLmxlZnRUYWJsZS5kZXB0aCA9PSB1MnYyLnJpZ2h0VGFibGUuZGVwdGgpIGNvbnRpbnVlXHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGxldCB1MSA9IHUxdjEubGVmdEF0dHJpYnV0ZS5uYW1lIFxyXG4gICAgICAgICAgICAgICAgICAgIGxldCB2MSA9IHUxdjEucmlnaHRBdHRyaWJ1dGUubmFtZVxyXG4gICAgICAgICAgICAgICAgICAgIGxldCB1MiA9IHUydjIubGVmdEF0dHJpYnV0ZS5uYW1lXHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IHYyID0gdTJ2Mi5yaWdodEF0dHJpYnV0ZS5uYW1lXHJcblxyXG4gICAgICAgICAgICAgICAgICAgIG1vZGVsLnN1YmplY3RUbyArPSBcImNfXCIgKyB1MSArIHYxICBcclxuICAgICAgICAgICAgICAgICAgICAgICAgKyBcIl9cIiArIHUyICsgdjIgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICsgXCIgKyB4X1wiICsgdTIgKyBcIl9cIiArIHUxIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICArIFwiICsgeF9cIiArIHYxICsgXCJfXCIgKyB2MiBcclxuICAgICAgICAgICAgICAgICAgICAgICAgKyBcIiA+PSAxXFxuXCJcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgbW9kZWwuc3ViamVjdFRvICs9IFwiY19cIiArIHUxICsgdjEgIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICArIFwiX1wiICsgdTIgKyB2MiBcclxuICAgICAgICAgICAgICAgICAgICAgICAgKyBcIiArIHhfXCIgKyB1MSArIFwiX1wiICsgdTIgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICsgXCIgKyB4X1wiICsgdjIgKyBcIl9cIiArIHYxIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICArIFwiID49IDFcXG5cIlxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBzYW1lIHJhbmsgZWRnZXNcclxuICAgICAgICBmb3IgKGxldCBrPTA7IGsgPCB0aGlzLmcubWF4RGVwdGggKyAxOyBrKyspe1xyXG5cclxuICAgICAgICAgICAgbGV0IGxheWVyRWRnZXMgPSB0aGlzLmcuZWRnZUluZGV4W2tdO1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgZm9yIChsZXQgaT0wOyBpPGxheWVyRWRnZXMubGVuZ3RoOyBpKyspe1xyXG4gICAgICAgICAgICAgICAgbGV0IHUxdjEgPSBsYXllckVkZ2VzW2ldXHJcbiAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgIGZvciAobGV0IGo9MDsgajxsYXllckVkZ2VzLmxlbmd0aDsgaisrKXtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgdTJ2MiA9IGxheWVyRWRnZXNbal1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHUxdjEgPT0gdTJ2MikgY29udGludWVcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gaWYgdGhleSBhcmUgYm90aCBzYW1lIHJhbmsgZWRnZXNcclxuICAgICAgICAgICAgICAgICAgICBpZiAodTF2MS5sZWZ0VGFibGUuZGVwdGggPT0gdTF2MS5yaWdodFRhYmxlLmRlcHRoICYmIHUydjIubGVmdFRhYmxlLmRlcHRoID09IHUydjIucmlnaHRUYWJsZS5kZXB0aCl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCB1MSA9IHUxdjEubGVmdEF0dHJpYnV0ZS5uYW1lIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgdjEgPSB1MXYxLnJpZ2h0QXR0cmlidXRlLm5hbWVcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHUyID0gdTJ2Mi5sZWZ0QXR0cmlidXRlLm5hbWVcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHYyID0gdTJ2Mi5yaWdodEF0dHJpYnV0ZS5uYW1lXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIEkgYW0gc3RpbGwgZG91YnRmdWwgYWJvdXQgdGhpcyBuZWVkaW5nIHRvIGJlIGRlY2xhcmVkIGZvciBpbnZlcnRlZCBsZWZ0LXJpZ2h0IGVkZ2VzIG9yIG5vdC4uLlxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgbW9kZWwuc3ViamVjdFRvICs9IFwiY19cIiArIHUxICsgdjEgIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKyBcIl9cIiArIHUyICsgdjIgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICArIFwiICsgeF9cIiArIHUxICsgXCJfXCIgKyB1MiBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICsgXCIgKyB4X1wiICsgdjEgKyBcIl9cIiArIHYyIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKyBcIiArIHhfXCIgKyB1MiArIFwiX1wiICsgdjEgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICArIFwiID49IDFcXG5cIlxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgbW9kZWwuc3ViamVjdFRvICs9IFwiY19cIiArIHUxICsgdjEgIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKyBcIl9cIiArIHUyICsgdjIgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICArIFwiICsgeF9cIiArIHUxICsgXCJfXCIgKyB1MiBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICsgXCIgKyB4X1wiICsgdjEgKyBcIl9cIiArIHYyIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKyBcIiArIHhfXCIgKyB2MiArIFwiX1wiICsgdTEgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICArIFwiID49IDFcXG5cIlxyXG5cclxuICAgICAgICAgICAgICAgICAgICAvLyBpZiB1MXYxIGlzIHRoZSBzYW1lIHJhbmsgZWRnZSBhbmQgdGhlIG90aGVyIGlzIG5vdFxyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy5pc1NhbWVSYW5rRWRnZSh1MXYxKSAmJiAhdGhpcy5pc1NhbWVSYW5rRWRnZSh1MnYyKSl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCB1MSA9IHUxdjEubGVmdEF0dHJpYnV0ZS5uYW1lIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgdjEgPSB1MXYxLnJpZ2h0QXR0cmlidXRlLm5hbWVcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHUyID0gdTJ2Mi5sZWZ0QXR0cmlidXRlLm5hbWVcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHYyID0gdTJ2Mi5yaWdodEF0dHJpYnV0ZS5uYW1lXHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBtb2RlbC5zdWJqZWN0VG8gKz0gXCJjX1wiICsgdTEgKyB2MSAgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICArIFwiX1wiICsgdTIgKyB2MiBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICsgXCIgKyB4X1wiICsgdTIgKyBcIl9cIiArIHUxIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKyBcIiArIHhfXCIgKyB2MSArIFwiX1wiICsgdTIgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICArIFwiID49IDFcXG5cIlxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgbW9kZWwuc3ViamVjdFRvICs9IFwiY19cIiArIHUxICsgdjEgIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKyBcIl9cIiArIHUyICsgdjIgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICArIFwiICsgeF9cIiArIHUyICsgXCJfXCIgKyB2MSBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICsgXCIgKyB4X1wiICsgdTEgKyBcIl9cIiArIHUyIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKyBcIiA+PSAxXFxuXCJcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgfVxyXG5cclxuICAgIGlzU2FtZVJhbmtFZGdlKGVkZ2Upe1xyXG4gICAgICAgIHJldHVybiBlZGdlLmxlZnRUYWJsZS5kZXB0aCA9PSBlZGdlLnJpZ2h0VGFibGUuZGVwdGhcclxuICAgIH1cclxuXHJcbiAgICBtb2RlbFRvU3RyaW5nKG1vZGVsKXtcclxuICAgICAgICByZXR1cm4gbW9kZWwubWluaW1pemUgKyBtb2RlbC5zdWJqZWN0VG8gKyBtb2RlbC5ib3VuZHMgKyAnXFxuRW5kXFxuJ1xyXG4gICAgfVxyXG5cclxuICAgIGFwcGx5X3NvbHV0aW9uKHNvbHV0aW9uKXtcclxuICAgICAgICAvL2NvbnNvbGUubG9nKHNvbHV0aW9uKVxyXG4gICAgICAgIGZvciAobGV0IGk9MDsgaTx0aGlzLmcubWF4RGVwdGggKyAxOyBpKyspe1xyXG4gICAgICAgICAgICBsZXQgbGF5ZXJUYWJsZXMgPSB0aGlzLmcudGFibGVJbmRleFtpXTtcclxuXHJcbiAgICAgICAgICAgIGxheWVyVGFibGVzLnNvcnQoKGEsIGIpID0+IHtcclxuICAgICAgICAgICAgICAgIC8vY29uc29sZS5sb2coYS5uYW1lLCBiLm5hbWUsIHNvbHV0aW9uW1wieF9UXCIgKyBhLm5hbWUgKyBcIl9UXCIgKyBiLm5hbWVdLCBzb2x1dGlvbltcInhfVFwiICsgYi5uYW1lICsgXCJfVFwiICsgYS5uYW1lXSlcclxuICAgICAgICAgICAgICAgIGlmIChzb2x1dGlvbltcInhfVFwiICsgYS5uYW1lICsgXCJfVFwiICsgYi5uYW1lXSA9PSAwKSByZXR1cm4gMVxyXG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoc29sdXRpb25bXCJ4X1RcIiArIGEubmFtZSArIFwiX1RcIiArIGIubmFtZV0gPT0gMSkgcmV0dXJuIC0xXHJcbiAgICAgICAgICAgICAgICBlbHNlIGlmIChzb2x1dGlvbltcInhfVFwiICsgYi5uYW1lICsgXCJfVFwiICsgYS5uYW1lXSA9PSAxKSByZXR1cm4gMVxyXG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoc29sdXRpb25bXCJ4X1RcIiArIGIubmFtZSArIFwiX1RcIiArIGEubmFtZV0gPT0gMCkgcmV0dXJuIC0xXHJcbiAgICAgICAgICAgIH0pXHJcblxyXG4gICAgICAgICAgICBmb3IgKGxldCBrIGluIGxheWVyVGFibGVzKXtcclxuICAgICAgICAgICAgICAgIGxheWVyVGFibGVzW2tdLndlaWdodCA9IGs7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGZvciAobGV0IHRhYmxlIG9mIGxheWVyVGFibGVzKXtcclxuICAgICAgICAgICAgICAgIHRhYmxlLmF0dHJpYnV0ZXMuc29ydCgoYSwgYikgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vaWYgKGIudGFibGUubmFtZSA9PSBcIlQ4eTRcIikgY29uc29sZS5sb2coYS5uYW1lLCBiLm5hbWUsIHNvbHV0aW9uW1wieF9cIiArIGIubmFtZSArIFwiX1wiICsgYS5uYW1lXSlcclxuICAgICAgICAgICAgICAgICAgICBpZiAoc29sdXRpb25bXCJ4X1wiICsgYS5uYW1lICsgXCJfXCIgKyBiLm5hbWVdID09IDApIHJldHVybiAxXHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAoc29sdXRpb25bXCJ4X1wiICsgYS5uYW1lICsgXCJfXCIgKyBiLm5hbWVdID09IDEpIHJldHVybiAtMVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKHNvbHV0aW9uW1wieF9cIiArIGIubmFtZSArIFwiX1wiICsgYS5uYW1lXSA9PSAxKSByZXR1cm4gMVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKHNvbHV0aW9uW1wieF9cIiArIGIubmFtZSArIFwiX1wiICsgYS5uYW1lXSA9PSAwKSByZXR1cm4gLTFcclxuICAgICAgICAgICAgICAgIH0pXHJcblxyXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgaj0wOyBqPHRhYmxlLmF0dHJpYnV0ZXMubGVuZ3RoOyBqKyspe1xyXG4gICAgICAgICAgICAgICAgICAgIHRhYmxlLmF0dHJpYnV0ZXNbal0ud2VpZ2h0ID0gajtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxufSIsImNsYXNzIFN3ZWVwIHtcclxuICAgIGNvbnN0cnVjdG9yKGcpe1xyXG4gICAgICAgIHRoaXMuZyA9IGc7XHJcbiAgICAgICAgdGhpcy5lbGFwc2VkVGltZSA9IDA7XHJcbiAgICB9XHJcblxyXG4gICAgYXJyYW5nZSgpe1xyXG4gICAgICAgIGxldCBzdGFydFRpbWUgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKTtcclxuXHJcbiAgICAgICAgdGhpcy5nLnNldEV4YWN0V2VpZ2h0cygpO1xyXG4gICAgICAgIHRoaXMuc3dlZXBSaWdodCgpO1xyXG4gICAgICAgIHRoaXMuc3dlZXBMZWZ0KCk7XHJcblxyXG4gICAgICAgIHRoaXMuZWxhcHNlZFRpbWUgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKSAtIHN0YXJ0VGltZTtcclxuICAgIH1cclxuXHJcbiAgICBzd2VlcFJpZ2h0KCl7XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDE7IGkgPD0gdGhpcy5nLm1heERlcHRoOyBpKyspe1xyXG4gICAgICAgICAgICBsZXQgbGF5ZXJUYWJsZXMgPSB0aGlzLmcudGFibGVJbmRleFtpXTtcclxuICAgICAgICAgICAgbGV0IGNyb3NzZXMsIGN1ckNyb3NzZXM7XHJcblxyXG4gICAgICAgICAgICBkbyB7XHJcbiAgICAgICAgICAgICAgICBjcm9zc2VzID0gdGhpcy5nLmdldEVkZ2VDcm9zc2luZ3NBdERlcHRoKGktMSkgKyB0aGlzLmcuZ2V0RWRnZUNyb3NzaW5nc0F0RGVwdGgoaSk7XHJcbiAgICAgICAgICAgICAgICBjdXJDcm9zc2VzID0gY3Jvc3NlcztcclxuXHJcbiAgICAgICAgICAgICAgICBkbyB7XHJcbiAgICAgICAgICAgICAgICAgICAgY3Jvc3NlcyA9IHRoaXMuZy5nZXRFZGdlQ3Jvc3NpbmdzQXREZXB0aChpLTEpICsgdGhpcy5nLmdldEVkZ2VDcm9zc2luZ3NBdERlcHRoKGkpO1xyXG4gICAgICAgICAgICAgICAgICAgIGN1ckNyb3NzZXMgPSBjcm9zc2VzO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBqPTA7IGo8bGF5ZXJUYWJsZXMubGVuZ3RoIC0gMTsgaisrKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHQxID0gbGF5ZXJUYWJsZXNbal07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCB0MiA9IGxheWVyVGFibGVzW2orMV07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc3dhcCh0MSwgdDIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgbmV3Q3Jvc3NlcyA9IHRoaXMuZy5nZXRFZGdlQ3Jvc3NpbmdzQXREZXB0aChpLTEpICsgdGhpcy5nLmdldEVkZ2VDcm9zc2luZ3NBdERlcHRoKGkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoY3VyQ3Jvc3NlcyA+IG5ld0Nyb3NzZXMpe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY3VyQ3Jvc3NlcyA9IG5ld0Nyb3NzZXNcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxheWVyVGFibGVzW2pdID0gdDI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYXllclRhYmxlc1tqKzFdID0gdDE7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB0aGlzLnN3YXAodDEsIHQyKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgfSB3aGlsZSAoY3Jvc3NlcyA+IGN1ckNyb3NzZXMpO1xyXG5cclxuICAgICAgICAgICAgICAgIGRvIHtcclxuICAgICAgICAgICAgICAgICAgICBjcm9zc2VzID0gdGhpcy5nLmdldEVkZ2VDcm9zc2luZ3NBdERlcHRoKGktMSkgKyB0aGlzLmcuZ2V0RWRnZUNyb3NzaW5nc0F0RGVwdGgoaSk7XHJcbiAgICAgICAgICAgICAgICAgICAgY3VyQ3Jvc3NlcyA9IGNyb3NzZXM7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGZvciAobGV0IGo9MDsgajxsYXllclRhYmxlcy5sZW5ndGg7IGorKyl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBhdHRycyA9IGxheWVyVGFibGVzW2pdLmF0dHJpYnV0ZXM7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBrPTA7IGs8YXR0cnMubGVuZ3RoIC0xOyBrKyspe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGExID0gYXR0cnNba11cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBhMiA9IGF0dHJzW2srMV1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc3dhcChhMSwgYTIpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBuZXdDcm9zc2VzID0gdGhpcy5nLmdldEVkZ2VDcm9zc2luZ3NBdERlcHRoKGktMSkgKyB0aGlzLmcuZ2V0RWRnZUNyb3NzaW5nc0F0RGVwdGgoaSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGN1ckNyb3NzZXMgPiBuZXdDcm9zc2VzKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdXJDcm9zc2VzID0gbmV3Q3Jvc3NlcztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhdHRyc1trXSA9IGEyO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJzW2srMV0gPSBhMTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB0aGlzLnN3YXAoYTEsIGEyKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICB9IHdoaWxlIChjcm9zc2VzID4gY3VyQ3Jvc3Nlcyk7XHJcblxyXG4gICAgICAgICAgICB9IHdoaWxlIChjcm9zc2VzID4gY3VyQ3Jvc3Nlcyk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHN3ZWVwTGVmdCgpe1xyXG4gICAgICAgIGZvciAobGV0IGk9dGhpcy5nLm1heERlcHRoOyBpPj0yOyBpLS0pe1xyXG4gICAgICAgICAgICBsZXQgbGF5ZXJUYWJsZXMgPSB0aGlzLmcudGFibGVJbmRleFtpLTFdO1xyXG4gICAgICAgICAgICBsZXQgY3Jvc3NlcywgY3VyQ3Jvc3NlcztcclxuXHJcbiAgICAgICAgICAgIGRvIHtcclxuICAgICAgICAgICAgICAgIGNyb3NzZXMgPSB0aGlzLmcuZ2V0RWRnZUNyb3NzaW5nc0F0RGVwdGgoaS0xKSArIHRoaXMuZy5nZXRFZGdlQ3Jvc3NpbmdzQXREZXB0aChpLTIpO1xyXG4gICAgICAgICAgICAgICAgY3VyQ3Jvc3NlcyA9IGNyb3NzZXM7XHJcblxyXG4gICAgICAgICAgICAgICAgZG8ge1xyXG4gICAgICAgICAgICAgICAgICAgIGNyb3NzZXMgPSB0aGlzLmcuZ2V0RWRnZUNyb3NzaW5nc0F0RGVwdGgoaS0xKSArIHRoaXMuZy5nZXRFZGdlQ3Jvc3NpbmdzQXREZXB0aChpLTIpO1xyXG4gICAgICAgICAgICAgICAgICAgIGN1ckNyb3NzZXMgPSBjcm9zc2VzO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBqPTA7IGo8bGF5ZXJUYWJsZXMubGVuZ3RoIC0gMTsgaisrKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHQxID0gbGF5ZXJUYWJsZXNbal07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCB0MiA9IGxheWVyVGFibGVzW2orMV07XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnN3YXAodDEsIHQyKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IG5ld0Nyb3NzZXMgPSB0aGlzLmcuZ2V0RWRnZUNyb3NzaW5nc0F0RGVwdGgoaS0xKSArIHRoaXMuZy5nZXRFZGdlQ3Jvc3NpbmdzQXREZXB0aChpLTIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoY3VyQ3Jvc3NlcyA+IG5ld0Nyb3NzZXMpe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY3VyQ3Jvc3NlcyA9IG5ld0Nyb3NzZXM7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYXllclRhYmxlc1tqXSA9IHQyO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGF5ZXJUYWJsZXNbaisxXSA9IHQxO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgdGhpcy5zd2FwKHQxLCB0Mik7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSB3aGlsZSAoY3Jvc3NlcyA+IGN1ckNyb3NzZXMpO1xyXG5cclxuICAgICAgICAgICAgICAgIGRvIHtcclxuICAgICAgICAgICAgICAgICAgICBjcm9zc2VzID0gdGhpcy5nLmdldEVkZ2VDcm9zc2luZ3NBdERlcHRoKGktMSkgKyB0aGlzLmcuZ2V0RWRnZUNyb3NzaW5nc0F0RGVwdGgoaS0yKTtcclxuICAgICAgICAgICAgICAgICAgICBjdXJDcm9zc2VzID0gY3Jvc3NlcztcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgaj0wOyBqPGxheWVyVGFibGVzLmxlbmd0aDsgaisrKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGF0dHJzID0gbGF5ZXJUYWJsZXNbal0uYXR0cmlidXRlcztcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAobGV0IGs9MDsgazxhdHRycy5sZW5ndGggLTE7IGsrKyl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgYTEgPSBhdHRyc1trXVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGEyID0gYXR0cnNbaysxXVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zd2FwKGExLCBhMik7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IG5ld0Nyb3NzZXMgPSB0aGlzLmcuZ2V0RWRnZUNyb3NzaW5nc0F0RGVwdGgoaS0xKSArIHRoaXMuZy5nZXRFZGdlQ3Jvc3NpbmdzQXREZXB0aChpLTIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjdXJDcm9zc2VzID4gbmV3Q3Jvc3Nlcyl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY3VyQ3Jvc3NlcyA9IG5ld0Nyb3NzZXM7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXR0cnNba10gPSBhMjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhdHRyc1trKzFdID0gYTE7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgdGhpcy5zd2FwKGExLCBhMik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9IHdoaWxlIChjcm9zc2VzID4gY3VyQ3Jvc3Nlcyk7XHJcblxyXG4gICAgICAgICAgICB9IHdoaWxlIChjcm9zc2VzID4gY3VyQ3Jvc3Nlcyk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHN3YXAodzEsIHcyKXtcclxuICAgICAgICBsZXQgdG1wdyA9IHcxLndlaWdodDtcclxuICAgICAgICB3MS53ZWlnaHQgPSB3Mi53ZWlnaHQ7XHJcbiAgICAgICAgdzIud2VpZ2h0ID0gdG1wdztcclxuICAgIH1cclxufSIsImNsYXNzIFRhYmxlIHtcclxuICAgIGNvbnN0cnVjdG9yKG5hbWUsIGhlYWRlciwgbWFpbiwgZGVwdGgsIHR5cGU9dW5kZWZpbmVkKXtcclxuICAgICAgICB0aGlzLm5hbWUgPSBuYW1lO1xyXG4gICAgICAgIHRoaXMuaGVhZGVyID0gaGVhZGVyO1xyXG4gICAgICAgIHRoaXMubWFpbiA9IG1haW47XHJcbiAgICAgICAgdGhpcy5kZXB0aCA9IGRlcHRoO1xyXG4gICAgICAgIHRoaXMuYXR0cmlidXRlcyA9IFtdO1xyXG4gICAgICAgIHRoaXMuYXR0ck1hcHMgPSBbXTtcclxuICAgICAgICB0aGlzLndlaWdodCA9IDA7XHJcbiAgICAgICAgdGhpcy5ncm91cCA9IHVuZGVmaW5lZDtcclxuICAgICAgICB0aGlzLmdyb3VwcyA9IFtdO1xyXG4gICAgICAgIHRoaXMuZ3JhcGggPSB1bmRlZmluZWQ7XHJcbiAgICAgICAgdGhpcy52aXNpYmlsaXR5ID0gJ3Zpc2libGUnO1xyXG4gICAgICAgIHRoaXMudmVydGljYWxBdHRyT2Zmc2V0ID0gMDtcclxuICAgICAgICB0aGlzLmlkID0gbmFtZTtcclxuICAgICAgICB0aGlzLnR5cGUgPSB0eXBlO1xyXG4gICAgfVxyXG5cclxuICAgIGFkZEF0dHJpYnV0ZShhdHRyaWJ1dGUpe1xyXG4gICAgICAgIHRoaXMuYXR0cmlidXRlcy5wdXNoKG5ldyBBdHRyaWJ1dGUodGhpcywgYXR0cmlidXRlKSlcclxuICAgIH1cclxuXHJcbiAgICBjb21wYXJlVG8ob3RoZXJUYWJsZSl7XHJcbiAgICAgICAgaWYgKHRoaXMuZGVwdGggPiBvdGhlclRhYmxlLmRlcHRoKSByZXR1cm4gLTE7XHJcbiAgICAgICAgZWxzZSBpZiAodGhpcy5kZXB0aCA8IG90aGVyVGFibGUuZGVwdGgpIHJldHVybiAxO1xyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBpZiAodGhpcy53ZWlnaHQgPCBvdGhlclRhYmxlLndlaWdodCkgcmV0dXJuIDE7XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKHRoaXMud2VpZ2h0ID4gb3RoZXJUYWJsZS53ZWlnaHQpIHJldHVybiAtMTtcclxuICAgICAgICAgICAgZWxzZSByZXR1cm4gMDtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn0iLCJsZXQgZmluZF9uZWdhdGl2ZV92ZXJ0aWNhbF9zcGFjZSA9IChnKSA9PiB7XG4gICAgbGV0IG1pblZhbCA9IEluZmluaXR5O1xuXG4gICAgZm9yIChkIG9mIGcudGFibGVzKXtcbiAgICAgICAgbGV0IHRtcHZhbCA9IGcudGFibGVJbmRleFtkLmRlcHRoXS5pbmRleE9mKGQpICogdGFibGVfdmVydF9zcGFjZSArIGQudmVydGljYWxBdHRyT2Zmc2V0ICogYXR0cl9oZWlnaHQ7XG4gICAgICAgIGlmICh0bXB2YWwgPCBtaW5WYWwpIG1pblZhbCA9IHRtcHZhbDtcbiAgICB9XG5cbiAgICByZXR1cm4gbWluVmFsXG59XG5cbmxldCBkcmF3R3JhcGggPSAoc3ZnLCBnLCBhbGdvcml0aG0gPSB1bmRlZmluZWQpID0+IHtcbiAgICBsZXQgbGluZSA9IGQzLmxpbmUoKVxuICAgICAgICAuY3VydmUoZDMuY3VydmVCYXNpcyk7XG5cbiAgICBsZXQgc3RyYWlnaHRsaW5lID0gZDMubGluZSgpXG5cbiAgICB0YWJsZV92ZXJ0X3NwYWNlID0gZy5iYXNlUm93RGlzdGFuY2UgKiBhdHRyX2hlaWdodFxuXG4gICAgbGV0IG5lZ2F0aXZlX3ZlcnRfc3BhY2UgPSBmaW5kX25lZ2F0aXZlX3ZlcnRpY2FsX3NwYWNlKGcpIC8vIFRPRE86IHRlbXBvcmFyeSBmaXhcblxuICAgIHZpc2cgPSBzdmcuYXBwZW5kKCdnJylcbiAgICAgICAgLmF0dHIoJ3RyYW5zZm9ybScsICd0cmFuc2xhdGUoMjAsICcgKyAoMjAgLSBuZWdhdGl2ZV92ZXJ0X3NwYWNlKSArICcpJylcblxuICAgIHN2Zy5hcHBlbmQoJ2RlZnMnKVxuICAgICAgICAuYXBwZW5kKCdtYXJrZXInKVxuICAgICAgICAuYXR0cignaWQnLCAnYXJyb3cnKVxuICAgICAgICAuYXR0cigndmlld0JveCcsIFswLCAwLCAxMCwgMTBdKVxuICAgICAgICAuYXR0cigncmVmWCcsIDUpXG4gICAgICAgIC5hdHRyKCdyZWZZJywgNSlcbiAgICAgICAgLmF0dHIoJ21hcmtlcldpZHRoJywgMTApXG4gICAgICAgIC5hdHRyKCdtYXJrZXJIZWlnaHQnLCAxMClcbiAgICAgICAgLmF0dHIoJ29yaWVudCcsICdhdXRvLXN0YXJ0LXJldmVyc2UnKVxuICAgICAgICAuYXBwZW5kKCdwYXRoJylcbiAgICAgICAgLmF0dHIoJ2QnLCBkMy5saW5lKCkoW1swLCAwXSwgWzAsIDEwXSwgWzEwLCA1XV0pKVxuICAgICAgICAuYXR0cignc3Ryb2tlJywgJ2JsYWNrJyk7XG5cbiAgICAvLyB0ZW1wIGdyaWQgaW5kaWNhdG9yXG4gICAgZm9yIChsZXQgaSBpbiBbIC4uLiBBcnJheSgxMCkua2V5cygpXSl7XG4gICAgICAgIHZpc2cuYXBwZW5kKCdwYXRoJylcbiAgICAgICAgICAgIC5hdHRyKCdzdHJva2Utd2lkdGgnLCAxKVxuICAgICAgICAgICAgLmF0dHIoJ3N0cm9rZScsICcjY2NjJylcbiAgICAgICAgICAgIC5hdHRyKCdmaWxsJywgJ25vbmUnKVxuICAgICAgICAgICAgLnN0eWxlKFwic3Ryb2tlLWRhc2hhcnJheVwiLCAoXCI1LCAzXCIpKVxuICAgICAgICAgICAgLmF0dHIoJ2QnLCBzdHJhaWdodGxpbmUoW1swLCBhdHRyX2hlaWdodCpnLmJhc2VSb3dEaXN0YW5jZSppXSwgWzEwMDAsIGF0dHJfaGVpZ2h0KmcuYmFzZVJvd0Rpc3RhbmNlKmldXSkpXG4gICAgfVxuXG4gICAgLy8gKioqKipcbiAgICAvLyB0YWJsZXNcbiAgICAvLyAqKioqKlxuICAgIHRhYmxlZ3JvdXBzID0gdmlzZy5zZWxlY3RBbGwoXCIudGFibGVzXCIpXG4gICAgICAgIC5kYXRhKGcudGFibGVzKVxuICAgICAgICAuZW50ZXIoKVxuICAgICAgICAuYXBwZW5kKCdnJylcbiAgICAgICAgLmF0dHIoJ2NsYXNzJywgJ3RhYmxlZ3JvdXAnKVxuICAgICAgICAuYXR0cignaWQnLCBkID0+ICd0YWJsZWdyb3VwXycgKyBkLm5hbWUpXG4gICAgICAgIC5zdHlsZSgndmlzaWJpbGl0eScsIGQgPT4gZC52aXNpYmlsaXR5KVxuICAgICAgICAuYXR0cigndHJhbnNmb3JtJywgZCA9PiBcbiAgICAgICAgICAgIFwidHJhbnNsYXRlKFwiICsgKGQuZGVwdGgqZGVwdGhfZGlzdGFuY2UpICsgXCIsXCIgXG4gICAgICAgICAgICArIChnLnRhYmxlSW5kZXhbZC5kZXB0aF0uaW5kZXhPZihkKSAqIHRhYmxlX3ZlcnRfc3BhY2UgKyBkLnZlcnRpY2FsQXR0ck9mZnNldCAqIGF0dHJfaGVpZ2h0KSArIFwiKVwiIClcblxuICAgIHRhYmxlZ3JvdXBzLmFwcGVuZCgncmVjdCcpXG4gICAgICAgIC5hdHRyKCd3aWR0aCcsIHRhYmxlX3dpZHRoKVxuICAgICAgICAuYXR0cignaGVpZ2h0JywgZCA9PiBkLmF0dHJpYnV0ZXMubGVuZ3RoICogYXR0cl9oZWlnaHQgKyBoZWFkZXJfaGVpZ2h0KSAgXG4gICAgICAgIC5hdHRyKCdmaWxsJywgZCA9PiBkLnR5cGUgPT0gXCJncm91cGhlYWRlclwiPyBcIiNlZWVcIiA6ICdibGFjaycpXG4gICAgICAgIC5hdHRyKCdzdHJva2UnLCAnZ3JheScpXG4gICAgICAgIC5vbignY2xpY2snLCBkID0+IGNvbnNvbGUubG9nKGQpKVxuXG4gICAgdGFibGVncm91cHMuYXBwZW5kKCd0ZXh0JylcbiAgICAgICAgLmF0dHIoJ3gnLCB0YWJsZV93aWR0aC8yKVxuICAgICAgICAuYXR0cigneScsIGF0dHJfaGVpZ2h0LzIgKyA1KVxuICAgICAgICAuYXR0cigndGV4dC1hbmNob3InLCAnbWlkZGxlJylcbiAgICAgICAgLmF0dHIoJ2ZpbGwnLCBkID0+IGQudHlwZSA9PSBcImdyb3VwaGVhZGVyXCI/IFwiYmxhY2tcIiA6ICd3aGl0ZScpXG4gICAgICAgIC5hdHRyKCdmb250LXNpemUnLCAnMC43ZW0nKVxuICAgICAgICAuYXR0cihcImZvbnQtZmFtaWx5XCIsIFwiQXJpYWxcIilcbiAgICAgICAgLnRleHQoZCA9PiBkLmhlYWRlciAvKisgXCIgdzpcIiArIGQud2VpZ2h0Ki8pXG4gICAgXG4gICAgLy8gKioqKipcbiAgICAvLyBhdHRyaWJ1dGVzXG4gICAgLy8gKioqKipcbiAgICBhdHRyZ3JvdXBzID0gdGFibGVncm91cHMuc2VsZWN0QWxsKCcuYXR0cnMnKVxuICAgICAgICAuZGF0YShkID0+IGQuYXR0cmlidXRlcylcbiAgICAgICAgLmVudGVyKClcbiAgICAgICAgLmFwcGVuZCgnZycpXG4gICAgICAgIC5hdHRyKCd0cmFuc2Zvcm0nLCAoZCwgaSkgPT4gXCJ0cmFuc2xhdGUoMCwgXCIgKyAoaGVhZGVyX2hlaWdodCArIChpKSphdHRyX2hlaWdodCkgKyBcIilcIilcbiAgICAgICAgXG4gICAgYXR0cmdyb3Vwcy5hcHBlbmQoXCJyZWN0XCIpXG4gICAgICAgIC5hdHRyKFwid2lkdGhcIiwgdGFibGVfd2lkdGgpXG4gICAgICAgIC5hdHRyKFwiaGVpZ2h0XCIsIGF0dHJfaGVpZ2h0KVxuICAgICAgICAuYXR0cihcImZpbGxcIiwgZCA9PiBkLnR5cGUgPT0gXCJjb25zdHJhaW50XCI/IFwiI0ZGRkY3M1wiIDogXCIjY2NjXCIpXG4gICAgICAgIC5hdHRyKFwic3Ryb2tlXCIsIFwid2hpdGVcIilcbiAgICAgICAgLmF0dHIoXCJzdHJva2Utd2lkdGhcIiwgMilcbiAgICAgICAgLm9uKCdjbGljaycsIGQgPT4gY29uc29sZS5sb2coZCkpXG5cbiAgICBhdHRyZ3JvdXBzLmFwcGVuZCgndGV4dCcpXG4gICAgICAgIC5hdHRyKCd4JywgdGFibGVfd2lkdGgvMilcbiAgICAgICAgLmF0dHIoJ3knLCBhdHRyX2hlaWdodC8yICsgMylcbiAgICAgICAgLmF0dHIoJ3RleHQtYW5jaG9yJywgJ21pZGRsZScpXG4gICAgICAgIC5hdHRyKCdmb250LXNpemUnLCAnMC43ZW0nKVxuICAgICAgICAuYXR0cihcImZvbnQtZmFtaWx5XCIsIFwiQXJpYWxcIilcbiAgICAgICAgLnRleHQoZCA9PiBkLmF0dHIgLyorIFwiIHc6XCIgKyBkLndlaWdodCovKSBcblxuICAgIGxldCBnZXRfMXN0X2Nvb3JkID0gKGQpID0+IFxuICAgICAgICBbZC5sZWZ0VGFibGUuZGVwdGggKiBkZXB0aF9kaXN0YW5jZSArIHRhYmxlX3dpZHRoLFxuICAgICAgICBkLmxlZnRUYWJsZS5hdHRyaWJ1dGVzLmluZGV4T2YoZC5sZWZ0QXR0cmlidXRlKSphdHRyX2hlaWdodCArIGhlYWRlcl9oZWlnaHQgKyBhdHRyX2hlaWdodC8yICsgZy50YWJsZUluZGV4W2QubGVmdFRhYmxlLmRlcHRoXS5pbmRleE9mKGQubGVmdFRhYmxlKSp0YWJsZV92ZXJ0X3NwYWNlICsgZC5sZWZ0VGFibGUudmVydGljYWxBdHRyT2Zmc2V0KmF0dHJfaGVpZ2h0XVxuICAgXG4gICAgbGV0IGdldF8ybmRfY29vcmQgPSAoZCkgPT4ge1xuICAgICAgICBpZiAoZC5sZWZ0VGFibGUuZGVwdGggIT0gZC5yaWdodFRhYmxlLmRlcHRoKVxuICAgICAgICAgICAgcmV0dXJuIFtkLnJpZ2h0VGFibGUuZGVwdGggKiBkZXB0aF9kaXN0YW5jZSwgXG4gICAgICAgICAgICAgICAgZC5yaWdodFRhYmxlLmF0dHJpYnV0ZXMuaW5kZXhPZihkLnJpZ2h0QXR0cmlidXRlKSphdHRyX2hlaWdodCArIGhlYWRlcl9oZWlnaHQgKyBhdHRyX2hlaWdodC8yICsgZy50YWJsZUluZGV4W2QucmlnaHRUYWJsZS5kZXB0aF0uaW5kZXhPZihkLnJpZ2h0VGFibGUpKnRhYmxlX3ZlcnRfc3BhY2UgKyBkLnJpZ2h0VGFibGUudmVydGljYWxBdHRyT2Zmc2V0KmF0dHJfaGVpZ2h0XVxuICAgICAgICBlbHNlIHJldHVybiBbZC5sZWZ0VGFibGUuZGVwdGggKiBkZXB0aF9kaXN0YW5jZSArIHRhYmxlX3dpZHRoLFxuICAgICAgICAgICAgZC5yaWdodFRhYmxlLmF0dHJpYnV0ZXMuaW5kZXhPZihkLnJpZ2h0QXR0cmlidXRlKSphdHRyX2hlaWdodCArIGhlYWRlcl9oZWlnaHQgKyBhdHRyX2hlaWdodC8yICsgZy50YWJsZUluZGV4W2QucmlnaHRUYWJsZS5kZXB0aF0uaW5kZXhPZihkLnJpZ2h0VGFibGUpKnRhYmxlX3ZlcnRfc3BhY2UgKyBkLnJpZ2h0VGFibGUudmVydGljYWxBdHRyT2Zmc2V0KmF0dHJfaGVpZ2h0XSAgICBcbiAgICB9XG5cbiAgICAvLyAqKioqKlxuICAgIC8vIGdyb3Vwc1xuICAgIC8vICoqKioqXG4gICAgZy51cGRhdGVHcm91cENvb3JkcygpXG4gICAgdmlzZy5zZWxlY3RBbGwoJy5ncm91cHJlY3RzJykgXG4gICAgICAgIC5kYXRhKGcuZ3JvdXBzKVxuICAgICAgICAuZW50ZXIoKVxuICAgICAgICAuYXBwZW5kKCdwYXRoJylcbiAgICAgICAgLmF0dHIoJ2NsYXNzJywgJ2dyb3VwbGluZXMnKVxuICAgICAgICAuYXR0cignc3Ryb2tlLXdpZHRoJywgMilcbiAgICAgICAgLmF0dHIoJ3N0cm9rZScsICdibGFjaycpXG4gICAgICAgIC5hdHRyKCdmaWxsJywgJ25vbmUnKVxuICAgICAgICAuc3R5bGUoXCJzdHJva2UtZGFzaGFycmF5XCIsIChcIjUsIDNcIikpXG4gICAgICAgIC5hdHRyKCdkJywgZCA9PiB7IHJldHVybiBzdHJhaWdodGxpbmUoZC5jb29yZHMpIH0pXG5cblxuICAgIC8vICoqKioqXG4gICAgLy8gZWRnZXNcbiAgICAvLyAqKioqKlxuICAgIGVkZ2VzID0gdmlzZy5zZWxlY3RBbGwoJy5lZGdlcycpXG4gICAgICAgIC5kYXRhKGcuZWRnZXMpXG4gICAgICAgIC5lbnRlcigpXG4gICAgICAgIC5hcHBlbmQoJ3BhdGgnKVxuICAgICAgICAuYXR0cignc3Ryb2tlJywgJ2JsYWNrJylcbiAgICAgICAgLmF0dHIoJ2ZpbGwnLCAnbm9uZScpXG4gICAgICAgIC5hdHRyKCdtYXJrZXItZW5kJywgZCA9PiBkLnR5cGUgPT0gXCJkaXJlY3RlZFwiPyAndXJsKCNhcnJvdyknIDogXCJcIilcbiAgICAgICAgLmF0dHIoJ2QnLCBkID0+IHtcbiAgICAgICAgICAgIGZpcnN0ID0gZ2V0XzFzdF9jb29yZChkKVxuICAgICAgICAgICAgc2Vjb25kID0gZ2V0XzJuZF9jb29yZChkKVxuICAgICAgICAgICAgcmV0dXJuIGxpbmUoXG4gICAgICAgICAgICAgICAgW2ZpcnN0LCBcbiAgICAgICAgICAgICAgICBbZmlyc3RbMF0gKyBkZXB0aF9kaXN0YW5jZSowLjIsIGZpcnN0WzFdXSxcbiAgICAgICAgICAgICAgICBbc2Vjb25kWzBdICsgKGQubGVmdFRhYmxlLmRlcHRoID09IGQucmlnaHRUYWJsZS5kZXB0aCA/IDEgOiAtMSkqZGVwdGhfZGlzdGFuY2UqMC4yLCBzZWNvbmRbMV1dLFxuICAgICAgICAgICAgICAgIHNlY29uZF1cbiAgICAgICAgICAgIClcbiAgICAgICAgfSlcblxuICAgIGVkZ2VMYWJlbHMgPSB2aXNnLnNlbGVjdEFsbCgnLmVkZ2VMYWJlbHMnKVxuICAgICAgICAuZGF0YShnLmVkZ2VzLmZpbHRlcihlID0+IGUubGFiZWwgIT0gdW5kZWZpbmVkKSlcbiAgICAgICAgLmVudGVyKClcbiAgICAgICAgLmFwcGVuZCgndGV4dCcpXG4gICAgICAgIC50ZXh0KGUgPT4gZS5sYWJlbClcbiAgICAgICAgLnN0eWxlKCdmb250LXNpemUnLCAnc21hbGwnKVxuICAgICAgICAuc3R5bGUoJ3RleHQtYW5jaG9yJywgJ21pZGRsZScpXG4gICAgICAgIC5hdHRyKCd0cmFuc2Zvcm0nLCBkID0+IHtcbiAgICAgICAgICAgIGZpcnN0ID0gZ2V0XzFzdF9jb29yZChkKVxuICAgICAgICAgICAgc2Vjb25kID0gZ2V0XzJuZF9jb29yZChkKVxuICAgICAgICAgICAgcmV0dXJuICd0cmFuc2xhdGUoJyArIChmaXJzdFswXS8yICsgc2Vjb25kWzBdLzIgKyAoZC5sZWZ0VGFibGUuZGVwdGggPT0gZC5yaWdodFRhYmxlLmRlcHRoID8gMSA6IDApKmRlcHRoX2Rpc3RhbmNlKjAuMTYpICsgJywnICsgKC0yICsgZmlyc3RbMV0vMiArIHNlY29uZFsxXS8yKSArICcpJztcbiAgICAgICAgfSlcblxuICAgIGQzLnNlbGVjdChzdmcubm9kZSgpLnBhcmVudE5vZGUpXG4gICAgICAgIC5hcHBlbmQoJ2RpdicpLmFwcGVuZCgndGV4dCcpXG4gICAgICAgIC50ZXh0KCdjcm9zc2luZ3M6ICcgKyBnLmdldEVkZ2VDcm9zc2luZ3MoKSArICcsIHRhYmxlczogJyArIGcudGFibGVzLmxlbmd0aCArICcsIGVkZ2VzOiAnICsgZy5lZGdlcy5sZW5ndGgpXG4gICAgICAgIC5zdHlsZSgnZm9udC1mYW1pbHknLCAnQXJpYWwnKVxuICAgICAgICAuYXR0cignY2xhc3MnLCAnY3Jvc3NpbmdfY291bnQnKVxuXG4gICAgaWYgKGFsZ29yaXRobSAhPSB1bmRlZmluZWQgJiYgYWxnb3JpdGhtLmVsYXBzZWRUaW1lICE9IHVuZGVmaW5lZCl7XG4gICAgICAgIGQzLnNlbGVjdChzdmcubm9kZSgpLnBhcmVudE5vZGUpXG4gICAgICAgICAgICAuYXBwZW5kKCdkaXYnKS5hcHBlbmQoJ3RleHQnKVxuICAgICAgICAgICAgLnRleHQoJ3RpbWU6ICcgKyBhbGdvcml0aG0uZWxhcHNlZFRpbWUgKyAnbXMnKVxuICAgICAgICAgICAgLnN0eWxlKCdmb250LWZhbWlseScsICdBcmlhbCcpXG4gICAgICAgICAgICAuYXR0cignY2xhc3MnLCAnY3Jvc3NpbmdfY291bnQnKVxuXG4gICAgICAgIGlmIChhbGdvcml0aG0uaXRlcmF0aW9ucyAhPSB1bmRlZmluZWQpe1xuXG4gICAgICAgICAgICBkMy5zZWxlY3Qoc3ZnLm5vZGUoKS5wYXJlbnROb2RlKVxuICAgICAgICAgICAgICAgIC5hcHBlbmQoJ3RleHQnKVxuICAgICAgICAgICAgICAgIC50ZXh0KCfij7nvuI8nKVxuXG4gICAgICAgICAgICBkMy5zZWxlY3Qoc3ZnLm5vZGUoKS5wYXJlbnROb2RlKVxuICAgICAgICAgICAgICAgIC5hcHBlbmQoJ3RleHQnKVxuICAgICAgICAgICAgICAgIC50ZXh0KCfij6onKVxuICAgICAgICAgICAgICAgIC5vbignY2xpY2snLCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGFsZ29yaXRobS5jdXJfaXRlcmF0aW9uLS07XG4gICAgICAgICAgICAgICAgICAgIGFsZ29yaXRobS5hcHBseV9pdGVyYXRpb24oYWxnb3JpdGhtLmN1cl9pdGVyYXRpb24pO1xuXG4gICAgICAgICAgICAgICAgICAgIHN2Zy5zZWxlY3RBbGwoJy50YWJsZWdyb3VwJylcbiAgICAgICAgICAgICAgICAgICAgICAgIC50cmFuc2l0aW9uKClcbiAgICAgICAgICAgICAgICAgICAgICAgIC5kdXJhdGlvbig3NTApXG4gICAgICAgICAgICAgICAgICAgICAgICAuYXR0cigndHJhbnNmb3JtJywgZCA9PiBcbiAgICAgICAgICAgICAgICAgICAgICAgICd0cmFuc2xhdGUoJyArIChkLmRlcHRoKmRlcHRoX2Rpc3RhbmNlKSArICcgLCAgJyArIChhbGdvcml0aG0uZy50YWJsZUluZGV4W2QuZGVwdGhdLmluZGV4T2YoZCkgKiB0YWJsZV92ZXJ0X3NwYWNlKSAgKyAnICknKVxuXG4gICAgICAgICAgICAgICAgICAgIC8vIGQzLnNlbGVjdEFsbFxuICAgICAgICAgICAgICAgICAgICAvLyAuYXR0cigndHJhbnNmb3JtJywgZCA9PiBcbiAgICAgICAgICAgICAgICAgICAgLy8gICAgIC8vIFwidHJhbnNsYXRlKFwiICsgKGQuZGVwdGgqZGVwdGhfZGlzdGFuY2UpICsgXCIsXCIgXG4gICAgICAgICAgICAgICAgICAgIC8vICAgICAvLyArIGFsZ29yaXRobS5nLnRhYmxlSW5kZXhbZC5kZXB0aF0uaW5kZXhPZihkKSAqIHRhYmxlX3ZlcnRfc3BhY2UgKyBcIilcIiApXG4gICAgICAgICAgICAgICAgICAgIC8vICAgICBcInRyYW5zbGF0ZSgwLCAwKVwiXG4gICAgICAgICAgICAgICAgICAgIC8vICAgICApXG4gICAgICAgICAgICAgICAgfSlcblxuICAgICAgICAgICAgZDMuc2VsZWN0KHN2Zy5ub2RlKCkucGFyZW50Tm9kZSlcbiAgICAgICAgICAgICAgICAuYXBwZW5kKCd0ZXh0JylcbiAgICAgICAgICAgICAgICAudGV4dChhbGdvcml0aG0uY3VyX2l0ZXJhdGlvbilcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgZDMuc2VsZWN0KHN2Zy5ub2RlKCkucGFyZW50Tm9kZSlcbiAgICAgICAgICAgICAgICAuYXBwZW5kKCd0ZXh0JylcbiAgICAgICAgICAgICAgICAudGV4dCgn4o+pJylcbiAgICAgICAgICAgICAgICAub24oJ2NsaWNrJywgKCkgPT4ge1xuXG4gICAgICAgICAgICAgICAgfSlcblxuICAgICAgICAgICAgZDMuc2VsZWN0KHN2Zy5ub2RlKCkucGFyZW50Tm9kZSlcbiAgICAgICAgICAgICAgICAuYXBwZW5kKCd0ZXh0JylcbiAgICAgICAgICAgICAgICAudGV4dCgn4pa277iPJylcbiAgICAgICAgfVxuICAgIH1cbn0iLCJsZXQgcGFyc2VRdWVyeSA9IChxc3RyaW5nLCBzY2hlbWFzdHJpbmcpID0+IHtcblxuICAgIGNvbnN0IHBhcnNlciA9IG5ldyBOb2RlU1FMUGFyc2VyLlBhcnNlcigpXG4gICAgY29uc3QgYXN0ID0gcGFyc2VyLmFzdGlmeShxc3RyaW5nKVxuICAgIGNvbnN0IHNjaGVtYSA9IHNjaGVtYXN0cmluZztcbiAgICBjb25zb2xlLmxvZyhhc3QpXG5cbiAgICBsZXQgcmVhZFNjaGVtYSA9IChzY2hlbWEpID0+IHtcbiAgICAgICAgbGV0IHNjaGVtYURpY3QgPSB7fVxuICAgICAgICBsZXQgcyA9IHNjaGVtYS5zcGxpdChcIlxcblwiKVxuICAgICAgICBmb3IgKGxldCBsaW5lIG9mIHMpe1xuICAgICAgICAgICAgbGV0IHRuYW1lID0gbGluZS5zcGxpdCgnKCcpWzBdXG4gICAgICAgICAgICBsZXQgdGxpc3QgPSBsaW5lLnNwbGl0KCcoJylbMV0uc3BsaXQoJyknKVswXS5zcGxpdCgnLCcpO1xuICAgICAgICAgICAgc2NoZW1hRGljdFt0bmFtZV0gPSBbXVxuICAgICAgICAgICAgZm9yIChsZXQgZWxlbSBvZiB0bGlzdCl7XG4gICAgICAgICAgICAgICAgc2NoZW1hRGljdFt0bmFtZV0ucHVzaChlbGVtLnJlcGxhY2UoLyAvZywgXCJcIikpXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHNjaGVtYURpY3Q7XG4gICAgfVxuXG4gICAgbGV0IHNjaGVtYURpY3QgPSByZWFkU2NoZW1hKHNjaGVtYSk7XG5cbiAgICBnID0gbmV3IEdyYXBoKCk7XG5cbiAgICBsZXQgc2VsZWN0VGFibGUgPSBuZXcgVGFibGUoXCJzZWxlY3RcIiwgXCJzZWxlY3RcIiwgdHJ1ZSwgMClcbiAgICBnLmFkZFRhYmxlKHNlbGVjdFRhYmxlKTtcblxuICAgIGxldCB0YWJsZWRlZnMgPSB7fVxuXG4gICAgbGV0IHRhYmxlY291bnQgPSAwXG4gICAgZm9yIChsZXQgZWxlbSBvZiBhc3QuZnJvbSl7XG4gICAgICAgIGlmIChlbGVtLmFzICE9IG51bGwpe1xuICAgICAgICAgICAgdGFibGVkZWZzW2VsZW0uYXNdID0gZWxlbS50YWJsZSArIHRhYmxlY291bnRcbiAgICAgICAgICAgIHRhYmxlY291bnQgKz0gMVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGFibGVkZWZzW2VsZW0udGFibGVdID0gZWxlbS50YWJsZSArIHRhYmxlY291bnRcbiAgICAgICAgICAgIHRhYmxlY291bnQgKz0gMVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgbGV0IG5hdmlnYXRlRXhwciA9IChhc3QsIGRlcHRoLCBncm91cHMsIHByZXZPcGVyYXRvcikgPT4ge1xuICAgICAgICBjb25zb2xlLmxvZygnbmF2aWdhdGVFeHByJywgZGVwdGgsIGFzdCwgZ3JvdXBzKVxuXG4gICAgICAgIGZvciAobGV0IGVsZW0gb2YgYXN0LmZyb20pe1xuICAgICAgICAgICAgaWYgKGVsZW0uYXMgIT0gdW5kZWZpbmVkKXtcbiAgICAgICAgICAgICAgICB0YWJsZWRlZnNbZWxlbS5hc10gPSBlbGVtLnRhYmxlICsgdGFibGVjb3VudFxuICAgICAgICAgICAgICAgIHRhYmxlY291bnQgKz0gMVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0YWJsZWRlZnNbZWxlbS50YWJsZV0gPSBlbGVtLnRhYmxlICsgdGFibGVjb3VudFxuICAgICAgICAgICAgICAgIHRhYmxlY291bnQgKz0gMVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICBuYXZpZ2F0ZVdoZXJlKGFzdC53aGVyZSwgZGVwdGggKyAxLCBncm91cHMsIHByZXZPcGVyYXRvcilcbiAgICB9XG5cbiAgICBsZXQgZ2V0VGFibGVBdHRyaWJ1dGUgPSAodGFibGUsIG5hbWUpID0+IHtcbiAgICAgICAgbGV0IGF0dHIgPSB0YWJsZS5hdHRyaWJ1dGVzLmZpbmQoYSA9PiBhLm5hbWUgPT0gbmFtZSlcbiAgICAgICAgaWYgKGF0dHIgPT0gdW5kZWZpbmVkKXtcbiAgICAgICAgICAgIGF0dHIgPSBuZXcgQXR0cmlidXRlKHRhYmxlLCBuYW1lKVxuICAgICAgICAgICAgZy5hZGRBdHRyaWJ1dGUodGFibGUsIGF0dHIpXG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGF0dHJcbiAgICB9XG5cbiAgICBsZXQgZ2V0VGFibGVCeUlkID0gKHRhYmxlSWQsIGdyb3VwcykgPT4ge1xuICAgICAgICBsZXQgdDEgPSBnLnRhYmxlcy5maW5kKHQgPT4gdC5pZCA9PSB0YWJsZUlkKVxuICAgICAgICBcbiAgICAgICAgaWYgKHQxID09IHVuZGVmaW5lZCl7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHQxID0gbmV3IFRhYmxlKHRhYmxlSWQsIHRhYmxlSWQsIHRydWUsIGRlcHRoKVxuXG4gICAgICAgICAgICBpZiAoZ3JvdXBzIT0gdW5kZWZpbmVkICYmIGdyb3Vwcy5sZW5ndGggPiAwKXtcbiAgICAgICAgICAgICAgICBmb3IgKGdyb3VwIG9mIGdyb3Vwcyl7XG4gICAgICAgICAgICAgICAgICAgIGdyb3VwLmFkZFRhYmxlKHQxKVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGcuYWRkVGFibGUodDEpXG5cbiAgICAgICAgICAgIGxldCB0bmFtZSA9IHRhYmxlSWQuc2xpY2UoMCwgdGFibGVJZC5sZW5ndGggLSAxKVxuXG4gICAgICAgICAgICBpZiAodG5hbWUgPT0gdW5kZWZpbmVkKSBjb25zb2xlLmVycm9yKFwibm90IGZvdW5kOiBcIiArIHRhYmxlSWQpXG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vIGZpbmQgdGFibGUgaW4gc2NoZW1hZGljdFxuICAgICAgICAgICAgaWYgKHNjaGVtYURpY3RbdG5hbWVdICE9IHVuZGVmaW5lZCl7XG4gICAgICAgICAgICAgICAgZm9yIChsZXQgYSBvZiBzY2hlbWFEaWN0W3RuYW1lXSl7XG4gICAgICAgICAgICAgICAgICAgIGxldCBhdHRyID0gbmV3IEF0dHJpYnV0ZSh0MSwgYSlcbiAgICAgICAgICAgICAgICAgICAgZy5hZGRBdHRyaWJ1dGUodDEsIGF0dHIpXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0MVxuICAgIH1cblxuICAgIGxldCBuYXZpZ2F0ZVdoZXJlID0gKHcsIGRlcHRoLCBncm91cHMsIHByZXZBc3QpID0+IHtcbiAgICAgICAgaWYgKHcgPT0gbnVsbCkgcmV0dXJuO1xuXG4gICAgICAgIGNvbnNvbGUubG9nKCduYXZpZ2F0ZVdoZXJlJywgZGVwdGgsIHcsIGdyb3VwcylcblxuICAgICAgICBpZiAody5vcGVyYXRvciA9PSBcIkFORFwiKXtcbiAgICAgICAgICAgIG5hdmlnYXRlV2hlcmUody5sZWZ0LCBkZXB0aCsxLCBncm91cHMsIHByZXZBc3QpXG4gICAgICAgICAgICBuYXZpZ2F0ZVdoZXJlKHcucmlnaHQsIGRlcHRoKzEsIGdyb3VwcywgcHJldkFzdClcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGlmICh3LnRhYmxlID09IG51bGwpIFxuICAgICAgICAvLyAgICAgdy50YWJsZSA9IHByZXZBc3QuY29sdW1ucy5maW5kKGMgPT4gYy5jb2x1bW4gPT0gdy5hdHRyaWJ1dGUpLmV4cHIudGFibGVcbiAgICAgICAgaWYgKHcubGVmdCAhPSB1bmRlZmluZWQgJiYgdy5sZWZ0LnRhYmxlID09IG51bGwpXG4gICAgICAgICAgICB3LmxlZnQudGFibGUgPSBwcmV2QXN0LmNvbHVtbnMuZmluZChjID0+IGMuY29sdW1uID09IHcubGVmdC5hdHRyaWJ1dGUpLmV4cHIudGFibGVcbiAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKHcubGVmdC50YWJsZSlcblxuICAgICAgICBpZiAody5vcGVyYXRvciA9PSBcIj1cIiB8fCB3Lm9wZXJhdG9yID09IFwiPlwiIHx8IHcub3BlcmF0b3IgPT0gXCI8XCIgfHwgdy5vcGVyYXRvciA9PSBcIjw+XCIpe1xuICAgICAgICAgICAgaWYgKHcucmlnaHQudHlwZSA9PSBcInN0cmluZ1wiKXtcbiAgICAgICAgICAgICAgICBsZXQgdCA9IGcudGFibGVzLmZpbmQodCA9PiB0LmlkID09IHRhYmxlZGVmc1t3LmxlZnQudGFibGVdKVxuICAgICAgICAgICAgICAgIGxldCBhdHRyID0gbmV3IEF0dHJpYnV0ZSh0LCB3LmxlZnQuY29sdW1uICsgXCIgXCIgKyB3Lm9wZXJhdG9yICsgXCIgXCIgKyAnXCInICsgdy5yaWdodC52YWx1ZSArICdcIicpXG4gICAgICAgICAgICAgICAgYXR0ci5pZCA9IGF0dHIubmFtZS5yZXBsYWNlKC9cIi9nLCAnJykucmVwbGFjZSgvPS9nLCAnJykucmVwbGFjZSgvPi9nLCAnJykucmVwbGFjZSgvPC9nLCAnJykucmVwbGFjZSgvIC9nLCAnJykgKyBcImNcIlxuICAgICAgICAgICAgICAgIGF0dHIudHlwZSA9IFwiY29uc3RyYWludFwiO1xuICAgICAgICAgICAgICAgIHQuYXR0cmlidXRlcy5wdXNoKGF0dHIpO1xuICAgICAgICAgICAgfSBlbHNlIGlmICh3LnJpZ2h0LnR5cGUgPT0gXCJudW1iZXJcIil7XG4gICAgICAgICAgICAgICAgLy8gbGV0IHQgPSBnLnRhYmxlcy5maW5kKHQgPT4gdC5pZCA9PSB0YWJsZWRlZnNbdy5sZWZ0LnRhYmxlXSlcbiAgICAgICAgICAgICAgICBsZXQgdCA9IGdldFRhYmxlQnlJZCh0YWJsZWRlZnNbdy5sZWZ0LnRhYmxlXSlcbiAgICAgICAgICAgICAgICBsZXQgYXR0ciA9IG5ldyBBdHRyaWJ1dGUodCwgdy5sZWZ0LmNvbHVtbiArIFwiIFwiICsgdy5vcGVyYXRvciArIFwiIFwiICsgdy5yaWdodC52YWx1ZSlcbiAgICAgICAgICAgICAgICBhdHRyLmlkID0gYXR0ci5uYW1lLnJlcGxhY2UoL1wiL2csICcnKS5yZXBsYWNlKC89L2csICcnKS5yZXBsYWNlKC8+L2csICcnKS5yZXBsYWNlKC88L2csICcnKS5yZXBsYWNlKC8gL2csICcnKSArIFwiY1wiXG4gICAgICAgICAgICAgICAgYXR0ci50eXBlID0gXCJjb25zdHJhaW50XCI7XG4gICAgICAgICAgICAgICAgdC5hdHRyaWJ1dGVzLnB1c2goYXR0cik7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHcucmlnaHQudHlwZSA9PSBcImNvbHVtbl9yZWZcIil7XG4gICAgICAgICAgICAgICAgbGV0IHRhYmxlbmFtZTEgPSB0YWJsZWRlZnNbdy5sZWZ0LnRhYmxlXVxuICAgICAgICAgICAgICAgIGxldCB0YWJsZW5hbWUyID0gdGFibGVkZWZzW3cucmlnaHQudGFibGVdXG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgbGV0IHQxID0gZ2V0VGFibGVCeUlkKHRhYmxlbmFtZTEsIGdyb3Vwcyk7XG4gICAgICAgICAgICAgICAgbGV0IGF0dHIxID0gZ2V0VGFibGVBdHRyaWJ1dGUodDEsIHcubGVmdC5jb2x1bW4pXG5cbiAgICAgICAgICAgICAgICBsZXQgdDIgPSBnZXRUYWJsZUJ5SWQodGFibGVuYW1lMiwgZ3JvdXBzKSBcbiAgICAgICAgICAgICAgICBsZXQgYXR0cjIgPSBnZXRUYWJsZUF0dHJpYnV0ZSh0Miwgdy5yaWdodC5jb2x1bW4pICAgICAgICAgICAgIFxuXG4gICAgICAgICAgICAgICAgbGV0IGUgPSBuZXcgRWRnZSh0MSwgYXR0cjEsIHQyLCBhdHRyMilcblxuICAgICAgICAgICAgICAgIGlmICh3Lm9wZXJhdG9yID09IFwiPD5cIil7XG4gICAgICAgICAgICAgICAgICAgIGUubGFiZWwgPSBcIjw+XCJcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHcub3BlcmF0b3IgPT0gXCI8XCIpe1xuICAgICAgICAgICAgICAgICAgICBlLnR5cGUgPSBcImRpcmVjdGVkXCI7XG4gICAgICAgICAgICAgICAgICAgIGUubGFiZWwgPSBcIjxcIlxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAody5vcGVyYXRvciA9PSBcIj5cIil7XG4gICAgICAgICAgICAgICAgICAgIGUudHlwZSA9IFwiZGlyZWN0ZWRcIjtcbiAgICAgICAgICAgICAgICAgICAgZS5sYWJlbCA9IFwiPlwiXG4gICAgICAgICAgICAgICAgfSBcbiAgICAgICAgICAgICAgICBnLmFkZEVkZ2UoZSk7XG5cbiAgICAgICAgICAgIH0gZWxzZSBjb25zb2xlLndhcm4oJ3NvbWV0aGluZyB3ZWlyZCBoZXJlJylcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgdy5hZGQgPSB0cnVlXG5cbiAgICAgICAgfSBlbHNlIGlmICh3Lm9wZXJhdG9yID09IFwiTk9UIEVYSVNUU1wiKXtcbiAgICAgICAgICAgIGxldCBncm91cCA9IG5ldyBHcm91cCgpXG4gICAgICAgICAgICBncm91cC50eXBlID0gXCJOT1QgRVhJU1RTXCJcbiAgICAgICAgICAgIGcuYWRkR3JvdXAoZ3JvdXApO1xuICAgICAgICAgICAgZ3JvdXBzLnB1c2goZ3JvdXApXG4gICAgICAgICAgICBuYXZpZ2F0ZUV4cHIody5leHByLmFzdCwgZGVwdGggKyAxLCBncm91cHMsIHByZXZBc3QpXG4gICAgICAgIH0gZWxzZSBpZiAody5vcGVyYXRvciA9PSBcIkVYSVNUU1wiKXtcbiAgICAgICAgICAgIG5hdmlnYXRlRXhwcih3LmV4cHIuYXN0LCBkZXB0aCArIDEsIGdyb3VwcywgcHJldkFzdClcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8vIGZpbGwgaW4gdGhlIGZpcnN0IHNlbGVjdCB0YWJsZVxuICAgIGZvciAobGV0IGMgb2YgYXN0LmNvbHVtbnMpe1xuICAgICAgICBpZiAoYyA9PSBcIipcIil7XG4gICAgICAgICAgICBmb3IgKGxldCBlbGVtIG9mIGFzdC5mcm9tKXtcbiAgICAgICAgICAgICAgICBsZXQgdCA9IGdldFRhYmxlQnlJZCh0YWJsZWRlZnNbZWxlbS50YWJsZV0pXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgYSBvZiB0LmF0dHJpYnV0ZXMpe1xuICAgICAgICAgICAgICAgICAgICBsZXQgbmV3X2EgPSBuZXcgQXR0cmlidXRlKHNlbGVjdFRhYmxlLCBhLm5hbWUpXG4gICAgICAgICAgICAgICAgICAgIGcuYWRkQXR0cmlidXRlKHNlbGVjdFRhYmxlLCBuZXdfYSlcbiAgICAgICAgICAgICAgICAgICAgZy5hZGRFZGdlKG5ldyBFZGdlKHNlbGVjdFRhYmxlLCBuZXdfYSwgdCwgYSkpXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbGV0IGF0dHJuYW1lID0gYy5leHByLmNvbHVtbjtcbiAgICAgICAgICAgIGxldCBhID0gbmV3IEF0dHJpYnV0ZShzZWxlY3RUYWJsZSwgYXR0cm5hbWUpO1xuICAgICAgICAgICAgc2VsZWN0VGFibGUuYXR0cmlidXRlcy5wdXNoKGEpO1xuXG4gICAgICAgICAgICBsZXQgdDI7XG4gICAgICAgICAgICBpZiAoYy5leHByLnRhYmxlID09IG51bGwpe1xuICAgICAgICAgICAgICAgIHQyID0gZ2V0VGFibGVCeUlkKHRhYmxlZGVmc1thc3QuZnJvbVswXS50YWJsZV0pXG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHQyID0gZ2V0VGFibGVCeUlkKHRhYmxlZGVmc1tjLmV4cHIudGFibGVdKVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgXG4gICAgICAgICAgICBsZXQgYXR0cjIgPSBnZXRUYWJsZUF0dHJpYnV0ZSh0MiwgYy5leHByLmNvbHVtbilcblxuICAgICAgICAgICAgbGV0IGUgPSBuZXcgRWRnZShzZWxlY3RUYWJsZSwgYSwgdDIsIGF0dHIyKVxuICAgICAgICAgICAgZy5hZGRFZGdlKGUpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgbmF2aWdhdGVXaGVyZShhc3Qud2hlcmUsIDAsIFtdLCBhc3QpXG5cbiAgICBhc3NpZ25UYWJsZXNUb0RlcHRocyhnKTtcblxuICAgIHJldHVybiBnO1xufVxuXG5sZXQgYXNzaWduVGFibGVzVG9EZXB0aHMgPSAoZykgPT4ge1xuICAgIGZvciAobGV0IGk9MDsgaTwyOyBpKyspe1xuICAgICAgICBhcnJhbmdlVGFibGVzKGcsIGcudGFibGVJbmRleFswXVswXSk7XG4gICAgICAgIGZvciAobGV0IGNvbCBpbiBnLnRhYmxlSW5kZXgpe1xuICAgICAgICAgICAgZy50YWJsZUluZGV4W2NvbF0gPSBbXTtcbiAgICAgICAgfVxuICAgICAgICBmb3IgKGxldCB0YWJsZSBvZiBnLnRhYmxlcyl7XG4gICAgICAgICAgICBnLnRhYmxlSW5kZXhbdGFibGUuZGVwdGhdLnB1c2godGFibGUpO1xuICAgICAgICAgICAgZm9yIChsZXQgYXR0cmlidXRlIG9mIHRhYmxlLmF0dHJpYnV0ZXMpe1xuICAgICAgICAgICAgICAgIGxldCBsaW5rZWRFZGdlcyA9IGcuZWRnZXMuZmlsdGVyKGUgPT4gKGUubGVmdEF0dHJpYnV0ZSA9PSBhdHRyaWJ1dGUgfHwgZS5yaWdodEF0dHJpYnV0ZSA9PSBhdHRyaWJ1dGUpKVxuICAgICAgICAgICAgICAgIGlmIChsaW5rZWRFZGdlcy5sZW5ndGggPT0gMCAmJiBhdHRyaWJ1dGUudHlwZSAhPSBcImNvbnN0cmFpbnRcIikgdGFibGUuYXR0cmlidXRlcy5zcGxpY2UodGFibGUuYXR0cmlidXRlcy5pbmRleE9mKGF0dHJpYnV0ZSksIDEpXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZm9yIChsZXQgY29sIGluIGcuZWRnZUluZGV4KXtcbiAgICAgICAgICAgIGcuZWRnZUluZGV4W2NvbF0gPSBbXTtcbiAgICAgICAgfVxuICAgICAgICBmb3IgKGxldCBlZGdlIG9mIGcuZWRnZXMpe1xuICAgICAgICAgICAgaWYgKGVkZ2UubGVmdFRhYmxlLmRlcHRoID4gZWRnZS5yaWdodFRhYmxlLmRlcHRoKXtcbiAgICAgICAgICAgICAgICBsZXQgdG1wVGFibGUgPSBlZGdlLmxlZnRUYWJsZTtcbiAgICAgICAgICAgICAgICBsZXQgdG1wQXR0ciA9IGVkZ2UubGVmdEF0dHJpYnV0ZTtcbiAgICAgICAgICAgICAgICBlZGdlLmxlZnRUYWJsZSA9IGVkZ2UucmlnaHRUYWJsZTtcbiAgICAgICAgICAgICAgICBlZGdlLnJpZ2h0VGFibGUgPSB0bXBUYWJsZTtcbiAgICAgICAgICAgICAgICBlZGdlLmxlZnRBdHRyaWJ1dGUgPSBlZGdlLnJpZ2h0QXR0cmlidXRlO1xuICAgICAgICAgICAgICAgIGVkZ2UucmlnaHRBdHRyaWJ1dGUgPSB0bXBBdHRyO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZy5lZGdlSW5kZXhbZWRnZS5sZWZ0VGFibGUuZGVwdGhdLnB1c2goZWRnZSk7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbi8vIGRmcyB0byBhcnJhbmdlIHRoZSB0YWJsZXMgb24gdGhlIGNvcnJlY3QgZGVwdGhzXG5sZXQgYXJyYW5nZVRhYmxlcyA9IChnLCBzdGFydFRhYmxlKSA9PiB7ICAgIFxuICAgIGxldCBvdXRlZGdlcyA9IGcuZWRnZXMuZmlsdGVyKGUgPT4gZS5sZWZ0VGFibGUgPT0gc3RhcnRUYWJsZSAmJiBlLnJpZ2h0VGFibGUuZGVwdGggIT0gZS5sZWZ0VGFibGUuZGVwdGgpO1xuICAgIGlmIChvdXRlZGdlcy5sZW5ndGggPT0gMCkgcmV0dXJuO1xuXG4gICAgZm9yIChsZXQgdCBvZiBvdXRlZGdlcy5tYXAoZSA9PiBlLnJpZ2h0VGFibGUpKXtcbiAgICAgICAgdC5kZXB0aCA9IHN0YXJ0VGFibGUuZGVwdGggKyAxO1xuICAgICAgICB3aGlsZSAoZy50YWJsZUluZGV4Lmxlbmd0aCA8IHQuZGVwdGgpe1xuICAgICAgICAgICAgZy5uZXdMYXllcigpXG4gICAgICAgIH1cbiAgICAgICAgYXJyYW5nZVRhYmxlcyhnLCB0KTtcbiAgICB9XG59IiwiIl19
