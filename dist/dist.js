class Attribute{constructor(t,i){this.table=t,this.name=i,this.attr=i,this.weight=0,this.diffEdges=0,this.randomEdges=0,this.sameEdges=0,this.mutable=!0,this.id=i}compareTo(t){return this.weight>t.weight?-1:this.weight<t.weight?1:0}}
class DumbHeuristic{constructor(t){this.g=t}arrange(){for(let t=0;t<this.g.maxDepth;t++){let e=g.edgeIndex[t];e=e.sort((t,e)=>t.compareTo(e));for(let t=0;t<e.length-1;t++){let i=e[t],r=e[t+1];i.leftTable==r.leftTable&&(i.leftAttribute.mutable||r.leftAttribute.mutable)&&(this.swap(i.leftAttribute,r.leftAttribute),(i.rightAttribute.mutable||r.rightAttribute.mutable)&&(i.rightTable==r.rightTable?this.swap(i.rightAttribute,r.rightAttribute):this.swap(i.rightTable,r.rightTable)))}}}swap(t,e){let i=t.weight;t.weight=e.weight,e.weight=i}}
class Edge{constructor(t,e,i,h){this.leftTable=t,this.att1=e,this.leftAttribute=e,this.rightTable=i,this.att2=h,this.rightAttribute=h}compareTo(t){if(this.leftTable==t.leftTable)if(this.rightTable==t.rightTable){if(this.leftAttribute.weight>t.leftAttribute.weight&&this.rightAttribute.weight<t.rightAttribute.weight)return!0;if(this.leftAttribute.weight<t.leftAttribute.weight&&this.rightAttribute.weight>t.rightAttribute.weight)return!0}else{if(this.rightTable.weight<t.rightTable.weight&&this.leftAttribute.weight>t.leftAttribute.weight)return!0;if(this.rightTable.weight>t.rightTable.weight&&this.leftAttribute.weight<t.leftAttribute.weight)return!0}else if(this.rightTable==t.rightTable)if(this.leftTable==t.leftTable){if(this.leftAttribute.weight>t.leftAttribute.weight&&this.rightAttribute.weight<t.rightAttribute.weight)return!0;if(this.leftAttribute.weight<t.leftAttribute.weight&&this.rightAttribute.weight>t.rightAttribute.weight)return!0}else{if(this.leftTable.weight<t.leftTable.weight&&this.rightAttribute.weight>t.rightAttribute.weight)return!0;if(this.leftTable.weight>t.leftTable.weight&&this.rightAttribute.weight<t.rightAttribute.weight)return!0}else{if(this.leftTable.weight<t.leftTable.weight&&this.rightTable.weight>t.rightTable.weight)return!0;if(this.leftTable.weight>t.leftTable.weight&&this.rightTable.weight<t.rightTable.weight)return!0}return!1}compareSelfEdgeTo(t){if(this.leftTable.depth==this.rightTable.depth&&t.leftTable.depth==t.rightTable.depth){if(this.leftTable==t.leftTable)if(this.rightTable==t.rightTable){if(this.leftAttribute.weight<t.leftAttribute.weight&&this.rightAttribute.weight<t.rightAttribute.weight)return!0;if(this.leftAttribute.weight>t.leftAttribute.weight&&this.rightAttribute.weight>t.rightAttribute.weight)return!0}else{if(this.leftAttribute.weight<t.leftAttribute.weight&&this.rightTable.weight<t.rightTable.weight)return!0;if(this.leftAttribute.weight>t.leftAttribute.weight&&this.rightTable.weight>t.rightTable.weight)return!0}else if(this.leftTable==t.rightTable)if(this.rightTable==t.leftTable){if(this.rightAttribute.weight<t.leftAttribute.weight&&this.leftAttribute.weight<t.rightAttribute.weight)return!0;if(this.rightAttribute.weight>t.leftAttribute.weight&&this.leftAttribute.weight>t.rightAttribute.weight)return!0}else{if(this.leftAttribute.weight<t.rightAttribute.weight&&this.rightTable.weight<t.leftTable.weight)return!0;if(this.leftAttribute.weight>t.rightAttribute.weight&&this.rightTable.weight>t.leftTable.weight)return!0}else if(this.rightTable==t.leftTable)if(this.leftTable==t.rightTable){if(this.rightAttribute.weight<t.leftAttribute.weight&&this.leftAttribute.weight<t.rightAttribute.weight)return!0;if(this.rightAttribute.weight>t.leftAttribute.weight&&this.leftAttribute.weight>t.rightAttribute.weight)return!0}else{if(this.rightAttribute.weight<t.leftAttribute.weight&&this.leftTable.weight<t.rightTable.weight)return!0;if(this.rightAttribute.weight>t.leftAttribute.weight&&this.leftTable.weight>t.rightTable.weight)return!0}else if(this.rightTable==t.rightTable)if(this.leftTable==t.leftTable){if(this.leftAttribute.weight<t.leftAttribute.weight&&this.rightAttribute.weight<t.rightAttribute.weight)return!0;if(this.leftAttribute.weight>t.leftAttribute.weight&&this.rightAttribute.weight>t.rightAttribute.weight)return!0}else{if(this.rightAttribute.weight<t.rightAttribute.weight&&this.leftTable.weight<t.leftTable.weight)return!0;if(this.rightAttribute.weight>t.rightAttribute.weight&&this.leftTable.weight>t.leftTable.weight)return!0}}else if(this.leftTable.depth==this.rightTable.depth)if(this.leftTable==t.leftTable){if(this.leftAttribute.weight<t.leftAttribute.weight&&this.rightTable.weight>t.leftTable.weight)return!0;if(this.leftAttribute.weight>t.leftAttribute.weight&&this.rightTable.weight<t.leftTable.weight)return!0}else if(this.rightTable==t.rightTable){if(this.rightAttribute.weight<t.leftAttribute.weight&&this.leftTable.weight>t.leftTable.weight)return!0;if(this.rightAttribute.weight>t.leftAttribute.weight&&this.leftTable.weight<t.leftTable.weight)return!0}else{if(this.leftTable.weight>t.leftTable.weight&&this.rightTable.weight<t.leftTable.weight)return!0;if(this.leftTable.weight<t.leftTable.weight&&this.rightTable.weight>t.leftTable.weight)return!0}else if(t.leftTable==this.leftTable){if(t.leftAttribute.weight<this.leftAttribute.weight&&t.rightTable.weight>this.leftTable.weight)return!0;if(t.leftAttribute.weight>this.leftAttribute.weight&&t.rightTable.weight<this.leftTable.weight)return!0}else if(t.rightTable==this.leftTable){if(t.rightAttribute.weight<this.leftAttribute.weight&&t.leftTable.weight>this.leftTable.weight)return!0;if(t.rightAttribute.weight>this.leftAttribute.weight&&t.leftTable.weight<this.leftTable.weight)return!0}else{if(t.leftTable.weight<this.leftAttribute.weight&&t.rightTable.weight>this.leftAttribute.weight)return!0;if(t.leftTable.weight>this.leftAttribute.weight&&t.rightTable.weight<this.leftAttribute.weight)return!0}}crosses(t){return this.leftTable.depth==this.rightTable.depth||t.leftTable.depth==t.rightTable.depth?this.compareSelfEdgeTo(t):!!this.compareTo(t)}compare(t){if(null==t)return 1;this.compareAttributes(this.leftTable,this.leftAttribute,t.leftTable,t.leftAttribute)}compareAttributes(t,e,i,h){let r=t.compareTo(i);return 0==r&&(r=e.compareTo(h)),r}isSameRankEdge(){return this.leftTable.depth==this.rightTable.depth}getBendiness(){let t=0,e=10/(10*this.leftTable.graph.baseRowDistance);return t=this.rightTable.weight+this.rightAttribute.weight*e+this.rightTable.verticalAttrOffset*e-(this.leftTable.weight+this.leftAttribute.weight*e+this.leftTable.verticalAttrOffset*e),t=Math.round(1e3*t)/1e3,Math.abs(t)}}
class Gansner{constructor(t){this.g=t,this.max_iterations=11,this.elapsedTime=0}median(t){return(t=t.sort()).length%2==0?(t[t.length/2]+t[t.length/2-1])/2:t[(t.length-1)/2]}applyArrangement(t){for(let e of t.tables){let t=this.g.tables.find(t=>t.name==e.name);t.weight=e.weight;for(let i of e.attributes){t.attributes.find(t=>t.name==i.name).weight=i.weight}}}arrange(){let t=(new Date).getTime(),e=this.g.getEdgeCrossings();for(let t=0;t<this.max_iterations;t++){let i=_.cloneDeep(this.g);t%2==0?this.arrangeLeft(i):this.arrangeRight(i),this.transpose(i);let a=i.getEdgeCrossings();a<=e&&(this.applyArrangement(i),e=a)}this.elapsedTime=(new Date).getTime()-t}arrangeLeft(t){for(let e=1;e<=t.maxDepth;e++){let i=t.tableIndex[e],a=t.edgeIndex[e-1];for(let t of i){let e=a.filter(e=>e.rightTable==t&&e.leftTable.depth!=e.rightTable.depth).map(t=>parseFloat(t.leftTable.weight));t.weight=this.median(e);for(let e of t.attributes){let i=a.filter(t=>t.rightAttribute==e&&t.leftTable.depth!=t.rightTable.depth).map(t=>parseFloat(t.leftTable.weight)),l=a.filter(t=>t.rightAttribute==e&&t.leftTable.depth!=t.rightTable.depth).map(t=>parseFloat(t.leftAttribute.weight));0!=i.length&&(e.weight=this.median(i)+this.median(l)/t.attributes.length)}}t.setExactWeights()}}arrangeRight(t){for(let e=t.maxDepth-1;e>0;e--){let i=t.tableIndex[e],a=t.edgeIndex[e];for(let t of i){let e=a.filter(e=>e.leftTable==t&&e.leftTable.depth!=e.rightTable.depth).map(t=>parseFloat(t.rightTable.weight));t.weight=this.median(e);for(let e of t.attributes){let i=a.filter(t=>t.leftAttribute==e&&t.leftTable.depth!=t.rightTable.depth).map(t=>parseFloat(t.rightTable.weight)),l=a.filter(t=>t.leftAttribute==e&&t.leftTable.depth!=t.rightTable.depth).map(t=>parseFloat(t.rightAttribute.weight));0!=i.length&&(e.weight=this.median(i)+this.median(l)/t.attributes.length)}}t.setExactWeights()}}transpose(t){let e=!0;for(;e;){e=!1;for(let i=0;i<=t.maxDepth;i++){let a=t.getEdgeCrossingsAtDepth(i),l=t.tableIndex[i];for(let h=0;h<l.length-1;h++){let r=l[h],s=l[h+1];this.swap(r,s),t.getEdgeCrossingsAtDepth(i)+t.getEdgeCrossingsAtDepth(i+1)<a?e=!0:this.swap(r,s)}for(let h of l)for(let l=0;l<h.attributes.length-1;l++){let r=h.attributes[l],s=h.attributes[l+1];this.swap(r,s),t.getEdgeCrossingsAtDepth(i)+t.getEdgeCrossingsAtDepth(i+1)<a?e=!0:this.swap(r,s)}}}}swap(t,e){let i=t.weight;t.weight=e.weight,e.weight=i}}
class GansnerSameRank{constructor(t){this.g=t,this.max_iterations=6,this.elapsedTime=0,this.iterations=[],this.cur_iteration=0}apply_iteration(t){this.applyArrangement(this.iterations[t])}quicksort(t){if(t.length<=1)return t;for(var e=t[0],i=[],a=[],s=1;s<t.length;s++)t[s]<e?i.push(t[s]):a.push(t[s]);return quicksort(i).concat(e,quicksort(a))}median(t){return(t=t.sort()).length%2==0?(t[t.length/2]+t[t.length/2-1])/2:t[(t.length-1)/2]}applyArrangement(t){for(let e of t.tables){let t=this.g.tables.find(t=>t.name==e.name);t.weight=e.weight,t.assignedWeight=e.assignedWeight;for(let i of e.attributes){let e=t.attributes.find(t=>t.name==i.name);e.weight=i.weight,e.assignedWeight=i.assignedWeight}}}arrange(){let t=(new Date).getTime();this.g.setExactWeights();let e=this.g.getEdgeCrossings();for(let t=0;t<this.max_iterations;t++){this.cur_iteration=t;let i=_.cloneDeep(this.g);t%2==0?this.arrangeLeft(i):this.arrangeRight(i),this.transpose(i);let a=i.getEdgeCrossings();a<=e&&(this.applyArrangement(i),e=a),this.iterations[this.cur_iteration]=_.cloneDeep(i)}this.elapsedTime=(new Date).getTime()-t}arrangeLeft(t){console.log("Left");let e={},i={};for(let a=1;a<=t.maxDepth+1;a++){let s=t.tableIndex[a],r=t.edgeIndex[a-1];for(let t in s){let a=s[t],n=r.filter(t=>t.rightTable==a&&!this.isSameRankEdge(t)).map(t=>parseFloat(t.leftTable.weight)),l=this.median(n);isNaN(l)||(e[a.name]=l),i[a.name]={};for(let t of a.attributes){let e=r.filter(e=>e.rightAttribute==t&&!this.isSameRankEdge(e)).map(t=>parseFloat(t.leftTable.weight)),s=r.filter(e=>e.rightAttribute==t&&!this.isSameRankEdge(e)).map(t=>parseFloat(t.leftAttribute.weight)),n=parseFloat(this.median(e))+parseFloat(this.median(s)/a.attributes.length);isNaN(n)||(i[a.name][t.name]=n)}}}this.reorder(t,e,i)}arrangeRight(t){console.log("Right");let e={},i={};for(let a=t.maxDepth-1;a>0;a--){let s=t.tableIndex[a],r=t.edgeIndex[a];for(let t of s){let a=r.filter(e=>e.leftTable==t).map(t=>parseFloat(t.rightTable.weight)),s=parseFloat(this.median(a));isNaN(s)||(e[t.name]=s),i[t.name]={};for(let e of t.attributes){let a=r.filter(t=>t.leftAttribute==e).map(t=>parseFloat(t.rightTable.weight)),s=r.filter(t=>t.leftAttribute==e).map(t=>parseFloat(t.rightAttribute.weight)),n=parseFloat(this.median(a))+parseFloat(this.median(s)/t.attributes.length);isNaN(n)||(i[t.name][e.name]=n)}}}this.reorder(t,e,i)}isSameRankEdge(t){return t.leftTable.depth==t.rightTable.depth}reorder(t,e,i){for(let a in t.tableIndex)if(0!=a){for(let s in t.tableIndex[a]){let r=t.tableIndex[a][s];if(null!=e[r.name]){r.weight=e[r.name],r.assignedWeight=e[r.name];for(let t in r.attributes){let e=r.attributes[t];e.weight=i[r.name][e.name],e.assignedWeight=i[r.name][e.name]}r.attributes.sort((t,e)=>isNaN(t.weight)||isNaN(e.weight)?0:t.weight>e.weight?1:-1);for(let t in r.attributes){r.attributes[t].weight=t}}}t.tableIndex[a].sort((t,e)=>isNaN(t.weight)||isNaN(e.weight)?0:t.weight>e.weight?1:-1);for(let e in t.tableIndex[a]){t.tableIndex[a][e].weight=e}}}transpose(t){let e=!0;for(;e;){e=!1;for(let i=0;i<=t.maxDepth;i++){let a=t.getEdgeCrossingsAtDepth(i),s=t.tableIndex[i];for(let r=0;r<s.length-1;r++){let n=s[r],l=s[r+1];this.swap(n,l),t.getEdgeCrossingsAtDepth(i)+t.getEdgeCrossingsAtDepth(i+1)<a?e=!0:this.swap(n,l)}for(let r of s)for(let s=0;s<r.attributes.length-1;s++){let n=r.attributes[s],l=r.attributes[s+1];this.swap(n,l),t.getEdgeCrossingsAtDepth(i)+t.getEdgeCrossingsAtDepth(i+1)<a?e=!0:this.swap(n,l)}}}}swap(t,e){let i=t.weight;t.weight=e.weight,e.weight=i}}
class Graph{constructor(e){null==e?(this.edges=[],this.tables=[],this.tableIndex=[],this.edgeIndex=[],this.maxDepth=0,this.groups=[],this.baseRowDistance=6,this.newLayer()):e&&Object.assign(this,e)}addGroup(e){this.groups.push(e),e.id="g"+this.groups.indexOf(e);let t=e.groupHeaderTable;this.addTable(t)}updateGroupCoords(){for(let e of this.groups)e.updateCoords()}newLayer(){this.tableIndex.push([]),this.edgeIndex.push([])}addTable(e){for(;this.maxDepth<e.depth;)this.maxDepth+=1,this.newLayer();e.graph=this,this.tables.push(e),this.tableIndex[e.depth].push(e)}addEdge(e){this.edges.push(e),this.edgeIndex[e.leftTable.depth].push(e)}ensureUniqueEdges(){}getEdgeCrossings(){let e=0;for(let t in this.edgeIndex)e+=this.getEdgeCrossingsAtDepth(t);return e}getEdgeCrossingsAtDepth(e,t=!1){let s=0,i=this.edgeIndex[e];for(let e in i){let h=i[e];for(let r=parseFloat(e)+1;r<i.length;r++){let e=i[r];h.crosses(e)&&(t&&console.log("Edge "+h.leftAttribute.name+h.rightAttribute.name+" crosses "+e.leftAttribute.name+e.rightAttribute.name),s+=1)}}return s}sortGraph(){for(let e of this.tables)e.main||(e.attributes=e.attributes.sort((e,t)=>e.weight>t.weight?1:-1));this.tables=this.tables.sort((e,t)=>e.weight>t.weight?1:-1);for(let e of this.tableIndex)e.sort((e,t)=>e.weight>t.weight?1:-1)}setExactWeights(){for(let e in this.tableIndex){let t=this.tableIndex[e];t=t.sort((e,t)=>e.weight>t.weight?1:-1);for(let e in t){let s=t[e];s.weight=parseFloat(e);let i=s.attributes;i=i.sort((e,t)=>e.weight>t.weight?1:-1);for(let e in i)i[e].weight=parseFloat(e)}}this.updateGroupCoords()}getNumStraightEdges(){let e=0;for(let t in this.edgeIndex)e+=this.getNumStraightEdgesAtDepth(t);return e}getNumStraightEdgesAtDepth(e){let t=0;for(let s of this.edgeIndex[e])s.leftTable.weight==s.rightTable.weight&&(t+=1);return t}adjustTableYPosition(){this.adjustAttrOffset()}getBendLeft(e){let t=e.depth,s=this.edgeIndex[t-1].filter(t=>t.rightTable==e&&!t.isSameRankEdge());return 0==s.length?0:Math.abs(s.map(e=>e.getBendiness()).reduce((e,t)=>Math.round(1e3*e+1e3*t)/1e3))}getBendRight(e){let t=e.depth,s=this.edgeIndex[t].filter(t=>t.leftTable==e&&!t.isSameRankEdge());return 0==s.length?0:Math.abs(s.map(e=>e.getBendiness()).reduce((e,t)=>Math.round(1e3*e+1e3*t)/1e3))}getTableBendiness(e){return 0==e.depth?Math.round(1e3*this.getBendRight(e))/1e3:Math.round(1e3*this.getBendLeft(e)+1e3*this.getBendRight(e))/1e3}getGraphTotalEdgeBendiness(){return Math.round(1e3*this.tables.map(e=>this.getTableBendiness(e)).reduce((e,t)=>e+t))/1e3}adjustAttrOffset(){let e=!0,t=0,s=(e,t)=>{let s=-2;return s=0==t?0:e[t-1].verticalAttrOffset-this.baseRowDistance+e[t-1].attributes.length+2,s},i=(e,t)=>{let s=2;return s=1==e.length||null==e[t+1]?20:e[t+1].verticalAttrOffset+this.baseRowDistance-e[t].attributes.length-2,s},h=()=>{for(let t=0;t<this.tableIndex.length;t++){let h=this.tableIndex[t];for(let t=0;t<h.length;t++){let r=h[t],a=this.getTableBendiness(r),l=r.verticalAttrOffset,n=s(h,t),d=i(h,t);for(let t=n;t<=d;t++){r.verticalAttrOffset=t;let s=this.getTableBendiness(r);s<=a&&(l=t,a=s,e=!0)}r.verticalAttrOffset=l}}},r=()=>{for(let e=this.tableIndex.length-1;e>0;e--){let t=this.tableIndex[e];for(let e=t.length-1;e>=0;e--){let h=t[e],r=this.getTableBendiness(h),a=h.verticalAttrOffset,l=s(t,e),n=i(t,e);for(let e=l;e<=n;e++){h.verticalAttrOffset=e;let t=this.getTableBendiness(h);t<r&&(a=e,r=t)}h.verticalAttrOffset=a}}};for(;t<10;)t++,t%2==0?h():r();this.updateGroupCoords()}}
class GraphGenerator{constructor(t=3,e="hello",r=[2,3],s=[1,5]){this.d=t,this.s=3,this.jd=.1,this.js=.05,this.attributeCounter=0,this.seed=e,this.tableDistribution=r,this.attributeDistribution=s,this.rng=new Math.seedrandom(this.seed),this.tableDist=()=>r[0]+Math.round(this.rng()*(r[1]-r[0])),this.attrDist=()=>s[0]+Math.round(this.rng()*(s[1]-s[0]))}generate(){g=new Graph,g.baseRowDistance=this.attributeDistribution[1]+2;for(var t=1;t<this.d;t++){g.newLayer();for(var e=0;e<this.tableDist();e++)g.addTable(this.generateTable(t,e))}return this.generateProjections(g),this.generateJoins(g),g.ensureUniqueEdges(),g}generateTable(t,e){name="T"+t+"y"+e;for(var r=new Table(name,name,!1,t),s=0;s<this.attrDist();s++)r.addAttribute("a"+this.attributeCounter),this.attributeCounter+=1;return r}generateProjections(t){let e=t.tableIndex[1],r=[],s=new Table("select","SELECT",!0,0),a=[],i=[],n=0;for(let t of e){let e=t.attributes,s=e[Math.floor(this.rng()*e.length)];a.push(s),i.push(s);for(let a of e)a!=s&&r.push(new Attribute(t,a));n++}let o=this.s*(r.length+n);for(t.addTable(s);n<o;n++){let t=Math.floor(this.rng()*r.length);r[t];r.splice(t,1)}for(let e of a){let r=new Attribute(s,"a"+this.attributeCounter++);r.mutable=!1,s.attributes.push(r),t.addEdge(new Edge(s,r,e.table,e))}}generateInterLayerJoins(t){for(var e=1;e<this.d;e++){let r=t.tableIndex[e],s=t.tableIndex[e+1],a=[],i=[];for(let t of r){let e=t.attributes;for(let r of e)a.push(new Attribute(t,r))}for(let e of s){if(0==a.length)break;let r=e.attributes,s=r[Math.floor(this.rng()*r.length)],n=Math.floor(this.rng()*a.length),o=a[n];a.splice(n,1),t.addEdge(new Edge(o.table,o.attr,e,s)),o.diffEdges++,s.diffEdges++;for(let t of r)t!=s&&i.push(new Attribute(e,t))}for(let e of a){if(0==i.length)break;if(this.rng()<this.jd){let r=Math.floor(this.rng()*i.length),s=i[r];i.splice(r,1),t.addEdge(new Edge(e.table,e.attr,s.table,s.attr)),e.diffEdges++,s.diffEdges++}}}}generateInLayerJoins(){for(var t=1;t<this.d;t++){let e=g.tableIndex[t];for(let t of e){let r=[],s=[];for(let e of t.attributes)r.push(new Attribute(t,e));for(let r of e)if(t!=r)for(let t of r.attributes)0==t.sameEdges&&s.push(new Attribute(r,t));for(let t of r){if(0==s.length)break;if(this.rng()<this.js){let e=Math.floor(this.rng()*s.length),r=s[e];s.splice(e,1),g.addEdge(new Edge(t.table,t.attr,r.table,r.attr)),t.sameEdges++,r.sameEdges++}}}}}generateRandomJoins(){}generateJoins(t){this.generateInterLayerJoins(t),this.generateInLayerJoins(t),this.generateRandomJoins(t)}}
class Group{constructor(){this.tables=[],this.coords=[],this.x_coord=0,this.y_coord=0,this.width_coord=0,this.height_coord=0,this.id=void 0,this.margin=7,this.groupHeader="count",this.groupHeaderTable=new Table(this.groupHeader,this.groupHeader,!0,20,"groupheader"),this.addTable(this.groupHeaderTable),this.coords=[]}addTable(t){t.group=this,t.groups.push(this),this.tables.push(t),this.updateCoords()}updateCoordsPrecise(){this.coords=[];let t=Math.min.apply(0,this.tables.map(t=>t.depth)),h=this.tables.find(h=>h.depth==t);this.x_coord=h.depth;let e=Math.min.apply(0,this.tables.map(t=>t.weight)),i=this.tables.find(t=>t.weight==e);this.y_coord=i.weight;let s=Math.max.apply(0,this.tables.map(t=>t.depth)),a=this.tables.find(t=>t.depth==s);this.width_coord=a.depth-h.depth;let d=Math.max.apply(0,this.tables.map(t=>t.weight)),r=this.tables.find(t=>t.weight==d);this.height_coord=r.weight-i.weight;let p=[h.depth,a.depth];for(let t=0;t<p.length;t++){let h=p[t],e=Math.min.apply(0,this.tables.filter(t=>t.depth==h).map(t=>t.weight)),i=this.tables.find(t=>t.depth==h&&t.weight==e);this.coords.push([i.depth*depth_distance-this.margin,i.weight*table_vert_space+i.verticalAttrOffset*attr_height-this.margin]),this.coords.push([i.depth*depth_distance+table_width+this.margin,i.weight*table_vert_space+i.verticalAttrOffset*attr_height-this.margin])}for(let t=p.length-1;t>=0;t--){let h=p[t],e=Math.max.apply(0,this.tables.filter(t=>t.depth==h).map(t=>t.weight)),i=this.tables.find(t=>t.depth==h&&t.weight==e);this.coords.push([i.depth*depth_distance+table_width+this.margin,i.weight*table_vert_space+(1+i.attributes.length)*attr_height+i.verticalAttrOffset*attr_height+this.margin]),this.coords.push([i.depth*depth_distance-this.margin,i.weight*table_vert_space+(1+i.attributes.length)*attr_height+i.verticalAttrOffset*attr_height+this.margin])}this.coords.push(this.coords[0])}updateCoords(){this.coords=[];let t=Math.min.apply(0,this.tables.map(t=>t.depth)),h=this.tables.find(h=>h.depth==t);this.x_coord=h.depth;let e=Math.min.apply(0,this.tables.map(t=>t.weight)),i=this.tables.find(t=>t.weight==e);this.y_coord=i.weight;let s=Math.max.apply(0,this.tables.map(t=>t.depth)),a=this.tables.find(t=>t.depth==s);this.width_coord=a.depth-h.depth;let d=Math.max.apply(0,this.tables.map(t=>t.weight)),r=this.tables.find(t=>t.weight==d);this.height_coord=r.weight-i.weight,this.coords.push([h.depth*depth_distance-this.margin,i.weight*table_vert_space+i.verticalAttrOffset*attr_height-this.margin]),this.coords.push([h.depth*depth_distance+this.margin+this.width_coord*depth_distance+table_width,i.weight*table_vert_space+i.verticalAttrOffset*attr_height-this.margin]),this.coords.push([h.depth*depth_distance+this.margin+this.width_coord*depth_distance+table_width,r.weight*table_vert_space+(1+r.attributes.length)*attr_height+r.verticalAttrOffset*attr_height+this.margin]),this.coords.push([h.depth*depth_distance-this.margin,r.weight*table_vert_space+(1+r.attributes.length)*attr_height+r.verticalAttrOffset*attr_height+this.margin]),this.coords.push(this.coords[0]),this.groupHeaderTable.depth=t}}
class LPBendiness{constructor(e){this.g=e,this.mip=!0,this.verbose=!1,this.elapsedTime=0}async arrange(){let e=(new Date).getTime(),t={};this.fillModel(t);let i,l,n=this.modelToString(t),s={};this.verbose&&glp_set_print_func(console.log);let _=glp_create_prob();glp_read_lp_from_string(_,null,n),glp_scale_prob(_,GLP_SF_AUTO);let g=new SMCP({presolve:GLP_ON});if(glp_simplex(_,g),this.mip)for(glp_intopt(_),i=glp_mip_obj_val(_),l=1;l<=glp_get_num_cols(_);l++)s[glp_get_col_name(_,l)]=glp_mip_col_val(_,l);else for(i=glp_get_obj_val(_),l=1;l<=glp_get_num_cols(_);l++)s[glp_get_col_name(_,l)]=glp_get_col_prim(_,l);this.apply_solution(s),this.elapsedTime=(new Date).getTime()-e}fillModel(e){e.minimize="Minimize \n",e.subjectTo="Subject To \n",e.bounds="\nBounds \n";for(let t of this.g.edges)this.isSameRankEdge(t)||(e.minimize+="bend_"+t.leftAttribute.name+"_"+t.rightAttribute.name+" + ",e.subjectTo+="y_"+t.leftAttribute.name+" - y_"+t.rightAttribute.name+" - bend_"+t.leftAttribute.name+"_"+t.rightAttribute.name+" <= 0\n",e.subjectTo+="y_"+t.rightAttribute.name+" - y_"+t.leftAttribute.name+" - bend_"+t.leftAttribute.name+"_"+t.rightAttribute.name+" <= 0\n");for(let t=0;t<this.g.tableIndex.length;t++){let i=this.g.tableIndex[t];for(let t=0;t<i.length-1;t++){let l=i[t],n=i[t+1];e.subjectTo+="y_"+n.name+" - y_"+l.name+" > "+(2+l.attributes.length)+"\n"}}for(let t of this.g.tables)for(let i=0;i<t.attributes.length;i++){let l=t.attributes[i];e.subjectTo+="y_"+l.name+" - y_"+t.name+" = "+(i+1)+"\n"}e.minimize=e.minimize.substring(0,e.minimize.length-2)+"\n\n"}isSameRankEdge(e){return e.leftTable.depth==e.rightTable.depth}modelToString(e){return e.minimize+e.subjectTo+e.bounds+"\nEnd\n"}apply_solution(e){for(let t=0;t<this.g.tableIndex.length;t++){let i=this.g.tableIndex[t];for(let t=0;t<i.length;t++){let l=i[t],n=e["y_"+l.name];l.verticalAttrOffset=n-l.weight*this.g.baseRowDistance}}}}
class LPBendinessCombined{constructor(e){this.g=e,this.mip=!0,this.verbose=!1,this.elapsedTime=0}async arrange(){let e=(new Date).getTime(),t={};this.fillModel(t);let l,n,i=this.modelToString(t),s={};this.verbose&&glp_set_print_func(console.log);let o=glp_create_prob();glp_read_lp_from_string(o,null,i),glp_scale_prob(o,GLP_SF_AUTO);let a=new SMCP({presolve:GLP_ON});if(glp_simplex(o,a),this.mip)for(glp_intopt(o),l=glp_mip_obj_val(o),n=1;n<=glp_get_num_cols(o);n++)s[glp_get_col_name(o,n)]=glp_mip_col_val(o,n);else for(l=glp_get_obj_val(o),n=1;n<=glp_get_num_cols(o);n++)s[glp_get_col_name(o,n)]=glp_get_col_prim(o,n);this.apply_solution(s),this.elapsedTime=(new Date).getTime()-e}fillModel(e){e.minimize="Minimize \n",e.subjectTo="Subject To \n",e.bounds="\nBounds \n";let t={},l={},n=(e,t,n,i)=>{let s="c_"+e+t+"_"+n+i;return l[s]="",s},i=(e,t,l="")=>"x_"+l+e+"_"+l+t;for(let e=0;e<this.g.maxDepth+1;e++){let l=this.g.tableIndex[e],n=l.map(e=>e.attributes).flat();for(let e=0;e<l.length;e++){let n=l[e].name;for(let s=e+1;s<l.length;s++){let e=l[s].name;t[i(n,e,"T")]=""}}for(let e=0;e<n.length;e++){let l=n[e].name;for(let s=e+1;s<n.length;s++){let e=n[s].name;t[i(l,e)]=""}}}for(let t=0;t<this.g.maxDepth+1;t++){let l=this.g.tableIndex[t],n=l.map(e=>e.attributes).flat();for(let t=0;t<l.length;t++){let n=l[t].name;for(let s=t+1;s<l.length;s++){let t=l[s].name;for(let o=s+1;o<l.length;o++){let s=l[o].name;e.subjectTo+=i(n,t,"T")+" + "+i(t,s,"T")+" - "+i(n,s,"T")+" >= 0\n",e.subjectTo+="- "+i(n,t,"T")+" - "+i(t,s,"T")+" + "+i(n,s,"T")+" >= -1\n"}}}for(let t=0;t<n.length;t++){let l=n[t].name;for(let s=t+1;s<n.length;s++){let o=n[s].name;if(t!=s&&n[t].table.name==n[s].table.name)for(let a=s+1;a<n.length;a++){if(a==s||a==t)continue;if(n[a].table.name!=n[t].table.name)continue;if(n[a].table.name!=n[s].table.name)continue;let u=n[a].name;e.subjectTo+=i(l,o)+" + "+i(o,u)+" - "+i(l,u)+" >= 0\n",e.subjectTo+="- "+i(l,o)+" - "+i(o,u)+" + "+i(l,u)+" >= -1\n"}}}}for(let l=0;l<this.g.maxDepth+1;l++){let s=this.g.edgeIndex[l];for(let l=0;l<s.length;l++){let o=s[l];for(let a=l+1;a<s.length;a++){let l=s[a];if(null!=o.leftTable.group&&null!=o.rightTable.group&&l.leftTable.group!=l.leftTable.group&&(e.subjectTo+=n(u1,v1,u2,v2)+" = 0\n"),this.isSameRankEdge(o)||this.isSameRankEdge(l)){if(this.isSameRankEdge(o)&&this.isSameRankEdge(l)){let s=o.leftAttribute.name,a=o.rightAttribute.name,u=l.leftAttribute.name,b=l.rightAttribute.name,m=n(s,a,u,b),r=1;e.subjectTo+=m+"";let T=i(s,u);null!=t[T]?e.subjectTo+=" + "+T:(T=i(u,s),r-=1,e.subjectTo+=" - "+T);let g=i(a,b);null!=t[g]?e.subjectTo+=" + "+g:(r-=1,g=i(b,a),e.subjectTo+=" - "+g);let c=i(u,a);null!=t[c]?e.subjectTo+=c:(r-=1,c=i(a,u),e.subjectTo+=" + "+c),e.subjectTo+=" >= "+r+"\n",m=n(s,a,u,b),r=1,e.subjectTo+=m+"",T=i(s,u),null!=t[T]?e.subjectTo+=" + "+T:(T=i(u,s),r-=1,e.subjectTo+=" - "+T),g=i(a,b),null!=t[g]?e.subjectTo+=" + "+g:(r-=1,g=i(b,a),e.subjectTo+=" - "+g),c=i(b,s),null!=t[c]?e.subjectTo+=c:(r-=1,c=i(s,b),e.subjectTo+=" + "+c),e.subjectTo+=" >= "+r+"\n"}else if(this.isSameRankEdge(o)&&!this.isSameRankEdge(l)){let s=o.leftAttribute.name,a=o.rightAttribute.name,u=l.leftAttribute.name,b=l.rightAttribute.name,m=n(s,a,u,b),r=1;e.subjectTo+=m+"";let T=i(u,s);null!=t[T]?e.subjectTo+=" + "+T:(T=i(s,u),r-=1,e.subjectTo+=" - "+T);let g=i(a,u);null!=t[g]?e.subjectTo+=" + "+g:(r-=1,g=i(u,a),e.subjectTo+=" - "+g),e.subjectTo+=" >= "+r+"\n",m=n(s,a,u,b),r=1,e.subjectTo+=m+"",T=i(u,a),null!=t[T]?e.subjectTo+=" + "+T:(T=i(a,u),r-=1,e.subjectTo+=" - "+T),g=i(s,u),null!=t[g]?e.subjectTo+=" + "+g:(r-=1,g=i(u,s),e.subjectTo+=" - "+g),e.subjectTo+=" >= "+r+"\n"}else if(!this.isSameRankEdge(o)&&this.isSameRankEdge(l)){let s=o.leftAttribute.name,a=o.rightAttribute.name,u=l.leftAttribute.name,b=l.rightAttribute.name,m=n(s,a,u,b),r=1;e.subjectTo+=m+"";let T=i(s,u);null!=t[T]?e.subjectTo+=" + "+T:(T=i(u,s),r-=1,e.subjectTo+=" - "+T);let g=i(b,s);null!=t[g]?e.subjectTo+=" + "+g:(r-=1,g=i(s,b),e.subjectTo+=" - "+g),e.subjectTo+=" >= "+r+"\n",m=n(s,a,u,b),r=1,e.subjectTo+=m+"",T=i(s,b),null!=t[T]?e.subjectTo+=" + "+T:(T=i(b,s),r-=1,e.subjectTo+=" - "+T),g=i(u,s),null!=t[g]?e.subjectTo+=" + "+g:(r-=1,g=i(s,u),e.subjectTo+=" - "+g),e.subjectTo+=" >= "+r+"\n"}}else{let s=o.leftAttribute.name,a=o.rightAttribute.name,u=l.leftAttribute.name,b=l.rightAttribute.name;if(s==u||a==b)continue;let m=n(s,a,u,b),r=1;e.subjectTo+=m+"";let T=i(u,s);null!=t[T]?e.subjectTo+=" + "+T:(T=i(s,u),r-=1,e.subjectTo+=" - "+T);let g=i(a,b);null!=t[g]?e.subjectTo+=" + "+g:(g=i(b,a),r-=1,e.subjectTo+=" - "+g),e.subjectTo+=" >= "+r+"\n",m=n(s,a,u,b),r=1,e.subjectTo+=m+"",T=i(s,u),null!=t[T]?e.subjectTo+=" + "+T:(T=i(u,s),r-=1,e.subjectTo+=" - "+T),g=i(b,a),null!=t[g]?e.subjectTo+=" + "+g:(g=i(a,b),r-=1,e.subjectTo+=" - "+g),e.subjectTo+=" >= "+r+"\n"}}}}for(let t=0;t<this.g.maxDepth+1;t++){let l=this.g.tableIndex[t].map(e=>e.attributes).flat();for(let t=0;t<l.length;t++){let n=l[t].name,s=l[t].table.name;for(let o=t+1;o<l.length;o++){let t=l[o].name,a=l[o].table.name;s!=a&&(e.subjectTo+=i(n,t)+" - "+i(s,a,"T")+" = 0\n")}}}for(let t of this.g.edges)e.subjectTo+="y_"+t.leftAttribute.name+" - y_"+t.rightAttribute.name+" - bend_"+t.leftAttribute.name+"_"+t.rightAttribute.name+" <= 0\n",e.subjectTo+="y_"+t.rightAttribute.name+" - y_"+t.leftAttribute.name+" - bend_"+t.leftAttribute.name+"_"+t.rightAttribute.name+" <= 0\n";let s=0;for(let l of this.g.tableIndex)for(let n in l){let o=l[n];for(let a in l){if(n==a)continue;let u=l[a],b=i(u.name,o.name,"T");null!=t[b]?(e.subjectTo+="z_"+s+" - "+"20 "+b+" <= 0\n",e.subjectTo+="z_"+s+" - y_"+u.name+" <= 0\n",e.subjectTo+="z_"+s+" - y_"+u.name+" - "+"20 "+b+" >= - "+"20\n",e.subjectTo+="z_"+s+" >= 0\n",e.subjectTo+="y_"+o.name+" - z_"+s+" - "+(2+u.attributes.length)+" "+b+" >= 0\n"):(b=i(o.name,u.name,"T"),e.subjectTo+="z_"+s+" + "+"20 "+b+" <= "+"20\n",e.subjectTo+="z_"+s+" - y_"+u.name+" <= 0\n",e.subjectTo+="z_"+s+" - y_"+u.name+" + "+"20 "+b+" >= 0\n",e.subjectTo+="z_"+s+" >= 0\n",e.subjectTo+="y_"+o.name+" - z_"+s+" + "+(2+u.attributes.length)+" "+b+" >= "+(2+u.attributes.length)+"\n"),s+=1}}for(let l of this.g.tables)for(let n in l.attributes){let s=l.attributes[n],o=1,a="y_"+s.name+" - y_"+l.name;for(let e in l.attributes){if(n==e)continue;let u=l.attributes[e],b=i(u.name,s.name);if(null!=t[b])a+=" - "+b;else{a+=" + "+i(s.name,u.name),o+=1}}a+=" = "+o+"\n",e.subjectTo+=a}for(let t in l)e.minimize+=t+" + ";for(let t of this.g.edges)e.minimize+="0.1 bend_"+t.leftAttribute.name+"_"+t.rightAttribute.name+" + ";e.minimize=e.minimize.substring(0,e.minimize.length-2)+"\n\n";for(let l in t)e.bounds+="binary "+l+"\n"}isSameRankEdge(e){return e.leftTable.depth==e.rightTable.depth}modelToString(e){return e.minimize+e.subjectTo+e.bounds+"\nEnd\n"}apply_solution(e){console.log(e);for(let t=0;t<this.g.maxDepth+1;t++){let l=this.g.tableIndex[t];l.sort((t,l)=>0==e["x_T"+t.name+"_T"+l.name]?1:1==e["x_T"+t.name+"_T"+l.name]?-1:1==e["x_T"+l.name+"_T"+t.name]?1:0==e["x_T"+l.name+"_T"+t.name]?-1:void 0);for(let e in l)l[e].weight=e;for(let t of l){t.attributes.sort((t,l)=>0==e["x_"+t.name+"_"+l.name]?1:1==e["x_"+t.name+"_"+l.name]?-1:1==e["x_"+l.name+"_"+t.name]?1:0==e["x_"+l.name+"_"+t.name]?-1:void 0);for(let e=0;e<t.attributes.length;e++)t.attributes[e].weight=e}}for(let t=0;t<this.g.tableIndex.length;t++){let l=this.g.tableIndex[t];for(let t=0;t<l.length;t++){let n=l[t],i=e["y_"+n.name];null!=i&&(n.verticalAttrOffset=i-n.weight*this.g.baseRowDistance)}}}}
class LPBendinessCombinedPlusGroups{constructor(t){this.g=t,this.mip=!0,this.verbose=!1,this.elapsedTime=0}async arrange(){let t=(new Date).getTime(),e={};this.fillModel(e);let i,l,n=this.modelToString(e),s={};this.verbose&&glp_set_print_func(console.log);let o=glp_create_prob();glp_read_lp_from_string(o,null,n),glp_scale_prob(o,GLP_SF_AUTO);let d=new SMCP({presolve:GLP_ON});if(glp_simplex(o,d),this.mip)for(glp_intopt(o),i=glp_mip_obj_val(o),l=1;l<=glp_get_num_cols(o);l++)s[glp_get_col_name(o,l)]=glp_mip_col_val(o,l);else for(i=glp_get_obj_val(o),l=1;l<=glp_get_num_cols(o);l++)s[glp_get_col_name(o,l)]=glp_get_col_prim(o,l);this.apply_solution(s),this.elapsedTime=(new Date).getTime()-t}fillModel(t){let e=0;t.minimize="Minimize \n",t.subjectTo="Subject To \n",t.bounds="\nBounds \n";let i={},l={},n=(t,e,i,n)=>{let s="c_"+t+e+"_"+i+n;return l[s]="",s},s=(t,e,i="")=>"x_"+i+t+"_"+i+e;for(let t=0;t<this.g.maxDepth+1;t++){let e=this.g.tableIndex[t],l=e.map(t=>t.attributes).flat();for(let t=0;t<e.length;t++){let l=e[t].id;for(let n=t+1;n<e.length;n++){let t=e[n].id;i[s(l,t,"T")]=""}}for(let t=0;t<l.length;t++){let e=l[t].id;for(let n=t+1;n<l.length;n++){let t=l[n].id;i[s(e,t)]=""}}}for(let i of this.g.groups){for(let e of i.tables)t.subjectTo+="y_groupstart_"+i.id+" - y_"+e.id+" <= 0\n",t.subjectTo+="y_groupend_"+i.id+" - y_"+e.id+" >= "+(e.attributes.length+2)+"\n";for(let l of this.g.tables)-1==i.tables.indexOf(l)&&-1!=i.tables.map(t=>t.depth).indexOf(l.depth)&&(t.subjectTo+="y_"+l.id+" - "+"40 z_"+e+" - y_groupstart_"+i.id+" <= - "+(l.attributes.length+2)+"\n",t.subjectTo+="- y_"+l.id+" + "+"40 z_"+e+" + y_groupend_"+i.id+" <= "+"40\n",e+=1)}for(let i=0;i<=e;i++)t.bounds+="binary z_"+i+"\n";let o=(t,e,l)=>{let n="",o=0,d=" - ";" - "==t&&(d=" + ");let r=s(e,l);return null!=i[r]?n+=t+r:(r=s(l,e),null==i[r]&&console.warn(r+"not defined"),o-=1,n+=d+r),[n,o]};for(let e=0;e<this.g.maxDepth+1;e++){let i=this.g.tableIndex[e],l=i.map(t=>t.attributes).flat();for(let e=0;e<i.length;e++){let l=i[e].id;for(let n=e+1;n<i.length;n++){let e=i[n].id;for(let o=n+1;o<i.length;o++){let n=i[o].id;t.subjectTo+=s(l,e,"T")+" + "+s(e,n,"T")+" - "+s(l,n,"T")+" >= 0\n",t.subjectTo+="- "+s(l,e,"T")+" - "+s(e,n,"T")+" + "+s(l,n,"T")+" >= -1\n"}}}for(let e=0;e<l.length;e++){let i=l[e].id;for(let n=e+1;n<l.length;n++){let o=l[n].id;if(e!=n&&l[e].table.id==l[n].table.id)for(let d=n+1;d<l.length;d++){if(d==n||d==e)continue;if(l[d].table.id!=l[e].table.id)continue;if(l[d].table.id!=l[n].table.id)continue;let r=l[d].id;t.subjectTo+=s(i,o)+" + "+s(o,r)+" - "+s(i,r)+" >= 0\n",t.subjectTo+="- "+s(i,o)+" - "+s(o,r)+" + "+s(i,r)+" >= -1\n"}}}}for(let e=0;e<this.g.maxDepth+1;e++){let i=this.g.edgeIndex[e];for(let e=0;e<i.length;e++){let l=i[e];for(let s=e+1;s<i.length;s++){let e=i[s],d=l.leftAttribute.id,r=l.rightAttribute.id,b=e.leftAttribute.id,u=e.rightAttribute.id;if(this.isSameRankEdge(l)||this.isSameRankEdge(e)){if(this.isSameRankEdge(l)&&this.isSameRankEdge(e)){let e=n(d,r,b,u),i=1+o(" + ",d,b)[1]+o(" + ",r,u)[1]+o(" + ",b,r)[1];t.subjectTo+=e+""+o(" + ",d,b)[0]+o(" + ",r,u)[0]+o(" + ",b,r)[0],t.subjectTo+=" >= "+i+"\n",e=n(d,r,b,u),i=1+o(" + ",d,b)[1]+o(" + ",r,u)[1]+o(" + ",u,d)[1],t.subjectTo+=e+""+o(" + ",d,b)[0]+o(" + ",r,u)[0]+o(" + ",u,d)[0],t.subjectTo+=" >= "+i+"\n"}else if(this.isSameRankEdge(l)&&!this.isSameRankEdge(e)){let e=n(d,r,b,u),i=1+o(" + ",b,d)[1]+o(" + ",r,b)[1];t.subjectTo+=e+""+o(" + ",b,d)[0]+o(" + ",r,b)[0],t.subjectTo+=" >= "+i+"\n",e=n(d,r,b,u),i=1+o(" + ",b,r)[1]+o(" + ",d,b)[1],t.subjectTo+=e+""+o(" + ",b,r)[0]+o(" + ",d,b)[0],t.subjectTo+=" >= "+i+"\n"}else if(!this.isSameRankEdge(l)&&this.isSameRankEdge(e)){let e=n(d,r,b,u),i=1+o(" + ",d,b)[1]+o(" + ",u,d)[1];t.subjectTo+=e+""+o(" + ",d,b)[0]+o(" + ",u,d)[0],t.subjectTo+=" >= "+i+"\n",e=n(d,r,b,u),i=1+o(" + ",d,u)[1]+o(" + ",b,d)[1],t.subjectTo+=e+""+o(" + ",d,u)[0]+o(" + ",b,d)[0],t.subjectTo+=" >= "+i+"\n"}}else{if(d==b||r==u)continue;let e=n(d,r,b,u),i=1+o(" + ",b,d)[1]+o(" + ",r,u)[1];t.subjectTo+=e+""+o(" + ",b,d)[0]+o(" + ",r,u)[0],t.subjectTo+=" >= "+i+"\n",e=n(d,r,b,u),i=1+o(" + ",d,b)[1]+o(" + ",u,r)[1],t.subjectTo+=e+""+o(" + ",d,b)[0]+o(" + ",u,r)[0],t.subjectTo+=" >= "+i+"\n"}}}}for(let e=0;e<this.g.maxDepth+1;e++){let i=this.g.tableIndex[e].map(t=>t.attributes).flat();for(let e=0;e<i.length;e++){let l=i[e].id,n=i[e].table.id;for(let o=e+1;o<i.length;o++){let e=i[o].id,d=i[o].table.id;n!=d&&(t.subjectTo+=s(l,e)+" - "+s(n,d,"T")+" = 0\n")}}}for(let e of this.g.edges)t.subjectTo+="y_"+e.leftAttribute.id+" - y_"+e.rightAttribute.id+" - bend_"+e.leftAttribute.id+"_"+e.rightAttribute.id+" <= 0\n",t.subjectTo+="y_"+e.rightAttribute.id+" - y_"+e.leftAttribute.id+" - bend_"+e.leftAttribute.id+"_"+e.rightAttribute.id+" <= 0\n";for(let l of this.g.tableIndex)for(let n in l){let o=l[n];for(let d in l){if(n==d)continue;let r=l[d],b=s(r.id,o.id,"T");null!=i[b]?(t.subjectTo+="z_"+e+" - "+"40 "+b+" <= 0\n",t.subjectTo+="z_"+e+" - y_"+r.id+" <= 0\n",t.subjectTo+="z_"+e+" - y_"+r.id+" - "+"40 "+b+" >= - "+"40\n",t.subjectTo+="z_"+e+" >= 0\n",t.subjectTo+="y_"+o.id+" - z_"+e+" - "+(2+r.attributes.length)+" "+b+" >= 0\n"):(b=s(o.id,r.id,"T"),t.subjectTo+="z_"+e+" + "+"40 "+b+" <= "+"40\n",t.subjectTo+="z_"+e+" - y_"+r.id+" <= 0\n",t.subjectTo+="z_"+e+" - y_"+r.id+" + "+"40 "+b+" >= 0\n",t.subjectTo+="z_"+e+" >= 0\n",t.subjectTo+="y_"+o.id+" - z_"+e+" + "+(2+r.attributes.length)+" "+b+" >= "+(2+r.attributes.length)+"\n"),e+=1}}for(let e of this.g.tables)for(let l in e.attributes){let n=e.attributes[l],o=1,d="y_"+n.id+" - y_"+e.id;for(let t in e.attributes){if(l==t)continue;let r=e.attributes[t],b=s(r.id,n.id);if(null!=i[b])d+=" - "+b;else{d+=" + "+s(n.id,r.id),o+=1}}d+=" = "+o+"\n",t.subjectTo+=d}for(let e in l)t.minimize+=e+" + ";for(let e of this.g.edges)t.minimize+="0.1 bend_"+e.leftAttribute.id+"_"+e.rightAttribute.id+" + ";t.minimize=t.minimize.substring(0,t.minimize.length-2)+"\n\n";for(let e in i)t.bounds+="binary "+e+"\n";for(let e in l)t.bounds+="binary "+e+"\n"}isSameRankEdge(t){return t.leftTable.depth==t.rightTable.depth}modelToString(t){return t.minimize+t.subjectTo+t.bounds+"\nEnd\n"}apply_solution(t){console.log(t);for(let e=0;e<this.g.maxDepth+1;e++){let i=this.g.tableIndex[e];i.sort((e,i)=>0==t["x_T"+e.id+"_T"+i.id]?1:1==t["x_T"+e.id+"_T"+i.id]?-1:1==t["x_T"+i.id+"_T"+e.id]?1:0==t["x_T"+i.id+"_T"+e.id]?-1:void 0);for(let t in i)i[t].weight=t;for(let e of i){e.attributes.sort((e,i)=>0==t["x_"+e.id+"_"+i.id]?1:1==t["x_"+e.id+"_"+i.id]?-1:1==t["x_"+i.id+"_"+e.id]?1:0==t["x_"+i.id+"_"+e.id]?-1:void 0);for(let t=0;t<e.attributes.length;t++)e.attributes[t].weight=t}}for(let e=0;e<this.g.tableIndex.length;e++){let i=this.g.tableIndex[e];for(let e=0;e<i.length;e++){let l=i[e],n=t["y_"+l.id];null!=n&&(l.verticalAttrOffset=n-l.weight*this.g.baseRowDistance)}}}}
class LPFormulation{constructor(e){this.g=e,this.mip=!0,this.verbose=!1,this.elapsedTime=0}async arrange(){let e=(new Date).getTime(),t={};this.fillModel(t);let l,n,i=this.modelToString(t),a={};this.verbose&&glp_set_print_func(console.log);let o=glp_create_prob();glp_read_lp_from_string(o,null,i),glp_scale_prob(o,GLP_SF_AUTO);let s=new SMCP({presolve:GLP_ON});if(glp_simplex(o,s),this.mip)for(glp_intopt(o),l=glp_mip_obj_val(o),n=1;n<=glp_get_num_cols(o);n++)a[glp_get_col_name(o,n)]=glp_mip_col_val(o,n);else for(l=glp_get_obj_val(o),n=1;n<=glp_get_num_cols(o);n++)a[glp_get_col_name(o,n)]=glp_get_col_prim(o,n);this.apply_solution(a),this.elapsedTime=(new Date).getTime()-e}fillModel(e){e.minimize="Minimize \n",e.subjectTo="Subject To \n",e.bounds="\nBounds \n";let t={},l={},n=(e,t,n,i)=>{let a="c_"+e+t+"_"+n+i;return l[a]="",a},i=(e,t,l="")=>"x_"+l+e+"_"+l+t;for(let e=0;e<this.g.maxDepth+1;e++){let l=this.g.tableIndex[e],n=l.map(e=>e.attributes).flat();for(let e=0;e<l.length;e++){let n=l[e].name;for(let a=e+1;a<l.length;a++){let e=l[a].name;t[i(n,e,"T")]=""}}for(let e=0;e<n.length;e++){let l=n[e].name;for(let a=e+1;a<n.length;a++){let e=n[a].name;t[i(l,e)]=""}}}for(let t=0;t<this.g.maxDepth+1;t++){let l=this.g.tableIndex[t],n=l.map(e=>e.attributes).flat();for(let t=0;t<l.length;t++){let n=l[t].name;for(let a=t+1;a<l.length;a++){let t=l[a].name;for(let o=a+1;o<l.length;o++){let a=l[o].name;e.subjectTo+=i(n,t,"T")+" + "+i(t,a,"T")+" - "+i(n,a,"T")+" >= 0\n",e.subjectTo+="- "+i(n,t,"T")+" - "+i(t,a,"T")+" + "+i(n,a,"T")+" >= -1\n"}}}for(let t=0;t<n.length;t++){let l=n[t].name;for(let a=t+1;a<n.length;a++){let o=n[a].name;if(t!=a&&n[t].table.name==n[a].table.name)for(let s=a+1;s<n.length;s++){if(s==a||s==t)continue;if(n[s].table.name!=n[t].table.name)continue;if(n[s].table.name!=n[a].table.name)continue;let u=n[s].name;e.subjectTo+=i(l,o)+" + "+i(o,u)+" - "+i(l,u)+" >= 0\n",e.subjectTo+="- "+i(l,o)+" - "+i(o,u)+" + "+i(l,u)+" >= -1\n"}}}}for(let l=0;l<this.g.maxDepth+1;l++){let a=this.g.edgeIndex[l];for(let l=0;l<a.length;l++){let o=a[l];for(let s=l+1;s<a.length;s++){let l=a[s];if(null!=o.leftTable.group&&null!=o.rightTable.group&&l.leftTable.group!=l.leftTable.group&&(e.subjectTo+=n(u1,v1,u2,v2)+" = 0\n"),this.isSameRankEdge(o)||this.isSameRankEdge(l)){if(this.isSameRankEdge(o)&&this.isSameRankEdge(l)){let a=o.leftAttribute.name,s=o.rightAttribute.name,u=l.leftAttribute.name,b=l.rightAttribute.name,m=n(a,s,u,b),r=1;e.subjectTo+=m+"";let g=i(a,u);null!=t[g]?e.subjectTo+=" + "+g:(g=i(u,a),r-=1,e.subjectTo+=" - "+g);let _=i(s,b);null!=t[_]?e.subjectTo+=" + "+_:(r-=1,_=i(b,s),e.subjectTo+=" - "+_);let h=i(u,s);null!=t[h]?e.subjectTo+=h:(r-=1,h=i(s,u),e.subjectTo+=" + "+h),e.subjectTo+=" >= "+r+"\n",m=n(a,s,u,b),r=1,e.subjectTo+=m+"",g=i(a,u),null!=t[g]?e.subjectTo+=" + "+g:(g=i(u,a),r-=1,e.subjectTo+=" - "+g),_=i(s,b),null!=t[_]?e.subjectTo+=" + "+_:(r-=1,_=i(b,s),e.subjectTo+=" - "+_),h=i(b,a),null!=t[h]?e.subjectTo+=h:(r-=1,h=i(a,b),e.subjectTo+=" + "+h),e.subjectTo+=" >= "+r+"\n"}else if(this.isSameRankEdge(o)&&!this.isSameRankEdge(l)){let a=o.leftAttribute.name,s=o.rightAttribute.name,u=l.leftAttribute.name,b=l.rightAttribute.name,m=n(a,s,u,b),r=1;e.subjectTo+=m+"";let g=i(u,a);null!=t[g]?e.subjectTo+=" + "+g:(g=i(a,u),r-=1,e.subjectTo+=" - "+g);let _=i(s,u);null!=t[_]?e.subjectTo+=" + "+_:(r-=1,_=i(u,s),e.subjectTo+=" - "+_),e.subjectTo+=" >= "+r+"\n",m=n(a,s,u,b),r=1,e.subjectTo+=m+"",g=i(u,s),null!=t[g]?e.subjectTo+=" + "+g:(g=i(s,u),r-=1,e.subjectTo+=" - "+g),_=i(a,u),null!=t[_]?e.subjectTo+=" + "+_:(r-=1,_=i(u,a),e.subjectTo+=" - "+_),e.subjectTo+=" >= "+r+"\n"}else if(!this.isSameRankEdge(o)&&this.isSameRankEdge(l)){let a=o.leftAttribute.name,s=o.rightAttribute.name,u=l.leftAttribute.name,b=l.rightAttribute.name,m=n(a,s,u,b),r=1;e.subjectTo+=m+"";let g=i(a,u);null!=t[g]?e.subjectTo+=" + "+g:(g=i(u,a),r-=1,e.subjectTo+=" - "+g);let _=i(b,a);null!=t[_]?e.subjectTo+=" + "+_:(r-=1,_=i(a,b),e.subjectTo+=" - "+_),e.subjectTo+=" >= "+r+"\n",m=n(a,s,u,b),r=1,e.subjectTo+=m+"",g=i(a,b),null!=t[g]?e.subjectTo+=" + "+g:(g=i(b,a),r-=1,e.subjectTo+=" - "+g),_=i(u,a),null!=t[_]?e.subjectTo+=" + "+_:(r-=1,_=i(a,u),e.subjectTo+=" - "+_),e.subjectTo+=" >= "+r+"\n"}}else{let a=o.leftAttribute.name,s=o.rightAttribute.name,u=l.leftAttribute.name,b=l.rightAttribute.name;if(a==u||s==b)continue;let m=n(a,s,u,b),r=1;e.subjectTo+=m+"";let g=i(u,a);null!=t[g]?e.subjectTo+=" + "+g:(g=i(a,u),r-=1,e.subjectTo+=" - "+g);let _=i(s,b);null!=t[_]?e.subjectTo+=" + "+_:(_=i(b,s),r-=1,e.subjectTo+=" - "+_),e.subjectTo+=" >= "+r+"\n",m=n(a,s,u,b),r=1,e.subjectTo+=m+"",g=i(a,u),null!=t[g]?e.subjectTo+=" + "+g:(g=i(u,a),r-=1,e.subjectTo+=" - "+g),_=i(b,s),null!=t[_]?e.subjectTo+=" + "+_:(_=i(s,b),r-=1,e.subjectTo+=" - "+_),e.subjectTo+=" >= "+r+"\n"}}}}for(let t=0;t<this.g.maxDepth+1;t++){let l=this.g.tableIndex[t].map(e=>e.attributes).flat();for(let t=0;t<l.length;t++){let n=l[t].name,a=l[t].table.name;for(let o=t+1;o<l.length;o++){let t=l[o].name,s=l[o].table.name;a!=s&&(e.subjectTo+=i(n,t)+" - "+i(a,s,"T")+" = 0\n")}}}for(let t in l)e.minimize+=t+" + ";e.minimize=e.minimize.substring(0,e.minimize.length-2)+"\n\n";for(let l in t)e.bounds+="binary "+l+"\n"}fillModel2(e){e.minimize="Minimize \ncrossings: ",e.subjectTo="Subject To \n",e.bounds="\nBounds \n";for(let t=0;t<this.g.maxDepth+1;t++){let l=this.g.edgeIndex[t];for(let t=0;t<l.length;t++)for(let n=0;n<l.length;n++)if(l[t]!=l[n]){let i="c_"+l[t].leftAttribute.name+l[t].rightAttribute.name+"_"+l[n].leftAttribute.name+l[n].rightAttribute.name;e.minimize+=i+" + ",e.bounds+="binary "+i+"\n"}}e.minimize=e.minimize.substring(0,e.minimize.length-2)+"\n\n";for(let t=0;t<this.g.maxDepth+1;t++){let l=this.g.tableIndex[t];for(let t=0;t<l.length;t++){let n=l[t];for(let i=0;i<l.length;i++){if(t==i)continue;let a=l[i];n!=a&&(e.subjectTo+="x_T"+n.name+"_T"+a.name+" + x_T"+a.name+"_T"+n.name+" = 1\n",e.bounds+="binary x_T"+n.name+"_T"+a.name+"\n")}}}for(let t=0;t<this.g.maxDepth+1;t++){let l=this.g.tableIndex[t];for(let t=0;t<l.length;t++){let n=l[t];for(let i=0;i<l.length;i++){if(t==i)continue;let a=l[i];for(let t=i+1;t<l.length;t++){let i=l[t];e.subjectTo+="x_T"+i.name+"_T"+n.name+" - x_T"+i.name+"_T"+a.name+" - x_T"+a.name+"_T"+n.name+" >= - 1\n"}}}}for(let t=0;t<this.g.maxDepth+1;t++){let l=this.g.tableIndex[t].map(e=>e.attributes).flat();for(let t=0;t<l.length;t++){let n=l[t];for(let i=t+1;i<l.length;i++){let t=l[i];n!=t&&(e.subjectTo+="x_"+n.name+"_"+t.name+" + x_"+t.name+"_"+n.name+" = 1\n")}}}for(let t=0;t<this.g.maxDepth+1;t++){let l=this.g.tableIndex[t].map(e=>e.attributes).flat();for(let t of l)for(let n of l)t.table!=n.table&&(e.subjectTo+="x_"+t.name+"_"+n.name+" - x_T"+t.table.name+"_T"+n.table.name+" = 0\n")}for(let t=0;t<this.g.maxDepth+1;t++){let l=this.g.tableIndex[t].map(e=>e.attributes).flat();for(let t=0;t<l.length;t++){let n=l[t];for(let i=0;i<l.length;i++){let a=l[i];if(t!=i)for(let o=0;o<l.length;o++){if(o==t||o==i)continue;let s=l[o];e.subjectTo+="x_"+s.name+"_"+n.name+" - x_"+s.name+"_"+a.name+" - x_"+a.name+"_"+n.name+" >= - 1\n"}}}}for(let t=0;t<this.g.maxDepth;t++){let l=this.g.edgeIndex[t];for(let t=0;t<l.length;t++){let n=l[t];for(let i=0;i<l.length;i++){if(t==i)continue;let a=l[i];if(n.leftTable.depth==n.rightTable.depth||a.leftTable.depth==a.rightTable.depth)continue;let o=n.leftAttribute.name,s=n.rightAttribute.name,u=a.leftAttribute.name,b=a.rightAttribute.name;e.subjectTo+="c_"+o+s+"_"+u+b+" + x_"+u+"_"+o+" + x_"+s+"_"+b+" >= 1\n",e.subjectTo+="c_"+o+s+"_"+u+b+" + x_"+o+"_"+u+" + x_"+b+"_"+s+" >= 1\n"}}}for(let t=0;t<this.g.maxDepth+1;t++){let l=this.g.edgeIndex[t];for(let t=0;t<l.length;t++){let n=l[t];for(let t=0;t<l.length;t++){let i=l[t];if(n!=i)if(n.leftTable.depth==n.rightTable.depth&&i.leftTable.depth==i.rightTable.depth){let t=n.leftAttribute.name,l=n.rightAttribute.name,a=i.leftAttribute.name,o=i.rightAttribute.name;e.subjectTo+="c_"+t+l+"_"+a+o+" + x_"+t+"_"+a+" + x_"+l+"_"+o+" + x_"+a+"_"+l+" >= 1\n",e.subjectTo+="c_"+t+l+"_"+a+o+" + x_"+t+"_"+a+" + x_"+l+"_"+o+" + x_"+o+"_"+t+" >= 1\n"}else if(this.isSameRankEdge(n)&&!this.isSameRankEdge(i)){let t=n.leftAttribute.name,l=n.rightAttribute.name,a=i.leftAttribute.name,o=i.rightAttribute.name;e.subjectTo+="c_"+t+l+"_"+a+o+" + x_"+a+"_"+t+" + x_"+l+"_"+a+" >= 1\n",e.subjectTo+="c_"+t+l+"_"+a+o+" + x_"+a+"_"+l+" + x_"+t+"_"+a+" >= 1\n"}}}}}isSameRankEdge(e){return e.leftTable.depth==e.rightTable.depth}modelToString(e){return e.minimize+e.subjectTo+e.bounds+"\nEnd\n"}apply_solution(e){for(let t=0;t<this.g.maxDepth+1;t++){let l=this.g.tableIndex[t];l.sort((t,l)=>0==e["x_T"+t.name+"_T"+l.name]?1:1==e["x_T"+t.name+"_T"+l.name]?-1:1==e["x_T"+l.name+"_T"+t.name]?1:0==e["x_T"+l.name+"_T"+t.name]?-1:void 0);for(let e in l)l[e].weight=e;for(let t of l){t.attributes.sort((t,l)=>0==e["x_"+t.name+"_"+l.name]?1:1==e["x_"+t.name+"_"+l.name]?-1:1==e["x_"+l.name+"_"+t.name]?1:0==e["x_"+l.name+"_"+t.name]?-1:void 0);for(let e=0;e<t.attributes.length;e++)t.attributes[e].weight=e}}}}
class Sweep{constructor(t){this.g=t,this.elapsedTime=0}arrange(){let t=(new Date).getTime();this.g.setExactWeights(),this.sweepRight(),this.sweepLeft(),this.elapsedTime=(new Date).getTime()-t}sweepRight(){for(let t=1;t<=this.g.maxDepth;t++){let e,s,g=this.g.tableIndex[t];do{e=this.g.getEdgeCrossingsAtDepth(t-1)+this.g.getEdgeCrossingsAtDepth(t),s=e;do{e=this.g.getEdgeCrossingsAtDepth(t-1)+this.g.getEdgeCrossingsAtDepth(t),s=e;for(let e=0;e<g.length-1;e++){let h=g[e],i=g[e+1];this.swap(h,i);let l=this.g.getEdgeCrossingsAtDepth(t-1)+this.g.getEdgeCrossingsAtDepth(t);s>l?(s=l,g[e]=i,g[e+1]=h):this.swap(h,i)}}while(e>s);do{e=this.g.getEdgeCrossingsAtDepth(t-1)+this.g.getEdgeCrossingsAtDepth(t),s=e;for(let e=0;e<g.length;e++){let h=g[e].attributes;for(let e=0;e<h.length-1;e++){let g=h[e],i=h[e+1];this.swap(g,i);let l=this.g.getEdgeCrossingsAtDepth(t-1)+this.g.getEdgeCrossingsAtDepth(t);s>l?(s=l,h[e]=i,h[e+1]=g):this.swap(g,i)}}}while(e>s)}while(e>s)}}sweepLeft(){for(let t=this.g.maxDepth;t>=2;t--){let e,s,g=this.g.tableIndex[t-1];do{e=this.g.getEdgeCrossingsAtDepth(t-1)+this.g.getEdgeCrossingsAtDepth(t-2),s=e;do{e=this.g.getEdgeCrossingsAtDepth(t-1)+this.g.getEdgeCrossingsAtDepth(t-2),s=e;for(let e=0;e<g.length-1;e++){let h=g[e],i=g[e+1];this.swap(h,i);let l=this.g.getEdgeCrossingsAtDepth(t-1)+this.g.getEdgeCrossingsAtDepth(t-2);s>l?(s=l,g[e]=i,g[e+1]=h):this.swap(h,i)}}while(e>s);do{e=this.g.getEdgeCrossingsAtDepth(t-1)+this.g.getEdgeCrossingsAtDepth(t-2),s=e;for(let e=0;e<g.length;e++){let h=g[e].attributes;for(let e=0;e<h.length-1;e++){let g=h[e],i=h[e+1];this.swap(g,i);let l=this.g.getEdgeCrossingsAtDepth(t-1)+this.g.getEdgeCrossingsAtDepth(t-2);s>l?(s=l,h[e]=i,h[e+1]=g):this.swap(g,i)}}}while(e>s)}while(e>s)}}swap(t,e){let s=t.weight;t.weight=e.weight,e.weight=s}}
class Table{constructor(t,i,h,s,e){this.name=t,this.header=i,this.main=h,this.depth=s,this.attributes=[],this.attrMaps=[],this.weight=0,this.group=void 0,this.groups=[],this.graph=void 0,this.visibility="visible",this.verticalAttrOffset=0,this.id=t,this.type=e}addAttribute(t){this.attributes.push(new Attribute(this,t))}compareTo(t){return this.depth>t.depth?-1:this.depth<t.depth||this.weight<t.weight?1:this.weight>t.weight?-1:0}}
let drawGraph=(t,e,a)=>{let r=d3.line().curve(d3.curveBasis),l=d3.line();table_vert_space=e.baseRowDistance*attr_height,visg=t.append("g").attr("transform","translate(20, 20)");for(let t in[...Array(10).keys()])visg.append("path").attr("stroke-width",1).attr("stroke","#ccc").attr("fill","none").style("stroke-dasharray","5, 3").attr("d",l([[0,attr_height*e.baseRowDistance*t],[1e3,attr_height*e.baseRowDistance*t]]));tablegroups=visg.selectAll(".tables").data(e.tables).enter().append("g").attr("class","tablegroup").attr("id",t=>"tablegroup_"+t.name).style("visibility",t=>t.visibility).attr("transform",t=>"translate("+t.depth*depth_distance+","+(e.tableIndex[t.depth].indexOf(t)*table_vert_space+t.verticalAttrOffset*attr_height)+")"),tablegroups.append("rect").attr("width",table_width).attr("height",t=>t.attributes.length*attr_height+header_height).attr("fill",t=>"groupheader"==t.type?"#eee":"black").attr("stroke","gray").on("click",t=>console.log(t)),tablegroups.append("text").attr("x",table_width/2).attr("y",attr_height/2+5).attr("text-anchor","middle").attr("fill",t=>"groupheader"==t.type?"black":"white").attr("font-size","0.7em").attr("font-family","Arial").text(t=>t.header+" w:"+t.weight),attrgroups=tablegroups.selectAll(".attrs").data(t=>t.attributes).enter().append("g").attr("transform",(t,e)=>"translate(0, "+(header_height+e*attr_height)+")"),attrgroups.append("rect").attr("width",table_width).attr("height",attr_height).attr("fill","#ccc").attr("stroke","white").attr("stroke-width",2).on("click",t=>console.log(t)),attrgroups.append("text").attr("x",table_width/2).attr("y",attr_height/2+3).attr("text-anchor","middle").attr("font-size","0.7em").attr("font-family","Arial").text(t=>t.attr+" w:"+t.weight);e.updateGroupCoords(),visg.selectAll(".grouprects").data(e.groups).enter().append("path").attr("class","grouplines").attr("stroke-width",3).attr("stroke","black").attr("fill","none").style("stroke-dasharray","5, 3").attr("d",t=>l(t.coords)),edges=visg.selectAll(".edges").data(e.edges).enter().append("path").attr("stroke","black").attr("fill","none").attr("d",t=>(first=(t=>[t.leftTable.depth*depth_distance+table_width,t.leftTable.attributes.indexOf(t.att1)*attr_height+header_height+attr_height/2+e.tableIndex[t.leftTable.depth].indexOf(t.leftTable)*table_vert_space+t.leftTable.verticalAttrOffset*attr_height])(t),second=(t=>t.leftTable.depth!=t.rightTable.depth?[t.rightTable.depth*depth_distance,t.rightTable.attributes.indexOf(t.att2)*attr_height+header_height+attr_height/2+e.tableIndex[t.rightTable.depth].indexOf(t.rightTable)*table_vert_space+t.rightTable.verticalAttrOffset*attr_height]:[t.leftTable.depth*depth_distance+table_width,t.rightTable.attributes.indexOf(t.att2)*attr_height+header_height+attr_height/2+e.tableIndex[t.rightTable.depth].indexOf(t.rightTable)*table_vert_space+t.rightTable.verticalAttrOffset*attr_height])(t),r([first,[first[0]+.2*depth_distance,first[1]],[second[0]+(t.leftTable.depth==t.rightTable.depth?1:-1)*depth_distance*.2,second[1]],second]))),d3.select(t.node().parentNode).append("div").append("text").text("crossings: "+e.getEdgeCrossings()+", tables: "+e.tables.length+", edges: "+e.edges.length+", bendiness: "+e.getGraphTotalEdgeBendiness()).style("font-family","Arial").attr("class","crossing_count"),null!=a&&null!=a.elapsedTime&&(d3.select(t.node().parentNode).append("div").append("text").text("time: "+a.elapsedTime+"ms").style("font-family","Arial").attr("class","crossing_count"),null!=a.iterations&&(d3.select(t.node().parentNode).append("text").text("⏹️"),d3.select(t.node().parentNode).append("text").text("⏪").on("click",()=>{a.cur_iteration--,a.apply_iteration(a.cur_iteration),t.selectAll(".tablegroup").transition().duration(750).attr("transform",t=>"translate("+t.depth*depth_distance+" ,  "+a.g.tableIndex[t.depth].indexOf(t)*table_vert_space+" )")}),d3.select(t.node().parentNode).append("text").text(a.cur_iteration),d3.select(t.node().parentNode).append("text").text("⏩").on("click",()=>{}),d3.select(t.node().parentNode).append("text").text("▶️")))};

/**
 * @license
 * Lodash <https://lodash.com/>
 * Copyright OpenJS Foundation and other contributors <https://openjsf.org/>
 * Released under MIT license <https://lodash.com/license>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 */
(function(){var n="Expected a function",t="__lodash_placeholder__",e=[["ary",128],["bind",1],["bindKey",2],["curry",8],["curryRight",16],["flip",512],["partial",32],["partialRight",64],["rearg",256]],r="[object Arguments]",u="[object Array]",i="[object Boolean]",f="[object Date]",o="[object Error]",a="[object Function]",c="[object GeneratorFunction]",l="[object Map]",s="[object Number]",d="[object Object]",h="[object RegExp]",p="[object Set]",v="[object String]",_="[object Symbol]",g="[object WeakMap]",y="[object ArrayBuffer]",b="[object DataView]",w="[object Float32Array]",m="[object Float64Array]",x="[object Int8Array]",j="[object Int16Array]",A="[object Int32Array]",I="[object Uint8Array]",k="[object Uint8ClampedArray]",O="[object Uint16Array]",R="[object Uint32Array]",E=/\b__p \+= '';/g,z=/\b(__p \+=) '' \+/g,S=/(__e\(.*?\)|\b__t\)) \+\n'';/g,L=/&(?:amp|lt|gt|quot|#39);/g,C=/[&<>"']/g,W=RegExp(L.source),U=RegExp(C.source),B=/<%-([\s\S]+?)%>/g,T=/<%([\s\S]+?)%>/g,$=/<%=([\s\S]+?)%>/g,D=/\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,N=/^\w*$/,M=/[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g,F=/[\\^$.*+?()[\]{}|]/g,P=RegExp(F.source),q=/^\s+|\s+$/g,Z=/^\s+/,K=/\s+$/,V=/\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/,G=/\{\n\/\* \[wrapped with (.+)\] \*/,H=/,? & /,J=/[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g,Y=/\\(\\)?/g,Q=/\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g,X=/\w*$/,nn=/^[-+]0x[0-9a-f]+$/i,tn=/^0b[01]+$/i,en=/^\[object .+?Constructor\]$/,rn=/^0o[0-7]+$/i,un=/^(?:0|[1-9]\d*)$/,fn=/[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g,on=/($^)/,an=/['\n\r\u2028\u2029\\]/g,cn="\\u0300-\\u036f\\ufe20-\\ufe2f\\u20d0-\\u20ff",ln="\\xac\\xb1\\xd7\\xf7\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf\\u2000-\\u206f \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000",sn="[\\ud800-\\udfff]",dn="["+ln+"]",hn="["+cn+"]",pn="\\d+",vn="[\\u2700-\\u27bf]",_n="[a-z\\xdf-\\xf6\\xf8-\\xff]",gn="[^\\ud800-\\udfff"+ln+pn+"\\u2700-\\u27bfa-z\\xdf-\\xf6\\xf8-\\xffA-Z\\xc0-\\xd6\\xd8-\\xde]",yn="\\ud83c[\\udffb-\\udfff]",bn="[^\\ud800-\\udfff]",wn="(?:\\ud83c[\\udde6-\\uddff]){2}",mn="[\\ud800-\\udbff][\\udc00-\\udfff]",xn="[A-Z\\xc0-\\xd6\\xd8-\\xde]",jn="(?:"+_n+"|"+gn+")",An="(?:"+xn+"|"+gn+")",In="(?:"+hn+"|"+yn+")"+"?",kn="[\\ufe0e\\ufe0f]?"+In+("(?:\\u200d(?:"+[bn,wn,mn].join("|")+")[\\ufe0e\\ufe0f]?"+In+")*"),On="(?:"+[vn,wn,mn].join("|")+")"+kn,Rn="(?:"+[bn+hn+"?",hn,wn,mn,sn].join("|")+")",En=RegExp("['’]","g"),zn=RegExp(hn,"g"),Sn=RegExp(yn+"(?="+yn+")|"+Rn+kn,"g"),Ln=RegExp([xn+"?"+_n+"+(?:['’](?:d|ll|m|re|s|t|ve))?(?="+[dn,xn,"$"].join("|")+")",An+"+(?:['’](?:D|LL|M|RE|S|T|VE))?(?="+[dn,xn+jn,"$"].join("|")+")",xn+"?"+jn+"+(?:['’](?:d|ll|m|re|s|t|ve))?",xn+"+(?:['’](?:D|LL|M|RE|S|T|VE))?","\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])","\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])",pn,On].join("|"),"g"),Cn=RegExp("[\\u200d\\ud800-\\udfff"+cn+"\\ufe0e\\ufe0f]"),Wn=/[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/,Un=["Array","Buffer","DataView","Date","Error","Float32Array","Float64Array","Function","Int8Array","Int16Array","Int32Array","Map","Math","Object","Promise","RegExp","Set","String","Symbol","TypeError","Uint8Array","Uint8ClampedArray","Uint16Array","Uint32Array","WeakMap","_","clearTimeout","isFinite","parseInt","setTimeout"],Bn=-1,Tn={};Tn[w]=Tn[m]=Tn[x]=Tn[j]=Tn[A]=Tn[I]=Tn["[object Uint8ClampedArray]"]=Tn[O]=Tn[R]=!0,Tn[r]=Tn[u]=Tn[y]=Tn[i]=Tn[b]=Tn[f]=Tn[o]=Tn[a]=Tn[l]=Tn[s]=Tn[d]=Tn[h]=Tn[p]=Tn[v]=Tn[g]=!1;var $n={};$n[r]=$n[u]=$n[y]=$n[b]=$n[i]=$n[f]=$n[w]=$n[m]=$n[x]=$n[j]=$n[A]=$n[l]=$n[s]=$n[d]=$n[h]=$n[p]=$n[v]=$n[_]=$n[I]=$n["[object Uint8ClampedArray]"]=$n[O]=$n[R]=!0,$n[o]=$n[a]=$n[g]=!1;var Dn={"\\":"\\","'":"'","\n":"n","\r":"r","\u2028":"u2028","\u2029":"u2029"},Nn=parseFloat,Mn=parseInt,Fn="object"==typeof global&&global&&global.Object===Object&&global,Pn="object"==typeof self&&self&&self.Object===Object&&self,qn=Fn||Pn||Function("return this")(),Zn="object"==typeof exports&&exports&&!exports.nodeType&&exports,Kn=Zn&&"object"==typeof module&&module&&!module.nodeType&&module,Vn=Kn&&Kn.exports===Zn,Gn=Vn&&Fn.process,Hn=function(){try{var n=Kn&&Kn.require&&Kn.require("util").types;return n||Gn&&Gn.binding&&Gn.binding("util")}catch(n){}}(),Jn=Hn&&Hn.isArrayBuffer,Yn=Hn&&Hn.isDate,Qn=Hn&&Hn.isMap,Xn=Hn&&Hn.isRegExp,nt=Hn&&Hn.isSet,tt=Hn&&Hn.isTypedArray;function et(n,t,e){switch(e.length){case 0:return n.call(t);case 1:return n.call(t,e[0]);case 2:return n.call(t,e[0],e[1]);case 3:return n.call(t,e[0],e[1],e[2])}return n.apply(t,e)}function rt(n,t,e,r){for(var u=-1,i=null==n?0:n.length;++u<i;){var f=n[u];t(r,f,e(f),n)}return r}function ut(n,t){for(var e=-1,r=null==n?0:n.length;++e<r&&!1!==t(n[e],e,n););return n}function it(n,t){for(var e=null==n?0:n.length;e--&&!1!==t(n[e],e,n););return n}function ft(n,t){for(var e=-1,r=null==n?0:n.length;++e<r;)if(!t(n[e],e,n))return!1;return!0}function ot(n,t){for(var e=-1,r=null==n?0:n.length,u=0,i=[];++e<r;){var f=n[e];t(f,e,n)&&(i[u++]=f)}return i}function at(n,t){return!!(null==n?0:n.length)&&yt(n,t,0)>-1}function ct(n,t,e){for(var r=-1,u=null==n?0:n.length;++r<u;)if(e(t,n[r]))return!0;return!1}function lt(n,t){for(var e=-1,r=null==n?0:n.length,u=Array(r);++e<r;)u[e]=t(n[e],e,n);return u}function st(n,t){for(var e=-1,r=t.length,u=n.length;++e<r;)n[u+e]=t[e];return n}function dt(n,t,e,r){var u=-1,i=null==n?0:n.length;for(r&&i&&(e=n[++u]);++u<i;)e=t(e,n[u],u,n);return e}function ht(n,t,e,r){var u=null==n?0:n.length;for(r&&u&&(e=n[--u]);u--;)e=t(e,n[u],u,n);return e}function pt(n,t){for(var e=-1,r=null==n?0:n.length;++e<r;)if(t(n[e],e,n))return!0;return!1}var vt=xt("length");function _t(n,t,e){var r;return e(n,(function(n,e,u){if(t(n,e,u))return r=e,!1})),r}function gt(n,t,e,r){for(var u=n.length,i=e+(r?1:-1);r?i--:++i<u;)if(t(n[i],i,n))return i;return-1}function yt(n,t,e){return t==t?function(n,t,e){var r=e-1,u=n.length;for(;++r<u;)if(n[r]===t)return r;return-1}(n,t,e):gt(n,wt,e)}function bt(n,t,e,r){for(var u=e-1,i=n.length;++u<i;)if(r(n[u],t))return u;return-1}function wt(n){return n!=n}function mt(n,t){var e=null==n?0:n.length;return e?It(n,t)/e:NaN}function xt(n){return function(t){return null==t?undefined:t[n]}}function jt(n){return function(t){return null==n?undefined:n[t]}}function At(n,t,e,r,u){return u(n,(function(n,u,i){e=r?(r=!1,n):t(e,n,u,i)})),e}function It(n,t){for(var e,r=-1,u=n.length;++r<u;){var i=t(n[r]);undefined!==i&&(e=undefined===e?i:e+i)}return e}function kt(n,t){for(var e=-1,r=Array(n);++e<n;)r[e]=t(e);return r}function Ot(n){return function(t){return n(t)}}function Rt(n,t){return lt(t,(function(t){return n[t]}))}function Et(n,t){return n.has(t)}function zt(n,t){for(var e=-1,r=n.length;++e<r&&yt(t,n[e],0)>-1;);return e}function St(n,t){for(var e=n.length;e--&&yt(t,n[e],0)>-1;);return e}function Lt(n,t){for(var e=n.length,r=0;e--;)n[e]===t&&++r;return r}var Ct=jt({"À":"A","Á":"A","Â":"A","Ã":"A","Ä":"A","Å":"A","à":"a","á":"a","â":"a","ã":"a","ä":"a","å":"a","Ç":"C","ç":"c","Ð":"D","ð":"d","È":"E","É":"E","Ê":"E","Ë":"E","è":"e","é":"e","ê":"e","ë":"e","Ì":"I","Í":"I","Î":"I","Ï":"I","ì":"i","í":"i","î":"i","ï":"i","Ñ":"N","ñ":"n","Ò":"O","Ó":"O","Ô":"O","Õ":"O","Ö":"O","Ø":"O","ò":"o","ó":"o","ô":"o","õ":"o","ö":"o","ø":"o","Ù":"U","Ú":"U","Û":"U","Ü":"U","ù":"u","ú":"u","û":"u","ü":"u","Ý":"Y","ý":"y","ÿ":"y","Æ":"Ae","æ":"ae","Þ":"Th","þ":"th","ß":"ss","Ā":"A","Ă":"A","Ą":"A","ā":"a","ă":"a","ą":"a","Ć":"C","Ĉ":"C","Ċ":"C","Č":"C","ć":"c","ĉ":"c","ċ":"c","č":"c","Ď":"D","Đ":"D","ď":"d","đ":"d","Ē":"E","Ĕ":"E","Ė":"E","Ę":"E","Ě":"E","ē":"e","ĕ":"e","ė":"e","ę":"e","ě":"e","Ĝ":"G","Ğ":"G","Ġ":"G","Ģ":"G","ĝ":"g","ğ":"g","ġ":"g","ģ":"g","Ĥ":"H","Ħ":"H","ĥ":"h","ħ":"h","Ĩ":"I","Ī":"I","Ĭ":"I","Į":"I","İ":"I","ĩ":"i","ī":"i","ĭ":"i","į":"i","ı":"i","Ĵ":"J","ĵ":"j","Ķ":"K","ķ":"k","ĸ":"k","Ĺ":"L","Ļ":"L","Ľ":"L","Ŀ":"L","Ł":"L","ĺ":"l","ļ":"l","ľ":"l","ŀ":"l","ł":"l","Ń":"N","Ņ":"N","Ň":"N","Ŋ":"N","ń":"n","ņ":"n","ň":"n","ŋ":"n","Ō":"O","Ŏ":"O","Ő":"O","ō":"o","ŏ":"o","ő":"o","Ŕ":"R","Ŗ":"R","Ř":"R","ŕ":"r","ŗ":"r","ř":"r","Ś":"S","Ŝ":"S","Ş":"S","Š":"S","ś":"s","ŝ":"s","ş":"s","š":"s","Ţ":"T","Ť":"T","Ŧ":"T","ţ":"t","ť":"t","ŧ":"t","Ũ":"U","Ū":"U","Ŭ":"U","Ů":"U","Ű":"U","Ų":"U","ũ":"u","ū":"u","ŭ":"u","ů":"u","ű":"u","ų":"u","Ŵ":"W","ŵ":"w","Ŷ":"Y","ŷ":"y","Ÿ":"Y","Ź":"Z","Ż":"Z","Ž":"Z","ź":"z","ż":"z","ž":"z","Ĳ":"IJ","ĳ":"ij","Œ":"Oe","œ":"oe","ŉ":"'n","ſ":"s"}),Wt=jt({"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#39;"});function Ut(n){return"\\"+Dn[n]}function Bt(n){return Cn.test(n)}function Tt(n){var t=-1,e=Array(n.size);return n.forEach((function(n,r){e[++t]=[r,n]})),e}function $t(n,t){return function(e){return n(t(e))}}function Dt(n,e){for(var r=-1,u=n.length,i=0,f=[];++r<u;){var o=n[r];o!==e&&o!==t||(n[r]=t,f[i++]=r)}return f}function Nt(n){var t=-1,e=Array(n.size);return n.forEach((function(n){e[++t]=n})),e}function Mt(n){var t=-1,e=Array(n.size);return n.forEach((function(n){e[++t]=[n,n]})),e}function Ft(n){return Bt(n)?function(n){var t=Sn.lastIndex=0;for(;Sn.test(n);)++t;return t}(n):vt(n)}function Pt(n){return Bt(n)?function(n){return n.match(Sn)||[]}(n):function(n){return n.split("")}(n)}var qt=jt({"&amp;":"&","&lt;":"<","&gt;":">","&quot;":'"',"&#39;":"'"});var Zt=function cn(ln){var sn,dn=(ln=null==ln?qn:Zt.defaults(qn.Object(),ln,Zt.pick(qn,Un))).Array,hn=ln.Date,pn=ln.Error,vn=ln.Function,_n=ln.Math,gn=ln.Object,yn=ln.RegExp,bn=ln.String,wn=ln.TypeError,mn=dn.prototype,xn=vn.prototype,jn=gn.prototype,An=ln["__core-js_shared__"],In=xn.toString,kn=jn.hasOwnProperty,On=0,Rn=(sn=/[^.]+$/.exec(An&&An.keys&&An.keys.IE_PROTO||""))?"Symbol(src)_1."+sn:"",Sn=jn.toString,Cn=In.call(gn),Dn=qn._,Fn=yn("^"+In.call(kn).replace(F,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$"),Pn=Vn?ln.Buffer:undefined,Zn=ln.Symbol,Kn=ln.Uint8Array,Gn=Pn?Pn.allocUnsafe:undefined,Hn=$t(gn.getPrototypeOf,gn),vt=gn.create,jt=jn.propertyIsEnumerable,Kt=mn.splice,Vt=Zn?Zn.isConcatSpreadable:undefined,Gt=Zn?Zn.iterator:undefined,Ht=Zn?Zn.toStringTag:undefined,Jt=function(){try{var n=ni(gn,"defineProperty");return n({},"",{}),n}catch(n){}}(),Yt=ln.clearTimeout!==qn.clearTimeout&&ln.clearTimeout,Qt=hn&&hn.now!==qn.Date.now&&hn.now,Xt=ln.setTimeout!==qn.setTimeout&&ln.setTimeout,ne=_n.ceil,te=_n.floor,ee=gn.getOwnPropertySymbols,re=Pn?Pn.isBuffer:undefined,ue=ln.isFinite,ie=mn.join,fe=$t(gn.keys,gn),oe=_n.max,ae=_n.min,ce=hn.now,le=ln.parseInt,se=_n.random,de=mn.reverse,he=ni(ln,"DataView"),pe=ni(ln,"Map"),ve=ni(ln,"Promise"),_e=ni(ln,"Set"),ge=ni(ln,"WeakMap"),ye=ni(gn,"create"),be=ge&&new ge,we={},me=Oi(he),xe=Oi(pe),je=Oi(ve),Ae=Oi(_e),Ie=Oi(ge),ke=Zn?Zn.prototype:undefined,Oe=ke?ke.valueOf:undefined,Re=ke?ke.toString:undefined;function Ee(n){if(Zf(n)&&!Wf(n)&&!(n instanceof Ce)){if(n instanceof Le)return n;if(kn.call(n,"__wrapped__"))return Ri(n)}return new Le(n)}var ze=function(){function n(){}return function(t){if(!qf(t))return{};if(vt)return vt(t);n.prototype=t;var e=new n;return n.prototype=undefined,e}}();function Se(){}function Le(n,t){this.__wrapped__=n,this.__actions__=[],this.__chain__=!!t,this.__index__=0,this.__values__=undefined}function Ce(n){this.__wrapped__=n,this.__actions__=[],this.__dir__=1,this.__filtered__=!1,this.__iteratees__=[],this.__takeCount__=4294967295,this.__views__=[]}function We(n){var t=-1,e=null==n?0:n.length;for(this.clear();++t<e;){var r=n[t];this.set(r[0],r[1])}}function Ue(n){var t=-1,e=null==n?0:n.length;for(this.clear();++t<e;){var r=n[t];this.set(r[0],r[1])}}function Be(n){var t=-1,e=null==n?0:n.length;for(this.clear();++t<e;){var r=n[t];this.set(r[0],r[1])}}function Te(n){var t=-1,e=null==n?0:n.length;for(this.__data__=new Be;++t<e;)this.add(n[t])}function $e(n){var t=this.__data__=new Ue(n);this.size=t.size}function De(n,t){var e=Wf(n),r=!e&&Cf(n),u=!e&&!r&&$f(n),i=!e&&!r&&!u&&Xf(n),f=e||r||u||i,o=f?kt(n.length,bn):[],a=o.length;for(var c in n)!t&&!kn.call(n,c)||f&&("length"==c||u&&("offset"==c||"parent"==c)||i&&("buffer"==c||"byteLength"==c||"byteOffset"==c)||oi(c,a))||o.push(c);return o}function Ne(n){var t=n.length;return t?n[Tr(0,t-1)]:undefined}function Me(n,t){return Ai(yu(n),Je(t,0,n.length))}function Fe(n){return Ai(yu(n))}function Pe(n,t,e){(undefined!==e&&!zf(n[t],e)||undefined===e&&!(t in n))&&Ge(n,t,e)}function qe(n,t,e){var r=n[t];kn.call(n,t)&&zf(r,e)&&(undefined!==e||t in n)||Ge(n,t,e)}function Ze(n,t){for(var e=n.length;e--;)if(zf(n[e][0],t))return e;return-1}function Ke(n,t,e,r){return tr(n,(function(n,u,i){t(r,n,e(n),i)})),r}function Ve(n,t){return n&&bu(t,xo(t),n)}function Ge(n,t,e){"__proto__"==t&&Jt?Jt(n,t,{configurable:!0,enumerable:!0,value:e,writable:!0}):n[t]=e}function He(n,t){for(var e=-1,r=t.length,u=dn(r),i=null==n;++e<r;)u[e]=i?undefined:go(n,t[e]);return u}function Je(n,t,e){return n==n&&(undefined!==e&&(n=n<=e?n:e),undefined!==t&&(n=n>=t?n:t)),n}function Ye(n,t,e,u,o,g){var E,z=1&t,S=2&t,L=4&t;if(e&&(E=o?e(n,u,o,g):e(n)),undefined!==E)return E;if(!qf(n))return n;var C=Wf(n);if(C){if(E=function(n){var t=n.length,e=new n.constructor(t);t&&"string"==typeof n[0]&&kn.call(n,"index")&&(e.index=n.index,e.input=n.input);return e}(n),!z)return yu(n,E)}else{var W=ri(n),U=W==a||W==c;if($f(n))return du(n,z);if(W==d||W==r||U&&!o){if(E=S||U?{}:ii(n),!z)return S?function(n,t){return bu(n,ei(n),t)}(n,function(n,t){return n&&bu(t,jo(t),n)}(E,n)):function(n,t){return bu(n,ti(n),t)}(n,Ve(E,n))}else{if(!$n[W])return o?n:{};E=function(n,t,e){var r=n.constructor;switch(t){case y:return hu(n);case i:case f:return new r(+n);case b:return function(n,t){var e=t?hu(n.buffer):n.buffer;return new n.constructor(e,n.byteOffset,n.byteLength)}(n,e);case w:case m:case x:case j:case A:case I:case k:case O:case R:return pu(n,e);case l:return new r;case s:case v:return new r(n);case h:return function(n){var t=new n.constructor(n.source,X.exec(n));return t.lastIndex=n.lastIndex,t}(n);case p:return new r;case _:return u=n,Oe?gn(Oe.call(u)):{}}var u}(n,W,z)}}g||(g=new $e);var B=g.get(n);if(B)return B;g.set(n,E),Jf(n)?n.forEach((function(r){E.add(Ye(r,t,e,r,n,g))})):Kf(n)&&n.forEach((function(r,u){E.set(u,Ye(r,t,e,u,n,g))}));var T=C?undefined:(L?S?Vu:Ku:S?jo:xo)(n);return ut(T||n,(function(r,u){T&&(r=n[u=r]),qe(E,u,Ye(r,t,e,u,n,g))})),E}function Qe(n,t,e){var r=e.length;if(null==n)return!r;for(n=gn(n);r--;){var u=e[r],i=t[u],f=n[u];if(undefined===f&&!(u in n)||!i(f))return!1}return!0}function Xe(t,e,r){if("function"!=typeof t)throw new wn(n);return wi((function(){t.apply(undefined,r)}),e)}function nr(n,t,e,r){var u=-1,i=at,f=!0,o=n.length,a=[],c=t.length;if(!o)return a;e&&(t=lt(t,Ot(e))),r?(i=ct,f=!1):t.length>=200&&(i=Et,f=!1,t=new Te(t));n:for(;++u<o;){var l=n[u],s=null==e?l:e(l);if(l=r||0!==l?l:0,f&&s==s){for(var d=c;d--;)if(t[d]===s)continue n;a.push(l)}else i(t,s,r)||a.push(l)}return a}Ee.templateSettings={escape:B,evaluate:T,interpolate:$,variable:"",imports:{_:Ee}},Ee.prototype=Se.prototype,Ee.prototype.constructor=Ee,Le.prototype=ze(Se.prototype),Le.prototype.constructor=Le,Ce.prototype=ze(Se.prototype),Ce.prototype.constructor=Ce,We.prototype.clear=function(){this.__data__=ye?ye(null):{},this.size=0},We.prototype.delete=function(n){var t=this.has(n)&&delete this.__data__[n];return this.size-=t?1:0,t},We.prototype.get=function(n){var t=this.__data__;if(ye){var e=t[n];return"__lodash_hash_undefined__"===e?undefined:e}return kn.call(t,n)?t[n]:undefined},We.prototype.has=function(n){var t=this.__data__;return ye?undefined!==t[n]:kn.call(t,n)},We.prototype.set=function(n,t){var e=this.__data__;return this.size+=this.has(n)?0:1,e[n]=ye&&undefined===t?"__lodash_hash_undefined__":t,this},Ue.prototype.clear=function(){this.__data__=[],this.size=0},Ue.prototype.delete=function(n){var t=this.__data__,e=Ze(t,n);return!(e<0)&&(e==t.length-1?t.pop():Kt.call(t,e,1),--this.size,!0)},Ue.prototype.get=function(n){var t=this.__data__,e=Ze(t,n);return e<0?undefined:t[e][1]},Ue.prototype.has=function(n){return Ze(this.__data__,n)>-1},Ue.prototype.set=function(n,t){var e=this.__data__,r=Ze(e,n);return r<0?(++this.size,e.push([n,t])):e[r][1]=t,this},Be.prototype.clear=function(){this.size=0,this.__data__={hash:new We,map:new(pe||Ue),string:new We}},Be.prototype.delete=function(n){var t=Qu(this,n).delete(n);return this.size-=t?1:0,t},Be.prototype.get=function(n){return Qu(this,n).get(n)},Be.prototype.has=function(n){return Qu(this,n).has(n)},Be.prototype.set=function(n,t){var e=Qu(this,n),r=e.size;return e.set(n,t),this.size+=e.size==r?0:1,this},Te.prototype.add=Te.prototype.push=function(n){return this.__data__.set(n,"__lodash_hash_undefined__"),this},Te.prototype.has=function(n){return this.__data__.has(n)},$e.prototype.clear=function(){this.__data__=new Ue,this.size=0},$e.prototype.delete=function(n){var t=this.__data__,e=t.delete(n);return this.size=t.size,e},$e.prototype.get=function(n){return this.__data__.get(n)},$e.prototype.has=function(n){return this.__data__.has(n)},$e.prototype.set=function(n,t){var e=this.__data__;if(e instanceof Ue){var r=e.__data__;if(!pe||r.length<199)return r.push([n,t]),this.size=++e.size,this;e=this.__data__=new Be(r)}return e.set(n,t),this.size=e.size,this};var tr=xu(cr),er=xu(lr,!0);function rr(n,t){var e=!0;return tr(n,(function(n,r,u){return e=!!t(n,r,u)})),e}function ur(n,t,e){for(var r=-1,u=n.length;++r<u;){var i=n[r],f=t(i);if(null!=f&&(undefined===o?f==f&&!Qf(f):e(f,o)))var o=f,a=i}return a}function ir(n,t){var e=[];return tr(n,(function(n,r,u){t(n,r,u)&&e.push(n)})),e}function fr(n,t,e,r,u){var i=-1,f=n.length;for(e||(e=fi),u||(u=[]);++i<f;){var o=n[i];t>0&&e(o)?t>1?fr(o,t-1,e,r,u):st(u,o):r||(u[u.length]=o)}return u}var or=ju(),ar=ju(!0);function cr(n,t){return n&&or(n,t,xo)}function lr(n,t){return n&&ar(n,t,xo)}function sr(n,t){return ot(t,(function(t){return Mf(n[t])}))}function dr(n,t){for(var e=0,r=(t=au(t,n)).length;null!=n&&e<r;)n=n[ki(t[e++])];return e&&e==r?n:undefined}function hr(n,t,e){var r=t(n);return Wf(n)?r:st(r,e(n))}function pr(n){return null==n?undefined===n?"[object Undefined]":"[object Null]":Ht&&Ht in gn(n)?function(n){var t=kn.call(n,Ht),e=n[Ht];try{n[Ht]=undefined;var r=!0}catch(n){}var u=Sn.call(n);r&&(t?n[Ht]=e:delete n[Ht]);return u}(n):function(n){return Sn.call(n)}(n)}function vr(n,t){return n>t}function _r(n,t){return null!=n&&kn.call(n,t)}function gr(n,t){return null!=n&&t in gn(n)}function yr(n,t,e){for(var r=e?ct:at,u=n[0].length,i=n.length,f=i,o=dn(i),a=1/0,c=[];f--;){var l=n[f];f&&t&&(l=lt(l,Ot(t))),a=ae(l.length,a),o[f]=!e&&(t||u>=120&&l.length>=120)?new Te(f&&l):undefined}l=n[0];var s=-1,d=o[0];n:for(;++s<u&&c.length<a;){var h=l[s],p=t?t(h):h;if(h=e||0!==h?h:0,!(d?Et(d,p):r(c,p,e))){for(f=i;--f;){var v=o[f];if(!(v?Et(v,p):r(n[f],p,e)))continue n}d&&d.push(p),c.push(h)}}return c}function br(n,t,e){var r=null==(n=_i(n,t=au(t,n)))?n:n[ki(Di(t))];return null==r?undefined:et(r,n,e)}function wr(n){return Zf(n)&&pr(n)==r}function mr(n,t,e,a,c){return n===t||(null==n||null==t||!Zf(n)&&!Zf(t)?n!=n&&t!=t:function(n,t,e,a,c,g){var w=Wf(n),m=Wf(t),x=w?u:ri(n),j=m?u:ri(t),A=(x=x==r?d:x)==d,I=(j=j==r?d:j)==d,k=x==j;if(k&&$f(n)){if(!$f(t))return!1;w=!0,A=!1}if(k&&!A)return g||(g=new $e),w||Xf(n)?qu(n,t,e,a,c,g):function(n,t,e,r,u,a,c){switch(e){case b:if(n.byteLength!=t.byteLength||n.byteOffset!=t.byteOffset)return!1;n=n.buffer,t=t.buffer;case y:return!(n.byteLength!=t.byteLength||!a(new Kn(n),new Kn(t)));case i:case f:case s:return zf(+n,+t);case o:return n.name==t.name&&n.message==t.message;case h:case v:return n==t+"";case l:var d=Tt;case p:var g=1&r;if(d||(d=Nt),n.size!=t.size&&!g)return!1;var w=c.get(n);if(w)return w==t;r|=2,c.set(n,t);var m=qu(d(n),d(t),r,u,a,c);return c.delete(n),m;case _:if(Oe)return Oe.call(n)==Oe.call(t)}return!1}(n,t,x,e,a,c,g);if(!(1&e)){var O=A&&kn.call(n,"__wrapped__"),R=I&&kn.call(t,"__wrapped__");if(O||R){var E=O?n.value():n,z=R?t.value():t;return g||(g=new $e),c(E,z,e,a,g)}}if(!k)return!1;return g||(g=new $e),function(n,t,e,r,u,i){var f=1&e,o=Ku(n),a=o.length,c=Ku(t).length;if(a!=c&&!f)return!1;var l=a;for(;l--;){var s=o[l];if(!(f?s in t:kn.call(t,s)))return!1}var d=i.get(n);if(d&&i.get(t))return d==t;var h=!0;i.set(n,t),i.set(t,n);var p=f;for(;++l<a;){var v=n[s=o[l]],_=t[s];if(r)var g=f?r(_,v,s,t,n,i):r(v,_,s,n,t,i);if(!(undefined===g?v===_||u(v,_,e,r,i):g)){h=!1;break}p||(p="constructor"==s)}if(h&&!p){var y=n.constructor,b=t.constructor;y==b||!("constructor"in n)||!("constructor"in t)||"function"==typeof y&&y instanceof y&&"function"==typeof b&&b instanceof b||(h=!1)}return i.delete(n),i.delete(t),h}(n,t,e,a,c,g)}(n,t,e,a,mr,c))}function xr(n,t,e,r){var u=e.length,i=u,f=!r;if(null==n)return!i;for(n=gn(n);u--;){var o=e[u];if(f&&o[2]?o[1]!==n[o[0]]:!(o[0]in n))return!1}for(;++u<i;){var a=(o=e[u])[0],c=n[a],l=o[1];if(f&&o[2]){if(undefined===c&&!(a in n))return!1}else{var s=new $e;if(r)var d=r(c,l,a,n,t,s);if(!(undefined===d?mr(l,c,3,r,s):d))return!1}}return!0}function jr(n){return!(!qf(n)||(t=n,Rn&&Rn in t))&&(Mf(n)?Fn:en).test(Oi(n));var t}function Ar(n){return"function"==typeof n?n:null==n?Go:"object"==typeof n?Wf(n)?zr(n[0],n[1]):Er(n):ra(n)}function Ir(n){if(!di(n))return fe(n);var t=[];for(var e in gn(n))kn.call(n,e)&&"constructor"!=e&&t.push(e);return t}function kr(n){if(!qf(n))return function(n){var t=[];if(null!=n)for(var e in gn(n))t.push(e);return t}(n);var t=di(n),e=[];for(var r in n)("constructor"!=r||!t&&kn.call(n,r))&&e.push(r);return e}function Or(n,t){return n<t}function Rr(n,t){var e=-1,r=Bf(n)?dn(n.length):[];return tr(n,(function(n,u,i){r[++e]=t(n,u,i)})),r}function Er(n){var t=Xu(n);return 1==t.length&&t[0][2]?pi(t[0][0],t[0][1]):function(e){return e===n||xr(e,n,t)}}function zr(n,t){return ci(n)&&hi(t)?pi(ki(n),t):function(e){var r=go(e,n);return undefined===r&&r===t?yo(e,n):mr(t,r,3)}}function Sr(n,t,e,r,u){n!==t&&or(t,(function(i,f){if(u||(u=new $e),qf(i))!function(n,t,e,r,u,i,f){var o=yi(n,e),a=yi(t,e),c=f.get(a);if(c)return void Pe(n,e,c);var l=i?i(o,a,e+"",n,t,f):undefined,s=undefined===l;if(s){var d=Wf(a),h=!d&&$f(a),p=!d&&!h&&Xf(a);l=a,d||h||p?Wf(o)?l=o:Tf(o)?l=yu(o):h?(s=!1,l=du(a,!0)):p?(s=!1,l=pu(a,!0)):l=[]:Gf(a)||Cf(a)?(l=o,Cf(o)?l=oo(o):qf(o)&&!Mf(o)||(l=ii(a))):s=!1}s&&(f.set(a,l),u(l,a,r,i,f),f.delete(a));Pe(n,e,l)}(n,t,f,e,Sr,r,u);else{var o=r?r(yi(n,f),i,f+"",n,t,u):undefined;undefined===o&&(o=i),Pe(n,f,o)}}),jo)}function Lr(n,t){var e=n.length;if(e)return oi(t+=t<0?e:0,e)?n[t]:undefined}function Cr(n,t,e){var r=-1;return t=lt(t.length?t:[Go],Ot(Yu())),function(n,t){var e=n.length;for(n.sort(t);e--;)n[e]=n[e].value;return n}(Rr(n,(function(n,e,u){return{criteria:lt(t,(function(t){return t(n)})),index:++r,value:n}})),(function(n,t){return function(n,t,e){var r=-1,u=n.criteria,i=t.criteria,f=u.length,o=e.length;for(;++r<f;){var a=vu(u[r],i[r]);if(a)return r>=o?a:a*("desc"==e[r]?-1:1)}return n.index-t.index}(n,t,e)}))}function Wr(n,t,e){for(var r=-1,u=t.length,i={};++r<u;){var f=t[r],o=dr(n,f);e(o,f)&&Fr(i,au(f,n),o)}return i}function Ur(n,t,e,r){var u=r?bt:yt,i=-1,f=t.length,o=n;for(n===t&&(t=yu(t)),e&&(o=lt(n,Ot(e)));++i<f;)for(var a=0,c=t[i],l=e?e(c):c;(a=u(o,l,a,r))>-1;)o!==n&&Kt.call(o,a,1),Kt.call(n,a,1);return n}function Br(n,t){for(var e=n?t.length:0,r=e-1;e--;){var u=t[e];if(e==r||u!==i){var i=u;oi(u)?Kt.call(n,u,1):nu(n,u)}}return n}function Tr(n,t){return n+te(se()*(t-n+1))}function $r(n,t){var e="";if(!n||t<1||t>9007199254740991)return e;do{t%2&&(e+=n),(t=te(t/2))&&(n+=n)}while(t);return e}function Dr(n,t){return mi(vi(n,t,Go),n+"")}function Nr(n){return Ne(So(n))}function Mr(n,t){var e=So(n);return Ai(e,Je(t,0,e.length))}function Fr(n,t,e,r){if(!qf(n))return n;for(var u=-1,i=(t=au(t,n)).length,f=i-1,o=n;null!=o&&++u<i;){var a=ki(t[u]),c=e;if(u!=f){var l=o[a];undefined===(c=r?r(l,a,o):undefined)&&(c=qf(l)?l:oi(t[u+1])?[]:{})}qe(o,a,c),o=o[a]}return n}var Pr=be?function(n,t){return be.set(n,t),n}:Go,qr=Jt?function(n,t){return Jt(n,"toString",{configurable:!0,enumerable:!1,value:Zo(t),writable:!0})}:Go;function Zr(n){return Ai(So(n))}function Kr(n,t,e){var r=-1,u=n.length;t<0&&(t=-t>u?0:u+t),(e=e>u?u:e)<0&&(e+=u),u=t>e?0:e-t>>>0,t>>>=0;for(var i=dn(u);++r<u;)i[r]=n[r+t];return i}function Vr(n,t){var e;return tr(n,(function(n,r,u){return!(e=t(n,r,u))})),!!e}function Gr(n,t,e){var r=0,u=null==n?r:n.length;if("number"==typeof t&&t==t&&u<=2147483647){for(;r<u;){var i=r+u>>>1,f=n[i];null!==f&&!Qf(f)&&(e?f<=t:f<t)?r=i+1:u=i}return u}return Hr(n,t,Go,e)}function Hr(n,t,e,r){t=e(t);for(var u=0,i=null==n?0:n.length,f=t!=t,o=null===t,a=Qf(t),c=undefined===t;u<i;){var l=te((u+i)/2),s=e(n[l]),d=undefined!==s,h=null===s,p=s==s,v=Qf(s);if(f)var _=r||p;else _=c?p&&(r||d):o?p&&d&&(r||!h):a?p&&d&&!h&&(r||!v):!h&&!v&&(r?s<=t:s<t);_?u=l+1:i=l}return ae(i,4294967294)}function Jr(n,t){for(var e=-1,r=n.length,u=0,i=[];++e<r;){var f=n[e],o=t?t(f):f;if(!e||!zf(o,a)){var a=o;i[u++]=0===f?0:f}}return i}function Yr(n){return"number"==typeof n?n:Qf(n)?NaN:+n}function Qr(n){if("string"==typeof n)return n;if(Wf(n))return lt(n,Qr)+"";if(Qf(n))return Re?Re.call(n):"";var t=n+"";return"0"==t&&1/n==-Infinity?"-0":t}function Xr(n,t,e){var r=-1,u=at,i=n.length,f=!0,o=[],a=o;if(e)f=!1,u=ct;else if(i>=200){var c=t?null:$u(n);if(c)return Nt(c);f=!1,u=Et,a=new Te}else a=t?[]:o;n:for(;++r<i;){var l=n[r],s=t?t(l):l;if(l=e||0!==l?l:0,f&&s==s){for(var d=a.length;d--;)if(a[d]===s)continue n;t&&a.push(s),o.push(l)}else u(a,s,e)||(a!==o&&a.push(s),o.push(l))}return o}function nu(n,t){return null==(n=_i(n,t=au(t,n)))||delete n[ki(Di(t))]}function tu(n,t,e,r){return Fr(n,t,e(dr(n,t)),r)}function eu(n,t,e,r){for(var u=n.length,i=r?u:-1;(r?i--:++i<u)&&t(n[i],i,n););return e?Kr(n,r?0:i,r?i+1:u):Kr(n,r?i+1:0,r?u:i)}function ru(n,t){var e=n;return e instanceof Ce&&(e=e.value()),dt(t,(function(n,t){return t.func.apply(t.thisArg,st([n],t.args))}),e)}function uu(n,t,e){var r=n.length;if(r<2)return r?Xr(n[0]):[];for(var u=-1,i=dn(r);++u<r;)for(var f=n[u],o=-1;++o<r;)o!=u&&(i[u]=nr(i[u]||f,n[o],t,e));return Xr(fr(i,1),t,e)}function iu(n,t,e){for(var r=-1,u=n.length,i=t.length,f={};++r<u;){var o=r<i?t[r]:undefined;e(f,n[r],o)}return f}function fu(n){return Tf(n)?n:[]}function ou(n){return"function"==typeof n?n:Go}function au(n,t){return Wf(n)?n:ci(n,t)?[n]:Ii(ao(n))}var cu=Dr;function lu(n,t,e){var r=n.length;return e=undefined===e?r:e,!t&&e>=r?n:Kr(n,t,e)}var su=Yt||function(n){return qn.clearTimeout(n)};function du(n,t){if(t)return n.slice();var e=n.length,r=Gn?Gn(e):new n.constructor(e);return n.copy(r),r}function hu(n){var t=new n.constructor(n.byteLength);return new Kn(t).set(new Kn(n)),t}function pu(n,t){var e=t?hu(n.buffer):n.buffer;return new n.constructor(e,n.byteOffset,n.length)}function vu(n,t){if(n!==t){var e=undefined!==n,r=null===n,u=n==n,i=Qf(n),f=undefined!==t,o=null===t,a=t==t,c=Qf(t);if(!o&&!c&&!i&&n>t||i&&f&&a&&!o&&!c||r&&f&&a||!e&&a||!u)return 1;if(!r&&!i&&!c&&n<t||c&&e&&u&&!r&&!i||o&&e&&u||!f&&u||!a)return-1}return 0}function _u(n,t,e,r){for(var u=-1,i=n.length,f=e.length,o=-1,a=t.length,c=oe(i-f,0),l=dn(a+c),s=!r;++o<a;)l[o]=t[o];for(;++u<f;)(s||u<i)&&(l[e[u]]=n[u]);for(;c--;)l[o++]=n[u++];return l}function gu(n,t,e,r){for(var u=-1,i=n.length,f=-1,o=e.length,a=-1,c=t.length,l=oe(i-o,0),s=dn(l+c),d=!r;++u<l;)s[u]=n[u];for(var h=u;++a<c;)s[h+a]=t[a];for(;++f<o;)(d||u<i)&&(s[h+e[f]]=n[u++]);return s}function yu(n,t){var e=-1,r=n.length;for(t||(t=dn(r));++e<r;)t[e]=n[e];return t}function bu(n,t,e,r){var u=!e;e||(e={});for(var i=-1,f=t.length;++i<f;){var o=t[i],a=r?r(e[o],n[o],o,e,n):undefined;undefined===a&&(a=n[o]),u?Ge(e,o,a):qe(e,o,a)}return e}function wu(n,t){return function(e,r){var u=Wf(e)?rt:Ke,i=t?t():{};return u(e,n,Yu(r,2),i)}}function mu(n){return Dr((function(t,e){var r=-1,u=e.length,i=u>1?e[u-1]:undefined,f=u>2?e[2]:undefined;for(i=n.length>3&&"function"==typeof i?(u--,i):undefined,f&&ai(e[0],e[1],f)&&(i=u<3?undefined:i,u=1),t=gn(t);++r<u;){var o=e[r];o&&n(t,o,r,i)}return t}))}function xu(n,t){return function(e,r){if(null==e)return e;if(!Bf(e))return n(e,r);for(var u=e.length,i=t?u:-1,f=gn(e);(t?i--:++i<u)&&!1!==r(f[i],i,f););return e}}function ju(n){return function(t,e,r){for(var u=-1,i=gn(t),f=r(t),o=f.length;o--;){var a=f[n?o:++u];if(!1===e(i[a],a,i))break}return t}}function Au(n){return function(t){var e=Bt(t=ao(t))?Pt(t):undefined,r=e?e[0]:t.charAt(0),u=e?lu(e,1).join(""):t.slice(1);return r[n]()+u}}function Iu(n){return function(t){return dt(Fo(Wo(t).replace(En,"")),n,"")}}function ku(n){return function(){var t=arguments;switch(t.length){case 0:return new n;case 1:return new n(t[0]);case 2:return new n(t[0],t[1]);case 3:return new n(t[0],t[1],t[2]);case 4:return new n(t[0],t[1],t[2],t[3]);case 5:return new n(t[0],t[1],t[2],t[3],t[4]);case 6:return new n(t[0],t[1],t[2],t[3],t[4],t[5]);case 7:return new n(t[0],t[1],t[2],t[3],t[4],t[5],t[6])}var e=ze(n.prototype),r=n.apply(e,t);return qf(r)?r:e}}function Ou(n){return function(t,e,r){var u=gn(t);if(!Bf(t)){var i=Yu(e,3);t=xo(t),e=function(n){return i(u[n],n,u)}}var f=n(t,e,r);return f>-1?u[i?t[f]:f]:undefined}}function Ru(t){return Zu((function(e){var r=e.length,u=r,i=Le.prototype.thru;for(t&&e.reverse();u--;){var f=e[u];if("function"!=typeof f)throw new wn(n);if(i&&!o&&"wrapper"==Hu(f))var o=new Le([],!0)}for(u=o?u:r;++u<r;){var a=Hu(f=e[u]),c="wrapper"==a?Gu(f):undefined;o=c&&li(c[0])&&424==c[1]&&!c[4].length&&1==c[9]?o[Hu(c[0])].apply(o,c[3]):1==f.length&&li(f)?o[a]():o.thru(f)}return function(){var n=arguments,t=n[0];if(o&&1==n.length&&Wf(t))return o.plant(t).value();for(var u=0,i=r?e[u].apply(this,n):t;++u<r;)i=e[u].call(this,i);return i}}))}function Eu(n,t,e,r,u,i,f,o,a,c){var l=128&t,s=1&t,d=2&t,h=24&t,p=512&t,v=d?undefined:ku(n);return function _(){for(var g=arguments.length,y=dn(g),b=g;b--;)y[b]=arguments[b];if(h)var w=Ju(_),m=Lt(y,w);if(r&&(y=_u(y,r,u,h)),i&&(y=gu(y,i,f,h)),g-=m,h&&g<c){var x=Dt(y,w);return Bu(n,t,Eu,_.placeholder,e,y,x,o,a,c-g)}var j=s?e:this,A=d?j[n]:n;return g=y.length,o?y=gi(y,o):p&&g>1&&y.reverse(),l&&a<g&&(y.length=a),this&&this!==qn&&this instanceof _&&(A=v||ku(A)),A.apply(j,y)}}function zu(n,t){return function(e,r){return function(n,t,e,r){return cr(n,(function(n,u,i){t(r,e(n),u,i)})),r}(e,n,t(r),{})}}function Su(n,t){return function(e,r){var u;if(undefined===e&&undefined===r)return t;if(undefined!==e&&(u=e),undefined!==r){if(undefined===u)return r;"string"==typeof e||"string"==typeof r?(e=Qr(e),r=Qr(r)):(e=Yr(e),r=Yr(r)),u=n(e,r)}return u}}function Lu(n){return Zu((function(t){return t=lt(t,Ot(Yu())),Dr((function(e){var r=this;return n(t,(function(n){return et(n,r,e)}))}))}))}function Cu(n,t){var e=(t=undefined===t?" ":Qr(t)).length;if(e<2)return e?$r(t,n):t;var r=$r(t,ne(n/Ft(t)));return Bt(t)?lu(Pt(r),0,n).join(""):r.slice(0,n)}function Wu(n){return function(t,e,r){return r&&"number"!=typeof r&&ai(t,e,r)&&(e=r=undefined),t=ro(t),undefined===e?(e=t,t=0):e=ro(e),function(n,t,e,r){for(var u=-1,i=oe(ne((t-n)/(e||1)),0),f=dn(i);i--;)f[r?i:++u]=n,n+=e;return f}(t,e,r=undefined===r?t<e?1:-1:ro(r),n)}}function Uu(n){return function(t,e){return"string"==typeof t&&"string"==typeof e||(t=fo(t),e=fo(e)),n(t,e)}}function Bu(n,t,e,r,u,i,f,o,a,c){var l=8&t;t|=l?32:64,4&(t&=~(l?64:32))||(t&=-4);var s=[n,t,u,l?i:undefined,l?f:undefined,l?undefined:i,l?undefined:f,o,a,c],d=e.apply(undefined,s);return li(n)&&bi(d,s),d.placeholder=r,xi(d,n,t)}function Tu(n){var t=_n[n];return function(n,e){if(n=fo(n),(e=null==e?0:ae(uo(e),292))&&ue(n)){var r=(ao(n)+"e").split("e");return+((r=(ao(t(r[0]+"e"+(+r[1]+e)))+"e").split("e"))[0]+"e"+(+r[1]-e))}return t(n)}}var $u=_e&&1/Nt(new _e([,-0]))[1]==Infinity?function(n){return new _e(n)}:Xo;function Du(n){return function(t){var e=ri(t);return e==l?Tt(t):e==p?Mt(t):function(n,t){return lt(t,(function(t){return[t,n[t]]}))}(t,n(t))}}function Nu(e,r,u,i,f,o,a,c){var l=2&r;if(!l&&"function"!=typeof e)throw new wn(n);var s=i?i.length:0;if(s||(r&=-97,i=f=undefined),a=undefined===a?a:oe(uo(a),0),c=undefined===c?c:uo(c),s-=f?f.length:0,64&r){var d=i,h=f;i=f=undefined}var p=l?undefined:Gu(e),v=[e,r,u,i,f,d,h,o,a,c];if(p&&function(n,e){var r=n[1],u=e[1],i=r|u,f=i<131,o=128==u&&8==r||128==u&&256==r&&n[7].length<=e[8]||384==u&&e[7].length<=e[8]&&8==r;if(!f&&!o)return n;1&u&&(n[2]=e[2],i|=1&r?0:4);var a=e[3];if(a){var c=n[3];n[3]=c?_u(c,a,e[4]):a,n[4]=c?Dt(n[3],t):e[4]}(a=e[5])&&(c=n[5],n[5]=c?gu(c,a,e[6]):a,n[6]=c?Dt(n[5],t):e[6]);(a=e[7])&&(n[7]=a);128&u&&(n[8]=null==n[8]?e[8]:ae(n[8],e[8]));null==n[9]&&(n[9]=e[9]);n[0]=e[0],n[1]=i}(v,p),e=v[0],r=v[1],u=v[2],i=v[3],f=v[4],!(c=v[9]=undefined===v[9]?l?0:e.length:oe(v[9]-s,0))&&24&r&&(r&=-25),r&&1!=r)_=8==r||16==r?function(n,t,e){var r=ku(n);return function u(){for(var i=arguments.length,f=dn(i),o=i,a=Ju(u);o--;)f[o]=arguments[o];var c=i<3&&f[0]!==a&&f[i-1]!==a?[]:Dt(f,a);return(i-=c.length)<e?Bu(n,t,Eu,u.placeholder,void 0,f,c,void 0,void 0,e-i):et(this&&this!==qn&&this instanceof u?r:n,this,f)}}(e,r,c):32!=r&&33!=r||f.length?Eu.apply(undefined,v):function(n,t,e,r){var u=1&t,i=ku(n);return function t(){for(var f=-1,o=arguments.length,a=-1,c=r.length,l=dn(c+o),s=this&&this!==qn&&this instanceof t?i:n;++a<c;)l[a]=r[a];for(;o--;)l[a++]=arguments[++f];return et(s,u?e:this,l)}}(e,r,u,i);else var _=function(n,t,e){var r=1&t,u=ku(n);return function t(){return(this&&this!==qn&&this instanceof t?u:n).apply(r?e:this,arguments)}}(e,r,u);return xi((p?Pr:bi)(_,v),e,r)}function Mu(n,t,e,r){return undefined===n||zf(n,jn[e])&&!kn.call(r,e)?t:n}function Fu(n,t,e,r,u,i){return qf(n)&&qf(t)&&(i.set(t,n),Sr(n,t,undefined,Fu,i),i.delete(t)),n}function Pu(n){return Gf(n)?undefined:n}function qu(n,t,e,r,u,i){var f=1&e,o=n.length,a=t.length;if(o!=a&&!(f&&a>o))return!1;var c=i.get(n);if(c&&i.get(t))return c==t;var l=-1,s=!0,d=2&e?new Te:undefined;for(i.set(n,t),i.set(t,n);++l<o;){var h=n[l],p=t[l];if(r)var v=f?r(p,h,l,t,n,i):r(h,p,l,n,t,i);if(undefined!==v){if(v)continue;s=!1;break}if(d){if(!pt(t,(function(n,t){if(!Et(d,t)&&(h===n||u(h,n,e,r,i)))return d.push(t)}))){s=!1;break}}else if(h!==p&&!u(h,p,e,r,i)){s=!1;break}}return i.delete(n),i.delete(t),s}function Zu(n){return mi(vi(n,undefined,Wi),n+"")}function Ku(n){return hr(n,xo,ti)}function Vu(n){return hr(n,jo,ei)}var Gu=be?function(n){return be.get(n)}:Xo;function Hu(n){for(var t=n.name+"",e=we[t],r=kn.call(we,t)?e.length:0;r--;){var u=e[r],i=u.func;if(null==i||i==n)return u.name}return t}function Ju(n){return(kn.call(Ee,"placeholder")?Ee:n).placeholder}function Yu(){var n=Ee.iteratee||Ho;return n=n===Ho?Ar:n,arguments.length?n(arguments[0],arguments[1]):n}function Qu(n,t){var e,r,u=n.__data__;return("string"==(r=typeof(e=t))||"number"==r||"symbol"==r||"boolean"==r?"__proto__"!==e:null===e)?u["string"==typeof t?"string":"hash"]:u.map}function Xu(n){for(var t=xo(n),e=t.length;e--;){var r=t[e],u=n[r];t[e]=[r,u,hi(u)]}return t}function ni(n,t){var e=function(n,t){return null==n?void 0:n[t]}(n,t);return jr(e)?e:undefined}var ti=ee?function(n){return null==n?[]:(n=gn(n),ot(ee(n),(function(t){return jt.call(n,t)})))}:fa,ei=ee?function(n){for(var t=[];n;)st(t,ti(n)),n=Hn(n);return t}:fa,ri=pr;function ui(n,t,e){for(var r=-1,u=(t=au(t,n)).length,i=!1;++r<u;){var f=ki(t[r]);if(!(i=null!=n&&e(n,f)))break;n=n[f]}return i||++r!=u?i:!!(u=null==n?0:n.length)&&Pf(u)&&oi(f,u)&&(Wf(n)||Cf(n))}function ii(n){return"function"!=typeof n.constructor||di(n)?{}:ze(Hn(n))}function fi(n){return Wf(n)||Cf(n)||!!(Vt&&n&&n[Vt])}function oi(n,t){var e=typeof n;return!!(t=null==t?9007199254740991:t)&&("number"==e||"symbol"!=e&&un.test(n))&&n>-1&&n%1==0&&n<t}function ai(n,t,e){if(!qf(e))return!1;var r=typeof t;return!!("number"==r?Bf(e)&&oi(t,e.length):"string"==r&&t in e)&&zf(e[t],n)}function ci(n,t){if(Wf(n))return!1;var e=typeof n;return!("number"!=e&&"symbol"!=e&&"boolean"!=e&&null!=n&&!Qf(n))||(N.test(n)||!D.test(n)||null!=t&&n in gn(t))}function li(n){var t=Hu(n),e=Ee[t];if("function"!=typeof e||!(t in Ce.prototype))return!1;if(n===e)return!0;var r=Gu(e);return!!r&&n===r[0]}(he&&ri(new he(new ArrayBuffer(1)))!=b||pe&&ri(new pe)!=l||ve&&"[object Promise]"!=ri(ve.resolve())||_e&&ri(new _e)!=p||ge&&ri(new ge)!=g)&&(ri=function(n){var t=pr(n),e=t==d?n.constructor:undefined,r=e?Oi(e):"";if(r)switch(r){case me:return b;case xe:return l;case je:return"[object Promise]";case Ae:return p;case Ie:return g}return t});var si=An?Mf:oa;function di(n){var t=n&&n.constructor;return n===("function"==typeof t&&t.prototype||jn)}function hi(n){return n==n&&!qf(n)}function pi(n,t){return function(e){return null!=e&&(e[n]===t&&(undefined!==t||n in gn(e)))}}function vi(n,t,e){return t=oe(undefined===t?n.length-1:t,0),function(){for(var r=arguments,u=-1,i=oe(r.length-t,0),f=dn(i);++u<i;)f[u]=r[t+u];u=-1;for(var o=dn(t+1);++u<t;)o[u]=r[u];return o[t]=e(f),et(n,this,o)}}function _i(n,t){return t.length<2?n:dr(n,Kr(t,0,-1))}function gi(n,t){for(var e=n.length,r=ae(t.length,e),u=yu(n);r--;){var i=t[r];n[r]=oi(i,e)?u[i]:undefined}return n}function yi(n,t){if(("constructor"!==t||"function"!=typeof n[t])&&"__proto__"!=t)return n[t]}var bi=ji(Pr),wi=Xt||function(n,t){return qn.setTimeout(n,t)},mi=ji(qr);function xi(n,t,r){var u=t+"";return mi(n,function(n,t){var e=t.length;if(!e)return n;var r=e-1;return t[r]=(e>1?"& ":"")+t[r],t=t.join(e>2?", ":" "),n.replace(V,"{\n/* [wrapped with "+t+"] */\n")}(u,function(n,t){return ut(e,(function(e){var r="_."+e[0];t&e[1]&&!at(n,r)&&n.push(r)})),n.sort()}(function(n){var t=n.match(G);return t?t[1].split(H):[]}(u),r)))}function ji(n){var t=0,e=0;return function(){var r=ce(),u=16-(r-e);if(e=r,u>0){if(++t>=800)return arguments[0]}else t=0;return n.apply(undefined,arguments)}}function Ai(n,t){var e=-1,r=n.length,u=r-1;for(t=undefined===t?r:t;++e<t;){var i=Tr(e,u),f=n[i];n[i]=n[e],n[e]=f}return n.length=t,n}var Ii=function(n){var t=Af(n,(function(n){return 500===e.size&&e.clear(),n})),e=t.cache;return t}((function(n){var t=[];return 46===n.charCodeAt(0)&&t.push(""),n.replace(M,(function(n,e,r,u){t.push(r?u.replace(Y,"$1"):e||n)})),t}));function ki(n){if("string"==typeof n||Qf(n))return n;var t=n+"";return"0"==t&&1/n==-Infinity?"-0":t}function Oi(n){if(null!=n){try{return In.call(n)}catch(n){}try{return n+""}catch(n){}}return""}function Ri(n){if(n instanceof Ce)return n.clone();var t=new Le(n.__wrapped__,n.__chain__);return t.__actions__=yu(n.__actions__),t.__index__=n.__index__,t.__values__=n.__values__,t}var Ei=Dr((function(n,t){return Tf(n)?nr(n,fr(t,1,Tf,!0)):[]})),zi=Dr((function(n,t){var e=Di(t);return Tf(e)&&(e=undefined),Tf(n)?nr(n,fr(t,1,Tf,!0),Yu(e,2)):[]})),Si=Dr((function(n,t){var e=Di(t);return Tf(e)&&(e=undefined),Tf(n)?nr(n,fr(t,1,Tf,!0),undefined,e):[]}));function Li(n,t,e){var r=null==n?0:n.length;if(!r)return-1;var u=null==e?0:uo(e);return u<0&&(u=oe(r+u,0)),gt(n,Yu(t,3),u)}function Ci(n,t,e){var r=null==n?0:n.length;if(!r)return-1;var u=r-1;return undefined!==e&&(u=uo(e),u=e<0?oe(r+u,0):ae(u,r-1)),gt(n,Yu(t,3),u,!0)}function Wi(n){return(null==n?0:n.length)?fr(n,1):[]}function Ui(n){return n&&n.length?n[0]:undefined}var Bi=Dr((function(n){var t=lt(n,fu);return t.length&&t[0]===n[0]?yr(t):[]})),Ti=Dr((function(n){var t=Di(n),e=lt(n,fu);return t===Di(e)?t=undefined:e.pop(),e.length&&e[0]===n[0]?yr(e,Yu(t,2)):[]})),$i=Dr((function(n){var t=Di(n),e=lt(n,fu);return(t="function"==typeof t?t:undefined)&&e.pop(),e.length&&e[0]===n[0]?yr(e,undefined,t):[]}));function Di(n){var t=null==n?0:n.length;return t?n[t-1]:undefined}var Ni=Dr(Mi);function Mi(n,t){return n&&n.length&&t&&t.length?Ur(n,t):n}var Fi=Zu((function(n,t){var e=null==n?0:n.length,r=He(n,t);return Br(n,lt(t,(function(n){return oi(n,e)?+n:n})).sort(vu)),r}));function Pi(n){return null==n?n:de.call(n)}var qi=Dr((function(n){return Xr(fr(n,1,Tf,!0))})),Zi=Dr((function(n){var t=Di(n);return Tf(t)&&(t=undefined),Xr(fr(n,1,Tf,!0),Yu(t,2))})),Ki=Dr((function(n){var t=Di(n);return t="function"==typeof t?t:undefined,Xr(fr(n,1,Tf,!0),undefined,t)}));function Vi(n){if(!n||!n.length)return[];var t=0;return n=ot(n,(function(n){if(Tf(n))return t=oe(n.length,t),!0})),kt(t,(function(t){return lt(n,xt(t))}))}function Gi(n,t){if(!n||!n.length)return[];var e=Vi(n);return null==t?e:lt(e,(function(n){return et(t,undefined,n)}))}var Hi=Dr((function(n,t){return Tf(n)?nr(n,t):[]})),Ji=Dr((function(n){return uu(ot(n,Tf))})),Yi=Dr((function(n){var t=Di(n);return Tf(t)&&(t=undefined),uu(ot(n,Tf),Yu(t,2))})),Qi=Dr((function(n){var t=Di(n);return t="function"==typeof t?t:undefined,uu(ot(n,Tf),undefined,t)})),Xi=Dr(Vi);var nf=Dr((function(n){var t=n.length,e=t>1?n[t-1]:undefined;return e="function"==typeof e?(n.pop(),e):undefined,Gi(n,e)}));function tf(n){var t=Ee(n);return t.__chain__=!0,t}function ef(n,t){return t(n)}var rf=Zu((function(n){var t=n.length,e=t?n[0]:0,r=this.__wrapped__,u=function(t){return He(t,n)};return!(t>1||this.__actions__.length)&&r instanceof Ce&&oi(e)?((r=r.slice(e,+e+(t?1:0))).__actions__.push({func:ef,args:[u],thisArg:undefined}),new Le(r,this.__chain__).thru((function(n){return t&&!n.length&&n.push(undefined),n}))):this.thru(u)}));var uf=wu((function(n,t,e){kn.call(n,e)?++n[e]:Ge(n,e,1)}));var ff=Ou(Li),of=Ou(Ci);function af(n,t){return(Wf(n)?ut:tr)(n,Yu(t,3))}function cf(n,t){return(Wf(n)?it:er)(n,Yu(t,3))}var lf=wu((function(n,t,e){kn.call(n,e)?n[e].push(t):Ge(n,e,[t])}));var sf=Dr((function(n,t,e){var r=-1,u="function"==typeof t,i=Bf(n)?dn(n.length):[];return tr(n,(function(n){i[++r]=u?et(t,n,e):br(n,t,e)})),i})),df=wu((function(n,t,e){Ge(n,e,t)}));function hf(n,t){return(Wf(n)?lt:Rr)(n,Yu(t,3))}var pf=wu((function(n,t,e){n[e?0:1].push(t)}),(function(){return[[],[]]}));var vf=Dr((function(n,t){if(null==n)return[];var e=t.length;return e>1&&ai(n,t[0],t[1])?t=[]:e>2&&ai(t[0],t[1],t[2])&&(t=[t[0]]),Cr(n,fr(t,1),[])})),_f=Qt||function(){return qn.Date.now()};function gf(n,t,e){return t=e?undefined:t,Nu(n,128,undefined,undefined,undefined,undefined,t=n&&null==t?n.length:t)}function yf(t,e){var r;if("function"!=typeof e)throw new wn(n);return t=uo(t),function(){return--t>0&&(r=e.apply(this,arguments)),t<=1&&(e=undefined),r}}var bf=Dr((function(n,t,e){var r=1;if(e.length){var u=Dt(e,Ju(bf));r|=32}return Nu(n,r,t,e,u)})),wf=Dr((function(n,t,e){var r=3;if(e.length){var u=Dt(e,Ju(wf));r|=32}return Nu(t,r,n,e,u)}));function mf(t,e,r){var u,i,f,o,a,c,l=0,s=!1,d=!1,h=!0;if("function"!=typeof t)throw new wn(n);function p(n){var e=u,r=i;return u=i=undefined,l=n,o=t.apply(r,e)}function v(n){return l=n,a=wi(g,e),s?p(n):o}function _(n){var t=n-c;return undefined===c||t>=e||t<0||d&&n-l>=f}function g(){var n=_f();if(_(n))return y(n);a=wi(g,function(n){var t=e-(n-c);return d?ae(t,f-(n-l)):t}(n))}function y(n){return a=undefined,h&&u?p(n):(u=i=undefined,o)}function b(){var n=_f(),t=_(n);if(u=arguments,i=this,c=n,t){if(undefined===a)return v(c);if(d)return su(a),a=wi(g,e),p(c)}return undefined===a&&(a=wi(g,e)),o}return e=fo(e)||0,qf(r)&&(s=!!r.leading,f=(d="maxWait"in r)?oe(fo(r.maxWait)||0,e):f,h="trailing"in r?!!r.trailing:h),b.cancel=function(){undefined!==a&&su(a),l=0,u=c=i=a=undefined},b.flush=function(){return undefined===a?o:y(_f())},b}var xf=Dr((function(n,t){return Xe(n,1,t)})),jf=Dr((function(n,t,e){return Xe(n,fo(t)||0,e)}));function Af(t,e){if("function"!=typeof t||null!=e&&"function"!=typeof e)throw new wn(n);var r=function(){var n=arguments,u=e?e.apply(this,n):n[0],i=r.cache;if(i.has(u))return i.get(u);var f=t.apply(this,n);return r.cache=i.set(u,f)||i,f};return r.cache=new(Af.Cache||Be),r}function If(t){if("function"!=typeof t)throw new wn(n);return function(){var n=arguments;switch(n.length){case 0:return!t.call(this);case 1:return!t.call(this,n[0]);case 2:return!t.call(this,n[0],n[1]);case 3:return!t.call(this,n[0],n[1],n[2])}return!t.apply(this,n)}}Af.Cache=Be;var kf=cu((function(n,t){var e=(t=1==t.length&&Wf(t[0])?lt(t[0],Ot(Yu())):lt(fr(t,1),Ot(Yu()))).length;return Dr((function(r){for(var u=-1,i=ae(r.length,e);++u<i;)r[u]=t[u].call(this,r[u]);return et(n,this,r)}))})),Of=Dr((function(n,t){return Nu(n,32,undefined,t,Dt(t,Ju(Of)))})),Rf=Dr((function(n,t){return Nu(n,64,undefined,t,Dt(t,Ju(Rf)))})),Ef=Zu((function(n,t){return Nu(n,256,undefined,undefined,undefined,t)}));function zf(n,t){return n===t||n!=n&&t!=t}var Sf=Uu(vr),Lf=Uu((function(n,t){return n>=t})),Cf=wr(function(){return arguments}())?wr:function(n){return Zf(n)&&kn.call(n,"callee")&&!jt.call(n,"callee")},Wf=dn.isArray,Uf=Jn?Ot(Jn):function(n){return Zf(n)&&pr(n)==y};function Bf(n){return null!=n&&Pf(n.length)&&!Mf(n)}function Tf(n){return Zf(n)&&Bf(n)}var $f=re||oa,Df=Yn?Ot(Yn):function(n){return Zf(n)&&pr(n)==f};function Nf(n){if(!Zf(n))return!1;var t=pr(n);return t==o||"[object DOMException]"==t||"string"==typeof n.message&&"string"==typeof n.name&&!Gf(n)}function Mf(n){if(!qf(n))return!1;var t=pr(n);return t==a||t==c||"[object AsyncFunction]"==t||"[object Proxy]"==t}function Ff(n){return"number"==typeof n&&n==uo(n)}function Pf(n){return"number"==typeof n&&n>-1&&n%1==0&&n<=9007199254740991}function qf(n){var t=typeof n;return null!=n&&("object"==t||"function"==t)}function Zf(n){return null!=n&&"object"==typeof n}var Kf=Qn?Ot(Qn):function(n){return Zf(n)&&ri(n)==l};function Vf(n){return"number"==typeof n||Zf(n)&&pr(n)==s}function Gf(n){if(!Zf(n)||pr(n)!=d)return!1;var t=Hn(n);if(null===t)return!0;var e=kn.call(t,"constructor")&&t.constructor;return"function"==typeof e&&e instanceof e&&In.call(e)==Cn}var Hf=Xn?Ot(Xn):function(n){return Zf(n)&&pr(n)==h};var Jf=nt?Ot(nt):function(n){return Zf(n)&&ri(n)==p};function Yf(n){return"string"==typeof n||!Wf(n)&&Zf(n)&&pr(n)==v}function Qf(n){return"symbol"==typeof n||Zf(n)&&pr(n)==_}var Xf=tt?Ot(tt):function(n){return Zf(n)&&Pf(n.length)&&!!Tn[pr(n)]};var no=Uu(Or),to=Uu((function(n,t){return n<=t}));function eo(n){if(!n)return[];if(Bf(n))return Yf(n)?Pt(n):yu(n);if(Gt&&n[Gt])return function(n){for(var t,e=[];!(t=n.next()).done;)e.push(t.value);return e}(n[Gt]());var t=ri(n);return(t==l?Tt:t==p?Nt:So)(n)}function ro(n){return n?Infinity===(n=fo(n))||-Infinity===n?17976931348623157e292*(n<0?-1:1):n==n?n:0:0===n?n:0}function uo(n){var t=ro(n),e=t%1;return t==t?e?t-e:t:0}function io(n){return n?Je(uo(n),0,4294967295):0}function fo(n){if("number"==typeof n)return n;if(Qf(n))return NaN;if(qf(n)){var t="function"==typeof n.valueOf?n.valueOf():n;n=qf(t)?t+"":t}if("string"!=typeof n)return 0===n?n:+n;n=n.replace(q,"");var e=tn.test(n);return e||rn.test(n)?Mn(n.slice(2),e?2:8):nn.test(n)?NaN:+n}function oo(n){return bu(n,jo(n))}function ao(n){return null==n?"":Qr(n)}var co=mu((function(n,t){if(di(t)||Bf(t))bu(t,xo(t),n);else for(var e in t)kn.call(t,e)&&qe(n,e,t[e])})),lo=mu((function(n,t){bu(t,jo(t),n)})),so=mu((function(n,t,e,r){bu(t,jo(t),n,r)})),ho=mu((function(n,t,e,r){bu(t,xo(t),n,r)})),po=Zu(He);var vo=Dr((function(n,t){n=gn(n);var e=-1,r=t.length,u=r>2?t[2]:undefined;for(u&&ai(t[0],t[1],u)&&(r=1);++e<r;)for(var i=t[e],f=jo(i),o=-1,a=f.length;++o<a;){var c=f[o],l=n[c];(undefined===l||zf(l,jn[c])&&!kn.call(n,c))&&(n[c]=i[c])}return n})),_o=Dr((function(n){return n.push(undefined,Fu),et(Io,undefined,n)}));function go(n,t,e){var r=null==n?undefined:dr(n,t);return undefined===r?e:r}function yo(n,t){return null!=n&&ui(n,t,gr)}var bo=zu((function(n,t,e){null!=t&&"function"!=typeof t.toString&&(t=Sn.call(t)),n[t]=e}),Zo(Go)),wo=zu((function(n,t,e){null!=t&&"function"!=typeof t.toString&&(t=Sn.call(t)),kn.call(n,t)?n[t].push(e):n[t]=[e]}),Yu),mo=Dr(br);function xo(n){return Bf(n)?De(n):Ir(n)}function jo(n){return Bf(n)?De(n,!0):kr(n)}var Ao=mu((function(n,t,e){Sr(n,t,e)})),Io=mu((function(n,t,e,r){Sr(n,t,e,r)})),ko=Zu((function(n,t){var e={};if(null==n)return e;var r=!1;t=lt(t,(function(t){return t=au(t,n),r||(r=t.length>1),t})),bu(n,Vu(n),e),r&&(e=Ye(e,7,Pu));for(var u=t.length;u--;)nu(e,t[u]);return e}));var Oo=Zu((function(n,t){return null==n?{}:function(n,t){return Wr(n,t,(function(t,e){return yo(n,e)}))}(n,t)}));function Ro(n,t){if(null==n)return{};var e=lt(Vu(n),(function(n){return[n]}));return t=Yu(t),Wr(n,e,(function(n,e){return t(n,e[0])}))}var Eo=Du(xo),zo=Du(jo);function So(n){return null==n?[]:Rt(n,xo(n))}var Lo=Iu((function(n,t,e){return t=t.toLowerCase(),n+(e?Co(t):t)}));function Co(n){return Mo(ao(n).toLowerCase())}function Wo(n){return(n=ao(n))&&n.replace(fn,Ct).replace(zn,"")}var Uo=Iu((function(n,t,e){return n+(e?"-":"")+t.toLowerCase()})),Bo=Iu((function(n,t,e){return n+(e?" ":"")+t.toLowerCase()})),To=Au("toLowerCase");var $o=Iu((function(n,t,e){return n+(e?"_":"")+t.toLowerCase()}));var Do=Iu((function(n,t,e){return n+(e?" ":"")+Mo(t)}));var No=Iu((function(n,t,e){return n+(e?" ":"")+t.toUpperCase()})),Mo=Au("toUpperCase");function Fo(n,t,e){return n=ao(n),undefined===(t=e?undefined:t)?function(n){return Wn.test(n)}(n)?function(n){return n.match(Ln)||[]}(n):function(n){return n.match(J)||[]}(n):n.match(t)||[]}var Po=Dr((function(n,t){try{return et(n,undefined,t)}catch(n){return Nf(n)?n:new pn(n)}})),qo=Zu((function(n,t){return ut(t,(function(t){t=ki(t),Ge(n,t,bf(n[t],n))})),n}));function Zo(n){return function(){return n}}var Ko=Ru(),Vo=Ru(!0);function Go(n){return n}function Ho(n){return Ar("function"==typeof n?n:Ye(n,1))}var Jo=Dr((function(n,t){return function(e){return br(e,n,t)}})),Yo=Dr((function(n,t){return function(e){return br(n,e,t)}}));function Qo(n,t,e){var r=xo(t),u=sr(t,r);null!=e||qf(t)&&(u.length||!r.length)||(e=t,t=n,n=this,u=sr(t,xo(t)));var i=!(qf(e)&&"chain"in e&&!e.chain),f=Mf(n);return ut(u,(function(e){var r=t[e];n[e]=r,f&&(n.prototype[e]=function(){var t=this.__chain__;if(i||t){var e=n(this.__wrapped__),u=e.__actions__=yu(this.__actions__);return u.push({func:r,args:arguments,thisArg:n}),e.__chain__=t,e}return r.apply(n,st([this.value()],arguments))})})),n}function Xo(){}var na=Lu(lt),ta=Lu(ft),ea=Lu(pt);function ra(n){return ci(n)?xt(ki(n)):function(n){return function(t){return dr(t,n)}}(n)}var ua=Wu(),ia=Wu(!0);function fa(){return[]}function oa(){return!1}var aa=Su((function(n,t){return n+t}),0),ca=Tu("ceil"),la=Su((function(n,t){return n/t}),1),sa=Tu("floor");var da,ha=Su((function(n,t){return n*t}),1),pa=Tu("round"),va=Su((function(n,t){return n-t}),0);return Ee.after=function(t,e){if("function"!=typeof e)throw new wn(n);return t=uo(t),function(){if(--t<1)return e.apply(this,arguments)}},Ee.ary=gf,Ee.assign=co,Ee.assignIn=lo,Ee.assignInWith=so,Ee.assignWith=ho,Ee.at=po,Ee.before=yf,Ee.bind=bf,Ee.bindAll=qo,Ee.bindKey=wf,Ee.castArray=function(){if(!arguments.length)return[];var n=arguments[0];return Wf(n)?n:[n]},Ee.chain=tf,Ee.chunk=function(n,t,e){t=(e?ai(n,t,e):undefined===t)?1:oe(uo(t),0);var r=null==n?0:n.length;if(!r||t<1)return[];for(var u=0,i=0,f=dn(ne(r/t));u<r;)f[i++]=Kr(n,u,u+=t);return f},Ee.compact=function(n){for(var t=-1,e=null==n?0:n.length,r=0,u=[];++t<e;){var i=n[t];i&&(u[r++]=i)}return u},Ee.concat=function(){var n=arguments.length;if(!n)return[];for(var t=dn(n-1),e=arguments[0],r=n;r--;)t[r-1]=arguments[r];return st(Wf(e)?yu(e):[e],fr(t,1))},Ee.cond=function(t){var e=null==t?0:t.length,r=Yu();return t=e?lt(t,(function(t){if("function"!=typeof t[1])throw new wn(n);return[r(t[0]),t[1]]})):[],Dr((function(n){for(var r=-1;++r<e;){var u=t[r];if(et(u[0],this,n))return et(u[1],this,n)}}))},Ee.conforms=function(n){return function(n){var t=xo(n);return function(e){return Qe(e,n,t)}}(Ye(n,1))},Ee.constant=Zo,Ee.countBy=uf,Ee.create=function(n,t){var e=ze(n);return null==t?e:Ve(e,t)},Ee.curry=function n(t,e,r){var u=Nu(t,8,undefined,undefined,undefined,undefined,undefined,e=r?undefined:e);return u.placeholder=n.placeholder,u},Ee.curryRight=function n(t,e,r){var u=Nu(t,16,undefined,undefined,undefined,undefined,undefined,e=r?undefined:e);return u.placeholder=n.placeholder,u},Ee.debounce=mf,Ee.defaults=vo,Ee.defaultsDeep=_o,Ee.defer=xf,Ee.delay=jf,Ee.difference=Ei,Ee.differenceBy=zi,Ee.differenceWith=Si,Ee.drop=function(n,t,e){var r=null==n?0:n.length;return r?Kr(n,(t=e||undefined===t?1:uo(t))<0?0:t,r):[]},Ee.dropRight=function(n,t,e){var r=null==n?0:n.length;return r?Kr(n,0,(t=r-(t=e||undefined===t?1:uo(t)))<0?0:t):[]},Ee.dropRightWhile=function(n,t){return n&&n.length?eu(n,Yu(t,3),!0,!0):[]},Ee.dropWhile=function(n,t){return n&&n.length?eu(n,Yu(t,3),!0):[]},Ee.fill=function(n,t,e,r){var u=null==n?0:n.length;return u?(e&&"number"!=typeof e&&ai(n,t,e)&&(e=0,r=u),function(n,t,e,r){var u=n.length;for((e=uo(e))<0&&(e=-e>u?0:u+e),(r=void 0===r||r>u?u:uo(r))<0&&(r+=u),r=e>r?0:io(r);e<r;)n[e++]=t;return n}(n,t,e,r)):[]},Ee.filter=function(n,t){return(Wf(n)?ot:ir)(n,Yu(t,3))},Ee.flatMap=function(n,t){return fr(hf(n,t),1)},Ee.flatMapDeep=function(n,t){return fr(hf(n,t),Infinity)},Ee.flatMapDepth=function(n,t,e){return e=undefined===e?1:uo(e),fr(hf(n,t),e)},Ee.flatten=Wi,Ee.flattenDeep=function(n){return(null==n?0:n.length)?fr(n,Infinity):[]},Ee.flattenDepth=function(n,t){return(null==n?0:n.length)?fr(n,t=undefined===t?1:uo(t)):[]},Ee.flip=function(n){return Nu(n,512)},Ee.flow=Ko,Ee.flowRight=Vo,Ee.fromPairs=function(n){for(var t=-1,e=null==n?0:n.length,r={};++t<e;){var u=n[t];r[u[0]]=u[1]}return r},Ee.functions=function(n){return null==n?[]:sr(n,xo(n))},Ee.functionsIn=function(n){return null==n?[]:sr(n,jo(n))},Ee.groupBy=lf,Ee.initial=function(n){return(null==n?0:n.length)?Kr(n,0,-1):[]},Ee.intersection=Bi,Ee.intersectionBy=Ti,Ee.intersectionWith=$i,Ee.invert=bo,Ee.invertBy=wo,Ee.invokeMap=sf,Ee.iteratee=Ho,Ee.keyBy=df,Ee.keys=xo,Ee.keysIn=jo,Ee.map=hf,Ee.mapKeys=function(n,t){var e={};return t=Yu(t,3),cr(n,(function(n,r,u){Ge(e,t(n,r,u),n)})),e},Ee.mapValues=function(n,t){var e={};return t=Yu(t,3),cr(n,(function(n,r,u){Ge(e,r,t(n,r,u))})),e},Ee.matches=function(n){return Er(Ye(n,1))},Ee.matchesProperty=function(n,t){return zr(n,Ye(t,1))},Ee.memoize=Af,Ee.merge=Ao,Ee.mergeWith=Io,Ee.method=Jo,Ee.methodOf=Yo,Ee.mixin=Qo,Ee.negate=If,Ee.nthArg=function(n){return n=uo(n),Dr((function(t){return Lr(t,n)}))},Ee.omit=ko,Ee.omitBy=function(n,t){return Ro(n,If(Yu(t)))},Ee.once=function(n){return yf(2,n)},Ee.orderBy=function(n,t,e,r){return null==n?[]:(Wf(t)||(t=null==t?[]:[t]),Wf(e=r?undefined:e)||(e=null==e?[]:[e]),Cr(n,t,e))},Ee.over=na,Ee.overArgs=kf,Ee.overEvery=ta,Ee.overSome=ea,Ee.partial=Of,Ee.partialRight=Rf,Ee.partition=pf,Ee.pick=Oo,Ee.pickBy=Ro,Ee.property=ra,Ee.propertyOf=function(n){return function(t){return null==n?undefined:dr(n,t)}},Ee.pull=Ni,Ee.pullAll=Mi,Ee.pullAllBy=function(n,t,e){return n&&n.length&&t&&t.length?Ur(n,t,Yu(e,2)):n},Ee.pullAllWith=function(n,t,e){return n&&n.length&&t&&t.length?Ur(n,t,undefined,e):n},Ee.pullAt=Fi,Ee.range=ua,Ee.rangeRight=ia,Ee.rearg=Ef,Ee.reject=function(n,t){return(Wf(n)?ot:ir)(n,If(Yu(t,3)))},Ee.remove=function(n,t){var e=[];if(!n||!n.length)return e;var r=-1,u=[],i=n.length;for(t=Yu(t,3);++r<i;){var f=n[r];t(f,r,n)&&(e.push(f),u.push(r))}return Br(n,u),e},Ee.rest=function(t,e){if("function"!=typeof t)throw new wn(n);return Dr(t,e=undefined===e?e:uo(e))},Ee.reverse=Pi,Ee.sampleSize=function(n,t,e){return t=(e?ai(n,t,e):undefined===t)?1:uo(t),(Wf(n)?Me:Mr)(n,t)},Ee.set=function(n,t,e){return null==n?n:Fr(n,t,e)},Ee.setWith=function(n,t,e,r){return r="function"==typeof r?r:undefined,null==n?n:Fr(n,t,e,r)},Ee.shuffle=function(n){return(Wf(n)?Fe:Zr)(n)},Ee.slice=function(n,t,e){var r=null==n?0:n.length;return r?(e&&"number"!=typeof e&&ai(n,t,e)?(t=0,e=r):(t=null==t?0:uo(t),e=undefined===e?r:uo(e)),Kr(n,t,e)):[]},Ee.sortBy=vf,Ee.sortedUniq=function(n){return n&&n.length?Jr(n):[]},Ee.sortedUniqBy=function(n,t){return n&&n.length?Jr(n,Yu(t,2)):[]},Ee.split=function(n,t,e){return e&&"number"!=typeof e&&ai(n,t,e)&&(t=e=undefined),(e=undefined===e?4294967295:e>>>0)?(n=ao(n))&&("string"==typeof t||null!=t&&!Hf(t))&&!(t=Qr(t))&&Bt(n)?lu(Pt(n),0,e):n.split(t,e):[]},Ee.spread=function(t,e){if("function"!=typeof t)throw new wn(n);return e=null==e?0:oe(uo(e),0),Dr((function(n){var r=n[e],u=lu(n,0,e);return r&&st(u,r),et(t,this,u)}))},Ee.tail=function(n){var t=null==n?0:n.length;return t?Kr(n,1,t):[]},Ee.take=function(n,t,e){return n&&n.length?Kr(n,0,(t=e||undefined===t?1:uo(t))<0?0:t):[]},Ee.takeRight=function(n,t,e){var r=null==n?0:n.length;return r?Kr(n,(t=r-(t=e||undefined===t?1:uo(t)))<0?0:t,r):[]},Ee.takeRightWhile=function(n,t){return n&&n.length?eu(n,Yu(t,3),!1,!0):[]},Ee.takeWhile=function(n,t){return n&&n.length?eu(n,Yu(t,3)):[]},Ee.tap=function(n,t){return t(n),n},Ee.throttle=function(t,e,r){var u=!0,i=!0;if("function"!=typeof t)throw new wn(n);return qf(r)&&(u="leading"in r?!!r.leading:u,i="trailing"in r?!!r.trailing:i),mf(t,e,{leading:u,maxWait:e,trailing:i})},Ee.thru=ef,Ee.toArray=eo,Ee.toPairs=Eo,Ee.toPairsIn=zo,Ee.toPath=function(n){return Wf(n)?lt(n,ki):Qf(n)?[n]:yu(Ii(ao(n)))},Ee.toPlainObject=oo,Ee.transform=function(n,t,e){var r=Wf(n),u=r||$f(n)||Xf(n);if(t=Yu(t,4),null==e){var i=n&&n.constructor;e=u?r?new i:[]:qf(n)&&Mf(i)?ze(Hn(n)):{}}return(u?ut:cr)(n,(function(n,r,u){return t(e,n,r,u)})),e},Ee.unary=function(n){return gf(n,1)},Ee.union=qi,Ee.unionBy=Zi,Ee.unionWith=Ki,Ee.uniq=function(n){return n&&n.length?Xr(n):[]},Ee.uniqBy=function(n,t){return n&&n.length?Xr(n,Yu(t,2)):[]},Ee.uniqWith=function(n,t){return t="function"==typeof t?t:undefined,n&&n.length?Xr(n,undefined,t):[]},Ee.unset=function(n,t){return null==n||nu(n,t)},Ee.unzip=Vi,Ee.unzipWith=Gi,Ee.update=function(n,t,e){return null==n?n:tu(n,t,ou(e))},Ee.updateWith=function(n,t,e,r){return r="function"==typeof r?r:undefined,null==n?n:tu(n,t,ou(e),r)},Ee.values=So,Ee.valuesIn=function(n){return null==n?[]:Rt(n,jo(n))},Ee.without=Hi,Ee.words=Fo,Ee.wrap=function(n,t){return Of(ou(t),n)},Ee.xor=Ji,Ee.xorBy=Yi,Ee.xorWith=Qi,Ee.zip=Xi,Ee.zipObject=function(n,t){return iu(n||[],t||[],qe)},Ee.zipObjectDeep=function(n,t){return iu(n||[],t||[],Fr)},Ee.zipWith=nf,Ee.entries=Eo,Ee.entriesIn=zo,Ee.extend=lo,Ee.extendWith=so,Qo(Ee,Ee),Ee.add=aa,Ee.attempt=Po,Ee.camelCase=Lo,Ee.capitalize=Co,Ee.ceil=ca,Ee.clamp=function(n,t,e){return undefined===e&&(e=t,t=undefined),undefined!==e&&(e=(e=fo(e))==e?e:0),undefined!==t&&(t=(t=fo(t))==t?t:0),Je(fo(n),t,e)},Ee.clone=function(n){return Ye(n,4)},Ee.cloneDeep=function(n){return Ye(n,5)},Ee.cloneDeepWith=function(n,t){return Ye(n,5,t="function"==typeof t?t:undefined)},Ee.cloneWith=function(n,t){return Ye(n,4,t="function"==typeof t?t:undefined)},Ee.conformsTo=function(n,t){return null==t||Qe(n,t,xo(t))},Ee.deburr=Wo,Ee.defaultTo=function(n,t){return null==n||n!=n?t:n},Ee.divide=la,Ee.endsWith=function(n,t,e){n=ao(n),t=Qr(t);var r=n.length,u=e=undefined===e?r:Je(uo(e),0,r);return(e-=t.length)>=0&&n.slice(e,u)==t},Ee.eq=zf,Ee.escape=function(n){return(n=ao(n))&&U.test(n)?n.replace(C,Wt):n},Ee.escapeRegExp=function(n){return(n=ao(n))&&P.test(n)?n.replace(F,"\\$&"):n},Ee.every=function(n,t,e){var r=Wf(n)?ft:rr;return e&&ai(n,t,e)&&(t=undefined),r(n,Yu(t,3))},Ee.find=ff,Ee.findIndex=Li,Ee.findKey=function(n,t){return _t(n,Yu(t,3),cr)},Ee.findLast=of,Ee.findLastIndex=Ci,Ee.findLastKey=function(n,t){return _t(n,Yu(t,3),lr)},Ee.floor=sa,Ee.forEach=af,Ee.forEachRight=cf,Ee.forIn=function(n,t){return null==n?n:or(n,Yu(t,3),jo)},Ee.forInRight=function(n,t){return null==n?n:ar(n,Yu(t,3),jo)},Ee.forOwn=function(n,t){return n&&cr(n,Yu(t,3))},Ee.forOwnRight=function(n,t){return n&&lr(n,Yu(t,3))},Ee.get=go,Ee.gt=Sf,Ee.gte=Lf,Ee.has=function(n,t){return null!=n&&ui(n,t,_r)},Ee.hasIn=yo,Ee.head=Ui,Ee.identity=Go,Ee.includes=function(n,t,e,r){n=Bf(n)?n:So(n),e=e&&!r?uo(e):0;var u=n.length;return e<0&&(e=oe(u+e,0)),Yf(n)?e<=u&&n.indexOf(t,e)>-1:!!u&&yt(n,t,e)>-1},Ee.indexOf=function(n,t,e){var r=null==n?0:n.length;if(!r)return-1;var u=null==e?0:uo(e);return u<0&&(u=oe(r+u,0)),yt(n,t,u)},Ee.inRange=function(n,t,e){return t=ro(t),undefined===e?(e=t,t=0):e=ro(e),function(n,t,e){return n>=ae(t,e)&&n<oe(t,e)}(n=fo(n),t,e)},Ee.invoke=mo,Ee.isArguments=Cf,Ee.isArray=Wf,Ee.isArrayBuffer=Uf,Ee.isArrayLike=Bf,Ee.isArrayLikeObject=Tf,Ee.isBoolean=function(n){return!0===n||!1===n||Zf(n)&&pr(n)==i},Ee.isBuffer=$f,Ee.isDate=Df,Ee.isElement=function(n){return Zf(n)&&1===n.nodeType&&!Gf(n)},Ee.isEmpty=function(n){if(null==n)return!0;if(Bf(n)&&(Wf(n)||"string"==typeof n||"function"==typeof n.splice||$f(n)||Xf(n)||Cf(n)))return!n.length;var t=ri(n);if(t==l||t==p)return!n.size;if(di(n))return!Ir(n).length;for(var e in n)if(kn.call(n,e))return!1;return!0},Ee.isEqual=function(n,t){return mr(n,t)},Ee.isEqualWith=function(n,t,e){var r=(e="function"==typeof e?e:undefined)?e(n,t):undefined;return undefined===r?mr(n,t,undefined,e):!!r},Ee.isError=Nf,Ee.isFinite=function(n){return"number"==typeof n&&ue(n)},Ee.isFunction=Mf,Ee.isInteger=Ff,Ee.isLength=Pf,Ee.isMap=Kf,Ee.isMatch=function(n,t){return n===t||xr(n,t,Xu(t))},Ee.isMatchWith=function(n,t,e){return e="function"==typeof e?e:undefined,xr(n,t,Xu(t),e)},Ee.isNaN=function(n){return Vf(n)&&n!=+n},Ee.isNative=function(n){if(si(n))throw new pn("Unsupported core-js use. Try https://npms.io/search?q=ponyfill.");return jr(n)},Ee.isNil=function(n){return null==n},Ee.isNull=function(n){return null===n},Ee.isNumber=Vf,Ee.isObject=qf,Ee.isObjectLike=Zf,Ee.isPlainObject=Gf,Ee.isRegExp=Hf,Ee.isSafeInteger=function(n){return Ff(n)&&n>=-9007199254740991&&n<=9007199254740991},Ee.isSet=Jf,Ee.isString=Yf,Ee.isSymbol=Qf,Ee.isTypedArray=Xf,Ee.isUndefined=function(n){return undefined===n},Ee.isWeakMap=function(n){return Zf(n)&&ri(n)==g},Ee.isWeakSet=function(n){return Zf(n)&&"[object WeakSet]"==pr(n)},Ee.join=function(n,t){return null==n?"":ie.call(n,t)},Ee.kebabCase=Uo,Ee.last=Di,Ee.lastIndexOf=function(n,t,e){var r=null==n?0:n.length;if(!r)return-1;var u=r;return undefined!==e&&(u=(u=uo(e))<0?oe(r+u,0):ae(u,r-1)),t==t?function(n,t,e){for(var r=e+1;r--;)if(n[r]===t)return r;return r}(n,t,u):gt(n,wt,u,!0)},Ee.lowerCase=Bo,Ee.lowerFirst=To,Ee.lt=no,Ee.lte=to,Ee.max=function(n){return n&&n.length?ur(n,Go,vr):undefined},Ee.maxBy=function(n,t){return n&&n.length?ur(n,Yu(t,2),vr):undefined},Ee.mean=function(n){return mt(n,Go)},Ee.meanBy=function(n,t){return mt(n,Yu(t,2))},Ee.min=function(n){return n&&n.length?ur(n,Go,Or):undefined},Ee.minBy=function(n,t){return n&&n.length?ur(n,Yu(t,2),Or):undefined},Ee.stubArray=fa,Ee.stubFalse=oa,Ee.stubObject=function(){return{}},Ee.stubString=function(){return""},Ee.stubTrue=function(){return!0},Ee.multiply=ha,Ee.nth=function(n,t){return n&&n.length?Lr(n,uo(t)):undefined},Ee.noConflict=function(){return qn._===this&&(qn._=Dn),this},Ee.noop=Xo,Ee.now=_f,Ee.pad=function(n,t,e){n=ao(n);var r=(t=uo(t))?Ft(n):0;if(!t||r>=t)return n;var u=(t-r)/2;return Cu(te(u),e)+n+Cu(ne(u),e)},Ee.padEnd=function(n,t,e){n=ao(n);var r=(t=uo(t))?Ft(n):0;return t&&r<t?n+Cu(t-r,e):n},Ee.padStart=function(n,t,e){n=ao(n);var r=(t=uo(t))?Ft(n):0;return t&&r<t?Cu(t-r,e)+n:n},Ee.parseInt=function(n,t,e){return e||null==t?t=0:t&&(t=+t),le(ao(n).replace(Z,""),t||0)},Ee.random=function(n,t,e){if(e&&"boolean"!=typeof e&&ai(n,t,e)&&(t=e=undefined),undefined===e&&("boolean"==typeof t?(e=t,t=undefined):"boolean"==typeof n&&(e=n,n=undefined)),undefined===n&&undefined===t?(n=0,t=1):(n=ro(n),undefined===t?(t=n,n=0):t=ro(t)),n>t){var r=n;n=t,t=r}if(e||n%1||t%1){var u=se();return ae(n+u*(t-n+Nn("1e-"+((u+"").length-1))),t)}return Tr(n,t)},Ee.reduce=function(n,t,e){var r=Wf(n)?dt:At,u=arguments.length<3;return r(n,Yu(t,4),e,u,tr)},Ee.reduceRight=function(n,t,e){var r=Wf(n)?ht:At,u=arguments.length<3;return r(n,Yu(t,4),e,u,er)},Ee.repeat=function(n,t,e){return t=(e?ai(n,t,e):undefined===t)?1:uo(t),$r(ao(n),t)},Ee.replace=function(){var n=arguments,t=ao(n[0]);return n.length<3?t:t.replace(n[1],n[2])},Ee.result=function(n,t,e){var r=-1,u=(t=au(t,n)).length;for(u||(u=1,n=undefined);++r<u;){var i=null==n?undefined:n[ki(t[r])];undefined===i&&(r=u,i=e),n=Mf(i)?i.call(n):i}return n},Ee.round=pa,Ee.runInContext=cn,Ee.sample=function(n){return(Wf(n)?Ne:Nr)(n)},Ee.size=function(n){if(null==n)return 0;if(Bf(n))return Yf(n)?Ft(n):n.length;var t=ri(n);return t==l||t==p?n.size:Ir(n).length},Ee.snakeCase=$o,Ee.some=function(n,t,e){var r=Wf(n)?pt:Vr;return e&&ai(n,t,e)&&(t=undefined),r(n,Yu(t,3))},Ee.sortedIndex=function(n,t){return Gr(n,t)},Ee.sortedIndexBy=function(n,t,e){return Hr(n,t,Yu(e,2))},Ee.sortedIndexOf=function(n,t){var e=null==n?0:n.length;if(e){var r=Gr(n,t);if(r<e&&zf(n[r],t))return r}return-1},Ee.sortedLastIndex=function(n,t){return Gr(n,t,!0)},Ee.sortedLastIndexBy=function(n,t,e){return Hr(n,t,Yu(e,2),!0)},Ee.sortedLastIndexOf=function(n,t){if(null==n?0:n.length){var e=Gr(n,t,!0)-1;if(zf(n[e],t))return e}return-1},Ee.startCase=Do,Ee.startsWith=function(n,t,e){return n=ao(n),e=null==e?0:Je(uo(e),0,n.length),t=Qr(t),n.slice(e,e+t.length)==t},Ee.subtract=va,Ee.sum=function(n){return n&&n.length?It(n,Go):0},Ee.sumBy=function(n,t){return n&&n.length?It(n,Yu(t,2)):0},Ee.template=function(n,t,e){var r=Ee.templateSettings;e&&ai(n,t,e)&&(t=undefined),n=ao(n),t=so({},t,r,Mu);var u,i,f=so({},t.imports,r.imports,Mu),o=xo(f),a=Rt(f,o),c=0,l=t.interpolate||on,s="__p += '",d=yn((t.escape||on).source+"|"+l.source+"|"+(l===$?Q:on).source+"|"+(t.evaluate||on).source+"|$","g"),h="//# sourceURL="+(kn.call(t,"sourceURL")?(t.sourceURL+"").replace(/[\r\n]/g," "):"lodash.templateSources["+ ++Bn+"]")+"\n";n.replace(d,(function(t,e,r,f,o,a){return r||(r=f),s+=n.slice(c,a).replace(an,Ut),e&&(u=!0,s+="' +\n__e("+e+") +\n'"),o&&(i=!0,s+="';\n"+o+";\n__p += '"),r&&(s+="' +\n((__t = ("+r+")) == null ? '' : __t) +\n'"),c=a+t.length,t})),s+="';\n";var p=kn.call(t,"variable")&&t.variable;p||(s="with (obj) {\n"+s+"\n}\n"),s=(i?s.replace(E,""):s).replace(z,"$1").replace(S,"$1;"),s="function("+(p||"obj")+") {\n"+(p?"":"obj || (obj = {});\n")+"var __t, __p = ''"+(u?", __e = _.escape":"")+(i?", __j = Array.prototype.join;\nfunction print() { __p += __j.call(arguments, '') }\n":";\n")+s+"return __p\n}";var v=Po((function(){return vn(o,h+"return "+s).apply(undefined,a)}));if(v.source=s,Nf(v))throw v;return v},Ee.times=function(n,t){if((n=uo(n))<1||n>9007199254740991)return[];var e=4294967295,r=ae(n,4294967295);n-=4294967295;for(var u=kt(r,t=Yu(t));++e<n;)t(e);return u},Ee.toFinite=ro,Ee.toInteger=uo,Ee.toLength=io,Ee.toLower=function(n){return ao(n).toLowerCase()},Ee.toNumber=fo,Ee.toSafeInteger=function(n){return n?Je(uo(n),-9007199254740991,9007199254740991):0===n?n:0},Ee.toString=ao,Ee.toUpper=function(n){return ao(n).toUpperCase()},Ee.trim=function(n,t,e){if((n=ao(n))&&(e||undefined===t))return n.replace(q,"");if(!n||!(t=Qr(t)))return n;var r=Pt(n),u=Pt(t);return lu(r,zt(r,u),St(r,u)+1).join("")},Ee.trimEnd=function(n,t,e){if((n=ao(n))&&(e||undefined===t))return n.replace(K,"");if(!n||!(t=Qr(t)))return n;var r=Pt(n);return lu(r,0,St(r,Pt(t))+1).join("")},Ee.trimStart=function(n,t,e){if((n=ao(n))&&(e||undefined===t))return n.replace(Z,"");if(!n||!(t=Qr(t)))return n;var r=Pt(n);return lu(r,zt(r,Pt(t))).join("")},Ee.truncate=function(n,t){var e=30,r="...";if(qf(t)){var u="separator"in t?t.separator:u;e="length"in t?uo(t.length):e,r="omission"in t?Qr(t.omission):r}var i=(n=ao(n)).length;if(Bt(n)){var f=Pt(n);i=f.length}if(e>=i)return n;var o=e-Ft(r);if(o<1)return r;var a=f?lu(f,0,o).join(""):n.slice(0,o);if(undefined===u)return a+r;if(f&&(o+=a.length-o),Hf(u)){if(n.slice(o).search(u)){var c,l=a;for(u.global||(u=yn(u.source,ao(X.exec(u))+"g")),u.lastIndex=0;c=u.exec(l);)var s=c.index;a=a.slice(0,undefined===s?o:s)}}else if(n.indexOf(Qr(u),o)!=o){var d=a.lastIndexOf(u);d>-1&&(a=a.slice(0,d))}return a+r},Ee.unescape=function(n){return(n=ao(n))&&W.test(n)?n.replace(L,qt):n},Ee.uniqueId=function(n){var t=++On;return ao(n)+t},Ee.upperCase=No,Ee.upperFirst=Mo,Ee.each=af,Ee.eachRight=cf,Ee.first=Ui,Qo(Ee,(da={},cr(Ee,(function(n,t){kn.call(Ee.prototype,t)||(da[t]=n)})),da),{chain:!1}),Ee.VERSION="4.17.15",ut(["bind","bindKey","curry","curryRight","partial","partialRight"],(function(n){Ee[n].placeholder=Ee})),ut(["drop","take"],(function(n,t){Ce.prototype[n]=function(e){e=undefined===e?1:oe(uo(e),0);var r=this.__filtered__&&!t?new Ce(this):this.clone();return r.__filtered__?r.__takeCount__=ae(e,r.__takeCount__):r.__views__.push({size:ae(e,4294967295),type:n+(r.__dir__<0?"Right":"")}),r},Ce.prototype[n+"Right"]=function(t){return this.reverse()[n](t).reverse()}})),ut(["filter","map","takeWhile"],(function(n,t){var e=t+1,r=1==e||3==e;Ce.prototype[n]=function(n){var t=this.clone();return t.__iteratees__.push({iteratee:Yu(n,3),type:e}),t.__filtered__=t.__filtered__||r,t}})),ut(["head","last"],(function(n,t){var e="take"+(t?"Right":"");Ce.prototype[n]=function(){return this[e](1).value()[0]}})),ut(["initial","tail"],(function(n,t){var e="drop"+(t?"":"Right");Ce.prototype[n]=function(){return this.__filtered__?new Ce(this):this[e](1)}})),Ce.prototype.compact=function(){return this.filter(Go)},Ce.prototype.find=function(n){return this.filter(n).head()},Ce.prototype.findLast=function(n){return this.reverse().find(n)},Ce.prototype.invokeMap=Dr((function(n,t){return"function"==typeof n?new Ce(this):this.map((function(e){return br(e,n,t)}))})),Ce.prototype.reject=function(n){return this.filter(If(Yu(n)))},Ce.prototype.slice=function(n,t){n=uo(n);var e=this;return e.__filtered__&&(n>0||t<0)?new Ce(e):(n<0?e=e.takeRight(-n):n&&(e=e.drop(n)),undefined!==t&&(e=(t=uo(t))<0?e.dropRight(-t):e.take(t-n)),e)},Ce.prototype.takeRightWhile=function(n){return this.reverse().takeWhile(n).reverse()},Ce.prototype.toArray=function(){return this.take(4294967295)},cr(Ce.prototype,(function(n,t){var e=/^(?:filter|find|map|reject)|While$/.test(t),r=/^(?:head|last)$/.test(t),u=Ee[r?"take"+("last"==t?"Right":""):t],i=r||/^find/.test(t);u&&(Ee.prototype[t]=function(){var t=this.__wrapped__,f=r?[1]:arguments,o=t instanceof Ce,a=f[0],c=o||Wf(t),l=function(n){var t=u.apply(Ee,st([n],f));return r&&s?t[0]:t};c&&e&&"function"==typeof a&&1!=a.length&&(o=c=!1);var s=this.__chain__,d=!!this.__actions__.length,h=i&&!s,p=o&&!d;if(!i&&c){t=p?t:new Ce(this);var v=n.apply(t,f);return v.__actions__.push({func:ef,args:[l],thisArg:undefined}),new Le(v,s)}return h&&p?n.apply(this,f):(v=this.thru(l),h?r?v.value()[0]:v.value():v)})})),ut(["pop","push","shift","sort","splice","unshift"],(function(n){var t=mn[n],e=/^(?:push|sort|unshift)$/.test(n)?"tap":"thru",r=/^(?:pop|shift)$/.test(n);Ee.prototype[n]=function(){var n=arguments;if(r&&!this.__chain__){var u=this.value();return t.apply(Wf(u)?u:[],n)}return this[e]((function(e){return t.apply(Wf(e)?e:[],n)}))}})),cr(Ce.prototype,(function(n,t){var e=Ee[t];if(e){var r=e.name+"";kn.call(we,r)||(we[r]=[]),we[r].push({name:t,func:e})}})),we[Eu(undefined,2).name]=[{name:"wrapper",func:undefined}],Ce.prototype.clone=function(){var n=new Ce(this.__wrapped__);return n.__actions__=yu(this.__actions__),n.__dir__=this.__dir__,n.__filtered__=this.__filtered__,n.__iteratees__=yu(this.__iteratees__),n.__takeCount__=this.__takeCount__,n.__views__=yu(this.__views__),n},Ce.prototype.reverse=function(){if(this.__filtered__){var n=new Ce(this);n.__dir__=-1,n.__filtered__=!0}else(n=this.clone()).__dir__*=-1;return n},Ce.prototype.value=function(){var n=this.__wrapped__.value(),t=this.__dir__,e=Wf(n),r=t<0,u=e?n.length:0,i=function(n,t,e){var r=-1,u=e.length;for(;++r<u;){var i=e[r],f=i.size;switch(i.type){case"drop":n+=f;break;case"dropRight":t-=f;break;case"take":t=ae(t,n+f);break;case"takeRight":n=oe(n,t-f)}}return{start:n,end:t}}(0,u,this.__views__),f=i.start,o=i.end,a=o-f,c=r?o:f-1,l=this.__iteratees__,s=l.length,d=0,h=ae(a,this.__takeCount__);if(!e||!r&&u==a&&h==a)return ru(n,this.__actions__);var p=[];n:for(;a--&&d<h;){for(var v=-1,_=n[c+=t];++v<s;){var g=l[v],y=g.iteratee,b=g.type,w=y(_);if(2==b)_=w;else if(!w){if(1==b)continue n;break n}}p[d++]=_}return p},Ee.prototype.at=rf,Ee.prototype.chain=function(){return tf(this)},Ee.prototype.commit=function(){return new Le(this.value(),this.__chain__)},Ee.prototype.next=function(){undefined===this.__values__&&(this.__values__=eo(this.value()));var n=this.__index__>=this.__values__.length;return{done:n,value:n?undefined:this.__values__[this.__index__++]}},Ee.prototype.plant=function(n){for(var t,e=this;e instanceof Se;){var r=Ri(e);r.__index__=0,r.__values__=undefined,t?u.__wrapped__=r:t=r;var u=r;e=e.__wrapped__}return u.__wrapped__=n,t},Ee.prototype.reverse=function(){var n=this.__wrapped__;if(n instanceof Ce){var t=n;return this.__actions__.length&&(t=new Ce(this)),(t=t.reverse()).__actions__.push({func:ef,args:[Pi],thisArg:undefined}),new Le(t,this.__chain__)}return this.thru(Pi)},Ee.prototype.toJSON=Ee.prototype.valueOf=Ee.prototype.value=function(){return ru(this.__wrapped__,this.__actions__)},Ee.prototype.first=Ee.prototype.head,Gt&&(Ee.prototype[Gt]=function(){return this}),Ee}();"function"==typeof define&&"object"==typeof define.amd&&define.amd?(qn._=Zt,define((function(){return Zt}))):Kn?((Kn.exports=Zt)._=Zt,Zn._=Zt):qn._=Zt}).call(this);
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkF0dHJpYnV0ZS5qcyIsIkR1bWJIZXVyaXN0aWMuanMiLCJFZGdlLmpzIiwiR2Fuc25lci5qcyIsIkdhbnNuZXJTYW1lUmFuay5qcyIsIkdyYXBoLmpzIiwiR3JhcGhHZW5lcmF0b3IuanMiLCJHcm91cC5qcyIsIkxQQmVuZGluZXNzLmpzIiwiTFBCZW5kaW5lc3NDb21iaW5lZC5qcyIsIkxQQmVuZGluZXNzQ29tYmluZWRQbHVzR3JvdXBzLmpzIiwiTFBGb3JtdWxhdGlvbi5qcyIsIlN3ZWVwLmpzIiwiVGFibGUuanMiLCJkcmF3R3JhcGguanMiLCJ0ZXN0LmpzIiwibG9kYXNoLmpzIl0sIm5hbWVzIjpbIkF0dHJpYnV0ZSIsIltvYmplY3QgT2JqZWN0XSIsInRhYmxlIiwibmFtZSIsInRoaXMiLCJhdHRyIiwid2VpZ2h0IiwiZGlmZkVkZ2VzIiwicmFuZG9tRWRnZXMiLCJzYW1lRWRnZXMiLCJtdXRhYmxlIiwiaWQiLCJhcmcwIiwiRHVtYkhldXJpc3RpYyIsImciLCJpIiwibWF4RGVwdGgiLCJlZGdlcyIsImVkZ2VJbmRleCIsInNvcnQiLCJhIiwiYiIsImNvbXBhcmVUbyIsImoiLCJsZW5ndGgiLCJlZGdlMSIsImVkZ2UyIiwibGVmdFRhYmxlIiwibGVmdEF0dHJpYnV0ZSIsInN3YXAiLCJyaWdodEF0dHJpYnV0ZSIsInJpZ2h0VGFibGUiLCJ3MSIsIncyIiwidG1wdyIsIkVkZ2UiLCJhdHQxIiwiYXR0MiIsIm90aGVyRWRnZSIsImRlcHRoIiwiY29tcGFyZVNlbGZFZGdlVG8iLCJ1bmRlZmluZWQiLCJjb21wYXJlQXR0cmlidXRlcyIsInQxIiwiYTEiLCJ0MiIsImEyIiwicmV0IiwicmVzIiwiZmFjdG9yIiwiZ3JhcGgiLCJiYXNlUm93RGlzdGFuY2UiLCJ2ZXJ0aWNhbEF0dHJPZmZzZXQiLCJNYXRoIiwicm91bmQiLCJhYnMiLCJHYW5zbmVyIiwibWF4X2l0ZXJhdGlvbnMiLCJlbGFwc2VkVGltZSIsImFycmF5IiwiY2xvbmVHcmFwaCIsInRhYmxlcyIsInRhYmxlMiIsImZpbmQiLCJ0IiwiYXR0cmlidXRlIiwiYXR0cmlidXRlcyIsInN0YXJ0VGltZSIsIkRhdGUiLCJnZXRUaW1lIiwiYmVzdF9jcm9zc2luZ3MiLCJnZXRFZGdlQ3Jvc3NpbmdzIiwiXyIsImNsb25lRGVlcCIsImFycmFuZ2VMZWZ0IiwiYXJyYW5nZVJpZ2h0IiwidHJhbnNwb3NlIiwiY3VyX2Nyb3NzaW5ncyIsImFwcGx5QXJyYW5nZW1lbnQiLCJsYXllclRhYmxlcyIsInRhYmxlSW5kZXgiLCJsYXllckVkZ2VzIiwid2VpZ2h0cyIsImZpbHRlciIsImUiLCJtYXAiLCJwYXJzZUZsb2F0IiwibWVkaWFuIiwidGFibGVXZWlnaHRzIiwiYXR0cmlidXRlV2VpZ2h0cyIsInNldEV4YWN0V2VpZ2h0cyIsImltcHJvdmVkIiwiaW5pdENyb3NzaW5ncyIsImdldEVkZ2VDcm9zc2luZ3NBdERlcHRoIiwidGFibGUxIiwiayIsImF0dHIxIiwiYXR0cjIiLCJHYW5zbmVyU2FtZVJhbmsiLCJpdGVyYXRpb25zIiwiY3VyX2l0ZXJhdGlvbiIsIml0ZXJfbnVtIiwicGl2b3QiLCJsZWZ0IiwicmlnaHQiLCJwdXNoIiwicXVpY2tzb3J0IiwiY29uY2F0IiwiYXNzaWduZWRXZWlnaHQiLCJhdHRyaWJ1dGUyIiwiY29uc29sZSIsImxvZyIsInRtcFdlaWdodHNUYWJsZXMiLCJ0bXBBdHRyaWJ1dGVXZWlnaHRzIiwiaXNTYW1lUmFua0VkZ2UiLCJ2YWwiLCJpc05hTiIsInJlb3JkZXIiLCJ0YWJsIiwiR3JhcGgiLCJvYmoiLCJncm91cHMiLCJuZXdMYXllciIsIk9iamVjdCIsImFzc2lnbiIsImdyb3VwIiwiaW5kZXhPZiIsImdyb3VwSGVhZGVyVGFibGUiLCJhZGRUYWJsZSIsInVwZGF0ZUNvb3JkcyIsImVkZ2UiLCJjb3VudCIsImQiLCJ2ZXJib3NlIiwiY3Jvc3NpbmdzIiwiY3VyckVkZ2UiLCJjcm9zc2VzIiwibWFpbiIsInRfaW5kIiwiYXR0cnMiLCJ1cGRhdGVHcm91cENvb3JkcyIsImdldE51bVN0cmFpZ2h0RWRnZXNBdERlcHRoIiwiYWRqdXN0QXR0ck9mZnNldCIsImVkZ2VzTGVmdCIsImdldEJlbmRpbmVzcyIsInJlZHVjZSIsImVkZ2VzUmlnaHQiLCJnZXRCZW5kUmlnaHQiLCJnZXRCZW5kTGVmdCIsImdldFRhYmxlQmVuZGluZXNzIiwiY3ljbGVJbmRleCIsImdldFVwcGVyQm91bmQiLCJ0YWJsZUNvbCIsInVwcGVyQm91bmQiLCJnZXRMb3dlckJvdW5kIiwibG93ZXJCb3VuZCIsInN3aXBlUmlnaHQiLCJjdXJyQmVuZGluZXNzU3VtIiwiY3VyckJlc3RPZmZzZXQiLCJ0ZW1wQmVuZGluZXNzU3VtIiwic3dpcGVMZWZ0IiwiR3JhcGhHZW5lcmF0b3IiLCJzZWVkIiwidGFibGVEaXN0cmlidXRpb24iLCJhdHRyaWJ1dGVEaXN0cmlidXRpb24iLCJzIiwiamQiLCJqcyIsImF0dHJpYnV0ZUNvdW50ZXIiLCJybmciLCJzZWVkcmFuZG9tIiwidGFibGVEaXN0IiwiYXR0ckRpc3QiLCJnZW5lcmF0ZVRhYmxlIiwiZ2VuZXJhdGVQcm9qZWN0aW9ucyIsImdlbmVyYXRlSm9pbnMiLCJlbnN1cmVVbmlxdWVFZGdlcyIsImluZGV4IiwibmV3VGFibGUiLCJUYWJsZSIsImFkZEF0dHJpYnV0ZSIsImxheWVyMSIsImxheWVyMWF0dHJzIiwic2VsZWN0VGFibGUiLCJwcm9qZWN0ZWRBdHRycyIsInByb2plY3RlZCIsInByb2plY3RlZENvdW50Iiwic3RyaWN0IiwiZmxvb3IiLCJjb3VudFByb2plY3Rpb25zIiwiYXR0ckluZGV4Iiwic3BsaWNlIiwibmV3QXR0ciIsImFkZEVkZ2UiLCJsZWZ0TGF5ZXIiLCJyaWdodExheWVyIiwibGVmdExheWVyQXR0cnMiLCJyaWdodExheWVyQXR0cnMiLCJsZWZ0SW5kZXgiLCJyaWdodEluZGV4IiwibGF5ZXIiLCJhdHRyczEiLCJhdHRyczIiLCJhdHRyMmluZGV4IiwiZ2VuZXJhdGVJbnRlckxheWVySm9pbnMiLCJnZW5lcmF0ZUluTGF5ZXJKb2lucyIsImdlbmVyYXRlUmFuZG9tSm9pbnMiLCJHcm91cCIsImNvb3JkcyIsInhfY29vcmQiLCJ5X2Nvb3JkIiwid2lkdGhfY29vcmQiLCJoZWlnaHRfY29vcmQiLCJtYXJnaW4iLCJncm91cEhlYWRlciIsImxlZnRNYXhEZXB0aCIsIm1pbiIsImFwcGx5IiwidG9wTWF4IiwidG9wVGFibGUiLCJyaWdodE1heCIsIm1heCIsImJvdHRvbU1heCIsImJvdHRvbVRhYmxlIiwiZGVwdGhyYW5nZSIsImN1cl9kIiwibnVtdGhpc0RlcHRoIiwiZGVwdGhfZGlzdGFuY2UiLCJ0YWJsZV92ZXJ0X3NwYWNlIiwiYXR0cl9oZWlnaHQiLCJ0YWJsZV93aWR0aCIsIkxQQmVuZGluZXNzIiwibWlwIiwibW9kZWwiLCJmaWxsTW9kZWwiLCJvYmplY3RpdmUiLCJwcm9iIiwibW9kZWxUb1N0cmluZyIsInJlc3VsdCIsImdscF9zZXRfcHJpbnRfZnVuYyIsImxwIiwiZ2xwX2NyZWF0ZV9wcm9iIiwiZ2xwX3JlYWRfbHBfZnJvbV9zdHJpbmciLCJnbHBfc2NhbGVfcHJvYiIsIkdMUF9TRl9BVVRPIiwic21jcCIsIlNNQ1AiLCJwcmVzb2x2ZSIsIkdMUF9PTiIsImdscF9zaW1wbGV4IiwiZ2xwX2ludG9wdCIsImdscF9taXBfb2JqX3ZhbCIsImdscF9nZXRfbnVtX2NvbHMiLCJnbHBfZ2V0X2NvbF9uYW1lIiwiZ2xwX21pcF9jb2xfdmFsIiwiZ2xwX2dldF9vYmpfdmFsIiwiZ2xwX2dldF9jb2xfcHJpbSIsImFwcGx5X3NvbHV0aW9uIiwibWluaW1pemUiLCJzdWJqZWN0VG8iLCJib3VuZHMiLCJzdWJzdHJpbmciLCJzb2x1dGlvbiIsIkxQQmVuZGluZXNzQ29tYmluZWQiLCJkZWZpbml0aW9ucyIsImNyb3NzaW5nX3ZhcnMiLCJta2MiLCJ1MSIsInYxIiwidTIiLCJ2MiIsIm1reEJhc2UiLCJwcmUiLCJsYXllckF0dHJpYnV0ZXMiLCJmbGF0IiwibSIsInQzIiwidTF2MSIsInUydjIiLCJwMSIsImZpbmFsc3VtIiwicDIiLCJwMyIsInA0IiwiemNvdW50IiwicCIsImFjY3VtdWxhdG9yIiwidG1wc3RyIiwiZWxlbSIsIkxQQmVuZGluZXNzQ29tYmluZWRQbHVzR3JvdXBzIiwibWt4RGljdCIsInNpZ24iLCJvcHBzaWduIiwid2FybiIsIkxQRm9ybXVsYXRpb24iLCJjcm9zc3ZhciIsIlN3ZWVwIiwic3dlZXBSaWdodCIsInN3ZWVwTGVmdCIsImN1ckNyb3NzZXMiLCJuZXdDcm9zc2VzIiwiaGVhZGVyIiwidHlwZSIsImF0dHJNYXBzIiwidmlzaWJpbGl0eSIsIm90aGVyVGFibGUiLCJkcmF3R3JhcGgiLCJzdmciLCJhbGdvcml0aG0iLCJsaW5lIiwiZDMiLCJjdXJ2ZSIsImN1cnZlQmFzaXMiLCJzdHJhaWdodGxpbmUiLCJ2aXNnIiwiYXBwZW5kIiwiQXJyYXkiLCJrZXlzIiwic3R5bGUiLCJ0YWJsZWdyb3VwcyIsInNlbGVjdEFsbCIsImRhdGEiLCJlbnRlciIsImhlYWRlcl9oZWlnaHQiLCJvbiIsInRleHQiLCJhdHRyZ3JvdXBzIiwiZmlyc3QiLCJnZXRfMXN0X2Nvb3JkIiwic2Vjb25kIiwiZ2V0XzJuZF9jb29yZCIsInNlbGVjdCIsIm5vZGUiLCJwYXJlbnROb2RlIiwiZ2V0R3JhcGhUb3RhbEVkZ2VCZW5kaW5lc3MiLCJhcHBseV9pdGVyYXRpb24iLCJ0cmFuc2l0aW9uIiwiZHVyYXRpb24iLCJGVU5DX0VSUk9SX1RFWFQiLCJQTEFDRUhPTERFUiIsIndyYXBGbGFncyIsImFyZ3NUYWciLCJhcnJheVRhZyIsImJvb2xUYWciLCJkYXRlVGFnIiwiZXJyb3JUYWciLCJmdW5jVGFnIiwiZ2VuVGFnIiwibWFwVGFnIiwibnVtYmVyVGFnIiwib2JqZWN0VGFnIiwicmVnZXhwVGFnIiwic2V0VGFnIiwic3RyaW5nVGFnIiwic3ltYm9sVGFnIiwid2Vha01hcFRhZyIsImFycmF5QnVmZmVyVGFnIiwiZGF0YVZpZXdUYWciLCJmbG9hdDMyVGFnIiwiZmxvYXQ2NFRhZyIsImludDhUYWciLCJpbnQxNlRhZyIsImludDMyVGFnIiwidWludDhUYWciLCJ1aW50OENsYW1wZWRUYWciLCJ1aW50MTZUYWciLCJ1aW50MzJUYWciLCJyZUVtcHR5U3RyaW5nTGVhZGluZyIsInJlRW1wdHlTdHJpbmdNaWRkbGUiLCJyZUVtcHR5U3RyaW5nVHJhaWxpbmciLCJyZUVzY2FwZWRIdG1sIiwicmVVbmVzY2FwZWRIdG1sIiwicmVIYXNFc2NhcGVkSHRtbCIsIlJlZ0V4cCIsInNvdXJjZSIsInJlSGFzVW5lc2NhcGVkSHRtbCIsInJlRXNjYXBlIiwicmVFdmFsdWF0ZSIsInJlSW50ZXJwb2xhdGUiLCJyZUlzRGVlcFByb3AiLCJyZUlzUGxhaW5Qcm9wIiwicmVQcm9wTmFtZSIsInJlUmVnRXhwQ2hhciIsInJlSGFzUmVnRXhwQ2hhciIsInJlVHJpbSIsInJlVHJpbVN0YXJ0IiwicmVUcmltRW5kIiwicmVXcmFwQ29tbWVudCIsInJlV3JhcERldGFpbHMiLCJyZVNwbGl0RGV0YWlscyIsInJlQXNjaWlXb3JkIiwicmVFc2NhcGVDaGFyIiwicmVFc1RlbXBsYXRlIiwicmVGbGFncyIsInJlSXNCYWRIZXgiLCJyZUlzQmluYXJ5IiwicmVJc0hvc3RDdG9yIiwicmVJc09jdGFsIiwicmVJc1VpbnQiLCJyZUxhdGluIiwicmVOb01hdGNoIiwicmVVbmVzY2FwZWRTdHJpbmciLCJyc0NvbWJvUmFuZ2UiLCJyc0NvbWJvTWFya3NSYW5nZSIsInJzQnJlYWtSYW5nZSIsInJzTWF0aE9wUmFuZ2UiLCJyc0FzdHJhbCIsInJzQnJlYWsiLCJyc0NvbWJvIiwicnNEaWdpdHMiLCJyc0RpbmdiYXQiLCJyc0xvd2VyIiwicnNNaXNjIiwicnNGaXR6IiwicnNOb25Bc3RyYWwiLCJyc1JlZ2lvbmFsIiwicnNTdXJyUGFpciIsInJzVXBwZXIiLCJyc01pc2NMb3dlciIsInJzTWlzY1VwcGVyIiwicmVPcHRNb2QiLCJyc1NlcSIsImpvaW4iLCJyc0Vtb2ppIiwicnNTeW1ib2wiLCJyZUFwb3MiLCJyZUNvbWJvTWFyayIsInJlVW5pY29kZSIsInJlVW5pY29kZVdvcmQiLCJyZUhhc1VuaWNvZGUiLCJyZUhhc1VuaWNvZGVXb3JkIiwiY29udGV4dFByb3BzIiwidGVtcGxhdGVDb3VudGVyIiwidHlwZWRBcnJheVRhZ3MiLCJjbG9uZWFibGVUYWdzIiwic3RyaW5nRXNjYXBlcyIsIlxcIiwiJyIsIlxuIiwiXHIiLCLigKgiLCLigKkiLCJmcmVlUGFyc2VGbG9hdCIsImZyZWVQYXJzZUludCIsInBhcnNlSW50IiwiZnJlZUdsb2JhbCIsImdsb2JhbCIsImZyZWVTZWxmIiwic2VsZiIsInJvb3QiLCJGdW5jdGlvbiIsImZyZWVFeHBvcnRzIiwiZXhwb3J0cyIsIm5vZGVUeXBlIiwiZnJlZU1vZHVsZSIsIm1vZHVsZSIsIm1vZHVsZUV4cG9ydHMiLCJmcmVlUHJvY2VzcyIsInByb2Nlc3MiLCJub2RlVXRpbCIsInR5cGVzIiwicmVxdWlyZSIsImJpbmRpbmciLCJub2RlSXNBcnJheUJ1ZmZlciIsImlzQXJyYXlCdWZmZXIiLCJub2RlSXNEYXRlIiwiaXNEYXRlIiwibm9kZUlzTWFwIiwiaXNNYXAiLCJub2RlSXNSZWdFeHAiLCJpc1JlZ0V4cCIsIm5vZGVJc1NldCIsImlzU2V0Iiwibm9kZUlzVHlwZWRBcnJheSIsImlzVHlwZWRBcnJheSIsImZ1bmMiLCJ0aGlzQXJnIiwiYXJncyIsImNhbGwiLCJhcnJheUFnZ3JlZ2F0b3IiLCJzZXR0ZXIiLCJpdGVyYXRlZSIsInZhbHVlIiwiYXJyYXlFYWNoIiwiYXJyYXlFYWNoUmlnaHQiLCJhcnJheUV2ZXJ5IiwicHJlZGljYXRlIiwiYXJyYXlGaWx0ZXIiLCJyZXNJbmRleCIsImFycmF5SW5jbHVkZXMiLCJiYXNlSW5kZXhPZiIsImFycmF5SW5jbHVkZXNXaXRoIiwiY29tcGFyYXRvciIsImFycmF5TWFwIiwiYXJyYXlQdXNoIiwidmFsdWVzIiwib2Zmc2V0IiwiYXJyYXlSZWR1Y2UiLCJpbml0QWNjdW0iLCJhcnJheVJlZHVjZVJpZ2h0IiwiYXJyYXlTb21lIiwiYXNjaWlTaXplIiwiYmFzZVByb3BlcnR5IiwiYmFzZUZpbmRLZXkiLCJjb2xsZWN0aW9uIiwiZWFjaEZ1bmMiLCJrZXkiLCJiYXNlRmluZEluZGV4IiwiZnJvbUluZGV4IiwiZnJvbVJpZ2h0Iiwic3RyaWN0SW5kZXhPZiIsImJhc2VJc05hTiIsImJhc2VJbmRleE9mV2l0aCIsImJhc2VNZWFuIiwiYmFzZVN1bSIsIm9iamVjdCIsImJhc2VQcm9wZXJ0eU9mIiwiYmFzZVJlZHVjZSIsImN1cnJlbnQiLCJiYXNlVGltZXMiLCJuIiwiYmFzZVVuYXJ5IiwiYmFzZVZhbHVlcyIsInByb3BzIiwiY2FjaGVIYXMiLCJjYWNoZSIsImhhcyIsImNoYXJzU3RhcnRJbmRleCIsInN0clN5bWJvbHMiLCJjaHJTeW1ib2xzIiwiY2hhcnNFbmRJbmRleCIsImNvdW50SG9sZGVycyIsInBsYWNlaG9sZGVyIiwiZGVidXJyTGV0dGVyIiwiw4AiLCLDgSIsIsOCIiwiw4MiLCLDhCIsIsOFIiwiw6AiLCLDoSIsIsOiIiwiw6MiLCLDpCIsIsOlIiwiw4ciLCLDpyIsIsOQIiwiw7AiLCLDiCIsIsOJIiwiw4oiLCLDiyIsIsOoIiwiw6kiLCLDqiIsIsOrIiwiw4wiLCLDjSIsIsOOIiwiw48iLCLDrCIsIsOtIiwiw64iLCLDryIsIsORIiwiw7EiLCLDkiIsIsOTIiwiw5QiLCLDlSIsIsOWIiwiw5giLCLDsiIsIsOzIiwiw7QiLCLDtSIsIsO2Iiwiw7giLCLDmSIsIsOaIiwiw5siLCLDnCIsIsO5Iiwiw7oiLCLDuyIsIsO8Iiwiw50iLCLDvSIsIsO/Iiwiw4YiLCLDpiIsIsOeIiwiw74iLCLDnyIsIsSAIiwixIIiLCLEhCIsIsSBIiwixIMiLCLEhSIsIsSGIiwixIgiLCLEiiIsIsSMIiwixIciLCLEiSIsIsSLIiwixI0iLCLEjiIsIsSQIiwixI8iLCLEkSIsIsSSIiwixJQiLCLEliIsIsSYIiwixJoiLCLEkyIsIsSVIiwixJciLCLEmSIsIsSbIiwixJwiLCLEniIsIsSgIiwixKIiLCLEnSIsIsSfIiwixKEiLCLEoyIsIsSkIiwixKYiLCLEpSIsIsSnIiwixKgiLCLEqiIsIsSsIiwixK4iLCLEsCIsIsSpIiwixKsiLCLErSIsIsSvIiwixLEiLCLEtCIsIsS1IiwixLYiLCLEtyIsIsS4IiwixLkiLCLEuyIsIsS9IiwixL8iLCLFgSIsIsS6IiwixLwiLCLEviIsIsWAIiwixYIiLCLFgyIsIsWFIiwixYciLCLFiiIsIsWEIiwixYYiLCLFiCIsIsWLIiwixYwiLCLFjiIsIsWQIiwixY0iLCLFjyIsIsWRIiwixZQiLCLFliIsIsWYIiwixZUiLCLFlyIsIsWZIiwixZoiLCLFnCIsIsWeIiwixaAiLCLFmyIsIsWdIiwixZ8iLCLFoSIsIsWiIiwixaQiLCLFpiIsIsWjIiwixaUiLCLFpyIsIsWoIiwixaoiLCLFrCIsIsWuIiwixbAiLCLFsiIsIsWpIiwixasiLCLFrSIsIsWvIiwixbEiLCLFsyIsIsW0IiwixbUiLCLFtiIsIsW3IiwixbgiLCLFuSIsIsW7Iiwixb0iLCLFuiIsIsW8Iiwixb4iLCLEsiIsIsSzIiwixZIiLCLFkyIsIsWJIiwixb8iLCJlc2NhcGVIdG1sQ2hhciIsIiYiLCI8IiwiPiIsIlwiIiwiZXNjYXBlU3RyaW5nQ2hhciIsImNociIsImhhc1VuaWNvZGUiLCJzdHJpbmciLCJ0ZXN0IiwibWFwVG9BcnJheSIsInNpemUiLCJmb3JFYWNoIiwib3ZlckFyZyIsInRyYW5zZm9ybSIsImFyZyIsInJlcGxhY2VIb2xkZXJzIiwic2V0VG9BcnJheSIsInNldCIsInNldFRvUGFpcnMiLCJzdHJpbmdTaXplIiwibGFzdEluZGV4IiwidW5pY29kZVNpemUiLCJzdHJpbmdUb0FycmF5IiwibWF0Y2giLCJ1bmljb2RlVG9BcnJheSIsInNwbGl0IiwiYXNjaWlUb0FycmF5IiwidW5lc2NhcGVIdG1sQ2hhciIsIiZhbXA7IiwiJmx0OyIsIiZndDsiLCImcXVvdDsiLCImIzM5OyIsInJ1bkluQ29udGV4dCIsImNvbnRleHQiLCJ1aWQiLCJkZWZhdWx0cyIsInBpY2siLCJFcnJvciIsIlN0cmluZyIsIlR5cGVFcnJvciIsImFycmF5UHJvdG8iLCJwcm90b3R5cGUiLCJmdW5jUHJvdG8iLCJvYmplY3RQcm90byIsImNvcmVKc0RhdGEiLCJmdW5jVG9TdHJpbmciLCJ0b1N0cmluZyIsImhhc093blByb3BlcnR5IiwiaWRDb3VudGVyIiwibWFza1NyY0tleSIsImV4ZWMiLCJJRV9QUk9UTyIsIm5hdGl2ZU9iamVjdFRvU3RyaW5nIiwib2JqZWN0Q3RvclN0cmluZyIsIm9sZERhc2giLCJyZUlzTmF0aXZlIiwicmVwbGFjZSIsIkJ1ZmZlciIsIlN5bWJvbCIsIlVpbnQ4QXJyYXkiLCJhbGxvY1Vuc2FmZSIsImdldFByb3RvdHlwZSIsImdldFByb3RvdHlwZU9mIiwib2JqZWN0Q3JlYXRlIiwiY3JlYXRlIiwicHJvcGVydHlJc0VudW1lcmFibGUiLCJzcHJlYWRhYmxlU3ltYm9sIiwiaXNDb25jYXRTcHJlYWRhYmxlIiwic3ltSXRlcmF0b3IiLCJpdGVyYXRvciIsInN5bVRvU3RyaW5nVGFnIiwidG9TdHJpbmdUYWciLCJkZWZpbmVQcm9wZXJ0eSIsImdldE5hdGl2ZSIsImN0eENsZWFyVGltZW91dCIsImNsZWFyVGltZW91dCIsImN0eE5vdyIsIm5vdyIsImN0eFNldFRpbWVvdXQiLCJzZXRUaW1lb3V0IiwibmF0aXZlQ2VpbCIsImNlaWwiLCJuYXRpdmVGbG9vciIsIm5hdGl2ZUdldFN5bWJvbHMiLCJnZXRPd25Qcm9wZXJ0eVN5bWJvbHMiLCJuYXRpdmVJc0J1ZmZlciIsImlzQnVmZmVyIiwibmF0aXZlSXNGaW5pdGUiLCJpc0Zpbml0ZSIsIm5hdGl2ZUpvaW4iLCJuYXRpdmVLZXlzIiwibmF0aXZlTWF4IiwibmF0aXZlTWluIiwibmF0aXZlTm93IiwibmF0aXZlUGFyc2VJbnQiLCJuYXRpdmVSYW5kb20iLCJyYW5kb20iLCJuYXRpdmVSZXZlcnNlIiwicmV2ZXJzZSIsIkRhdGFWaWV3IiwiTWFwIiwiUHJvbWlzZSIsIlNldCIsIldlYWtNYXAiLCJuYXRpdmVDcmVhdGUiLCJtZXRhTWFwIiwicmVhbE5hbWVzIiwiZGF0YVZpZXdDdG9yU3RyaW5nIiwidG9Tb3VyY2UiLCJtYXBDdG9yU3RyaW5nIiwicHJvbWlzZUN0b3JTdHJpbmciLCJzZXRDdG9yU3RyaW5nIiwid2Vha01hcEN0b3JTdHJpbmciLCJzeW1ib2xQcm90byIsInN5bWJvbFZhbHVlT2YiLCJ2YWx1ZU9mIiwic3ltYm9sVG9TdHJpbmciLCJsb2Rhc2giLCJpc09iamVjdExpa2UiLCJpc0FycmF5IiwiTGF6eVdyYXBwZXIiLCJMb2Rhc2hXcmFwcGVyIiwid3JhcHBlckNsb25lIiwiYmFzZUNyZWF0ZSIsInByb3RvIiwiaXNPYmplY3QiLCJiYXNlTG9kYXNoIiwiY2hhaW5BbGwiLCJfX3dyYXBwZWRfXyIsIl9fYWN0aW9uc19fIiwiX19jaGFpbl9fIiwiX19pbmRleF9fIiwiX192YWx1ZXNfXyIsIl9fZGlyX18iLCJfX2ZpbHRlcmVkX18iLCJfX2l0ZXJhdGVlc19fIiwiX190YWtlQ291bnRfXyIsIl9fdmlld3NfXyIsIkhhc2giLCJlbnRyaWVzIiwiY2xlYXIiLCJlbnRyeSIsIkxpc3RDYWNoZSIsIk1hcENhY2hlIiwiU2V0Q2FjaGUiLCJfX2RhdGFfXyIsImFkZCIsIlN0YWNrIiwiYXJyYXlMaWtlS2V5cyIsImluaGVyaXRlZCIsImlzQXJyIiwiaXNBcmciLCJpc0FyZ3VtZW50cyIsImlzQnVmZiIsImlzVHlwZSIsInNraXBJbmRleGVzIiwiaXNJbmRleCIsImFycmF5U2FtcGxlIiwiYmFzZVJhbmRvbSIsImFycmF5U2FtcGxlU2l6ZSIsInNodWZmbGVTZWxmIiwiY29weUFycmF5IiwiYmFzZUNsYW1wIiwiYXJyYXlTaHVmZmxlIiwiYXNzaWduTWVyZ2VWYWx1ZSIsImVxIiwiYmFzZUFzc2lnblZhbHVlIiwiYXNzaWduVmFsdWUiLCJvYmpWYWx1ZSIsImFzc29jSW5kZXhPZiIsImJhc2VBZ2dyZWdhdG9yIiwiYmFzZUVhY2giLCJiYXNlQXNzaWduIiwiY29weU9iamVjdCIsImNvbmZpZ3VyYWJsZSIsImVudW1lcmFibGUiLCJ3cml0YWJsZSIsImJhc2VBdCIsInBhdGhzIiwic2tpcCIsImdldCIsIm51bWJlciIsImxvd2VyIiwidXBwZXIiLCJiYXNlQ2xvbmUiLCJiaXRtYXNrIiwiY3VzdG9taXplciIsInN0YWNrIiwiaXNEZWVwIiwiaXNGbGF0IiwiaXNGdWxsIiwiY29uc3RydWN0b3IiLCJpbnB1dCIsImluaXRDbG9uZUFycmF5IiwidGFnIiwiZ2V0VGFnIiwiaXNGdW5jIiwiY2xvbmVCdWZmZXIiLCJpbml0Q2xvbmVPYmplY3QiLCJnZXRTeW1ib2xzSW4iLCJjb3B5U3ltYm9sc0luIiwia2V5c0luIiwiYmFzZUFzc2lnbkluIiwiZ2V0U3ltYm9scyIsImNvcHlTeW1ib2xzIiwiQ3RvciIsImNsb25lQXJyYXlCdWZmZXIiLCJkYXRhVmlldyIsImJ1ZmZlciIsImJ5dGVPZmZzZXQiLCJieXRlTGVuZ3RoIiwiY2xvbmVEYXRhVmlldyIsImNsb25lVHlwZWRBcnJheSIsInJlZ2V4cCIsImNsb25lUmVnRXhwIiwic3ltYm9sIiwiaW5pdENsb25lQnlUYWciLCJzdGFja2VkIiwic3ViVmFsdWUiLCJnZXRBbGxLZXlzSW4iLCJnZXRBbGxLZXlzIiwiYmFzZUNvbmZvcm1zVG8iLCJiYXNlRGVsYXkiLCJ3YWl0IiwiYmFzZURpZmZlcmVuY2UiLCJpbmNsdWRlcyIsImlzQ29tbW9uIiwidmFsdWVzTGVuZ3RoIiwib3V0ZXIiLCJjb21wdXRlZCIsInZhbHVlc0luZGV4IiwidGVtcGxhdGVTZXR0aW5ncyIsImVzY2FwZSIsImV2YWx1YXRlIiwiaW50ZXJwb2xhdGUiLCJ2YXJpYWJsZSIsImltcG9ydHMiLCJwb3AiLCJoYXNoIiwiZ2V0TWFwRGF0YSIsInBhaXJzIiwiTEFSR0VfQVJSQVlfU0laRSIsImNyZWF0ZUJhc2VFYWNoIiwiYmFzZUZvck93biIsImJhc2VFYWNoUmlnaHQiLCJiYXNlRm9yT3duUmlnaHQiLCJiYXNlRXZlcnkiLCJiYXNlRXh0cmVtdW0iLCJpc1N5bWJvbCIsImJhc2VGaWx0ZXIiLCJiYXNlRmxhdHRlbiIsImlzU3RyaWN0IiwiaXNGbGF0dGVuYWJsZSIsImJhc2VGb3IiLCJjcmVhdGVCYXNlRm9yIiwiYmFzZUZvclJpZ2h0IiwiYmFzZUZ1bmN0aW9ucyIsImlzRnVuY3Rpb24iLCJiYXNlR2V0IiwicGF0aCIsImNhc3RQYXRoIiwidG9LZXkiLCJiYXNlR2V0QWxsS2V5cyIsImtleXNGdW5jIiwic3ltYm9sc0Z1bmMiLCJiYXNlR2V0VGFnIiwiaXNPd24iLCJ1bm1hc2tlZCIsImdldFJhd1RhZyIsIm9iamVjdFRvU3RyaW5nIiwiYmFzZUd0Iiwib3RoZXIiLCJiYXNlSGFzIiwiYmFzZUhhc0luIiwiYmFzZUludGVyc2VjdGlvbiIsImFycmF5cyIsIm90aExlbmd0aCIsIm90aEluZGV4IiwiY2FjaGVzIiwibWF4TGVuZ3RoIiwiSW5maW5pdHkiLCJzZWVuIiwiYmFzZUludm9rZSIsInBhcmVudCIsImxhc3QiLCJiYXNlSXNBcmd1bWVudHMiLCJiYXNlSXNFcXVhbCIsImVxdWFsRnVuYyIsIm9iaklzQXJyIiwib3RoSXNBcnIiLCJvYmpUYWciLCJvdGhUYWciLCJvYmpJc09iaiIsIm90aElzT2JqIiwiaXNTYW1lVGFnIiwiZXF1YWxBcnJheXMiLCJtZXNzYWdlIiwiY29udmVydCIsImlzUGFydGlhbCIsImVxdWFsQnlUYWciLCJvYmpJc1dyYXBwZWQiLCJvdGhJc1dyYXBwZWQiLCJvYmpVbndyYXBwZWQiLCJvdGhVbndyYXBwZWQiLCJvYmpQcm9wcyIsIm9iakxlbmd0aCIsInNraXBDdG9yIiwib3RoVmFsdWUiLCJjb21wYXJlZCIsIm9iakN0b3IiLCJvdGhDdG9yIiwiZXF1YWxPYmplY3RzIiwiYmFzZUlzRXF1YWxEZWVwIiwiYmFzZUlzTWF0Y2giLCJtYXRjaERhdGEiLCJub0N1c3RvbWl6ZXIiLCJzcmNWYWx1ZSIsIkNPTVBBUkVfUEFSVElBTF9GTEFHIiwiYmFzZUlzTmF0aXZlIiwiYmFzZUl0ZXJhdGVlIiwiaWRlbnRpdHkiLCJiYXNlTWF0Y2hlc1Byb3BlcnR5IiwiYmFzZU1hdGNoZXMiLCJwcm9wZXJ0eSIsImJhc2VLZXlzIiwiaXNQcm90b3R5cGUiLCJiYXNlS2V5c0luIiwibmF0aXZlS2V5c0luIiwiaXNQcm90byIsImJhc2VMdCIsImJhc2VNYXAiLCJpc0FycmF5TGlrZSIsImdldE1hdGNoRGF0YSIsIm1hdGNoZXNTdHJpY3RDb21wYXJhYmxlIiwiaXNLZXkiLCJpc1N0cmljdENvbXBhcmFibGUiLCJoYXNJbiIsImJhc2VNZXJnZSIsInNyY0luZGV4IiwibWVyZ2VGdW5jIiwic2FmZUdldCIsIm5ld1ZhbHVlIiwiaXNUeXBlZCIsImlzQXJyYXlMaWtlT2JqZWN0IiwiaXNQbGFpbk9iamVjdCIsInRvUGxhaW5PYmplY3QiLCJiYXNlTWVyZ2VEZWVwIiwiYmFzZU50aCIsImJhc2VPcmRlckJ5IiwiaXRlcmF0ZWVzIiwib3JkZXJzIiwiZ2V0SXRlcmF0ZWUiLCJjb21wYXJlciIsImJhc2VTb3J0QnkiLCJjcml0ZXJpYSIsIm9iakNyaXRlcmlhIiwib3RoQ3JpdGVyaWEiLCJvcmRlcnNMZW5ndGgiLCJjb21wYXJlQXNjZW5kaW5nIiwiY29tcGFyZU11bHRpcGxlIiwiYmFzZVBpY2tCeSIsImJhc2VTZXQiLCJiYXNlUHVsbEFsbCIsImJhc2VQdWxsQXQiLCJpbmRleGVzIiwicHJldmlvdXMiLCJiYXNlVW5zZXQiLCJiYXNlUmVwZWF0IiwiYmFzZVJlc3QiLCJzdGFydCIsInNldFRvU3RyaW5nIiwib3ZlclJlc3QiLCJiYXNlU2FtcGxlIiwiYmFzZVNhbXBsZVNpemUiLCJuZXN0ZWQiLCJiYXNlU2V0RGF0YSIsImJhc2VTZXRUb1N0cmluZyIsImNvbnN0YW50IiwiYmFzZVNodWZmbGUiLCJiYXNlU2xpY2UiLCJlbmQiLCJiYXNlU29tZSIsImJhc2VTb3J0ZWRJbmRleCIsInJldEhpZ2hlc3QiLCJsb3ciLCJoaWdoIiwiTUFYX0FSUkFZX0xFTkdUSCIsIm1pZCIsImJhc2VTb3J0ZWRJbmRleEJ5IiwidmFsSXNOYU4iLCJ2YWxJc051bGwiLCJ2YWxJc1N5bWJvbCIsInZhbElzVW5kZWZpbmVkIiwib3RoSXNEZWZpbmVkIiwib3RoSXNOdWxsIiwib3RoSXNSZWZsZXhpdmUiLCJvdGhJc1N5bWJvbCIsInNldExvdyIsImJhc2VTb3J0ZWRVbmlxIiwiYmFzZVRvTnVtYmVyIiwiYmFzZVRvU3RyaW5nIiwiYmFzZVVuaXEiLCJjcmVhdGVTZXQiLCJzZWVuSW5kZXgiLCJiYXNlVXBkYXRlIiwidXBkYXRlciIsImJhc2VXaGlsZSIsImlzRHJvcCIsImJhc2VXcmFwcGVyVmFsdWUiLCJhY3Rpb25zIiwiYWN0aW9uIiwiYmFzZVhvciIsImJhc2VaaXBPYmplY3QiLCJhc3NpZ25GdW5jIiwidmFsc0xlbmd0aCIsImNhc3RBcnJheUxpa2VPYmplY3QiLCJjYXN0RnVuY3Rpb24iLCJzdHJpbmdUb1BhdGgiLCJjYXN0UmVzdCIsImNhc3RTbGljZSIsInNsaWNlIiwiY29weSIsImFycmF5QnVmZmVyIiwidHlwZWRBcnJheSIsInZhbElzRGVmaW5lZCIsInZhbElzUmVmbGV4aXZlIiwiY29tcG9zZUFyZ3MiLCJwYXJ0aWFscyIsImhvbGRlcnMiLCJpc0N1cnJpZWQiLCJhcmdzSW5kZXgiLCJhcmdzTGVuZ3RoIiwiaG9sZGVyc0xlbmd0aCIsImxlZnRMZW5ndGgiLCJyYW5nZUxlbmd0aCIsImlzVW5jdXJyaWVkIiwiY29tcG9zZUFyZ3NSaWdodCIsImhvbGRlcnNJbmRleCIsInJpZ2h0TGVuZ3RoIiwiaXNOZXciLCJjcmVhdGVBZ2dyZWdhdG9yIiwiaW5pdGlhbGl6ZXIiLCJjcmVhdGVBc3NpZ25lciIsImFzc2lnbmVyIiwic291cmNlcyIsImd1YXJkIiwiaXNJdGVyYXRlZUNhbGwiLCJpdGVyYWJsZSIsImNyZWF0ZUNhc2VGaXJzdCIsIm1ldGhvZE5hbWUiLCJjaGFyQXQiLCJ0cmFpbGluZyIsImNyZWF0ZUNvbXBvdW5kZXIiLCJjYWxsYmFjayIsIndvcmRzIiwiZGVidXJyIiwiY3JlYXRlQ3RvciIsImFyZ3VtZW50cyIsInRoaXNCaW5kaW5nIiwiY3JlYXRlRmluZCIsImZpbmRJbmRleEZ1bmMiLCJjcmVhdGVGbG93IiwiZmxhdFJlc3QiLCJmdW5jcyIsInByZXJlcSIsInRocnUiLCJ3cmFwcGVyIiwiZ2V0RnVuY05hbWUiLCJmdW5jTmFtZSIsImdldERhdGEiLCJpc0xhemlhYmxlIiwicGxhbnQiLCJjcmVhdGVIeWJyaWQiLCJwYXJ0aWFsc1JpZ2h0IiwiaG9sZGVyc1JpZ2h0IiwiYXJnUG9zIiwiYXJ5IiwiYXJpdHkiLCJpc0FyeSIsImlzQmluZCIsImlzQmluZEtleSIsImlzRmxpcCIsImdldEhvbGRlciIsImhvbGRlcnNDb3VudCIsIm5ld0hvbGRlcnMiLCJjcmVhdGVSZWN1cnJ5IiwiZm4iLCJjcmVhdGVJbnZlcnRlciIsInRvSXRlcmF0ZWUiLCJiYXNlSW52ZXJ0ZXIiLCJjcmVhdGVNYXRoT3BlcmF0aW9uIiwib3BlcmF0b3IiLCJkZWZhdWx0VmFsdWUiLCJjcmVhdGVPdmVyIiwiYXJyYXlGdW5jIiwiY3JlYXRlUGFkZGluZyIsImNoYXJzIiwiY2hhcnNMZW5ndGgiLCJjcmVhdGVSYW5nZSIsInN0ZXAiLCJ0b0Zpbml0ZSIsImJhc2VSYW5nZSIsImNyZWF0ZVJlbGF0aW9uYWxPcGVyYXRpb24iLCJ0b051bWJlciIsIndyYXBGdW5jIiwiaXNDdXJyeSIsIm5ld0RhdGEiLCJzZXREYXRhIiwic2V0V3JhcFRvU3RyaW5nIiwiY3JlYXRlUm91bmQiLCJwcmVjaXNpb24iLCJ0b0ludGVnZXIiLCJwYWlyIiwibm9vcCIsImNyZWF0ZVRvUGFpcnMiLCJiYXNlVG9QYWlycyIsImNyZWF0ZVdyYXAiLCJzcmNCaXRtYXNrIiwibmV3Qml0bWFzayIsImlzQ29tYm8iLCJtZXJnZURhdGEiLCJjcmVhdGVDdXJyeSIsImNyZWF0ZVBhcnRpYWwiLCJjcmVhdGVCaW5kIiwiY3VzdG9tRGVmYXVsdHNBc3NpZ25JbiIsImN1c3RvbURlZmF1bHRzTWVyZ2UiLCJjdXN0b21PbWl0Q2xvbmUiLCJhcnJMZW5ndGgiLCJhcnJWYWx1ZSIsImZsYXR0ZW4iLCJvdGhlckZ1bmMiLCJnZXRWYWx1ZSIsInN0dWJBcnJheSIsImhhc1BhdGgiLCJoYXNGdW5jIiwiaXNMZW5ndGgiLCJBcnJheUJ1ZmZlciIsInJlc29sdmUiLCJjdG9yU3RyaW5nIiwiaXNNYXNrYWJsZSIsInN0dWJGYWxzZSIsIm90aGVyQXJncyIsIm9sZEFycmF5Iiwic2hvcnRPdXQiLCJyZWZlcmVuY2UiLCJkZXRhaWxzIiwiaW5zZXJ0V3JhcERldGFpbHMiLCJ1cGRhdGVXcmFwRGV0YWlscyIsImdldFdyYXBEZXRhaWxzIiwibGFzdENhbGxlZCIsInN0YW1wIiwicmVtYWluaW5nIiwicmFuZCIsIm1lbW9pemUiLCJtZW1vaXplQ2FwcGVkIiwiY2hhckNvZGVBdCIsInF1b3RlIiwic3ViU3RyaW5nIiwiY2xvbmUiLCJkaWZmZXJlbmNlIiwiZGlmZmVyZW5jZUJ5IiwiZGlmZmVyZW5jZVdpdGgiLCJmaW5kSW5kZXgiLCJmaW5kTGFzdEluZGV4IiwiaGVhZCIsImludGVyc2VjdGlvbiIsIm1hcHBlZCIsImludGVyc2VjdGlvbkJ5IiwiaW50ZXJzZWN0aW9uV2l0aCIsInB1bGwiLCJwdWxsQWxsIiwicHVsbEF0IiwidW5pb24iLCJ1bmlvbkJ5IiwidW5pb25XaXRoIiwidW56aXAiLCJ1bnppcFdpdGgiLCJ3aXRob3V0IiwieG9yIiwieG9yQnkiLCJ4b3JXaXRoIiwiemlwIiwiemlwV2l0aCIsImNoYWluIiwiaW50ZXJjZXB0b3IiLCJ3cmFwcGVyQXQiLCJjb3VudEJ5IiwiZmluZExhc3QiLCJmb3JFYWNoUmlnaHQiLCJncm91cEJ5IiwiaW52b2tlTWFwIiwia2V5QnkiLCJwYXJ0aXRpb24iLCJzb3J0QnkiLCJiZWZvcmUiLCJiaW5kIiwiYmluZEtleSIsIldSQVBfQklORF9GTEFHIiwiZGVib3VuY2UiLCJvcHRpb25zIiwibGFzdEFyZ3MiLCJsYXN0VGhpcyIsIm1heFdhaXQiLCJ0aW1lcklkIiwibGFzdENhbGxUaW1lIiwibGFzdEludm9rZVRpbWUiLCJsZWFkaW5nIiwibWF4aW5nIiwiaW52b2tlRnVuYyIsInRpbWUiLCJsZWFkaW5nRWRnZSIsInRpbWVyRXhwaXJlZCIsInNob3VsZEludm9rZSIsInRpbWVTaW5jZUxhc3RDYWxsIiwidHJhaWxpbmdFZGdlIiwidGltZVdhaXRpbmciLCJyZW1haW5pbmdXYWl0IiwiZGVib3VuY2VkIiwiaXNJbnZva2luZyIsImNhbmNlbCIsImZsdXNoIiwiZGVmZXIiLCJkZWxheSIsInJlc29sdmVyIiwibWVtb2l6ZWQiLCJDYWNoZSIsIm5lZ2F0ZSIsIm92ZXJBcmdzIiwidHJhbnNmb3JtcyIsImZ1bmNzTGVuZ3RoIiwicGFydGlhbCIsInBhcnRpYWxSaWdodCIsInJlYXJnIiwiZ3QiLCJndGUiLCJpc0Vycm9yIiwiaXNJbnRlZ2VyIiwiaXNOdW1iZXIiLCJpc1N0cmluZyIsImx0IiwibHRlIiwidG9BcnJheSIsIm5leHQiLCJkb25lIiwiaXRlcmF0b3JUb0FycmF5IiwicmVtYWluZGVyIiwidG9MZW5ndGgiLCJpc0JpbmFyeSIsImFzc2lnbkluIiwiYXNzaWduSW5XaXRoIiwiYXNzaWduV2l0aCIsImF0IiwicHJvcHNJbmRleCIsInByb3BzTGVuZ3RoIiwiZGVmYXVsdHNEZWVwIiwibWVyZ2VXaXRoIiwiaW52ZXJ0IiwiaW52ZXJ0QnkiLCJpbnZva2UiLCJtZXJnZSIsIm9taXQiLCJDTE9ORV9ERUVQX0ZMQUciLCJiYXNlUGljayIsInBpY2tCeSIsInByb3AiLCJ0b1BhaXJzIiwidG9QYWlyc0luIiwiY2FtZWxDYXNlIiwid29yZCIsInRvTG93ZXJDYXNlIiwiY2FwaXRhbGl6ZSIsInVwcGVyRmlyc3QiLCJrZWJhYkNhc2UiLCJsb3dlckNhc2UiLCJsb3dlckZpcnN0Iiwic25ha2VDYXNlIiwic3RhcnRDYXNlIiwidXBwZXJDYXNlIiwidG9VcHBlckNhc2UiLCJwYXR0ZXJuIiwiaGFzVW5pY29kZVdvcmQiLCJ1bmljb2RlV29yZHMiLCJhc2NpaVdvcmRzIiwiYXR0ZW1wdCIsImJpbmRBbGwiLCJtZXRob2ROYW1lcyIsImZsb3ciLCJmbG93UmlnaHQiLCJtZXRob2QiLCJtZXRob2RPZiIsIm1peGluIiwib3ZlciIsIm92ZXJFdmVyeSIsIm92ZXJTb21lIiwiYmFzZVByb3BlcnR5RGVlcCIsInJhbmdlIiwicmFuZ2VSaWdodCIsImF1Z2VuZCIsImFkZGVuZCIsImRpdmlkZSIsImRpdmlkZW5kIiwiZGl2aXNvciIsIm11bHRpcGx5IiwibXVsdGlwbGllciIsIm11bHRpcGxpY2FuZCIsInN1YnRyYWN0IiwibWludWVuZCIsInN1YnRyYWhlbmQiLCJhZnRlciIsImNhc3RBcnJheSIsImNodW5rIiwiY29tcGFjdCIsImNvbmQiLCJjb25mb3JtcyIsImJhc2VDb25mb3JtcyIsInByb3BlcnRpZXMiLCJjdXJyeSIsImN1cnJ5UmlnaHQiLCJkcm9wIiwiZHJvcFJpZ2h0IiwiZHJvcFJpZ2h0V2hpbGUiLCJkcm9wV2hpbGUiLCJmaWxsIiwiYmFzZUZpbGwiLCJmbGF0TWFwIiwiZmxhdE1hcERlZXAiLCJmbGF0TWFwRGVwdGgiLCJmbGF0dGVuRGVlcCIsImZsYXR0ZW5EZXB0aCIsImZsaXAiLCJmcm9tUGFpcnMiLCJmdW5jdGlvbnMiLCJmdW5jdGlvbnNJbiIsImluaXRpYWwiLCJtYXBLZXlzIiwibWFwVmFsdWVzIiwibWF0Y2hlcyIsIm1hdGNoZXNQcm9wZXJ0eSIsIm50aEFyZyIsIm9taXRCeSIsIm9uY2UiLCJvcmRlckJ5IiwicHJvcGVydHlPZiIsInB1bGxBbGxCeSIsInB1bGxBbGxXaXRoIiwicmVqZWN0IiwicmVtb3ZlIiwicmVzdCIsInNhbXBsZVNpemUiLCJzZXRXaXRoIiwic2h1ZmZsZSIsInNvcnRlZFVuaXEiLCJzb3J0ZWRVbmlxQnkiLCJzZXBhcmF0b3IiLCJsaW1pdCIsInNwcmVhZCIsInRhaWwiLCJ0YWtlIiwidGFrZVJpZ2h0IiwidGFrZVJpZ2h0V2hpbGUiLCJ0YWtlV2hpbGUiLCJ0YXAiLCJ0aHJvdHRsZSIsInRvUGF0aCIsImlzQXJyTGlrZSIsInVuYXJ5IiwidW5pcSIsInVuaXFCeSIsInVuaXFXaXRoIiwidW5zZXQiLCJ1cGRhdGUiLCJ1cGRhdGVXaXRoIiwidmFsdWVzSW4iLCJ3cmFwIiwiemlwT2JqZWN0IiwiemlwT2JqZWN0RGVlcCIsImVudHJpZXNJbiIsImV4dGVuZCIsImV4dGVuZFdpdGgiLCJjbGFtcCIsImNsb25lRGVlcFdpdGgiLCJjbG9uZVdpdGgiLCJjb25mb3Jtc1RvIiwiZGVmYXVsdFRvIiwiZW5kc1dpdGgiLCJ0YXJnZXQiLCJwb3NpdGlvbiIsImVzY2FwZVJlZ0V4cCIsImV2ZXJ5IiwiZmluZEtleSIsImZpbmRMYXN0S2V5IiwiZm9ySW4iLCJmb3JJblJpZ2h0IiwiZm9yT3duIiwiZm9yT3duUmlnaHQiLCJpblJhbmdlIiwiYmFzZUluUmFuZ2UiLCJpc0Jvb2xlYW4iLCJpc0VsZW1lbnQiLCJpc0VtcHR5IiwiaXNFcXVhbCIsImlzRXF1YWxXaXRoIiwiaXNNYXRjaCIsImlzTWF0Y2hXaXRoIiwiaXNOYXRpdmUiLCJpc05pbCIsImlzTnVsbCIsImlzU2FmZUludGVnZXIiLCJpc1VuZGVmaW5lZCIsImlzV2Vha01hcCIsImlzV2Vha1NldCIsImxhc3RJbmRleE9mIiwic3RyaWN0TGFzdEluZGV4T2YiLCJtYXhCeSIsIm1lYW4iLCJtZWFuQnkiLCJtaW5CeSIsInN0dWJPYmplY3QiLCJzdHViU3RyaW5nIiwic3R1YlRydWUiLCJudGgiLCJub0NvbmZsaWN0IiwicGFkIiwic3RyTGVuZ3RoIiwicGFkRW5kIiwicGFkU3RhcnQiLCJyYWRpeCIsImZsb2F0aW5nIiwidGVtcCIsInJlZHVjZVJpZ2h0IiwicmVwZWF0Iiwic2FtcGxlIiwic29tZSIsInNvcnRlZEluZGV4Iiwic29ydGVkSW5kZXhCeSIsInNvcnRlZEluZGV4T2YiLCJzb3J0ZWRMYXN0SW5kZXgiLCJzb3J0ZWRMYXN0SW5kZXhCeSIsInNvcnRlZExhc3RJbmRleE9mIiwic3RhcnRzV2l0aCIsInN1bSIsInN1bUJ5IiwidGVtcGxhdGUiLCJzZXR0aW5ncyIsImlzRXNjYXBpbmciLCJpc0V2YWx1YXRpbmciLCJpbXBvcnRzS2V5cyIsImltcG9ydHNWYWx1ZXMiLCJyZURlbGltaXRlcnMiLCJzb3VyY2VVUkwiLCJlc2NhcGVWYWx1ZSIsImludGVycG9sYXRlVmFsdWUiLCJlc1RlbXBsYXRlVmFsdWUiLCJldmFsdWF0ZVZhbHVlIiwidGltZXMiLCJ0b0xvd2VyIiwidG9TYWZlSW50ZWdlciIsInRvVXBwZXIiLCJ0cmltIiwidHJpbUVuZCIsInRyaW1TdGFydCIsInRydW5jYXRlIiwib21pc3Npb24iLCJzZWFyY2giLCJuZXdFbmQiLCJ1bmVzY2FwZSIsInVuaXF1ZUlkIiwicHJlZml4IiwiZWFjaCIsImVhY2hSaWdodCIsIlZFUlNJT04iLCJpc0ZpbHRlciIsInRha2VOYW1lIiwiZHJvcE5hbWUiLCJjaGVja0l0ZXJhdGVlIiwiaXNUYWtlciIsImxvZGFzaEZ1bmMiLCJyZXRVbndyYXBwZWQiLCJpc0xhenkiLCJ1c2VMYXp5IiwiaXNIeWJyaWQiLCJpc1Vud3JhcHBlZCIsIm9ubHlMYXp5IiwiY2hhaW5OYW1lIiwiZGlyIiwiaXNSaWdodCIsInZpZXciLCJnZXRWaWV3IiwiaXRlckxlbmd0aCIsInRha2VDb3VudCIsIml0ZXJJbmRleCIsImNvbW1pdCIsIndyYXBwZWQiLCJ0b0pTT04iLCJkZWZpbmUiLCJhbWQiXSwibWFwcGluZ3MiOiJBQUFBLE1BQU1BLFVBQ0ZDLFlBQVlDLEVBQU9DLEdBQ2ZDLEtBQUtGLE1BQVFBLEVBQ2JFLEtBQUtELEtBQU9BLEVBQ1pDLEtBQUtDLEtBQU9GLEVBQ1pDLEtBQUtFLE9BQVMsRUFDZEYsS0FBS0csVUFBWSxFQUNqQkgsS0FBS0ksWUFBYyxFQUNuQkosS0FBS0ssVUFBWSxFQUNqQkwsS0FBS00sU0FBVSxFQUNmTixLQUFLTyxHQUFLUixFQUdkRixVQUFVVyxHQUNOLE9BQUlSLEtBQUtFLE9BQVNNLEVBQUtOLFFBQWdCLEVBQzlCRixLQUFLRSxPQUFTTSxFQUFLTixPQUFlLEVBQy9CO0FDaEJwQixNQUFNTyxjQUNGWixZQUFZYSxHQUNSVixLQUFLVSxFQUFJQSxFQUdiYixVQUNJLElBQUssSUFBSWMsRUFBRSxFQUFHQSxFQUFFWCxLQUFLVSxFQUFFRSxTQUFVRCxJQUFJLENBQ2pDLElBQUlFLEVBQVFILEVBQUVJLFVBQVVILEdBQ3hCRSxFQUFRQSxFQUFNRSxLQUFLLENBQUNDLEVBQUdDLElBQU1ELEVBQUVFLFVBQVVELElBRXpDLElBQUssSUFBSUUsRUFBRSxFQUFHQSxFQUFFTixFQUFNTyxPQUFP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S0MsSUFBUSxJQUFLQyxJQUFRLElBQUtDLElBQVEsSUFDMUVDLElBQVEsSUFBTUMsSUFBUSxJQUN0QkMsSUFBUSxJQUFNQyxJQUFRLElBQ3RCQyxJQUFRLElBQU1DLElBQVEsSUFBS0MsSUFBUSxJQUFLQyxJQUFRLElBQ2hEQyxJQUFRLElBQU1DLElBQVEsSUFBS0MsSUFBUSxJQUFLQyxJQUFRLElBQ2hEQyxJQUFRLElBQU1DLElBQVEsSUFBS0MsSUFBUSxJQUFLQyxJQUFRLElBQ2hEQyxJQUFRLElBQU1DLElBQVEsSUFBS0MsSUFBUSxJQUFLQyxJQUFRLElBQ2hEQyxJQUFRLElBQU1DLElBQVEsSUFDdEJDLElBQVEsSUFBTUMsSUFBUSxJQUFLQyxJQUFRLElBQUtDLElBQVEsSUFBS0MsSUFBUSxJQUFLQyxJQUFRLElBQzFFQyxJQUFRLElBQU1DLElBQVEsSUFBS0MsSUFBUSxJQUFLQyxJQUFRLElBQUtDLElBQVEsSUFBS0MsSUFBUSxJQUMxRUMsSUFBUSxJQUFNQyxJQUFRLElBQUtDLElBQVEsSUFBS0MsSUFBUSxJQUNoREMsSUFBUSxJQUFNQyxJQUFRLElBQUtDLElBQVEsSUFBS0MsSUFBUSxJQUNoREMsSUFBUSxJQUFNQyxJQUFRLElBQUtDLElBQVEsSUFDbkNDLElBQVEsS0FBTUMsSUFBUSxLQUN0QkMsSUFBUSxLQUFNQyxJQUFRLEtBQ3RCQyxJQUFRLEtBRVJDLElBQVUsSUFBTUMsSUFBVSxJQUFLQyxJQUFVLElBQ3pDQyxJQUFVLElBQU1DLElBQVUsSUFBS0MsSUFBVSxJQUN6Q0MsSUFBVSxJQUFNQyxJQUFVLElBQUtDLElBQVUsSUFBS0MsSUFBVSxJQUN4REMsSUFBVSxJQUFNQyxJQUFVLElBQUtDLElBQVUsSUFBS0MsSUFBVSxJQUN4REMsSUFBVSxJQUFNQyxJQUFVLElBQUtDLElBQVUsSUFBS0MsSUFBVSxJQUN4REMsSUFBVSxJQUFNQyxJQUFVLElBQUtDLElBQVUsSUFBS0MsSUFBVSxJQUFLQyxJQUFVLElBQ3ZFQyxJQUFVLElBQU1DLElBQVUsSUFBS0MsSUFBVSxJQUFLQyxJQUFVLElBQUtDLElBQVUsSUFDdkVDLElBQVUsSUFBTUMsSUFBVSxJQUFLQyxJQUFVLElBQUtDLElBQVUsSUFDeERDLElBQVUsSUFBTUMsSUFBVSxJQUFLQyxJQUFVLElBQUtDLElBQVUsSUFDeERDLElBQVUsSUFBTUMsSUFBVSxJQUFLQyxJQUFVLElBQUtDLElBQVUsSUFDeERDLElBQVUsSUFBTUMsSUFBVSxJQUFLQyxJQUFVLElBQUtDLElBQVUsSUFBS0MsSUFBVSxJQUN2RUMsSUFBVSxJQUFNQyxJQUFVLElBQUtDLElBQVUsSUFBS0MsSUFBVSxJQUFLQyxJQUFVLElBQ3ZFQyxJQUFVLElBQU1DLElBQVUsSUFDMUJDLElBQVUsSUFBTUMsSUFBVSxJQUFLQyxJQUFVLElBQ3pDQyxJQUFVLElBQU1DLElBQVUsSUFBS0MsSUFBVSxJQUFLQyxJQUFVLElBQUtDLElBQVUsSUFDdkVDLElBQVUsSUFBTUMsSUFBVSxJQUFLQyxJQUFVLElBQUtDLElBQVUsSUFBS0MsSUFBVSxJQUN2RUMsSUFBVSxJQUFNQyxJQUFVLElBQUtDLElBQVUsSUFBS0MsSUFBVSxJQUN4REMsSUFBVSxJQUFNQyxJQUFVLElBQUtDLElBQVUsSUFBS0MsSUFBVSxJQUN4REMsSUFBVSxJQUFNQyxJQUFVLElBQUtDLElBQVUsSUFDekNDLElBQVUsSUFBTUMsSUFBVSxJQUFLQyxJQUFVLElBQ3pDQyxJQUFVLElBQU1DLElBQVUsSUFBS0MsSUFBVSxJQUN6Q0MsSUFBVSxJQUFNQyxJQUFVLElBQUtDLElBQVUsSUFDekNDLElBQVUsSUFBTUMsSUFBVSxJQUFLQyxJQUFVLElBQUtDLElBQVUsSUFDeERDLElBQVUsSUFBTUMsSUFBVSxJQUFLQyxJQUFVLElBQUtDLElBQVUsSUFDeERDLElBQVUsSUFBTUMsSUFBVSxJQUFLQyxJQUFVLElBQ3pDQyxJQUFVLElBQU1DLElBQVUsSUFBS0MsSUFBVSxJQUN6Q0MsSUFBVSxJQUFNQyxJQUFVLElBQUtDLElBQVUsSUFBS0MsSUFBVSxJQUFLQyxJQUFVLElBQUtDLElBQVUsSUFDdEZDLElBQVUsSUFBTUMsSUFBVSxJ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UixFQUFTQSxFQUFPM0osWUFHbEIsT0FEQTZPLEVBQVM3TyxZQUFjcFgsRUFDaEJwUCxHQTQ0UFQ2bEIsR0FBTzVFLFVBQVV5RCxRQXIzUGpCLFdBQ0UsSUFBSXRWLEVBQVE5ZCxLQUFLazFCLFlBQ2pCLEdBQUlwWCxhQUFpQjRXLEdBQWEsQ0FDaEMsSUFBSW93QixFQUFVaG5DLEVBVWQsT0FUSTlkLEtBQUttMUIsWUFBWS96QixTQUNuQjBqRCxFQUFVLElBQUlwd0IsR0FBWTEwQixRQUU1QjhrRCxFQUFVQSxFQUFRMXhCLFdBQ1YrQixZQUFZOXVCLEtBQUssQ0FDdkJrWCxLQUFRNHNCLEdBQ1Ixc0IsS0FBUSxDQUFDMlYsSUFDVDVWLFFBeHpSSm5iLFlBMHpSUyxJQUFJc3lCLEdBQWNtd0IsRUFBUzlrRCxLQUFLbzFCLFdBRXpDLE9BQU9wMUIsS0FBS21xQyxLQUFLL1csS0F1MlBuQm1CLEdBQU81RSxVQUFVbzFCLE9BQVN4d0IsR0FBTzVFLFVBQVUwRSxRQUFVRSxHQUFPNUUsVUFBVTdSLE1BdDFQdEUsV0FDRSxPQUFPNG9CLEdBQWlCMW1DLEtBQUtrMUIsWUFBYWwxQixLQUFLbTFCLGNBdzFQakRaLEdBQU81RSxVQUFVeGIsTUFBUW9nQixHQUFPNUUsVUFBVTJnQixLQUV0Q2hmLEtBQ0ZpRCxHQUFPNUUsVUFBVTJCLElBaDhQbkIsV0FDRSxPQUFPdHhCLE9BaThQRnUwQixHQU1EckYsR0FHYSxtQkFBVjgxQixRQUE2QyxpQkFBZEEsT0FBT0MsS0FBbUJELE9BQU9DLEtBS3pFcHBDLEdBQUt6WCxFQUFJQSxHQUlUNGdELFFBQU8sV0FDTCxPQUFPNWdELE9BSUY4WCxLQUVOQSxHQUFXRixRQUFVNVgsSUFBR0EsRUFBSUEsR0FFN0IyWCxHQUFZM1gsRUFBSUEsSUFJaEJ5WCxHQUFLelgsRUFBSUEsS0FFWHNaLEtBQUsxZCIsImZpbGUiOiJkaXN0LmpzIiwic291cmNlc0NvbnRlbnQiOlsiY2xhc3MgQXR0cmlidXRlIHtcclxuICAgIGNvbnN0cnVjdG9yKHRhYmxlLCBuYW1lKXtcclxuICAgICAgICB0aGlzLnRhYmxlID0gdGFibGU7XHJcbiAgICAgICAgdGhpcy5uYW1lID0gbmFtZTtcclxuICAgICAgICB0aGlzLmF0dHIgPSBuYW1lO1xyXG4gICAgICAgIHRoaXMud2VpZ2h0ID0gMDtcclxuICAgICAgICB0aGlzLmRpZmZFZGdlcyA9IDA7XHJcbiAgICAgICAgdGhpcy5yYW5kb21FZGdlcyA9IDA7XHJcbiAgICAgICAgdGhpcy5zYW1lRWRnZXMgPSAwO1xyXG4gICAgICAgIHRoaXMubXV0YWJsZSA9IHRydWU7XHJcbiAgICAgICAgdGhpcy5pZCA9IG5hbWU7XHJcbiAgICB9XHJcblxyXG4gICAgY29tcGFyZVRvKGFyZzApe1xyXG4gICAgICAgIGlmICh0aGlzLndlaWdodCA+IGFyZzAud2VpZ2h0KSByZXR1cm4gLTE7XHJcbiAgICAgICAgZWxzZSBpZiAodGhpcy53ZWlnaHQgPCBhcmcwLndlaWdodCkgcmV0dXJuIDE7XHJcbiAgICAgICAgZWxzZSByZXR1cm4gMDtcclxuICAgIH1cclxufSIsImNsYXNzIER1bWJIZXVyaXN0aWMge1xyXG4gICAgY29uc3RydWN0b3IoZyl7XHJcbiAgICAgICAgdGhpcy5nID0gZztcclxuICAgIH1cclxuXHJcbiAgICBhcnJhbmdlKCl7XHJcbiAgICAgICAgZm9yIChsZXQgaT0wOyBpPHRoaXMuZy5tYXhEZXB0aDsgaSsrKXtcclxuICAgICAgICAgICAgbGV0IGVkZ2VzID0gZy5lZGdlSW5kZXhbaV07XHJcbiAgICAgICAgICAgIGVkZ2VzID0gZWRnZXMuc29ydCgoYSwgYikgPT4gYS5jb21wYXJlVG8oYikpXHJcblxyXG4gICAgICAgICAgICBmb3IgKGxldCBqPTA7IGo8ZWRnZXMubGVuZ3RoLTE7IGorKyl7XHJcbiAgICAgICAgICAgICAgICBsZXQgZWRnZTEgPSBlZGdlc1tqXTtcclxuICAgICAgICAgICAgICAgIGxldCBlZGdlMiA9IGVkZ2VzW2orMV07XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKGVkZ2UxLmxlZnRUYWJsZSA9PSBlZGdlMi5sZWZ0VGFibGUgXHJcbiAgICAgICAgICAgICAgICAgICAgJiYgKGVkZ2UxLmxlZnRBdHRyaWJ1dGUubXV0YWJsZSB8fCBlZGdlMi5sZWZ0QXR0cmlidXRlLm11dGFibGUpKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zd2FwKGVkZ2UxLmxlZnRBdHRyaWJ1dGUsIGVkZ2UyLmxlZnRBdHRyaWJ1dGUpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChlZGdlMS5yaWdodEF0dHJpYnV0ZS5tdXRhYmxlIHx8IGVkZ2UyLnJpZ2h0QXR0cmlidXRlLm11dGFibGUpe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGVkZ2UxLnJpZ2h0VGFibGUgPT0gZWRnZTIucmlnaHRUYWJsZSkgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zd2FwKGVkZ2UxLnJpZ2h0QXR0cmlidXRlLCBlZGdlMi5yaWdodEF0dHJpYnV0ZSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UgdGhpcy5zd2FwKGVkZ2UxLnJpZ2h0VGFibGUsIGVkZ2UyLnJpZ2h0VGFibGUpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgc3dhcCh3MSwgdzIpe1xyXG4gICAgICAgIGxldCB0bXB3ID0gdzEud2VpZ2h0O1xyXG4gICAgICAgIHcxLndlaWdodCA9IHcyLndlaWdodDtcclxuICAgICAgICB3Mi53ZWlnaHQgPSB0bXB3O1xyXG4gICAgfVxyXG59IiwiY2xhc3MgRWRnZSB7XHJcbiAgICBjb25zdHJ1Y3RvcihsZWZ0VGFibGUsIGF0dDEsIHJpZ2h0VGFibGUsIGF0dDIpe1xyXG4gICAgICAgIHRoaXMubGVmdFRhYmxlID0gbGVmdFRhYmxlO1xyXG4gICAgICAgIHRoaXMuYXR0MSA9IGF0dDE7XHJcbiAgICAgICAgdGhpcy5sZWZ0QXR0cmlidXRlID0gYXR0MTtcclxuICAgICAgICB0aGlzLnJpZ2h0VGFibGUgPSByaWdodFRhYmxlO1xyXG4gICAgICAgIHRoaXMuYXR0MiA9IGF0dDI7XHJcbiAgICAgICAgdGhpcy5yaWdodEF0dHJpYnV0ZSA9IGF0dDI7XHJcbiAgICB9XHJcblxyXG4gICAgY29tcGFyZVRvKG90aGVyRWRnZSl7XHJcbiAgICAgICAgaWYgKHRoaXMubGVmdFRhYmxlID09IG90aGVyRWRnZS5sZWZ0VGFibGUpe1xyXG4gICAgICAgICAgICAvLyBlZGdlcyBoYXZlIHRoZSBzYW1lIGxlZnQgdGFibGVcclxuICAgICAgICAgICAgaWYgKHRoaXMucmlnaHRUYWJsZSA9PSBvdGhlckVkZ2UucmlnaHRUYWJsZSl7XHJcbiAgICAgICAgICAgICAgICAvLyBhbmQgdGhlIHNhbWUgcmlnaHQgdGFibGVcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLmxlZnRBdHRyaWJ1dGUud2VpZ2h0ID4gb3RoZXJFZGdlLmxlZnRBdHRyaWJ1dGUud2VpZ2h0ICYmIHRoaXMucmlnaHRBdHRyaWJ1dGUud2VpZ2h0IDwgb3RoZXJFZGdlLnJpZ2h0QXR0cmlidXRlLndlaWdodClcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKHRoaXMubGVmdEF0dHJpYnV0ZS53ZWlnaHQgPCBvdGhlckVkZ2UubGVmdEF0dHJpYnV0ZS53ZWlnaHQgJiYgdGhpcy5yaWdodEF0dHJpYnV0ZS53ZWlnaHQgPiBvdGhlckVkZ2UucmlnaHRBdHRyaWJ1dGUud2VpZ2h0KVxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMucmlnaHRUYWJsZS53ZWlnaHQgPCBvdGhlckVkZ2UucmlnaHRUYWJsZS53ZWlnaHQgJiYgdGhpcy5sZWZ0QXR0cmlidXRlLndlaWdodCA+IG90aGVyRWRnZS5sZWZ0QXR0cmlidXRlLndlaWdodClcclxuICAgICAgICAgICAgICAgIC8vIHJpZ2h0IHRhYmxlIGlzIHVuZGVyIGJ1dCBsZWZ0IGF0dHJpYnV0ZSBpcyBvdmVyXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICAgICAgZWxzZSBpZiAodGhpcy5yaWdodFRhYmxlLndlaWdodCA+IG90aGVyRWRnZS5yaWdodFRhYmxlLndlaWdodCAmJiB0aGlzLmxlZnRBdHRyaWJ1dGUud2VpZ2h0IDwgb3RoZXJFZGdlLmxlZnRBdHRyaWJ1dGUud2VpZ2h0KVxyXG4gICAgICAgICAgICAgICAgLy8gcmlnaHQgdGFibGUgaXMgb3ZlciBidXQgbGVmdCBhdHRyaWJ1dGUgaXMgdW5kZXJcclxuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5yaWdodFRhYmxlID09IG90aGVyRWRnZS5yaWdodFRhYmxlKXtcclxuICAgICAgICAgICAgLy8gZWRnZXMgaGF2ZSB0aGUgc2FtZSByaWdodCB0YWJsZVxyXG4gICAgICAgICAgICBpZiAodGhpcy5sZWZ0VGFibGUgPT0gb3RoZXJFZGdlLmxlZnRUYWJsZSl7XHJcbiAgICAgICAgICAgICAgICAvLyBhbmQgdGhlIHNhbWUgbGVmdCB0YWJsZVxyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMubGVmdEF0dHJpYnV0ZS53ZWlnaHQgPiBvdGhlckVkZ2UubGVmdEF0dHJpYnV0ZS53ZWlnaHQgJiYgdGhpcy5yaWdodEF0dHJpYnV0ZS53ZWlnaHQgPCBvdGhlckVkZ2UucmlnaHRBdHRyaWJ1dGUud2VpZ2h0KVxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgICAgICAgICAgZWxzZSBpZiAodGhpcy5sZWZ0QXR0cmlidXRlLndlaWdodCA8IG90aGVyRWRnZS5sZWZ0QXR0cmlidXRlLndlaWdodCAmJiB0aGlzLnJpZ2h0QXR0cmlidXRlLndlaWdodCA+IG90aGVyRWRnZS5yaWdodEF0dHJpYnV0ZS53ZWlnaHQpXHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy5sZWZ0VGFibGUud2VpZ2h0IDwgb3RoZXJFZGdlLmxlZnRUYWJsZS53ZWlnaHQgJiYgdGhpcy5yaWdodEF0dHJpYnV0ZS53ZWlnaHQgPiBvdGhlckVkZ2UucmlnaHRBdHRyaWJ1dGUud2VpZ2h0KVxyXG4gICAgICAgICAgICAgICAgLy8gbGVmdCB0YWJsZSBpcyB1bmRlciBidXQgcmlnaHQgYXR0cmlidXRlIGlzIG92ZXJcclxuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgICAgICBlbHNlIGlmICh0aGlzLmxlZnRUYWJsZS53ZWlnaHQgPiBvdGhlckVkZ2UubGVmdFRhYmxlLndlaWdodCAmJiB0aGlzLnJpZ2h0QXR0cmlidXRlLndlaWdodCA8IG90aGVyRWRnZS5yaWdodEF0dHJpYnV0ZS53ZWlnaHQpXHJcbiAgICAgICAgICAgICAgICAvLyBsZWZ0IHRhYmxlIGlzIG92ZXIgYnV0IHJpZ2h0IGF0dHJpYnV0ZSBpcyB1bmRlclxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgLy8gZWRnZXMgaGF2ZSBkaWZmZXJlbnQgdGFibGVzIGJvdGggb24gdGhlIGxlZnQgYW5kIG9uIHRoZSByaWdodFxyXG4gICAgICAgICAgICBpZiAodGhpcy5sZWZ0VGFibGUud2VpZ2h0IDwgb3RoZXJFZGdlLmxlZnRUYWJsZS53ZWlnaHQgJiYgdGhpcy5yaWdodFRhYmxlLndlaWdodCA+IG90aGVyRWRnZS5yaWdodFRhYmxlLndlaWdodClcclxuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlXHJcbiAgICAgICAgICAgIGVsc2UgaWYgKHRoaXMubGVmdFRhYmxlLndlaWdodCA+IG90aGVyRWRnZS5sZWZ0VGFibGUud2VpZ2h0ICYmIHRoaXMucmlnaHRUYWJsZS53ZWlnaHQgPCBvdGhlckVkZ2UucmlnaHRUYWJsZS53ZWlnaHQpe1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWVcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG5cclxuICAgIGNvbXBhcmVTZWxmRWRnZVRvKG90aGVyRWRnZSl7XHJcbiAgICAgICAgaWYgKHRoaXMubGVmdFRhYmxlLmRlcHRoID09IHRoaXMucmlnaHRUYWJsZS5kZXB0aCAmJiBvdGhlckVkZ2UubGVmdFRhYmxlLmRlcHRoID09IG90aGVyRWRnZS5yaWdodFRhYmxlLmRlcHRoKXtcclxuICAgICAgICAgICAgLy8gdGhleSBhcmUgYm90aCBzZWxmIGVkZ2VzXHJcbiAgICAgICAgICAgIGlmICh0aGlzLmxlZnRUYWJsZSA9PSBvdGhlckVkZ2UubGVmdFRhYmxlKXtcclxuICAgICAgICAgICAgICAgIC8vIHRoZXkgaGF2ZSB0aGUgc2FtZSBsZWZ0IHRhYmxlXHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5yaWdodFRhYmxlID09IG90aGVyRWRnZS5yaWdodFRhYmxlKXtcclxuICAgICAgICAgICAgICAgICAgICAvLyBhbmQgdGhlIHNhbWUgcmlnaHQgdGFibGVcclxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5sZWZ0QXR0cmlidXRlLndlaWdodCA8IG90aGVyRWRnZS5sZWZ0QXR0cmlidXRlLndlaWdodCAmJiB0aGlzLnJpZ2h0QXR0cmlidXRlLndlaWdodCA8IG90aGVyRWRnZS5yaWdodEF0dHJpYnV0ZS53ZWlnaHQpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlXHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAodGhpcy5sZWZ0QXR0cmlidXRlLndlaWdodCA+IG90aGVyRWRnZS5sZWZ0QXR0cmlidXRlLndlaWdodCAmJiB0aGlzLnJpZ2h0QXR0cmlidXRlLndlaWdodCA+IG90aGVyRWRnZS5yaWdodEF0dHJpYnV0ZS53ZWlnaHQpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlXHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmxlZnRBdHRyaWJ1dGUud2VpZ2h0IDwgb3RoZXJFZGdlLmxlZnRBdHRyaWJ1dGUud2VpZ2h0ICYmIHRoaXMucmlnaHRUYWJsZS53ZWlnaHQgPCBvdGhlckVkZ2UucmlnaHRUYWJsZS53ZWlnaHQpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlXHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAodGhpcy5sZWZ0QXR0cmlidXRlLndlaWdodCA+IG90aGVyRWRnZS5sZWZ0QXR0cmlidXRlLndlaWdodCAmJiB0aGlzLnJpZ2h0VGFibGUud2VpZ2h0ID4gb3RoZXJFZGdlLnJpZ2h0VGFibGUud2VpZ2h0KVxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMubGVmdFRhYmxlID09IG90aGVyRWRnZS5yaWdodFRhYmxlKXtcclxuICAgICAgICAgICAgICAgIC8vIHRoZSBsZWZ0IHRhYmxlIG9mIHRoZSBmaXJzdCBpcyB0aGUgcmlnaHQgdGFibGUgb2YgdGhlIG90aGVyXHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5yaWdodFRhYmxlID09IG90aGVyRWRnZS5sZWZ0VGFibGUpe1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIHRoZSBsZWZ0IHRhYmxlIGlzIHRoZSBzYW1lIGFzIHRoZSByaWdodCB0YWJsZVxyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLnJpZ2h0QXR0cmlidXRlLndlaWdodCA8IG90aGVyRWRnZS5sZWZ0QXR0cmlidXRlLndlaWdodCAmJiB0aGlzLmxlZnRBdHRyaWJ1dGUud2VpZ2h0IDwgb3RoZXJFZGdlLnJpZ2h0QXR0cmlidXRlLndlaWdodClcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAodGhpcy5yaWdodEF0dHJpYnV0ZS53ZWlnaHQgPiBvdGhlckVkZ2UubGVmdEF0dHJpYnV0ZS53ZWlnaHQgJiYgdGhpcy5sZWZ0QXR0cmlidXRlLndlaWdodCA+IG90aGVyRWRnZS5yaWdodEF0dHJpYnV0ZS53ZWlnaHQpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5sZWZ0QXR0cmlidXRlLndlaWdodCA8IG90aGVyRWRnZS5yaWdodEF0dHJpYnV0ZS53ZWlnaHQgJiYgdGhpcy5yaWdodFRhYmxlLndlaWdodCA8IG90aGVyRWRnZS5sZWZ0VGFibGUud2VpZ2h0KVxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICBlbHNlIGlmICh0aGlzLmxlZnRBdHRyaWJ1dGUud2VpZ2h0ID4gb3RoZXJFZGdlLnJpZ2h0QXR0cmlidXRlLndlaWdodCAmJiB0aGlzLnJpZ2h0VGFibGUud2VpZ2h0ID4gb3RoZXJFZGdlLmxlZnRUYWJsZS53ZWlnaHQpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMucmlnaHRUYWJsZSA9PSBvdGhlckVkZ2UubGVmdFRhYmxlKXtcclxuICAgICAgICAgICAgICAgIC8vIHRoZSByaWdodCB0YWJsZSBvZiB0aGUgZmlyc3QgaXMgdGhlIGxlZnQgdGFibGUgb2YgdGhlIHNlY29uZFxyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMubGVmdFRhYmxlID09IG90aGVyRWRnZS5yaWdodFRhYmxlKXtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5yaWdodEF0dHJpYnV0ZS53ZWlnaHQgPCBvdGhlckVkZ2UubGVmdEF0dHJpYnV0ZS53ZWlnaHQgJiYgdGhpcy5sZWZ0QXR0cmlidXRlLndlaWdodCA8IG90aGVyRWRnZS5yaWdodEF0dHJpYnV0ZS53ZWlnaHQpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKHRoaXMucmlnaHRBdHRyaWJ1dGUud2VpZ2h0ID4gb3RoZXJFZGdlLmxlZnRBdHRyaWJ1dGUud2VpZ2h0ICYmIHRoaXMubGVmdEF0dHJpYnV0ZS53ZWlnaHQgPiBvdGhlckVkZ2UucmlnaHRBdHRyaWJ1dGUud2VpZ2h0KVxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMucmlnaHRBdHRyaWJ1dGUud2VpZ2h0IDwgb3RoZXJFZGdlLmxlZnRBdHRyaWJ1dGUud2VpZ2h0ICYmIHRoaXMubGVmdFRhYmxlLndlaWdodCA8IG90aGVyRWRnZS5yaWdodFRhYmxlLndlaWdodClcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAodGhpcy5yaWdodEF0dHJpYnV0ZS53ZWlnaHQgPiBvdGhlckVkZ2UubGVmdEF0dHJpYnV0ZS53ZWlnaHQgJiYgdGhpcy5sZWZ0VGFibGUud2VpZ2h0ID4gb3RoZXJFZGdlLnJpZ2h0VGFibGUud2VpZ2h0KVxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSBlbHNlIGlmICh0aGlzLnJpZ2h0VGFibGUgPT0gb3RoZXJFZGdlLnJpZ2h0VGFibGUpe1xyXG4gICAgICAgICAgICAgICAgLy8gdGhleSBoYXZlIHRoZSBzYW1lIHJpZ2h0IHRhYmxlXHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5sZWZ0VGFibGUgPT0gb3RoZXJFZGdlLmxlZnRUYWJsZSl7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gYW5kIHRoZSBzYW1lIHJpZ2h0IHRhYmxlXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMubGVmdEF0dHJpYnV0ZS53ZWlnaHQgPCBvdGhlckVkZ2UubGVmdEF0dHJpYnV0ZS53ZWlnaHQgJiYgdGhpcy5yaWdodEF0dHJpYnV0ZS53ZWlnaHQgPCBvdGhlckVkZ2UucmlnaHRBdHRyaWJ1dGUud2VpZ2h0KVxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKHRoaXMubGVmdEF0dHJpYnV0ZS53ZWlnaHQgPiBvdGhlckVkZ2UubGVmdEF0dHJpYnV0ZS53ZWlnaHQgJiYgdGhpcy5yaWdodEF0dHJpYnV0ZS53ZWlnaHQgPiBvdGhlckVkZ2UucmlnaHRBdHRyaWJ1dGUud2VpZ2h0KVxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZVxyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5yaWdodEF0dHJpYnV0ZS53ZWlnaHQgPCBvdGhlckVkZ2UucmlnaHRBdHRyaWJ1dGUud2VpZ2h0ICYmIHRoaXMubGVmdFRhYmxlLndlaWdodCA8IG90aGVyRWRnZS5sZWZ0VGFibGUud2VpZ2h0KVxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKHRoaXMucmlnaHRBdHRyaWJ1dGUud2VpZ2h0ID4gb3RoZXJFZGdlLnJpZ2h0QXR0cmlidXRlLndlaWdodCAmJiB0aGlzLmxlZnRUYWJsZS53ZWlnaHQgPiBvdGhlckVkZ2UubGVmdFRhYmxlLndlaWdodClcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWVcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIC8vIG9uZSBpcyBhIHNlbGYgZWRnZSBidXQgdGhlIG90aGVyIGlzIG5vdFxyXG4gICAgICAgICAgICBpZiAodGhpcy5sZWZ0VGFibGUuZGVwdGggPT0gdGhpcy5yaWdodFRhYmxlLmRlcHRoKXtcclxuICAgICAgICAgICAgICAgIC8vIHRoZSBmaXJzdCBpcyBhIHNlbGYgZWRnZVxyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMubGVmdFRhYmxlID09IG90aGVyRWRnZS5sZWZ0VGFibGUpe1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIHRoZSBmaXJzdCdzIGxlZnQgdGFibGUgaXMgdGhlIHNhbWUgYXMgdGhlIG90aGVyXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMubGVmdEF0dHJpYnV0ZS53ZWlnaHQgPCBvdGhlckVkZ2UubGVmdEF0dHJpYnV0ZS53ZWlnaHQgJiYgdGhpcy5yaWdodFRhYmxlLndlaWdodCA+IG90aGVyRWRnZS5sZWZ0VGFibGUud2VpZ2h0KVxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKHRoaXMubGVmdEF0dHJpYnV0ZS53ZWlnaHQgPiBvdGhlckVkZ2UubGVmdEF0dHJpYnV0ZS53ZWlnaHQgJiYgdGhpcy5yaWdodFRhYmxlLndlaWdodCA8IG90aGVyRWRnZS5sZWZ0VGFibGUud2VpZ2h0KVxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZVxyXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmICh0aGlzLnJpZ2h0VGFibGUgPT0gb3RoZXJFZGdlLnJpZ2h0VGFibGUpe1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIHRoZSBmaXJzdCdzIHJpZ2h0IHRhYmxlIGlzIHRoZSBzYW1lIGFzIHRoZSBvdGhlclxyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLnJpZ2h0QXR0cmlidXRlLndlaWdodCA8IG90aGVyRWRnZS5sZWZ0QXR0cmlidXRlLndlaWdodCAmJiB0aGlzLmxlZnRUYWJsZS53ZWlnaHQgPiBvdGhlckVkZ2UubGVmdFRhYmxlLndlaWdodClcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWVcclxuICAgICAgICAgICAgICAgICAgICBlbHNlIGlmICh0aGlzLnJpZ2h0QXR0cmlidXRlLndlaWdodCA+IG90aGVyRWRnZS5sZWZ0QXR0cmlidXRlLndlaWdodCAmJiB0aGlzLmxlZnRUYWJsZS53ZWlnaHQgPCBvdGhlckVkZ2UubGVmdFRhYmxlLndlaWdodClcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWVcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gdGhleSBkb24ndCBzaGFyZSBhbnkgdGFibGVcclxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5sZWZ0VGFibGUud2VpZ2h0ID4gb3RoZXJFZGdlLmxlZnRUYWJsZS53ZWlnaHQgJiYgdGhpcy5yaWdodFRhYmxlLndlaWdodCA8IG90aGVyRWRnZS5sZWZ0VGFibGUud2VpZ2h0KVxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICBlbHNlIGlmICh0aGlzLmxlZnRUYWJsZS53ZWlnaHQgPCBvdGhlckVkZ2UubGVmdFRhYmxlLndlaWdodCAmJiB0aGlzLnJpZ2h0VGFibGUud2VpZ2h0ID4gb3RoZXJFZGdlLmxlZnRUYWJsZS53ZWlnaHQpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgLy8gdGhlIHNlY29uZCBpcyBhIHNlbGYgZWRnZVxyXG4gICAgICAgICAgICAgICAgaWYgKG90aGVyRWRnZS5sZWZ0VGFibGUgPT0gdGhpcy5sZWZ0VGFibGUpe1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIHRoZSBvdGhlcidzIGxlZnQgdGFibGUgaXMgdGhlIHNhbWUgYXMgdGhlIGZpcnN0J3NcclxuICAgICAgICAgICAgICAgICAgICBpZiAob3RoZXJFZGdlLmxlZnRBdHRyaWJ1dGUud2VpZ2h0IDwgdGhpcy5sZWZ0QXR0cmlidXRlLndlaWdodCAmJiBvdGhlckVkZ2UucmlnaHRUYWJsZS53ZWlnaHQgPiB0aGlzLmxlZnRUYWJsZS53ZWlnaHQpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlXHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAob3RoZXJFZGdlLmxlZnRBdHRyaWJ1dGUud2VpZ2h0ID4gdGhpcy5sZWZ0QXR0cmlidXRlLndlaWdodCAmJiBvdGhlckVkZ2UucmlnaHRUYWJsZS53ZWlnaHQgPCB0aGlzLmxlZnRUYWJsZS53ZWlnaHQpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlXHJcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKG90aGVyRWRnZS5yaWdodFRhYmxlID09IHRoaXMubGVmdFRhYmxlKXtcclxuICAgICAgICAgICAgICAgICAgICAvLyB0aGUgb3RoZXIncyByaWdodCB0YWJsZSBpcyB0aGUgc2FtZSBhcyB0aGUgZmlyc3QncyByaWdodFxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChvdGhlckVkZ2UucmlnaHRBdHRyaWJ1dGUud2VpZ2h0IDwgdGhpcy5sZWZ0QXR0cmlidXRlLndlaWdodCAmJiBvdGhlckVkZ2UubGVmdFRhYmxlLndlaWdodCA+IHRoaXMubGVmdFRhYmxlLndlaWdodClcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWVcclxuICAgICAgICAgICAgICAgICAgICBlbHNlIGlmIChvdGhlckVkZ2UucmlnaHRBdHRyaWJ1dGUud2VpZ2h0ID4gdGhpcy5sZWZ0QXR0cmlidXRlLndlaWdodCAmJiBvdGhlckVkZ2UubGVmdFRhYmxlLndlaWdodCA8IHRoaXMubGVmdFRhYmxlLndlaWdodClcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWVcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gdGhleSBkb24ndCBzaGFyZSBhbnkgdGFibGVcclxuICAgICAgICAgICAgICAgICAgICBpZiAob3RoZXJFZGdlLmxlZnRUYWJsZS53ZWlnaHQgPCB0aGlzLmxlZnRBdHRyaWJ1dGUud2VpZ2h0ICYmIG90aGVyRWRnZS5yaWdodFRhYmxlLndlaWdodCA+IHRoaXMubGVmdEF0dHJpYnV0ZS53ZWlnaHQpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKG90aGVyRWRnZS5sZWZ0VGFibGUud2VpZ2h0ID4gdGhpcy5sZWZ0QXR0cmlidXRlLndlaWdodCAmJiBvdGhlckVkZ2UucmlnaHRUYWJsZS53ZWlnaHQgPCB0aGlzLmxlZnRBdHRyaWJ1dGUud2VpZ2h0KVxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBjcm9zc2VzKG90aGVyRWRnZSl7XHJcbiAgICAgICAgaWYgKHRoaXMubGVmdFRhYmxlLmRlcHRoID09IHRoaXMucmlnaHRUYWJsZS5kZXB0aCB8fCBvdGhlckVkZ2UubGVmdFRhYmxlLmRlcHRoID09IG90aGVyRWRnZS5yaWdodFRhYmxlLmRlcHRoKSBcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuY29tcGFyZVNlbGZFZGdlVG8ob3RoZXJFZGdlKVxyXG5cclxuICAgICAgICBpZiAodGhpcy5jb21wYXJlVG8ob3RoZXJFZGdlKSl7XHJcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG5cclxuICAgIGNvbXBhcmUoYXJnMCl7XHJcbiAgICAgICAgaWYgKGFyZzAgPT0gdW5kZWZpbmVkKSByZXR1cm4gMTtcclxuICAgICAgICBsZXQgcmV0ID0gdGhpcy5jb21wYXJlQXR0cmlidXRlcyh0aGlzLmxlZnRUYWJsZSwgdGhpcy5sZWZ0QXR0cmlidXRlLCBhcmcwLmxlZnRUYWJsZSwgYXJnMC5sZWZ0QXR0cmlidXRlKVxyXG4gICAgfVxyXG5cclxuICAgIGNvbXBhcmVBdHRyaWJ1dGVzKHQxLCBhMSwgdDIsIGEyKXtcclxuICAgICAgICBsZXQgcmV0ID0gdDEuY29tcGFyZVRvKHQyKVxyXG4gICAgICAgIGlmIChyZXQgPT0gMCkgcmV0ID0gYTEuY29tcGFyZVRvKGEyKTtcclxuICAgICAgICByZXR1cm4gcmV0O1xyXG4gICAgfVxyXG5cclxuICAgIGlzU2FtZVJhbmtFZGdlKCl7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMubGVmdFRhYmxlLmRlcHRoID09IHRoaXMucmlnaHRUYWJsZS5kZXB0aFxyXG4gICAgfVxyXG5cclxuICAgIGdldEJlbmRpbmVzcygpe1xyXG4gICAgICAgIGxldCByZXMgPSAwO1xyXG4gICAgICAgIGxldCBmYWN0b3IgPSAxMC8odGhpcy5sZWZ0VGFibGUuZ3JhcGguYmFzZVJvd0Rpc3RhbmNlKjEwKTtcclxuICAgICAgICAvL2lmICh0aGlzLmxlZnRUYWJsZS5uYW1lID09IFwic2VsZWN0XCIpIGNvbnNvbGUubG9nKHRoaXMucmlnaHRUYWJsZS5uYW1lLCAnc2VsZWN0cG9zJywgdGhpcy5sZWZ0VGFibGUud2VpZ2h0ICsgdGhpcy5sZWZ0QXR0cmlidXRlLndlaWdodCAqIGZhY3RvciArIHRoaXMubGVmdFRhYmxlLnZlcnRpY2FsQXR0ck9mZnNldCAqIGZhY3RvciwgJ3RoaXNwb3MnLCB0aGlzLnJpZ2h0VGFibGUud2VpZ2h0ICsgdGhpcy5yaWdodEF0dHJpYnV0ZS53ZWlnaHQgKiBmYWN0b3IgKyB0aGlzLnJpZ2h0VGFibGUudmVydGljYWxBdHRyT2Zmc2V0ICogZmFjdG9yKVxyXG4gICAgICAgIHJlcyA9ICh0aGlzLnJpZ2h0VGFibGUud2VpZ2h0ICsgdGhpcy5yaWdodEF0dHJpYnV0ZS53ZWlnaHQgKiBmYWN0b3IgKyB0aGlzLnJpZ2h0VGFibGUudmVydGljYWxBdHRyT2Zmc2V0ICogZmFjdG9yKSAtICh0aGlzLmxlZnRUYWJsZS53ZWlnaHQgKyB0aGlzLmxlZnRBdHRyaWJ1dGUud2VpZ2h0ICogZmFjdG9yICsgdGhpcy5sZWZ0VGFibGUudmVydGljYWxBdHRyT2Zmc2V0ICogZmFjdG9yKTtcclxuICAgICAgICAvL2lmICh0aGlzLmxlZnRUYWJsZS5uYW1lID09IFwic2VsZWN0XCIpIGNvbnNvbGUubG9nKHJlcylcclxuICAgICAgICByZXMgPSBNYXRoLnJvdW5kKHJlcyoxMDAwKS8xMDAwXHJcbiAgICAgICAgLy9pZiAodGhpcy5sZWZ0VGFibGUubmFtZSA9PSBcInNlbGVjdFwiKSBjb25zb2xlLmxvZyhyZXMpXHJcbiAgICAgICAgcmV0dXJuIE1hdGguYWJzKHJlcyk7XHJcbiAgICB9XHJcbn0iLCJjbGFzcyBHYW5zbmVyIHtcclxuICAgIGNvbnN0cnVjdG9yKGdyYXBoKXtcclxuICAgICAgICB0aGlzLmcgPSBncmFwaDtcclxuICAgICAgICB0aGlzLm1heF9pdGVyYXRpb25zID0gMTE7XHJcbiAgICAgICAgdGhpcy5lbGFwc2VkVGltZSA9IDA7XHJcbiAgICB9XHJcblxyXG4gICAgbWVkaWFuKGFycmF5KSB7XHJcbiAgICAgICAgYXJyYXkgPSBhcnJheS5zb3J0KCk7XHJcbiAgICAgICAgaWYgKGFycmF5Lmxlbmd0aCAlIDIgPT09IDApIHtcclxuICAgICAgICAgIHJldHVybiAoYXJyYXlbYXJyYXkubGVuZ3RoLzJdICsgYXJyYXlbKGFycmF5Lmxlbmd0aCAvIDIpIC0gMV0pIC8gMjtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSByZXR1cm4gYXJyYXlbKGFycmF5Lmxlbmd0aCAtIDEpIC8gMl07IFxyXG4gICAgICB9XHJcblxyXG4gICAgYXBwbHlBcnJhbmdlbWVudChjbG9uZUdyYXBoKXtcclxuICAgICAgICBmb3IgKGxldCB0YWJsZSBvZiBjbG9uZUdyYXBoLnRhYmxlcyl7XHJcbiAgICAgICAgICAgIGxldCB0YWJsZTIgPSB0aGlzLmcudGFibGVzLmZpbmQodCA9PiB0Lm5hbWUgPT0gdGFibGUubmFtZSlcclxuICAgICAgICAgICAgdGFibGUyLndlaWdodCA9IHRhYmxlLndlaWdodDtcclxuXHJcbiAgICAgICAgICAgIGZvciAobGV0IGF0dHJpYnV0ZSBvZiB0YWJsZS5hdHRyaWJ1dGVzKXtcclxuICAgICAgICAgICAgICAgIGxldCBhdHRyaWJ1dGUyID0gdGFibGUyLmF0dHJpYnV0ZXMuZmluZChhID0+IGEubmFtZSA9PSBhdHRyaWJ1dGUubmFtZSlcclxuICAgICAgICAgICAgICAgIGF0dHJpYnV0ZTIud2VpZ2h0ID0gYXR0cmlidXRlLndlaWdodFxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGFycmFuZ2UoKXtcclxuICAgICAgICBsZXQgc3RhcnRUaW1lID0gbmV3IERhdGUoKS5nZXRUaW1lKClcclxuXHJcbiAgICAgICAgbGV0IGJlc3RfY3Jvc3NpbmdzID0gdGhpcy5nLmdldEVkZ2VDcm9zc2luZ3MoKVxyXG5cclxuICAgICAgICBmb3IgKGxldCBpPTA7IGk8dGhpcy5tYXhfaXRlcmF0aW9uczsgaSsrKXtcclxuICAgICAgICAgICAgbGV0IGNsb25lR3JhcGggPSBfLmNsb25lRGVlcCh0aGlzLmcpXHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICBpZiAoaSUyID09IDApIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuYXJyYW5nZUxlZnQoY2xvbmVHcmFwaClcclxuICAgICAgICAgICAgfSBlbHNlIHRoaXMuYXJyYW5nZVJpZ2h0KGNsb25lR3JhcGgpXHJcblxyXG4gICAgICAgICAgICB0aGlzLnRyYW5zcG9zZShjbG9uZUdyYXBoKTtcclxuXHJcbiAgICAgICAgICAgIGxldCBjdXJfY3Jvc3NpbmdzID0gY2xvbmVHcmFwaC5nZXRFZGdlQ3Jvc3NpbmdzKClcclxuICAgICAgICAgICAgLy9jb25zb2xlLmxvZygnY3VyIGNyb3NzaW5nczogJywgY3VyX2Nyb3NzaW5ncylcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIGlmIChjdXJfY3Jvc3NpbmdzIDw9IGJlc3RfY3Jvc3NpbmdzKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmFwcGx5QXJyYW5nZW1lbnQoY2xvbmVHcmFwaClcclxuICAgICAgICAgICAgICAgIGJlc3RfY3Jvc3NpbmdzID0gY3VyX2Nyb3NzaW5nc1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLmVsYXBzZWRUaW1lID0gbmV3IERhdGUoKS5nZXRUaW1lKCkgLSBzdGFydFRpbWU7XHJcbiAgICB9XHJcblxyXG4gICAgYXJyYW5nZUxlZnQoZyl7XHJcbiAgICAgICAgZm9yIChsZXQgaT0xOyBpPD1nLm1heERlcHRoOyBpKyspe1xyXG4gICAgICAgICAgICBsZXQgbGF5ZXJUYWJsZXMgPSBnLnRhYmxlSW5kZXhbaV07XHJcbiAgICAgICAgICAgIGxldCBsYXllckVkZ2VzID0gZy5lZGdlSW5kZXhbaS0xXTtcclxuXHJcbiAgICAgICAgICAgIGZvciAobGV0IHRhYmxlIG9mIGxheWVyVGFibGVzKXtcclxuICAgICAgICAgICAgICAgIGxldCB3ZWlnaHRzID0gbGF5ZXJFZGdlc1xyXG4gICAgICAgICAgICAgICAgICAgIC5maWx0ZXIoZSA9PiBlLnJpZ2h0VGFibGUgPT0gdGFibGUgJiYgZS5sZWZ0VGFibGUuZGVwdGggIT0gZS5yaWdodFRhYmxlLmRlcHRoKVxyXG4gICAgICAgICAgICAgICAgICAgIC5tYXAoZSA9PiBwYXJzZUZsb2F0KGUubGVmdFRhYmxlLndlaWdodCkpXHJcbiAgICAgICAgICAgICAgICB0YWJsZS53ZWlnaHQgPSB0aGlzLm1lZGlhbih3ZWlnaHRzKVxyXG5cclxuICAgICAgICAgICAgICAgIGZvciAobGV0IGF0dHJpYnV0ZSBvZiB0YWJsZS5hdHRyaWJ1dGVzKXtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgdGFibGVXZWlnaHRzID0gbGF5ZXJFZGdlc1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAuZmlsdGVyKGUgPT4gZS5yaWdodEF0dHJpYnV0ZSA9PSBhdHRyaWJ1dGUgICYmIGUubGVmdFRhYmxlLmRlcHRoICE9IGUucmlnaHRUYWJsZS5kZXB0aClcclxuICAgICAgICAgICAgICAgICAgICAgICAgLm1hcChlID0+IHBhcnNlRmxvYXQoZS5sZWZ0VGFibGUud2VpZ2h0KSlcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IGF0dHJpYnV0ZVdlaWdodHMgPSBsYXllckVkZ2VzXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC5maWx0ZXIoZSA9PiBlLnJpZ2h0QXR0cmlidXRlID09IGF0dHJpYnV0ZSAgJiYgZS5sZWZ0VGFibGUuZGVwdGggIT0gZS5yaWdodFRhYmxlLmRlcHRoKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAubWFwKGUgPT4gcGFyc2VGbG9hdChlLmxlZnRBdHRyaWJ1dGUud2VpZ2h0KSlcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRhYmxlV2VpZ2h0cy5sZW5ndGggIT0gMCkgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJpYnV0ZS53ZWlnaHQgPSB0aGlzLm1lZGlhbih0YWJsZVdlaWdodHMpICsgdGhpcy5tZWRpYW4oYXR0cmlidXRlV2VpZ2h0cykvdGFibGUuYXR0cmlidXRlcy5sZW5ndGhcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgZy5zZXRFeGFjdFdlaWdodHMoKVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBhcnJhbmdlUmlnaHQoZyl7XHJcbiAgICAgICAgZm9yIChsZXQgaT1nLm1heERlcHRoLTE7IGk+MDsgaS0tKXtcclxuICAgICAgICAgICAgbGV0IGxheWVyVGFibGVzID0gZy50YWJsZUluZGV4W2ldO1xyXG4gICAgICAgICAgICBsZXQgbGF5ZXJFZGdlcyA9IGcuZWRnZUluZGV4W2ldO1xyXG5cclxuICAgICAgICAgICAgZm9yIChsZXQgdGFibGUgb2YgbGF5ZXJUYWJsZXMpe1xyXG4gICAgICAgICAgICAgICAgbGV0IHdlaWdodHMgPSBsYXllckVkZ2VzXHJcbiAgICAgICAgICAgICAgICAgICAgLmZpbHRlcihlID0+IGUubGVmdFRhYmxlID09IHRhYmxlICYmIGUubGVmdFRhYmxlLmRlcHRoICE9IGUucmlnaHRUYWJsZS5kZXB0aClcclxuICAgICAgICAgICAgICAgICAgICAubWFwKGUgPT4gcGFyc2VGbG9hdChlLnJpZ2h0VGFibGUud2VpZ2h0KSlcclxuXHJcbiAgICAgICAgICAgICAgICB0YWJsZS53ZWlnaHQgPSB0aGlzLm1lZGlhbih3ZWlnaHRzKVxyXG5cclxuICAgICAgICAgICAgICAgIGZvciAobGV0IGF0dHJpYnV0ZSBvZiB0YWJsZS5hdHRyaWJ1dGVzKXtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgdGFibGVXZWlnaHRzID0gbGF5ZXJFZGdlc1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAuZmlsdGVyKGUgPT4gZS5sZWZ0QXR0cmlidXRlID09IGF0dHJpYnV0ZSAgJiYgZS5sZWZ0VGFibGUuZGVwdGggIT0gZS5yaWdodFRhYmxlLmRlcHRoKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAubWFwKGUgPT4gcGFyc2VGbG9hdChlLnJpZ2h0VGFibGUud2VpZ2h0KSlcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IGF0dHJpYnV0ZVdlaWdodHMgPSBsYXllckVkZ2VzXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC5maWx0ZXIoZSA9PiBlLmxlZnRBdHRyaWJ1dGUgPT0gYXR0cmlidXRlICAmJiBlLmxlZnRUYWJsZS5kZXB0aCAhPSBlLnJpZ2h0VGFibGUuZGVwdGgpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC5tYXAoZSA9PiBwYXJzZUZsb2F0KGUucmlnaHRBdHRyaWJ1dGUud2VpZ2h0KSlcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRhYmxlV2VpZ2h0cy5sZW5ndGggIT0gMCkgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJpYnV0ZS53ZWlnaHQgPSB0aGlzLm1lZGlhbih0YWJsZVdlaWdodHMpICsgdGhpcy5tZWRpYW4oYXR0cmlidXRlV2VpZ2h0cykvdGFibGUuYXR0cmlidXRlcy5sZW5ndGhcclxuICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBnLnNldEV4YWN0V2VpZ2h0cygpXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHRyYW5zcG9zZShnKXtcclxuICAgICAgICBsZXQgaW1wcm92ZWQgPSB0cnVlO1xyXG4gICAgICAgIHdoaWxlIChpbXByb3ZlZCl7XHJcbiAgICAgICAgICAgIGltcHJvdmVkID0gZmFsc2U7XHJcbiAgICAgICAgICAgIGZvciAobGV0IGk9MDsgaTw9Zy5tYXhEZXB0aDsgaSsrKXtcclxuXHJcbiAgICAgICAgICAgICAgICBsZXQgaW5pdENyb3NzaW5ncyA9IGcuZ2V0RWRnZUNyb3NzaW5nc0F0RGVwdGgoaSk7XHJcblxyXG4gICAgICAgICAgICAgICAgbGV0IGxheWVyVGFibGVzID0gZy50YWJsZUluZGV4W2ldO1xyXG4gICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBqID0gMDsgaiA8IGxheWVyVGFibGVzLmxlbmd0aCAtIDE7IGorKyl7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IHRhYmxlMSA9IGxheWVyVGFibGVzW2pdO1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCB0YWJsZTIgPSBsYXllclRhYmxlc1tqKzFdO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnN3YXAodGFibGUxLCB0YWJsZTIpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBsZXQgY3VyQ3Jvc3NpbmdzID0gZy5nZXRFZGdlQ3Jvc3NpbmdzQXREZXB0aChpKSArIGcuZ2V0RWRnZUNyb3NzaW5nc0F0RGVwdGgoaSsxKVxyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAoY3VyQ3Jvc3NpbmdzIDwgaW5pdENyb3NzaW5ncyl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGltcHJvdmVkID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgdGhpcy5zd2FwKHRhYmxlMSwgdGFibGUyKVxyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGZvciAobGV0IHRhYmxlIG9mIGxheWVyVGFibGVzKXtcclxuICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBrPTA7IGsgPCB0YWJsZS5hdHRyaWJ1dGVzLmxlbmd0aCAtIDE7IGsrKyl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBhdHRyMSA9IHRhYmxlLmF0dHJpYnV0ZXNba11cclxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGF0dHIyID0gdGFibGUuYXR0cmlidXRlc1trKzFdXHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnN3YXAoYXR0cjEsIGF0dHIyKVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGN1ckNyb3NzaW5nczIgPSBnLmdldEVkZ2VDcm9zc2luZ3NBdERlcHRoKGkpICsgZy5nZXRFZGdlQ3Jvc3NpbmdzQXREZXB0aChpKzEpXHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoY3VyQ3Jvc3NpbmdzMiA8IGluaXRDcm9zc2luZ3Mpe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaW1wcm92ZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgdGhpcy5zd2FwKGF0dHIxLCBhdHRyMilcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgc3dhcCh3MSwgdzIpe1xyXG4gICAgICAgIGxldCB0bXB3ID0gdzEud2VpZ2h0O1xyXG4gICAgICAgIHcxLndlaWdodCA9IHcyLndlaWdodDtcclxuICAgICAgICB3Mi53ZWlnaHQgPSB0bXB3O1xyXG4gICAgfVxyXG59IiwiY2xhc3MgR2Fuc25lclNhbWVSYW5rIHtcclxuICAgIGNvbnN0cnVjdG9yKGdyYXBoKXtcclxuICAgICAgICB0aGlzLmcgPSBncmFwaDtcclxuICAgICAgICB0aGlzLm1heF9pdGVyYXRpb25zID0gNjtcclxuICAgICAgICB0aGlzLmVsYXBzZWRUaW1lID0gMDtcclxuXHJcbiAgICAgICAgdGhpcy5pdGVyYXRpb25zID0gW107XHJcbiAgICAgICAgdGhpcy5jdXJfaXRlcmF0aW9uID0gMDtcclxuICAgIH1cclxuXHJcbiAgICBhcHBseV9pdGVyYXRpb24oaXRlcl9udW0pe1xyXG4gICAgICAgIHRoaXMuYXBwbHlBcnJhbmdlbWVudCh0aGlzLml0ZXJhdGlvbnNbaXRlcl9udW1dKTtcclxuICAgIH1cclxuXHJcbiAgICBxdWlja3NvcnQoYXJyYXkpIHtcclxuICAgICAgICBpZiAoYXJyYXkubGVuZ3RoIDw9IDEpIHtcclxuICAgICAgICAgIHJldHVybiBhcnJheTtcclxuICAgICAgICB9XHJcbiAgICAgIFxyXG4gICAgICAgIHZhciBwaXZvdCA9IGFycmF5WzBdO1xyXG4gICAgICAgIFxyXG4gICAgICAgIHZhciBsZWZ0ID0gW107IFxyXG4gICAgICAgIHZhciByaWdodCA9IFtdO1xyXG4gICAgICBcclxuICAgICAgICBmb3IgKHZhciBpID0gMTsgaSA8IGFycmF5Lmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICBhcnJheVtpXSA8IHBpdm90ID8gbGVmdC5wdXNoKGFycmF5W2ldKSA6IHJpZ2h0LnB1c2goYXJyYXlbaV0pO1xyXG4gICAgICAgIH1cclxuICAgICAgXHJcbiAgICAgICAgcmV0dXJuIHF1aWNrc29ydChsZWZ0KS5jb25jYXQocGl2b3QsIHF1aWNrc29ydChyaWdodCkpO1xyXG4gICAgICB9O1xyXG5cclxuICAgIG1lZGlhbihhcnJheSkge1xyXG4gICAgICAgIGFycmF5ID0gYXJyYXkuc29ydCgpO1xyXG4gICAgICAgIGlmIChhcnJheS5sZW5ndGggJSAyID09PSAwKSB7XHJcbiAgICAgICAgICByZXR1cm4gKGFycmF5W2FycmF5Lmxlbmd0aC8yXSArIGFycmF5WyhhcnJheS5sZW5ndGggLyAyKSAtIDFdKSAvIDI7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgcmV0dXJuIGFycmF5WyhhcnJheS5sZW5ndGggLSAxKSAvIDJdOyBcclxuICAgICAgfVxyXG5cclxuICAgIGFwcGx5QXJyYW5nZW1lbnQoY2xvbmVHcmFwaCl7XHJcbiAgICAgICAgLy9jb25zb2xlLmxvZyhjbG9uZUdyYXBoKTtcclxuICAgICAgICBmb3IgKGxldCB0YWJsZSBvZiBjbG9uZUdyYXBoLnRhYmxlcyl7XHJcbiAgICAgICAgICAgIGxldCB0YWJsZTIgPSB0aGlzLmcudGFibGVzLmZpbmQodCA9PiB0Lm5hbWUgPT0gdGFibGUubmFtZSlcclxuICAgICAgICAgICAgdGFibGUyLndlaWdodCA9IHRhYmxlLndlaWdodDtcclxuICAgICAgICAgICAgdGFibGUyLmFzc2lnbmVkV2VpZ2h0ID0gdGFibGUuYXNzaWduZWRXZWlnaHQ7XHJcblxyXG4gICAgICAgICAgICBmb3IgKGxldCBhdHRyaWJ1dGUgb2YgdGFibGUuYXR0cmlidXRlcyl7XHJcbiAgICAgICAgICAgICAgICBsZXQgYXR0cmlidXRlMiA9IHRhYmxlMi5hdHRyaWJ1dGVzLmZpbmQoYSA9PiBhLm5hbWUgPT0gYXR0cmlidXRlLm5hbWUpXHJcbiAgICAgICAgICAgICAgICBhdHRyaWJ1dGUyLndlaWdodCA9IGF0dHJpYnV0ZS53ZWlnaHRcclxuICAgICAgICAgICAgICAgIGF0dHJpYnV0ZTIuYXNzaWduZWRXZWlnaHQgPSBhdHRyaWJ1dGUuYXNzaWduZWRXZWlnaHRcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBhcnJhbmdlKCl7XHJcbiAgICAgICAgbGV0IHN0YXJ0VGltZSA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpXHJcblxyXG4gICAgICAgIHRoaXMuZy5zZXRFeGFjdFdlaWdodHMoKTtcclxuXHJcbiAgICAgICAgbGV0IGJlc3RfY3Jvc3NpbmdzID0gdGhpcy5nLmdldEVkZ2VDcm9zc2luZ3MoKVxyXG5cclxuICAgICAgICBmb3IgKGxldCBpPTA7IGk8dGhpcy5tYXhfaXRlcmF0aW9uczsgaSsrKXtcclxuICAgICAgICAgICAgdGhpcy5jdXJfaXRlcmF0aW9uID0gaTtcclxuICAgICAgICAgICAgbGV0IGNsb25lR3JhcGggPSBfLmNsb25lRGVlcCh0aGlzLmcpXHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICBpZiAoaSUyID09IDApIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuYXJyYW5nZUxlZnQoY2xvbmVHcmFwaClcclxuICAgICAgICAgICAgfSBlbHNlIHRoaXMuYXJyYW5nZVJpZ2h0KGNsb25lR3JhcGgpXHJcblxyXG4gICAgICAgICAgICB0aGlzLnRyYW5zcG9zZShjbG9uZUdyYXBoKTtcclxuXHJcbiAgICAgICAgICAgIGxldCBjdXJfY3Jvc3NpbmdzID0gY2xvbmVHcmFwaC5nZXRFZGdlQ3Jvc3NpbmdzKClcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIGlmIChjdXJfY3Jvc3NpbmdzIDw9IGJlc3RfY3Jvc3NpbmdzKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmFwcGx5QXJyYW5nZW1lbnQoY2xvbmVHcmFwaClcclxuICAgICAgICAgICAgICAgIGJlc3RfY3Jvc3NpbmdzID0gY3VyX2Nyb3NzaW5nc1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB0aGlzLml0ZXJhdGlvbnNbdGhpcy5jdXJfaXRlcmF0aW9uXSA9IF8uY2xvbmVEZWVwKGNsb25lR3JhcGgpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5lbGFwc2VkVGltZSA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpIC0gc3RhcnRUaW1lO1xyXG4gICAgfVxyXG5cclxuICAgIGFycmFuZ2VMZWZ0KGcpe1xyXG4gICAgICAgIGNvbnNvbGUubG9nKCdMZWZ0JylcclxuICAgICAgICBsZXQgdG1wV2VpZ2h0c1RhYmxlcyA9IHt9O1xyXG4gICAgICAgIGxldCB0bXBBdHRyaWJ1dGVXZWlnaHRzID0ge307XHJcblxyXG4gICAgICAgIGZvciAobGV0IGk9MTsgaTw9Zy5tYXhEZXB0aCArIDE7IGkrKyl7XHJcbiAgICAgICAgICAgIGxldCBsYXllclRhYmxlcyA9IGcudGFibGVJbmRleFtpXTtcclxuICAgICAgICAgICAgbGV0IGxheWVyRWRnZXMgPSBnLmVkZ2VJbmRleFtpLTFdO1xyXG5cclxuICAgICAgICAgICAgZm9yIChsZXQgdCBpbiBsYXllclRhYmxlcyl7XHJcbiAgICAgICAgICAgICAgICBsZXQgdGFibGUgPSBsYXllclRhYmxlc1t0XTtcclxuXHJcbiAgICAgICAgICAgICAgICBsZXQgd2VpZ2h0cyA9IGxheWVyRWRnZXNcclxuICAgICAgICAgICAgICAgICAgICAuZmlsdGVyKGUgPT4gZS5yaWdodFRhYmxlID09IHRhYmxlICYmICF0aGlzLmlzU2FtZVJhbmtFZGdlKGUpKVxyXG4gICAgICAgICAgICAgICAgICAgIC5tYXAoZSA9PiBwYXJzZUZsb2F0KGUubGVmdFRhYmxlLndlaWdodCkpXHJcbiAgICAgICBcclxuICAgICAgICAgICAgICAgIGxldCB2YWwgPSB0aGlzLm1lZGlhbih3ZWlnaHRzKTtcclxuICAgICAgICAgICAgICAgIGlmICghaXNOYU4odmFsKSkgdG1wV2VpZ2h0c1RhYmxlc1t0YWJsZS5uYW1lXSA9IHZhbDtcclxuICAgICAgICAgICAgICAgIHRtcEF0dHJpYnV0ZVdlaWdodHNbdGFibGUubmFtZV0gPSB7fTtcclxuXHJcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBhdHRyaWJ1dGUgb2YgdGFibGUuYXR0cmlidXRlcyl7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IHRhYmxlV2VpZ2h0cyA9IGxheWVyRWRnZXNcclxuICAgICAgICAgICAgICAgICAgICAgICAgLmZpbHRlcihlID0+IGUucmlnaHRBdHRyaWJ1dGUgPT0gYXR0cmlidXRlICAmJiAhdGhpcy5pc1NhbWVSYW5rRWRnZShlKSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgLm1hcChlID0+IHBhcnNlRmxvYXQoZS5sZWZ0VGFibGUud2VpZ2h0KSlcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IGF0dHJpYnV0ZVdlaWdodHMgPSBsYXllckVkZ2VzXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC5maWx0ZXIoZSA9PiBlLnJpZ2h0QXR0cmlidXRlID09IGF0dHJpYnV0ZSAgJiYgIXRoaXMuaXNTYW1lUmFua0VkZ2UoZSkpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC5tYXAoZSA9PiBwYXJzZUZsb2F0KGUubGVmdEF0dHJpYnV0ZS53ZWlnaHQpKVxyXG5cclxuICAgICAgICAgICAgICAgICAgICBsZXQgdmFsID0gcGFyc2VGbG9hdCh0aGlzLm1lZGlhbih0YWJsZVdlaWdodHMpKSArIHBhcnNlRmxvYXQodGhpcy5tZWRpYW4oYXR0cmlidXRlV2VpZ2h0cykvdGFibGUuYXR0cmlidXRlcy5sZW5ndGgpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAoIWlzTmFOKHZhbCkpIHRtcEF0dHJpYnV0ZVdlaWdodHNbdGFibGUubmFtZV1bYXR0cmlidXRlLm5hbWVdID0gdmFsO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLnJlb3JkZXIoZywgdG1wV2VpZ2h0c1RhYmxlcywgdG1wQXR0cmlidXRlV2VpZ2h0cyk7XHJcbiAgICB9XHJcblxyXG4gICAgYXJyYW5nZVJpZ2h0KGcpe1xyXG4gICAgICAgIGNvbnNvbGUubG9nKCdSaWdodCcpXHJcbiAgICAgICAgbGV0IHRtcFdlaWdodHNUYWJsZXMgPSB7fTtcclxuICAgICAgICBsZXQgdG1wQXR0cmlidXRlV2VpZ2h0cyA9IHt9O1xyXG5cclxuICAgICAgICBmb3IgKGxldCBpID0gZy5tYXhEZXB0aCAtIDE7IGk+MDsgaS0tKXtcclxuICAgICAgICAgICAgbGV0IGxheWVyVGFibGVzID0gZy50YWJsZUluZGV4W2ldO1xyXG4gICAgICAgICAgICBsZXQgbGF5ZXJFZGdlcyA9IGcuZWRnZUluZGV4W2ldO1xyXG5cclxuICAgICAgICAgICAgZm9yIChsZXQgdGFibGUgb2YgbGF5ZXJUYWJsZXMpe1xyXG4gICAgICAgICAgICAgICAgbGV0IHdlaWdodHMgPSBsYXllckVkZ2VzXHJcbiAgICAgICAgICAgICAgICAgICAgLmZpbHRlcihlID0+IGUubGVmdFRhYmxlID09IHRhYmxlKVxyXG4gICAgICAgICAgICAgICAgICAgIC5tYXAoZSA9PiBwYXJzZUZsb2F0KGUucmlnaHRUYWJsZS53ZWlnaHQpKVxyXG5cclxuICAgICAgICAgICAgICAgIGxldCB2YWwgPSBwYXJzZUZsb2F0KHRoaXMubWVkaWFuKHdlaWdodHMpKTtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoIWlzTmFOKHZhbCkpIHRtcFdlaWdodHNUYWJsZXNbdGFibGUubmFtZV0gPSB2YWw7XHJcbiAgICAgICAgICAgICAgICB0bXBBdHRyaWJ1dGVXZWlnaHRzW3RhYmxlLm5hbWVdID0ge307XHJcblxyXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgYXR0cmlidXRlIG9mIHRhYmxlLmF0dHJpYnV0ZXMpe1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCB0YWJsZVdlaWdodHMgPSBsYXllckVkZ2VzXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC5maWx0ZXIoZSA9PiBlLmxlZnRBdHRyaWJ1dGUgPT0gYXR0cmlidXRlKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAubWFwKGUgPT4gcGFyc2VGbG9hdChlLnJpZ2h0VGFibGUud2VpZ2h0KSlcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IGF0dHJpYnV0ZVdlaWdodHMgPSBsYXllckVkZ2VzXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC5maWx0ZXIoZSA9PiBlLmxlZnRBdHRyaWJ1dGUgPT0gYXR0cmlidXRlKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAubWFwKGUgPT4gcGFyc2VGbG9hdChlLnJpZ2h0QXR0cmlidXRlLndlaWdodCkpXHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGxldCB2YWwgPSBwYXJzZUZsb2F0KHRoaXMubWVkaWFuKHRhYmxlV2VpZ2h0cykpICsgcGFyc2VGbG9hdCh0aGlzLm1lZGlhbihhdHRyaWJ1dGVXZWlnaHRzKS90YWJsZS5hdHRyaWJ1dGVzLmxlbmd0aCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmICghaXNOYU4odmFsKSkgdG1wQXR0cmlidXRlV2VpZ2h0c1t0YWJsZS5uYW1lXVthdHRyaWJ1dGUubmFtZV0gPSB2YWw7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMucmVvcmRlcihnLCB0bXBXZWlnaHRzVGFibGVzLCB0bXBBdHRyaWJ1dGVXZWlnaHRzKVxyXG4gICAgfVxyXG5cclxuICAgIGlzU2FtZVJhbmtFZGdlKGUpe1xyXG4gICAgICAgIHJldHVybiBlLmxlZnRUYWJsZS5kZXB0aCA9PSBlLnJpZ2h0VGFibGUuZGVwdGg7XHJcbiAgICB9XHJcblxyXG4gICAgcmVvcmRlcihnLCB0bXBXZWlnaHRzVGFibGVzLCB0bXBBdHRyaWJ1dGVXZWlnaHRzKXtcclxuICAgICAgICBmb3IgKGxldCBpIGluIGcudGFibGVJbmRleCl7XHJcblxyXG4gICAgICAgICAgICAvLyBpcyB0aGlzIGNvcnJlY3Q/XHJcbiAgICAgICAgICAgIGlmIChpID09IDApIGNvbnRpbnVlO1xyXG5cclxuICAgICAgICAgICAgZm9yIChsZXQgaiBpbiBnLnRhYmxlSW5kZXhbaV0pe1xyXG4gICAgICAgICAgICAgICAgbGV0IHRhYmwgPSBnLnRhYmxlSW5kZXhbaV1bal07XHJcblxyXG4gICAgICAgICAgICAgICAgLy8gaXMgdGhpcyBjb3JyZWN0P1xyXG4gICAgICAgICAgICAgICAgaWYgKHRtcFdlaWdodHNUYWJsZXNbdGFibC5uYW1lXSA9PSB1bmRlZmluZWQpIGNvbnRpbnVlO1xyXG5cclxuICAgICAgICAgICAgICAgIHRhYmwud2VpZ2h0ID0gdG1wV2VpZ2h0c1RhYmxlc1t0YWJsLm5hbWVdO1xyXG4gICAgICAgICAgICAgICAgdGFibC5hc3NpZ25lZFdlaWdodCA9IHRtcFdlaWdodHNUYWJsZXNbdGFibC5uYW1lXTtcclxuXHJcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBrIGluIHRhYmwuYXR0cmlidXRlcyl7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IGF0dHIgPSB0YWJsLmF0dHJpYnV0ZXNba11cclxuICAgICAgICAgICAgICAgICAgICBhdHRyLndlaWdodCA9IHRtcEF0dHJpYnV0ZVdlaWdodHNbdGFibC5uYW1lXVthdHRyLm5hbWVdXHJcbiAgICAgICAgICAgICAgICAgICAgYXR0ci5hc3NpZ25lZFdlaWdodCA9IHRtcEF0dHJpYnV0ZVdlaWdodHNbdGFibC5uYW1lXVthdHRyLm5hbWVdXHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgdGFibC5hdHRyaWJ1dGVzLnNvcnQoKGEsIGIpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoaXNOYU4oYS53ZWlnaHQpIHx8IGlzTmFOKGIud2VpZ2h0KSkgcmV0dXJuIDA7XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSByZXR1cm4gYS53ZWlnaHQgPiBiLndlaWdodCA/IDEgOiAtMTtcclxuICAgICAgICAgICAgICAgIH0pXHJcblxyXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgayBpbiB0YWJsLmF0dHJpYnV0ZXMpe1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCBhdHRyID0gdGFibC5hdHRyaWJ1dGVzW2tdXHJcbiAgICAgICAgICAgICAgICAgICAgYXR0ci53ZWlnaHQgPSBrO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBnLnRhYmxlSW5kZXhbaV0uc29ydCgoYSwgYikgPT4ge1xyXG4gICAgICAgICAgICAgICAgaWYgKGlzTmFOKGEud2VpZ2h0KSB8fCBpc05hTihiLndlaWdodCkpIHJldHVybiAwO1xyXG4gICAgICAgICAgICAgICAgZWxzZSByZXR1cm4gYS53ZWlnaHQgPiBiLndlaWdodCA/IDEgOiAtMTtcclxuICAgICAgICAgICAgfSlcclxuXHJcbiAgICAgICAgICAgIGZvciAobGV0IGogaW4gZy50YWJsZUluZGV4W2ldKXtcclxuICAgICAgICAgICAgICAgIGxldCB0YWJsID0gZy50YWJsZUluZGV4W2ldW2pdO1xyXG4gICAgICAgICAgICAgICAgdGFibC53ZWlnaHQgPSBqO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHRyYW5zcG9zZShnKXtcclxuICAgICAgICBsZXQgaW1wcm92ZWQgPSB0cnVlO1xyXG4gICAgICAgIHdoaWxlIChpbXByb3ZlZCl7XHJcbiAgICAgICAgICAgIGltcHJvdmVkID0gZmFsc2U7XHJcbiAgICAgICAgICAgIGZvciAobGV0IGk9MDsgaTw9Zy5tYXhEZXB0aDsgaSsrKXtcclxuXHJcbiAgICAgICAgICAgICAgICBsZXQgaW5pdENyb3NzaW5ncyA9IGcuZ2V0RWRnZUNyb3NzaW5nc0F0RGVwdGgoaSk7XHJcblxyXG4gICAgICAgICAgICAgICAgbGV0IGxheWVyVGFibGVzID0gZy50YWJsZUluZGV4W2ldO1xyXG4gICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBqID0gMDsgaiA8IGxheWVyVGFibGVzLmxlbmd0aCAtIDE7IGorKyl7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IHRhYmxlMSA9IGxheWVyVGFibGVzW2pdO1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCB0YWJsZTIgPSBsYXllclRhYmxlc1tqKzFdO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnN3YXAodGFibGUxLCB0YWJsZTIpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBsZXQgY3VyQ3Jvc3NpbmdzID0gZy5nZXRFZGdlQ3Jvc3NpbmdzQXREZXB0aChpKSArIGcuZ2V0RWRnZUNyb3NzaW5nc0F0RGVwdGgoaSsxKVxyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAoY3VyQ3Jvc3NpbmdzIDwgaW5pdENyb3NzaW5ncyl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGltcHJvdmVkID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgdGhpcy5zd2FwKHRhYmxlMSwgdGFibGUyKVxyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGZvciAobGV0IHRhYmxlIG9mIGxheWVyVGFibGVzKXtcclxuICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBrPTA7IGsgPCB0YWJsZS5hdHRyaWJ1dGVzLmxlbmd0aCAtIDE7IGsrKyl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBhdHRyMSA9IHRhYmxlLmF0dHJpYnV0ZXNba11cclxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGF0dHIyID0gdGFibGUuYXR0cmlidXRlc1trKzFdXHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnN3YXAoYXR0cjEsIGF0dHIyKVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGN1ckNyb3NzaW5nczIgPSBnLmdldEVkZ2VDcm9zc2luZ3NBdERlcHRoKGkpICsgZy5nZXRFZGdlQ3Jvc3NpbmdzQXREZXB0aChpKzEpXHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoY3VyQ3Jvc3NpbmdzMiA8IGluaXRDcm9zc2luZ3Mpe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaW1wcm92ZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgdGhpcy5zd2FwKGF0dHIxLCBhdHRyMilcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgc3dhcCh3MSwgdzIpe1xyXG4gICAgICAgIGxldCB0bXB3ID0gdzEud2VpZ2h0O1xyXG4gICAgICAgIHcxLndlaWdodCA9IHcyLndlaWdodDtcclxuICAgICAgICB3Mi53ZWlnaHQgPSB0bXB3O1xyXG4gICAgfVxyXG59IiwiY2xhc3MgR3JhcGgge1xyXG4gICAgY29uc3RydWN0b3Iob2JqKXtcclxuICAgICAgICBpZiAob2JqID09IHVuZGVmaW5lZCl7XHJcbiAgICAgICAgICAgIHRoaXMuZWRnZXMgPSBbXTsgXHJcbiAgICAgICAgICAgIHRoaXMudGFibGVzID0gW107IFxyXG4gICAgICAgICAgICB0aGlzLnRhYmxlSW5kZXggPSBbXTsgXHJcbiAgICAgICAgICAgIHRoaXMuZWRnZUluZGV4ID0gW107XHJcbiAgICAgICAgICAgIHRoaXMubWF4RGVwdGggPSAwO1xyXG4gICAgICAgICAgICB0aGlzLmdyb3VwcyA9IFtdO1xyXG4gICAgICAgICAgICB0aGlzLmJhc2VSb3dEaXN0YW5jZSA9IDY7XHJcbiAgICAgICAgICAgIHRoaXMubmV3TGF5ZXIoKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBvYmogJiYgT2JqZWN0LmFzc2lnbih0aGlzLCBvYmopO1xyXG4gICAgICAgIH1cclxuICAgICAgICBcclxuICAgIH1cclxuXHJcbiAgICBhZGRHcm91cChncm91cCl7XHJcbiAgICAgICAgdGhpcy5ncm91cHMucHVzaChncm91cCk7XHJcbiAgICAgICAgZ3JvdXAuaWQgPSBcImdcIiArIHRoaXMuZ3JvdXBzLmluZGV4T2YoZ3JvdXApO1xyXG4gICAgICAgIGxldCBncm91cEhlYWRlclRhYmxlID0gZ3JvdXAuZ3JvdXBIZWFkZXJUYWJsZTtcclxuICAgICAgICB0aGlzLmFkZFRhYmxlKGdyb3VwSGVhZGVyVGFibGUpO1xyXG4gICAgfVxyXG5cclxuICAgIHVwZGF0ZUdyb3VwQ29vcmRzKCl7XHJcbiAgICAgICAgZm9yIChsZXQgZ3JvdXAgb2YgdGhpcy5ncm91cHMpe1xyXG4gICAgICAgICAgICBncm91cC51cGRhdGVDb29yZHMoKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgbmV3TGF5ZXIoKXtcclxuICAgICAgICB0aGlzLnRhYmxlSW5kZXgucHVzaChbXSlcclxuICAgICAgICB0aGlzLmVkZ2VJbmRleC5wdXNoKFtdKVxyXG4gICAgfVxyXG5cclxuICAgIGFkZFRhYmxlKHRhYmxlKXtcclxuICAgICAgICB3aGlsZSh0aGlzLm1heERlcHRoIDwgdGFibGUuZGVwdGgpe1xyXG4gICAgICAgICAgICB0aGlzLm1heERlcHRoKz0xO1xyXG4gICAgICAgICAgICB0aGlzLm5ld0xheWVyKCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0YWJsZS5ncmFwaCA9IHRoaXM7XHJcblxyXG4gICAgICAgIHRoaXMudGFibGVzLnB1c2godGFibGUpO1xyXG4gICAgICAgIHRoaXMudGFibGVJbmRleFt0YWJsZS5kZXB0aF0ucHVzaCh0YWJsZSk7XHJcbiAgICB9XHJcblxyXG4gICAgYWRkRWRnZShlZGdlKXtcclxuICAgICAgICB0aGlzLmVkZ2VzLnB1c2goZWRnZSlcclxuICAgICAgICB0aGlzLmVkZ2VJbmRleFtlZGdlLmxlZnRUYWJsZS5kZXB0aF0ucHVzaChlZGdlKVxyXG4gICAgfVxyXG5cclxuICAgIGVuc3VyZVVuaXF1ZUVkZ2VzKCl7XHJcbiAgICAgICAgLy8gZmluaXNoXHJcbiAgICB9XHJcblxyXG4gICAgZ2V0RWRnZUNyb3NzaW5ncygpe1xyXG4gICAgICAgIGxldCBjb3VudCA9IDA7XHJcbiAgICAgICAgZm9yIChsZXQgZCBpbiB0aGlzLmVkZ2VJbmRleCkgY291bnQgKz0gdGhpcy5nZXRFZGdlQ3Jvc3NpbmdzQXREZXB0aChkKTtcclxuICAgICAgICByZXR1cm4gY291bnQ7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0RWRnZUNyb3NzaW5nc0F0RGVwdGgoZCwgdmVyYm9zZT1mYWxzZSl7XHJcbiAgICAgICAgbGV0IGNyb3NzaW5ncyA9IDA7XHJcbiAgICAgICAgbGV0IGxheWVyRWRnZXMgPSB0aGlzLmVkZ2VJbmRleFtkXTtcclxuXHJcbiAgICAgICAgZm9yIChsZXQgaSBpbiBsYXllckVkZ2VzKXtcclxuICAgICAgICAgICAgbGV0IGN1cnJFZGdlID0gbGF5ZXJFZGdlc1tpXTtcclxuICAgICAgICAgICAgZm9yIChsZXQgaiA9IHBhcnNlRmxvYXQoaSkrMTsgaiA8IGxheWVyRWRnZXMubGVuZ3RoOyBqKyspe1xyXG4gICAgICAgICAgICAgICAgbGV0IG90aGVyRWRnZSA9IGxheWVyRWRnZXNbal07XHJcbiAgICAgICAgICAgICAgICBpZiAoY3VyckVkZ2UuY3Jvc3NlcyhvdGhlckVkZ2UpKXtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodmVyYm9zZSkgY29uc29sZS5sb2coXCJFZGdlIFwiICsgY3VyckVkZ2UubGVmdEF0dHJpYnV0ZS5uYW1lICsgY3VyckVkZ2UucmlnaHRBdHRyaWJ1dGUubmFtZSArIFwiIGNyb3NzZXMgXCIgKyBvdGhlckVkZ2UubGVmdEF0dHJpYnV0ZS5uYW1lICsgb3RoZXJFZGdlLnJpZ2h0QXR0cmlidXRlLm5hbWUpXHJcbiAgICAgICAgICAgICAgICAgICAgY3Jvc3NpbmdzKz0xO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIFxyXG4gICAgICAgIHJldHVybiBjcm9zc2luZ3NcclxuICAgIH1cclxuXHJcbiAgICBzb3J0R3JhcGgoKXtcclxuICAgICAgICBmb3IgKGxldCB0IG9mIHRoaXMudGFibGVzKXtcclxuICAgICAgICAgICAgaWYgKCF0Lm1haW4pIHtcclxuICAgICAgICAgICAgICAgIHQuYXR0cmlidXRlcyA9IHQuYXR0cmlidXRlcy5zb3J0KChhLCBiKSA9PiBhLndlaWdodCA+IGIud2VpZ2h0PyAxIDogLTEpXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMudGFibGVzID0gdGhpcy50YWJsZXMuc29ydCgoYSwgYikgPT4gYS53ZWlnaHQgPiBiLndlaWdodD8gMSA6IC0xKVxyXG5cclxuICAgICAgICBmb3IgKGxldCB0X2luZCBvZiB0aGlzLnRhYmxlSW5kZXgpe1xyXG4gICAgICAgICAgICB0X2luZC5zb3J0KChhLCBiKSA9PiBhLndlaWdodCA+IGIud2VpZ2h0PyAxIDogLTEpXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHNldEV4YWN0V2VpZ2h0cygpe1xyXG4gICAgICAgIGZvciAobGV0IGkgaW4gdGhpcy50YWJsZUluZGV4KXtcclxuICAgICAgICAgICAgbGV0IGxheWVyVGFibGVzID0gdGhpcy50YWJsZUluZGV4W2ldO1xyXG4gICAgICAgICAgICBsYXllclRhYmxlcyA9IGxheWVyVGFibGVzLnNvcnQoKGEsIGIpID0+IHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBhLndlaWdodCA+IGIud2VpZ2h0PyAxIDogLTFcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIGZvciAobGV0IGogaW4gbGF5ZXJUYWJsZXMpe1xyXG4gICAgICAgICAgICAgICAgbGV0IHRhYmxlID0gbGF5ZXJUYWJsZXNbal1cclxuICAgICAgICAgICAgICAgIHRhYmxlLndlaWdodCA9IHBhcnNlRmxvYXQoailcclxuXHJcbiAgICAgICAgICAgICAgICBsZXQgYXR0cnMgPSB0YWJsZS5hdHRyaWJ1dGVzO1xyXG4gICAgICAgICAgICAgICAgYXR0cnMgPSBhdHRycy5zb3J0KChhLCBiKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGEud2VpZ2h0ID4gYi53ZWlnaHQ/IDEgOiAtMVxyXG4gICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgayBpbiBhdHRycyl7XHJcbiAgICAgICAgICAgICAgICAgICAgYXR0cnNba10ud2VpZ2h0ID0gcGFyc2VGbG9hdChrKVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgXHJcbiAgICAgICAgdGhpcy51cGRhdGVHcm91cENvb3JkcygpXHJcblxyXG4gICAgfVxyXG5cclxuICAgIGdldE51bVN0cmFpZ2h0RWRnZXMoKXtcclxuICAgICAgICBsZXQgcmVzID0gMDtcclxuICAgICAgICBmb3IgKGxldCBpIGluIHRoaXMuZWRnZUluZGV4KXtcclxuICAgICAgICAgICAgcmVzICs9IHRoaXMuZ2V0TnVtU3RyYWlnaHRFZGdlc0F0RGVwdGgoaSlcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHJlcztcclxuICAgIH1cclxuXHJcbiAgICBnZXROdW1TdHJhaWdodEVkZ2VzQXREZXB0aChpKXtcclxuICAgICAgICBsZXQgcmVzID0gMFxyXG4gICAgICAgIGZvciAobGV0IGUgb2YgdGhpcy5lZGdlSW5kZXhbaV0pe1xyXG4gICAgICAgICAgICBpZiAoZS5sZWZ0VGFibGUud2VpZ2h0ID09IGUucmlnaHRUYWJsZS53ZWlnaHQpIHJlcyArPSAxXHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiByZXM7XHJcbiAgICB9XHJcblxyXG4gICAgYWRqdXN0VGFibGVZUG9zaXRpb24oKXtcclxuICAgICAgICBsZXQgaW1wcm92ZWQgPSB0cnVlO1xyXG4gICAgICAgIFxyXG4gICAgICAgIC8vIHdoaWxlIChpbXByb3ZlZCl7XHJcbiAgICAgICAgLy8gICAgIGltcHJvdmVkID0gZmFsc2U7ICAgICBcclxuXHJcbiAgICAgICAgLy8gICAgIGZvciAobGV0IGk9MTsgaTx0aGlzLnRhYmxlSW5kZXgubGVuZ3RoOyBpKyspe1xyXG4gICAgICAgIC8vICAgICAgICAgbGV0IHRhYmxlQ29sID0gdGhpcy50YWJsZUluZGV4W2ldO1xyXG4gICAgICAgIC8vICAgICAgICAgbGV0IGluaXRDb2xMZW5ndGggPSB0YWJsZUNvbC5sZW5ndGg7XHJcblxyXG4gICAgICAgIC8vICAgICAgICAgbGV0IGJlc3RQb3NpdGlvbiA9IHVuZGVmaW5lZDtcclxuICAgICAgICAvLyAgICAgICAgIGxldCBiZXN0TnVtT2ZTdHJhaWdodEVkZ2VzID0gdGhpcy5nZXROdW1TdHJhaWdodEVkZ2VzKCk7XHJcbiAgICBcclxuICAgICAgICAvLyAgICAgICAgIGxldCBjdXJTdHJhaWdodEVkZ2VzID0gdGhpcy5nZXROdW1TdHJhaWdodEVkZ2VzKCk7XHJcbiAgICAgICAgICAgICAgICBcclxuICAgICAgICAvLyAgICAgICAgIGZvciAobGV0IGo9MDsgajxpbml0Q29sTGVuZ3RoOyBqKyspe1xyXG4gICAgICAgIC8vICAgICAgICAgICAgIGxldCB0ZW1wdGFibGUgPSBuZXcgVGFibGUoJ2JsYW5rXycgKyBpICsgXCJfXCIgKyBqLCAnYmxhbmtfJyArIGkgKyBcIl9cIiArIGosIGZhbHNlLCBpKTtcclxuICAgICAgICAvLyAgICAgICAgICAgICB0ZW1wdGFibGUud2VpZ2h0ID0gaiAtIDAuNTtcclxuICAgIFxyXG4gICAgICAgIC8vICAgICAgICAgICAgIHRoaXMuYWRkVGFibGUodGVtcHRhYmxlKTtcclxuICAgICAgICAvLyAgICAgICAgICAgICB0aGlzLnNldEV4YWN0V2VpZ2h0cygpO1xyXG5cclxuICAgICAgICAvLyAgICAgICAgICAgICBpZiAodGhpcy5nZXROdW1TdHJhaWdodEVkZ2VzKCkgPiBiZXN0TnVtT2ZTdHJhaWdodEVkZ2VzKXtcclxuICAgICAgICAvLyAgICAgICAgICAgICAgICAgYmVzdFBvc2l0aW9uID0gajtcclxuICAgICAgICAvLyAgICAgICAgICAgICAgICAgYmVzdE51bU9mU3RyYWlnaHRFZGdlcyA9IHRoaXMuZ2V0TnVtU3RyYWlnaHRFZGdlcygpO1xyXG4gICAgICAgIC8vICAgICAgICAgICAgICAgICBpbXByb3ZlZCA9IHRydWU7XHJcbiAgICAgICAgLy8gICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyAgICAgICAgICAgICB0aGlzLnRhYmxlcy5zcGxpY2UodGhpcy50YWJsZXMuaW5kZXhPZih0ZW1wdGFibGUpLCAxKTtcclxuICAgICAgICAvLyAgICAgICAgICAgICB0YWJsZUNvbC5zcGxpY2UodGFibGVDb2wuaW5kZXhPZih0ZW1wdGFibGUpLCAxKTtcclxuICAgICAgICAvLyAgICAgICAgICAgICB0aGlzLnNldEV4YWN0V2VpZ2h0cygpO1xyXG4gICAgICAgIC8vICAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyAgICAgICAgIGlmIChiZXN0UG9zaXRpb24gIT0gdW5kZWZpbmVkKXtcclxuICAgICAgICAvLyAgICAgICAgICAgICBsZXQgdGVtcHRhYmxlID0gbmV3IFRhYmxlKCdibGFua18nICsgaSArIFwiX1wiICsgYmVzdFBvc2l0aW9uLCAnYmxhbmtfJyArIGkgKyBcIl9cIiArIGJlc3RQb3NpdGlvbiwgZmFsc2UsIGkpO1xyXG4gICAgICAgIC8vICAgICAgICAgICAgIHRlbXB0YWJsZS53ZWlnaHQgPSBiZXN0UG9zaXRpb24gLSAwLjU7XHJcbiAgICAgICAgLy8gICAgICAgICAgICAgdGVtcHRhYmxlLnZpc2liaWxpdHkgPSAnaGlkZGVuJztcclxuXHJcbiAgICAgICAgLy8gICAgICAgICAgICAgdGhpcy5hZGRUYWJsZSh0ZW1wdGFibGUpO1xyXG4gICAgICAgIC8vICAgICAgICAgICAgIHRoaXMuc2V0RXhhY3RXZWlnaHRzKCk7XHJcbiAgICAgICAgLy8gICAgICAgICAgICAgdGhpcy51cGRhdGVHcm91cENvb3JkcygpO1xyXG4gICAgICAgIC8vICAgICAgICAgfSAgXHJcbiAgICAgICAgLy8gICAgIH1cclxuICAgICAgICAvLyB9XHJcblxyXG4gICAgICAgIHRoaXMuYWRqdXN0QXR0ck9mZnNldCgpXHJcbiAgICB9XHJcblxyXG4gICAgZ2V0QmVuZExlZnQodGFibGUpe1xyXG4gICAgICAgIGxldCBkZXB0aCA9IHRhYmxlLmRlcHRoO1xyXG5cclxuICAgICAgICBsZXQgZWRnZUNvbExlZnQgPSB0aGlzLmVkZ2VJbmRleFtkZXB0aC0xXTtcclxuICAgICAgICBsZXQgZWRnZXNMZWZ0ID0gZWRnZUNvbExlZnQuZmlsdGVyKGUgPT4gZS5yaWdodFRhYmxlID09IHRhYmxlICYmICFlLmlzU2FtZVJhbmtFZGdlKCkpO1xyXG5cclxuICAgICAgICBpZiAoZWRnZXNMZWZ0Lmxlbmd0aCA9PSAwKSByZXR1cm4gMFxyXG4gICAgICAgIGVsc2UgcmV0dXJuIE1hdGguYWJzKGVkZ2VzTGVmdC5tYXAoZSA9PiBlLmdldEJlbmRpbmVzcygpKS5yZWR1Y2UoKGEsIGIpID0+IHtcclxuICAgICAgICAgICAgcmV0dXJuIE1hdGgucm91bmQoYSoxMDAwICsgYioxMDAwKS8xMDAwO1xyXG4gICAgICAgIH0pKTtcclxuICAgIH1cclxuXHJcbiAgICBnZXRCZW5kUmlnaHQodGFibGUpe1xyXG4gICAgICAgIGxldCBkZXB0aCA9IHRhYmxlLmRlcHRoO1xyXG4gICAgICAgIGxldCBlZGdlQ29sUmlnaHQgPSB0aGlzLmVkZ2VJbmRleFtkZXB0aF07XHJcbiAgICAgICAgbGV0IGVkZ2VzUmlnaHQgPSBlZGdlQ29sUmlnaHQuZmlsdGVyKGUgPT4gZS5sZWZ0VGFibGUgPT0gdGFibGUgJiYgIWUuaXNTYW1lUmFua0VkZ2UoKSk7XHJcblxyXG4gICAgICAgIGlmIChlZGdlc1JpZ2h0Lmxlbmd0aCA9PSAwKSByZXR1cm4gMDtcclxuICAgICAgICBlbHNlIHJldHVybiBNYXRoLmFicyhlZGdlc1JpZ2h0Lm1hcChlID0+IGUuZ2V0QmVuZGluZXNzKCkpLnJlZHVjZSgoYSwgYikgPT4ge1xyXG4gICAgICAgICAgICByZXR1cm4gTWF0aC5yb3VuZChhKjEwMDAgKyBiKjEwMDApLzEwMDA7XHJcbiAgICAgICAgfSkpO1xyXG4gICAgfVxyXG5cclxuICAgIGdldFRhYmxlQmVuZGluZXNzKHRhYmxlKXtcclxuICAgICAgICBsZXQgZGVwdGggPSB0YWJsZS5kZXB0aDtcclxuXHJcbiAgICAgICAgaWYgKGRlcHRoID09IDApIHJldHVybiBNYXRoLnJvdW5kKHRoaXMuZ2V0QmVuZFJpZ2h0KHRhYmxlKSoxMDAwKS8xMDAwO1xyXG4gICAgICAgIGVsc2UgcmV0dXJuIE1hdGgucm91bmQodGhpcy5nZXRCZW5kTGVmdCh0YWJsZSkqMTAwMCArIHRoaXMuZ2V0QmVuZFJpZ2h0KHRhYmxlKSoxMDAwKS8xMDAwO1xyXG4gICAgfVxyXG5cclxuICAgIGdldEdyYXBoVG90YWxFZGdlQmVuZGluZXNzKCl7XHJcbiAgICAgICAgcmV0dXJuIE1hdGgucm91bmQoMTAwMCp0aGlzLnRhYmxlcy5tYXAodCA9PiB0aGlzLmdldFRhYmxlQmVuZGluZXNzKHQpKS5yZWR1Y2UoKGEsIGIpID0+IGEgKyBiKSkvMTAwMDtcclxuICAgIH1cclxuXHJcbiAgICBhZGp1c3RBdHRyT2Zmc2V0KCl7XHJcbiAgICAgICAgbGV0IGltcHJvdmVkID0gdHJ1ZTtcclxuICAgICAgICBsZXQgY3ljbGVJbmRleCA9IDA7XHJcblxyXG4gICAgICAgIGxldCBnZXRVcHBlckJvdW5kID0gKHRhYmxlQ29sLCBrKSA9PiB7XHJcbiAgICAgICAgICAgIGxldCB1cHBlckJvdW5kID0gLTI7XHJcbiAgICAgICAgICAgIGlmIChrID09IDApIHVwcGVyQm91bmQgPSAwO1xyXG4gICAgICAgICAgICBlbHNlIHVwcGVyQm91bmQgPSB0YWJsZUNvbFtrLTFdLnZlcnRpY2FsQXR0ck9mZnNldCAtIHRoaXMuYmFzZVJvd0Rpc3RhbmNlICsgdGFibGVDb2xbay0xXS5hdHRyaWJ1dGVzLmxlbmd0aCArIDI7IFxyXG4gICAgICAgICAgICByZXR1cm4gdXBwZXJCb3VuZDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGxldCBnZXRMb3dlckJvdW5kID0gKHRhYmxlQ29sLCBrKSA9PiB7XHJcbiAgICAgICAgICAgIGxldCBsb3dlckJvdW5kID0gMjtcclxuICAgICAgICAgICAgaWYgKHRhYmxlQ29sLmxlbmd0aCA9PSAxIHx8IHRhYmxlQ29sW2srMV0gPT0gdW5kZWZpbmVkKSBsb3dlckJvdW5kID0gMjA7IC8vIHJhbmRvbSBiaWcgbnVtYmVyXHJcbiAgICAgICAgICAgIGVsc2UgbG93ZXJCb3VuZCA9IHRhYmxlQ29sW2srMV0udmVydGljYWxBdHRyT2Zmc2V0ICsgdGhpcy5iYXNlUm93RGlzdGFuY2UgLSB0YWJsZUNvbFtrXS5hdHRyaWJ1dGVzLmxlbmd0aCAtIDI7IFxyXG4gICAgICAgICAgICAvL2lmICh0YWJsZUNvbFtrKzFdICE9IHVuZGVmaW5lZCkgY29uc29sZS5sb2codGFibGVDb2xbaysxXSwgdGFibGVDb2xbaysxXS52ZXJ0aWNhbEF0dHJPZmZzZXQsIHRoaXMuYmFzZVJvd0Rpc3RhbmNlLCB0YWJsZS5hdHRyaWJ1dGVzLmxlbmd0aClcclxuICAgICAgICAgICAgcmV0dXJuIGxvd2VyQm91bmRcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGxldCBzd2lwZVJpZ2h0ID0gKCkgPT4ge1xyXG4gICAgICAgICAgICBmb3IgKGxldCBpPTA7IGk8dGhpcy50YWJsZUluZGV4Lmxlbmd0aDsgaSsrKXtcclxuICAgICAgICAgICAgICAgIGxldCB0YWJsZUNvbCA9IHRoaXMudGFibGVJbmRleFtpXTtcclxuICAgICAgICAgICAgICAgIGZvciAobGV0IGs9MDsgazx0YWJsZUNvbC5sZW5ndGg7IGsrKyl7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IHRhYmxlID0gdGFibGVDb2xba107XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IGN1cnJCZW5kaW5lc3NTdW0gPSB0aGlzLmdldFRhYmxlQmVuZGluZXNzKHRhYmxlKTtcclxuICAgICAgICAgICAgICAgICAgICAvL2xldCBjdXJyQmVuZGluZXNzU3VtID0gdGhpcy5nZXRCZW5kUmlnaHQodGFibGUpO1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCBjdXJyQmVzdE9mZnNldCA9IHRhYmxlLnZlcnRpY2FsQXR0ck9mZnNldDtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IHVwcGVyQm91bmQgPSBnZXRVcHBlckJvdW5kKHRhYmxlQ29sLCBrKTtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgbG93ZXJCb3VuZCA9IGdldExvd2VyQm91bmQodGFibGVDb2wsIGspO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAvLyBpZiAoaSA9PSAzICYmIHRhYmxlQ29sW2srMV0gIT0gdW5kZWZpbmVkKSBjb25zb2xlLmxvZyh0YWJsZS5uYW1lLCAnbG93ZXIgYm91bmQnLCBsb3dlckJvdW5kLFxyXG4gICAgICAgICAgICAgICAgICAgIC8vICAgICAnbmV4dCBvZmZzZXQnLCB0YWJsZUNvbFtrKzFdLnZlcnRpY2FsQXR0ck9mZnNldCwgJ2F0dHJpYnV0ZXMnLCB0YWJsZUNvbFtrXS5hdHRyaWJ1dGVzLmxlbmd0aClcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgaiA9IHVwcGVyQm91bmQ7IGogPD0gbG93ZXJCb3VuZDsgaisrKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGFibGUudmVydGljYWxBdHRyT2Zmc2V0ID0gajtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHRlbXBCZW5kaW5lc3NTdW0gPSB0aGlzLmdldFRhYmxlQmVuZGluZXNzKHRhYmxlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy9sZXQgdGVtcEJlbmRpbmVzc1N1bSA9IHRoaXMuZ2V0QmVuZFJpZ2h0KHRhYmxlKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGlmIChpID09IDMpIGNvbnNvbGUubG9nKHRhYmxlLm5hbWUsICdjaGFuZ2UgcHJvcG9zYWwnLCBqLCAnYmVuZHMnICx0ZW1wQmVuZGluZXNzU3VtKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRlbXBCZW5kaW5lc3NTdW0gPD0gY3VyckJlbmRpbmVzc1N1bSl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdXJyQmVzdE9mZnNldCA9IGo7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdXJyQmVuZGluZXNzU3VtID0gdGVtcEJlbmRpbmVzc1N1bTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGltcHJvdmVkID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGlmIChpID09IDMpIGNvbnNvbGUubG9nKHRhYmxlLm5hbWUsICdjaGFuZ2UgYWNjZXB0ZWQnKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgXHJcbiAgICAgICAgICAgICAgICAgICAgdGFibGUudmVydGljYWxBdHRyT2Zmc2V0ID0gY3VyckJlc3RPZmZzZXQ7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGxldCBzd2lwZUxlZnQgPSAoKSA9PiB7XHJcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSB0aGlzLnRhYmxlSW5kZXgubGVuZ3RoIC0gMTsgaT4wOyBpLS0pe1xyXG4gICAgICAgICAgICAgICAgbGV0IHRhYmxlQ29sID0gdGhpcy50YWJsZUluZGV4W2ldO1xyXG5cclxuICAgICAgICAgICAgICAgIGZvciAobGV0IGs9dGFibGVDb2wubGVuZ3RoIC0gMTsgayA+PSAwOyBrLS0pe1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCB0YWJsZSA9IHRhYmxlQ29sW2tdO1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCBjdXJyQmVuZGluZXNzU3VtID0gdGhpcy5nZXRUYWJsZUJlbmRpbmVzcyh0YWJsZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgLy9sZXQgY3VyckJlbmRpbmVzc1N1bSA9IHRoaXMuZ2V0QmVuZExlZnQodGFibGUpO1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCBjdXJyQmVzdE9mZnNldCA9IHRhYmxlLnZlcnRpY2FsQXR0ck9mZnNldDtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IHVwcGVyQm91bmQgPSBnZXRVcHBlckJvdW5kKHRhYmxlQ29sLCBrKTtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgbG93ZXJCb3VuZCA9IGdldExvd2VyQm91bmQodGFibGVDb2wsIGspO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgaiA9IHVwcGVyQm91bmQ7IGogPD0gbG93ZXJCb3VuZDsgaisrKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGFibGUudmVydGljYWxBdHRyT2Zmc2V0ID0gajtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHRlbXBCZW5kaW5lc3NTdW0gPSB0aGlzLmdldFRhYmxlQmVuZGluZXNzKHRhYmxlKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vaWYgKHRhYmxlLm5hbWUgPT0gXCJUMXkwXCIpIGNvbnNvbGUubG9nKCdwcm9wb3NhbCcsIGosICdwcm9wb3NhbCBiZW5kJywgdGVtcEJlbmRpbmVzc1N1bSwgdGhpcy5iYXNlUm93RGlzdGFuY2UpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRlbXBCZW5kaW5lc3NTdW0gPCBjdXJyQmVuZGluZXNzU3VtKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJCZXN0T2Zmc2V0ID0gajtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJCZW5kaW5lc3NTdW0gPSB0ZW1wQmVuZGluZXNzU3VtO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgXHJcbiAgICAgICAgICAgICAgICAgICAgdGFibGUudmVydGljYWxBdHRyT2Zmc2V0ID0gY3VyckJlc3RPZmZzZXQ7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHdoaWxlIChjeWNsZUluZGV4IDwgMTApe1xyXG4gICAgICAgICAgICAvL2NvbnNvbGUubG9nKGN5Y2xlSW5kZXgsIChjeWNsZUluZGV4ICUgMiA9PSAwPyAncmlnaHQnIDogJ2xlZnQnKSwgdGhpcy5nZXRHcmFwaFRvdGFsRWRnZUJlbmRpbmVzcygpKTtcclxuICAgICAgICAgICAgY3ljbGVJbmRleCsrO1xyXG5cclxuICAgICAgICAgICAgaWYgKGN5Y2xlSW5kZXggJSAyID09IDApIHN3aXBlUmlnaHQoKVxyXG4gICAgICAgICAgICBlbHNlIHN3aXBlTGVmdCgpXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLnVwZGF0ZUdyb3VwQ29vcmRzKCk7XHJcbiAgICB9XHJcbn1cclxuXHJcbiIsImNsYXNzIEdyYXBoR2VuZXJhdG9yIHtcclxuICAgIGNvbnN0cnVjdG9yKGRlcHRoPTMsIHNlZWQ9XCJoZWxsb1wiLCB0YWJsZURpc3RyaWJ1dGlvbiA9IFsyLDNdLCBhdHRyaWJ1dGVEaXN0cmlidXRpb249WzEsIDVdKXtcclxuICAgICAgICB0aGlzLmQgPSBkZXB0aDtcclxuICAgICAgICB0aGlzLnMgPSAzO1xyXG4gICAgICAgIHRoaXMuamQgPSAwLjE7XHJcbiAgICAgICAgdGhpcy5qcyA9IDAuMDU7XHJcbiAgICAgICAgdGhpcy5hdHRyaWJ1dGVDb3VudGVyID0gMDtcclxuICAgICAgICB0aGlzLnNlZWQgPSBzZWVkO1xyXG5cclxuICAgICAgICB0aGlzLnRhYmxlRGlzdHJpYnV0aW9uID0gdGFibGVEaXN0cmlidXRpb247XHJcbiAgICAgICAgdGhpcy5hdHRyaWJ1dGVEaXN0cmlidXRpb24gPSBhdHRyaWJ1dGVEaXN0cmlidXRpb247XHJcblxyXG4gICAgICAgIC8vIHJhbmRvbSBudW1iZXIgZ2VuZXJhdG9yc1xyXG4gICAgICAgIHRoaXMucm5nID0gbmV3IE1hdGguc2VlZHJhbmRvbSh0aGlzLnNlZWQpO1xyXG4gICAgICAgIHRoaXMudGFibGVEaXN0ID0gKCkgPT4gdGFibGVEaXN0cmlidXRpb25bMF0gKyBNYXRoLnJvdW5kKHRoaXMucm5nKCkgKiAodGFibGVEaXN0cmlidXRpb25bMV0gLSB0YWJsZURpc3RyaWJ1dGlvblswXSkpXHJcbiAgICAgICAgdGhpcy5hdHRyRGlzdCA9ICgpID0+IGF0dHJpYnV0ZURpc3RyaWJ1dGlvblswXSArIE1hdGgucm91bmQodGhpcy5ybmcoKSAqIChhdHRyaWJ1dGVEaXN0cmlidXRpb25bMV0gLSBhdHRyaWJ1dGVEaXN0cmlidXRpb25bMF0pKVxyXG4gICAgfVxyXG5cclxuICAgIGdlbmVyYXRlKCl7XHJcbiAgICAgICAgZyA9IG5ldyBHcmFwaCgpXHJcbiAgICAgICAgZy5iYXNlUm93RGlzdGFuY2UgPSB0aGlzLmF0dHJpYnV0ZURpc3RyaWJ1dGlvblsxXSArIDI7XHJcblxyXG4gICAgICAgIGZvciAodmFyIGk9MTsgaTx0aGlzLmQ7IGkrKyl7XHJcbiAgICAgICAgICAgIGcubmV3TGF5ZXIoKVxyXG4gICAgICAgICAgICBmb3IgKHZhciBqPTA7IGo8dGhpcy50YWJsZURpc3QoKTsgaisrKXtcclxuICAgICAgICAgICAgICAgIGcuYWRkVGFibGUodGhpcy5nZW5lcmF0ZVRhYmxlKGksIGopKVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLmdlbmVyYXRlUHJvamVjdGlvbnMoZyk7XHJcbiAgICAgICAgdGhpcy5nZW5lcmF0ZUpvaW5zKGcpO1xyXG4gICAgICAgIFxyXG4gICAgICAgIGcuZW5zdXJlVW5pcXVlRWRnZXMoKTtcclxuXHJcbiAgICAgICAgcmV0dXJuIGc7XHJcbiAgICB9XHJcblxyXG4gICAgZ2VuZXJhdGVUYWJsZShkZXB0aCwgaW5kZXgpe1xyXG4gICAgICAgIG5hbWUgPSBcIlRcIiArIGRlcHRoICsgXCJ5XCIgKyBpbmRleFxyXG4gICAgICAgIHZhciBuZXdUYWJsZSA9IG5ldyBUYWJsZShuYW1lLCBuYW1lLCBmYWxzZSwgZGVwdGgpO1xyXG5cclxuICAgICAgICBmb3IgKHZhciBpPTA7IGk8dGhpcy5hdHRyRGlzdCgpOyBpKyspe1xyXG4gICAgICAgICAgICBuZXdUYWJsZS5hZGRBdHRyaWJ1dGUoXCJhXCIgKyB0aGlzLmF0dHJpYnV0ZUNvdW50ZXIpO1xyXG4gICAgICAgICAgICB0aGlzLmF0dHJpYnV0ZUNvdW50ZXIgKz0gMTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBuZXdUYWJsZVxyXG4gICAgfVxyXG5cclxuICAgIGdlbmVyYXRlUHJvamVjdGlvbnMoZyl7XHJcbiAgICAgICAgbGV0IGxheWVyMSA9IGcudGFibGVJbmRleFsxXTtcclxuICAgICAgICBsZXQgbGF5ZXIxYXR0cnMgPSBbXTtcclxuICAgICAgICBsZXQgc2VsZWN0VGFibGUgPSBuZXcgVGFibGUoXCJzZWxlY3RcIiwgXCJTRUxFQ1RcIiwgdHJ1ZSwgMClcclxuICAgICAgICBsZXQgcHJvamVjdGVkQXR0cnMgPSBbXTtcclxuICAgICAgICBsZXQgcHJvamVjdGVkID0gW107XHJcbiAgICAgICAgbGV0IHByb2plY3RlZENvdW50ID0gMDtcclxuXHJcbiAgICAgICAgZm9yIChsZXQgdCBvZiBsYXllcjEpe1xyXG4gICAgICAgICAgICBsZXQgYXR0cnMgPSB0LmF0dHJpYnV0ZXM7XHJcbiAgICAgICAgICAgIGxldCBzdHJpY3RJbmRleCA9IE1hdGguZmxvb3IodGhpcy5ybmcoKSphdHRycy5sZW5ndGgpXHJcbiAgICAgICAgICAgIGxldCBzdHJpY3QgPSBhdHRyc1tzdHJpY3RJbmRleF1cclxuICAgICAgICAgICAgcHJvamVjdGVkQXR0cnMucHVzaChzdHJpY3QpXHJcbiAgICAgICAgICAgIHByb2plY3RlZC5wdXNoKHN0cmljdClcclxuXHJcbiAgICAgICAgICAgIGZvciAobGV0IGF0dHIgb2YgYXR0cnMpe1xyXG4gICAgICAgICAgICAgICAgaWYgKGF0dHIgIT0gc3RyaWN0KXtcclxuICAgICAgICAgICAgICAgICAgICBsYXllcjFhdHRycy5wdXNoKG5ldyBBdHRyaWJ1dGUodCwgYXR0cikpXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcHJvamVjdGVkQ291bnQrKztcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGxldCBjb3VudFByb2plY3Rpb25zID0gdGhpcy5zICogKGxheWVyMWF0dHJzLmxlbmd0aCArIHByb2plY3RlZENvdW50KVxyXG5cclxuICAgICAgICBnLmFkZFRhYmxlKHNlbGVjdFRhYmxlKVxyXG5cclxuICAgICAgICBmb3IgKDsgcHJvamVjdGVkQ291bnQ8Y291bnRQcm9qZWN0aW9uczsgcHJvamVjdGVkQ291bnQrKyl7XHJcbiAgICAgICAgICAgIGxldCBhdHRySW5kZXggPSBNYXRoLmZsb29yKHRoaXMucm5nKCkqbGF5ZXIxYXR0cnMubGVuZ3RoKVxyXG4gICAgICAgICAgICBsZXQgYXR0ciA9IGxheWVyMWF0dHJzW2F0dHJJbmRleF1cclxuICAgICAgICAgICAgbGF5ZXIxYXR0cnMuc3BsaWNlKGF0dHJJbmRleCwgMSlcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZvciAobGV0IGF0dHIgb2YgcHJvamVjdGVkQXR0cnMpe1xyXG4gICAgICAgICAgICBsZXQgbmV3QXR0ciA9IG5ldyBBdHRyaWJ1dGUoc2VsZWN0VGFibGUsIFwiYVwiICsgdGhpcy5hdHRyaWJ1dGVDb3VudGVyKyspXHJcbiAgICAgICAgICAgIG5ld0F0dHIubXV0YWJsZSA9IGZhbHNlO1xyXG4gICAgICAgICAgICBzZWxlY3RUYWJsZS5hdHRyaWJ1dGVzLnB1c2gobmV3QXR0cilcclxuICAgICAgICAgICAgZy5hZGRFZGdlKG5ldyBFZGdlKHNlbGVjdFRhYmxlLCBuZXdBdHRyLCBhdHRyLnRhYmxlLCBhdHRyKSlcclxuICAgICAgICB9XHJcbiAgICBcclxuICAgICAgICAvLyB3ZWlyZC4gbm90IGZpbmlzaGVkLlxyXG4gICAgfVxyXG5cclxuICAgIGdlbmVyYXRlSW50ZXJMYXllckpvaW5zKGcpe1xyXG4gICAgICAgIGZvciAodmFyIGkgPSAxOyBpIDwgdGhpcy5kOyBpKyspe1xyXG4gICAgICAgICAgICBsZXQgbGVmdExheWVyID0gZy50YWJsZUluZGV4W2ldO1xyXG4gICAgICAgICAgICBsZXQgcmlnaHRMYXllciA9IGcudGFibGVJbmRleFtpICsgMV07XHJcblxyXG4gICAgICAgICAgICBsZXQgbGVmdExheWVyQXR0cnMgPSBbXTtcclxuICAgICAgICAgICAgbGV0IHJpZ2h0TGF5ZXJBdHRycyA9IFtdO1xyXG5cclxuICAgICAgICAgICAgZm9yIChsZXQgdGFibGUgb2YgbGVmdExheWVyKXtcclxuICAgICAgICAgICAgICAgIGxldCBhdHRycyA9IHRhYmxlLmF0dHJpYnV0ZXM7XHJcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBhdHRyIG9mIGF0dHJzKXtcclxuICAgICAgICAgICAgICAgICAgICBsZWZ0TGF5ZXJBdHRycy5wdXNoKG5ldyBBdHRyaWJ1dGUodGFibGUsIGF0dHIpKVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBmb3IgKGxldCB0YWJsZSBvZiByaWdodExheWVyKXtcclxuICAgICAgICAgICAgICAgIGlmIChsZWZ0TGF5ZXJBdHRycy5sZW5ndGggPT0gMCkgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBsZXQgYXR0cnMgPSB0YWJsZS5hdHRyaWJ1dGVzO1xyXG5cclxuICAgICAgICAgICAgICAgIGxldCBzdHJpY3QgPSBhdHRyc1tNYXRoLmZsb29yKHRoaXMucm5nKCkqYXR0cnMubGVuZ3RoKV1cclxuICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgbGV0IGxlZnRJbmRleCA9IE1hdGguZmxvb3IodGhpcy5ybmcoKSpsZWZ0TGF5ZXJBdHRycy5sZW5ndGgpXHJcbiAgICAgICAgICAgICAgICBsZXQgbGVmdCA9IGxlZnRMYXllckF0dHJzW2xlZnRJbmRleF1cclxuICAgICAgICAgICAgICAgIGxlZnRMYXllckF0dHJzLnNwbGljZShsZWZ0SW5kZXgsIDEpXHJcblxyXG4gICAgICAgICAgICAgICAgZy5hZGRFZGdlKG5ldyBFZGdlKGxlZnQudGFibGUsIGxlZnQuYXR0ciwgdGFibGUsIHN0cmljdCkpXHJcblxyXG4gICAgICAgICAgICAgICAgbGVmdC5kaWZmRWRnZXMrKztcclxuICAgICAgICAgICAgICAgIHN0cmljdC5kaWZmRWRnZXMrKztcclxuXHJcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBhdHRyIG9mIGF0dHJzKXtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoYXR0ciAhPSBzdHJpY3QpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJpZ2h0TGF5ZXJBdHRycy5wdXNoKG5ldyBBdHRyaWJ1dGUodGFibGUsIGF0dHIpKVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBmb3IgKGxldCBsZWZ0IG9mIGxlZnRMYXllckF0dHJzKXtcclxuICAgICAgICAgICAgICAgIGlmIChyaWdodExheWVyQXR0cnMubGVuZ3RoID09IDApIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMucm5nKCkgPCB0aGlzLmpkKXtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgcmlnaHRJbmRleCA9IE1hdGguZmxvb3IodGhpcy5ybmcoKSpyaWdodExheWVyQXR0cnMubGVuZ3RoKVxyXG4gICAgICAgICAgICAgICAgICAgIGxldCByaWdodCA9IHJpZ2h0TGF5ZXJBdHRyc1tyaWdodEluZGV4XVxyXG4gICAgICAgICAgICAgICAgICAgIHJpZ2h0TGF5ZXJBdHRycy5zcGxpY2UocmlnaHRJbmRleCwgMSlcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgZy5hZGRFZGdlKG5ldyBFZGdlKGxlZnQudGFibGUsIGxlZnQuYXR0ciwgcmlnaHQudGFibGUsIHJpZ2h0LmF0dHIpKVxyXG5cclxuICAgICAgICAgICAgICAgICAgICBsZWZ0LmRpZmZFZGdlcysrO1xyXG4gICAgICAgICAgICAgICAgICAgIHJpZ2h0LmRpZmZFZGdlcysrO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGdlbmVyYXRlSW5MYXllckpvaW5zKCl7XHJcbiAgICAgICAgZm9yICh2YXIgaT0xOyBpPHRoaXMuZDsgaSsrKXtcclxuICAgICAgICAgICAgbGV0IGxheWVyID0gZy50YWJsZUluZGV4W2ldO1xyXG5cclxuICAgICAgICAgICAgZm9yIChsZXQgdDEgb2YgbGF5ZXIpe1xyXG4gICAgICAgICAgICAgICAgbGV0IGF0dHJzMSA9IFtdO1xyXG4gICAgICAgICAgICAgICAgbGV0IGF0dHJzMiA9IFtdO1xyXG5cclxuICAgICAgICAgICAgICAgIGZvciAobGV0IGF0dHIgb2YgdDEuYXR0cmlidXRlcyl7XHJcbiAgICAgICAgICAgICAgICAgICAgYXR0cnMxLnB1c2gobmV3IEF0dHJpYnV0ZSh0MSwgYXR0cikpXHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgdDIgb2YgbGF5ZXIpe1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0MSA9PSB0MikgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgYXR0ciBvZiB0Mi5hdHRyaWJ1dGVzKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGF0dHIuc2FtZUVkZ2VzID09IDApXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhdHRyczIucHVzaChuZXcgQXR0cmlidXRlKHQyLCBhdHRyKSlcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgYXR0cjEgb2YgYXR0cnMxKXtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoYXR0cnMyLmxlbmd0aCA9PSAwKSBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5ybmcoKSA8IHRoaXMuanMpe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgYXR0cjJpbmRleCA9IE1hdGguZmxvb3IodGhpcy5ybmcoKSphdHRyczIubGVuZ3RoKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgYXR0cjIgPSBhdHRyczJbYXR0cjJpbmRleF1cclxuICAgICAgICAgICAgICAgICAgICAgICAgYXR0cnMyLnNwbGljZShhdHRyMmluZGV4LCAxKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICAgICAgZy5hZGRFZGdlKG5ldyBFZGdlKGF0dHIxLnRhYmxlLCBhdHRyMS5hdHRyLCBhdHRyMi50YWJsZSwgYXR0cjIuYXR0cikpXHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBhdHRyMS5zYW1lRWRnZXMrKztcclxuICAgICAgICAgICAgICAgICAgICAgICAgYXR0cjIuc2FtZUVkZ2VzKys7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGdlbmVyYXRlUmFuZG9tSm9pbnMoKXtcclxuICAgICAgICAvLyBmaW5pc2hcclxuICAgIH1cclxuXHJcbiAgICBnZW5lcmF0ZUpvaW5zKGcpe1xyXG4gICAgICAgIHRoaXMuZ2VuZXJhdGVJbnRlckxheWVySm9pbnMoZyk7XHJcbiAgICAgICAgdGhpcy5nZW5lcmF0ZUluTGF5ZXJKb2lucyhnKTtcclxuICAgICAgICB0aGlzLmdlbmVyYXRlUmFuZG9tSm9pbnMoZyk7XHJcbiAgICB9XHJcbn0iLCJjbGFzcyBHcm91cCB7XG4gICAgY29uc3RydWN0b3IoKXtcbiAgICAgICAgdGhpcy50YWJsZXMgPSBbXTtcbiAgICAgICAgdGhpcy5jb29yZHMgPSBbXTtcbiAgICAgICAgdGhpcy54X2Nvb3JkID0gMDtcbiAgICAgICAgdGhpcy55X2Nvb3JkID0gMDtcbiAgICAgICAgdGhpcy53aWR0aF9jb29yZCA9IDA7XG4gICAgICAgIHRoaXMuaGVpZ2h0X2Nvb3JkID0gMDtcbiAgICAgICAgdGhpcy5pZCA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5tYXJnaW4gPSA3O1xuICAgICAgICB0aGlzLmdyb3VwSGVhZGVyID0gXCJjb3VudFwiO1xuICAgICAgICB0aGlzLmdyb3VwSGVhZGVyVGFibGUgPSBuZXcgVGFibGUodGhpcy5ncm91cEhlYWRlciwgdGhpcy5ncm91cEhlYWRlciwgdHJ1ZSwgMjAsIFwiZ3JvdXBoZWFkZXJcIik7XG4gICAgICAgIHRoaXMuYWRkVGFibGUodGhpcy5ncm91cEhlYWRlclRhYmxlKTtcblxuICAgICAgICB0aGlzLmNvb3JkcyA9IFtdO1xuICAgIH1cblxuICAgIGFkZFRhYmxlKHRhYmxlKXtcbiAgICAgICAgdGFibGUuZ3JvdXAgPSB0aGlzO1xuICAgICAgICB0YWJsZS5ncm91cHMucHVzaCh0aGlzKTtcbiAgICAgICAgdGhpcy50YWJsZXMucHVzaCh0YWJsZSk7XG4gICAgICAgIHRoaXMudXBkYXRlQ29vcmRzKCk7XG4gICAgfVxuXG4gICAgdXBkYXRlQ29vcmRzUHJlY2lzZSgpe1xuICAgICAgICB0aGlzLmNvb3JkcyA9IFtdO1xuICAgICAgICAvLyB0aGlzIHdpbGwgbmVlZCB0byBiZSBjaGFuZ2VkIGluIGNhc2Ugd2UgZGVjaWRlIHRvIHVzZSBhIHZlcnRpY2FsIHBvc2l0aW9uaW5nIHRoYXQgaXMgbm90IGZpeGVkXG5cbiAgICAgICAgbGV0IGxlZnRNYXhEZXB0aCA9IE1hdGgubWluLmFwcGx5KDAsIHRoaXMudGFibGVzLm1hcCh0ID0+IHQuZGVwdGgpKTtcbiAgICAgICAgbGV0IGxlZnRUYWJsZSA9IHRoaXMudGFibGVzLmZpbmQodCA9PiB0LmRlcHRoID09IGxlZnRNYXhEZXB0aCk7XG4gICAgICAgIHRoaXMueF9jb29yZCA9IGxlZnRUYWJsZS5kZXB0aDtcblxuICAgICAgICBsZXQgdG9wTWF4ID0gTWF0aC5taW4uYXBwbHkoMCwgdGhpcy50YWJsZXMubWFwKHQgPT4gdC53ZWlnaHQpKTtcbiAgICAgICAgbGV0IHRvcFRhYmxlID0gdGhpcy50YWJsZXMuZmluZCh0ID0+IHQud2VpZ2h0ID09IHRvcE1heCk7XG4gICAgICAgIHRoaXMueV9jb29yZCA9IHRvcFRhYmxlLndlaWdodDtcblxuICAgICAgICBsZXQgcmlnaHRNYXggPSBNYXRoLm1heC5hcHBseSgwLCB0aGlzLnRhYmxlcy5tYXAodCA9PiB0LmRlcHRoKSk7XG4gICAgICAgIGxldCByaWdodFRhYmxlID0gdGhpcy50YWJsZXMuZmluZCh0ID0+IHQuZGVwdGggPT0gcmlnaHRNYXgpO1xuICAgICAgICB0aGlzLndpZHRoX2Nvb3JkID0gcmlnaHRUYWJsZS5kZXB0aCAtIGxlZnRUYWJsZS5kZXB0aDtcbiAgICAgICAgXG4gICAgICAgIGxldCBib3R0b21NYXggPSBNYXRoLm1heC5hcHBseSgwLCB0aGlzLnRhYmxlcy5tYXAodCA9PiB0LndlaWdodCkpO1xuICAgICAgICBsZXQgYm90dG9tVGFibGUgPSB0aGlzLnRhYmxlcy5maW5kKHQgPT4gdC53ZWlnaHQgPT0gYm90dG9tTWF4KTtcbiAgICAgICAgdGhpcy5oZWlnaHRfY29vcmQgPSBib3R0b21UYWJsZS53ZWlnaHQgLSB0b3BUYWJsZS53ZWlnaHQ7XG5cbiAgICAgICAgbGV0IGRlcHRocmFuZ2UgPSBbbGVmdFRhYmxlLmRlcHRoLCByaWdodFRhYmxlLmRlcHRoXTtcbiAgICAgICAgXG4gICAgICAgIGZvciAobGV0IGk9MDsgaTxkZXB0aHJhbmdlLmxlbmd0aDsgaSsrKXtcbiAgICAgICAgICAgIGxldCBjdXJfZCA9IGRlcHRocmFuZ2VbaV07XG4gICAgICAgICAgICBsZXQgbnVtdGhpc0RlcHRoID0gTWF0aC5taW4uYXBwbHkoMCwgdGhpcy50YWJsZXMuZmlsdGVyKHQgPT4gdC5kZXB0aCA9PSBjdXJfZCkubWFwKGQgPT4gZC53ZWlnaHQpKTtcbiAgICAgICAgICAgIGxldCB0b3BUYWJsZSA9IHRoaXMudGFibGVzLmZpbmQodCA9PiB0LmRlcHRoID09IGN1cl9kICYmIHQud2VpZ2h0ID09IG51bXRoaXNEZXB0aCk7XG5cbiAgICAgICAgICAgIHRoaXMuY29vcmRzLnB1c2goW3RvcFRhYmxlLmRlcHRoKmRlcHRoX2Rpc3RhbmNlIC0gdGhpcy5tYXJnaW4sIHRvcFRhYmxlLndlaWdodCp0YWJsZV92ZXJ0X3NwYWNlICsgdG9wVGFibGUudmVydGljYWxBdHRyT2Zmc2V0KmF0dHJfaGVpZ2h0IC0gdGhpcy5tYXJnaW5dKVxuICAgICAgICAgICAgdGhpcy5jb29yZHMucHVzaChbdG9wVGFibGUuZGVwdGgqZGVwdGhfZGlzdGFuY2UgKyB0YWJsZV93aWR0aCArIHRoaXMubWFyZ2luLCB0b3BUYWJsZS53ZWlnaHQqdGFibGVfdmVydF9zcGFjZSArIHRvcFRhYmxlLnZlcnRpY2FsQXR0ck9mZnNldCphdHRyX2hlaWdodCAtIHRoaXMubWFyZ2luXSlcbiAgICAgICAgfVxuXG4gICAgICAgIGZvciAobGV0IGk9ZGVwdGhyYW5nZS5sZW5ndGggLSAxOyBpPj0wOyBpLS0pe1xuICAgICAgICAgICAgbGV0IGN1cl9kID0gZGVwdGhyYW5nZVtpXTtcbiAgICAgICAgICAgIGxldCBudW10aGlzRGVwdGggPSBNYXRoLm1heC5hcHBseSgwLCB0aGlzLnRhYmxlcy5maWx0ZXIodCA9PiB0LmRlcHRoID09IGN1cl9kKS5tYXAoZCA9PiBkLndlaWdodCkpO1xuICAgICAgICAgICAgbGV0IGJvdHRvbVRhYmxlID0gdGhpcy50YWJsZXMuZmluZCh0ID0+IHQuZGVwdGggPT0gY3VyX2QgJiYgdC53ZWlnaHQgPT0gbnVtdGhpc0RlcHRoKTtcblxuICAgICAgICAgICAgdGhpcy5jb29yZHMucHVzaChbYm90dG9tVGFibGUuZGVwdGgqZGVwdGhfZGlzdGFuY2UgKyB0YWJsZV93aWR0aCArIHRoaXMubWFyZ2luLCBib3R0b21UYWJsZS53ZWlnaHQqdGFibGVfdmVydF9zcGFjZSArICgxICsgYm90dG9tVGFibGUuYXR0cmlidXRlcy5sZW5ndGgpKmF0dHJfaGVpZ2h0ICsgYm90dG9tVGFibGUudmVydGljYWxBdHRyT2Zmc2V0KmF0dHJfaGVpZ2h0ICsgdGhpcy5tYXJnaW5dKVxuICAgICAgICAgICAgdGhpcy5jb29yZHMucHVzaChbYm90dG9tVGFibGUuZGVwdGgqZGVwdGhfZGlzdGFuY2UgLSB0aGlzLm1hcmdpbiwgYm90dG9tVGFibGUud2VpZ2h0KnRhYmxlX3ZlcnRfc3BhY2UgKyAoMSArIGJvdHRvbVRhYmxlLmF0dHJpYnV0ZXMubGVuZ3RoKSphdHRyX2hlaWdodCArIGJvdHRvbVRhYmxlLnZlcnRpY2FsQXR0ck9mZnNldCphdHRyX2hlaWdodCArIHRoaXMubWFyZ2luXSlcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuY29vcmRzLnB1c2godGhpcy5jb29yZHNbMF0pO1xuICAgIH1cblxuICAgIHVwZGF0ZUNvb3Jkcygpe1xuICAgICAgICB0aGlzLmNvb3JkcyA9IFtdO1xuXG4gICAgICAgIGxldCBsZWZ0TWF4RGVwdGggPSBNYXRoLm1pbi5hcHBseSgwLCB0aGlzLnRhYmxlcy5tYXAodCA9PiB0LmRlcHRoKSk7XG4gICAgICAgIGxldCBsZWZ0VGFibGUgPSB0aGlzLnRhYmxlcy5maW5kKHQgPT4gdC5kZXB0aCA9PSBsZWZ0TWF4RGVwdGgpO1xuICAgICAgICB0aGlzLnhfY29vcmQgPSBsZWZ0VGFibGUuZGVwdGg7XG5cbiAgICAgICAgbGV0IHRvcE1heCA9IE1hdGgubWluLmFwcGx5KDAsIHRoaXMudGFibGVzLm1hcCh0ID0+IHQud2VpZ2h0KSk7XG4gICAgICAgIGxldCB0b3BUYWJsZSA9IHRoaXMudGFibGVzLmZpbmQodCA9PiB0LndlaWdodCA9PSB0b3BNYXgpO1xuICAgICAgICB0aGlzLnlfY29vcmQgPSB0b3BUYWJsZS53ZWlnaHQ7XG5cbiAgICAgICAgbGV0IHJpZ2h0TWF4ID0gTWF0aC5tYXguYXBwbHkoMCwgdGhpcy50YWJsZXMubWFwKHQgPT4gdC5kZXB0aCkpO1xuICAgICAgICBsZXQgcmlnaHRUYWJsZSA9IHRoaXMudGFibGVzLmZpbmQodCA9PiB0LmRlcHRoID09IHJpZ2h0TWF4KTtcbiAgICAgICAgdGhpcy53aWR0aF9jb29yZCA9IHJpZ2h0VGFibGUuZGVwdGggLSBsZWZ0VGFibGUuZGVwdGg7XG4gICAgICAgIFxuICAgICAgICBsZXQgYm90dG9tTWF4ID0gTWF0aC5tYXguYXBwbHkoMCwgdGhpcy50YWJsZXMubWFwKHQgPT4gdC53ZWlnaHQpKTtcbiAgICAgICAgbGV0IGJvdHRvbVRhYmxlID0gdGhpcy50YWJsZXMuZmluZCh0ID0+IHQud2VpZ2h0ID09IGJvdHRvbU1heCk7XG4gICAgICAgIHRoaXMuaGVpZ2h0X2Nvb3JkID0gYm90dG9tVGFibGUud2VpZ2h0IC0gdG9wVGFibGUud2VpZ2h0O1xuICAgICAgICBcbiAgICAgICAgdGhpcy5jb29yZHMucHVzaChbbGVmdFRhYmxlLmRlcHRoKmRlcHRoX2Rpc3RhbmNlIC0gdGhpcy5tYXJnaW4sIHRvcFRhYmxlLndlaWdodCp0YWJsZV92ZXJ0X3NwYWNlICsgdG9wVGFibGUudmVydGljYWxBdHRyT2Zmc2V0KmF0dHJfaGVpZ2h0IC0gdGhpcy5tYXJnaW5dKVxuICAgICAgICB0aGlzLmNvb3Jkcy5wdXNoKFtsZWZ0VGFibGUuZGVwdGgqZGVwdGhfZGlzdGFuY2UgKyB0aGlzLm1hcmdpbiArIHRoaXMud2lkdGhfY29vcmQqZGVwdGhfZGlzdGFuY2UgKyB0YWJsZV93aWR0aCwgdG9wVGFibGUud2VpZ2h0KnRhYmxlX3ZlcnRfc3BhY2UgKyB0b3BUYWJsZS52ZXJ0aWNhbEF0dHJPZmZzZXQqYXR0cl9oZWlnaHQgLSB0aGlzLm1hcmdpbl0pXG4gICAgICAgIHRoaXMuY29vcmRzLnB1c2goW2xlZnRUYWJsZS5kZXB0aCpkZXB0aF9kaXN0YW5jZSArIHRoaXMubWFyZ2luICsgdGhpcy53aWR0aF9jb29yZCpkZXB0aF9kaXN0YW5jZSArIHRhYmxlX3dpZHRoLCBib3R0b21UYWJsZS53ZWlnaHQqdGFibGVfdmVydF9zcGFjZSArICgxICsgYm90dG9tVGFibGUuYXR0cmlidXRlcy5sZW5ndGgpKmF0dHJfaGVpZ2h0ICsgYm90dG9tVGFibGUudmVydGljYWxBdHRyT2Zmc2V0KmF0dHJfaGVpZ2h0ICsgdGhpcy5tYXJnaW5dKVxuICAgICAgICB0aGlzLmNvb3Jkcy5wdXNoKFtsZWZ0VGFibGUuZGVwdGgqZGVwdGhfZGlzdGFuY2UgLSB0aGlzLm1hcmdpbiwgYm90dG9tVGFibGUud2VpZ2h0KnRhYmxlX3ZlcnRfc3BhY2UgKyAoMSArIGJvdHRvbVRhYmxlLmF0dHJpYnV0ZXMubGVuZ3RoKSphdHRyX2hlaWdodCArIGJvdHRvbVRhYmxlLnZlcnRpY2FsQXR0ck9mZnNldCphdHRyX2hlaWdodCArIHRoaXMubWFyZ2luXSlcbiAgICAgICAgXG4gICAgICAgIHRoaXMuY29vcmRzLnB1c2godGhpcy5jb29yZHNbMF0pO1xuXG4gICAgICAgIHRoaXMuZ3JvdXBIZWFkZXJUYWJsZS5kZXB0aCA9IGxlZnRNYXhEZXB0aDtcbiAgICB9XG59IiwiY2xhc3MgTFBCZW5kaW5lc3Mge1xuICAgIGNvbnN0cnVjdG9yIChnKSB7XG4gICAgICAgIHRoaXMuZyA9IGc7XG4gICAgICAgIHRoaXMubWlwID0gdHJ1ZTtcbiAgICAgICAgdGhpcy52ZXJib3NlID0gZmFsc2U7XG4gICAgICAgIHRoaXMuZWxhcHNlZFRpbWUgPSAwXG4gICAgfVxuXG4gICAgLy8gaXNNaXAgKGxwKSB7XG4gICAgLy8gICAgIHJldHVybiBnbHBfZ2V0X251bV9pbnQobHApICsgZ2xwX2dldF9udW1fYmluKGxwKSA+IDA7XG4gICAgLy8gICB9O1xuXG4gICAgLy8gYXN5bmMgYXJyYW5nZSgpe1xuXG4gICAgLy8gICAgIGdscF9zZXRfcHJpbnRfZnVuYyhjb25zb2xlLmxvZylcblxuICAgIC8vICAgICBsZXQgY29kZSA9IFwidmFyIHgxID49IDA7IFxcbiBcXFxuICAgIC8vICAgICAgICAgdmFyIHgyID49IDA7IFxcbiBcXFxuICAgIC8vICAgICAgICAgXFxuIFxcXG4gICAgLy8gICAgICAgICBtYXhpbWl6ZSB6OiAgICAgMyp4MSArIDIqeDI7IFxcbiBcXFxuICAgIC8vICAgICAgICAgXFxuIFxcXG4gICAgLy8gICAgICAgICBzdWJqZWN0IHRvIGMxMTogICB4MSArICAgeDIgPD0gIDk7IFxcbiBcXFxuICAgIC8vICAgICAgICAgc3ViamVjdCB0byBjMTI6IDMqeDEgKyAgIHgyIDw9IDE4OyBcXG4gXFxcbiAgICAvLyAgICAgICAgIHN1YmplY3QgdG8gYzEzOiAgIHgxICAgICAgICA8PSAgNzsgXFxuIFxcXG4gICAgLy8gICAgICAgICBzdWJqZWN0IHRvIGMxNDogICAgICAgICAgeDIgPD0gIDY7IFxcbiBcXFxuICAgIC8vICAgICAgICAgXFxuIFxcXG4gICAgLy8gICAgICAgICBlbmQ7XCJcblxuICAgIC8vICAgICB2YXIgd29ya3NwYWNlID0gZ2xwX21wbF9hbGxvY193a3NwKCk7XG4gICAgLy8gICAgIHZhciBscCA9IGdscF9jcmVhdGVfcHJvYigpO1xuICAgIC8vICAgICB2YXIgbW9kZWxuYW1lID0gXCJ0ZXN0bW9kZWxcIlxuICAgIC8vICAgICB2YXIgaXNNaXAgPSB0aGlzLmlzTWlwKGxwKTtcblxuICAgIC8vICAgICBnbHBfbXBsX3JlYWRfbW9kZWxfZnJvbV9zdHJpbmcod29ya3NwYWNlLCBtb2RlbG5hbWUsIGNvZGUpO1xuICAgIC8vICAgICBnbHBfbXBsX2dlbmVyYXRlKHdvcmtzcGFjZSwgbW9kZWxuYW1lLCBjb25zb2xlLmxvZywgdW5kZWZpbmVkKTtcbiAgICAvLyAgICAgZ2xwX21wbF9idWlsZF9wcm9iKHdvcmtzcGFjZSwgbHApO1xuICAgIC8vICAgICBnbHBfc2NhbGVfcHJvYihscCwgR0xQX1NGX0FVVE8pO1xuXG4gICAgLy8gICAgIGlmICghaXNNaXApIHtcbiAgICAvLyAgICAgICAgIGNvbnNvbGUubG9nKFwiU29sdmluZyB0aGUgbW9kZWwgdXNpbmcgdGhlIHNpbXBsZXggb3B0aW1pemVyXCIpO1xuICAgIC8vICAgICAgICAgdmFyIHNtY3AgPSBuZXcgU01DUCh7cHJlc29sdmU6IEdMUF9PTn0pO1xuICAgIC8vICAgICAgICAgdmFyIGdscGtTdGF0dXMgPSBnbHBfc2ltcGxleChscCwgc21jcCk7XG4gICAgLy8gICAgICAgICAvL3ZhciBzdGF0dXMgPSBnZXRMcFN0YXR1cyhnbHBrU3RhdHVzLCBscCk7XG4gICAgLy8gICAgICAgfSBlbHNlIHtcbiAgICAvLyAgICAgICAgIGNvbnNvbGUubG9nKFwiVGhlIG1vZGVsIGhhcyBpbnRlZ2VyIHZhcmlhYmxlczogc29sdmluZyB0aGUgbW9kZWwgdXNpbmcgdGhlIG1peGVkLWludGVnZXIgb3B0aW1pemVyXCIpO1xuICAgIC8vICAgICAgICAgdmFyIGlvY3AgPSBuZXcgSU9DUCh7cHJlc29sdmU6IEdMUF9PTn0pO1xuICAgIC8vICAgICAgICAgdmFyIGdscGtTdGF0dXMgPSBnbHBfaW50b3B0KGxwLCBpb2NwKTtcbiAgICAvLyAgICAgICAgIC8vdmFyIHN0YXR1cyA9IGdldE1pcFN0YXR1cyhnbHBrU3RhdHVzLCBscCk7XG4gICAgLy8gICAgICAgfVxuXG4gICAgLy8gICAgIGdscF9tcGxfcG9zdHNvbHZlKHdvcmtzcGFjZSwgbHAsIHRoaXMuaXNNaXAobHApID8gR0xQX01JUCA6IEdMUF9TT0wpO1xuXG4gICAgLy8gICAgIGNvbnNvbGUubG9nKCdpc21pcCcsIGlzTWlwKVxuICAgIC8vICAgICBmb3IgKHZhciBjID0gMTsgYyA8PSBnbHBfZ2V0X251bV9jb2xzKGxwKTsgYysrKSB7XG4gICAgLy8gICAgICAgICBjb25zb2xlLmxvZyhnbHBfZ2V0X2NvbF9uYW1lKGxwLCBjKSlcbiAgICAvLyAgICAgICAgIGNvbnNvbGUubG9nKGlzTWlwID8gZ2xwX21pcF9jb2xfdmFsKGxwLCBjKSA6IGdscF9nZXRfY29sX3ByaW0obHAsIGMpKVxuICAgIC8vICAgICB9XG4gICAgLy8gfVxuXG4gICAgYXN5bmMgYXJyYW5nZSgpe1xuXG4gICAgICAgIGxldCBzdGFydFRpbWUgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKVxuXG4gICAgICAgIC8vIGJ1aWxkIG1vZGVsIGZyb20gZ3JhcGhcbiAgICAgICAgbGV0IG1vZGVsID0ge31cblxuICAgICAgICB0aGlzLmZpbGxNb2RlbChtb2RlbClcbiAgICAgICAgbGV0IHByb2IgPSB0aGlzLm1vZGVsVG9TdHJpbmcobW9kZWwpXG5cbiAgICAgICAgLy8gc29sdmVcbiAgICAgICAgbGV0IHJlc3VsdCA9IHt9LCBvYmplY3RpdmUsIGk7XG5cbiAgICAgICAgaWYgKHRoaXMudmVyYm9zZSkgZ2xwX3NldF9wcmludF9mdW5jKGNvbnNvbGUubG9nKTtcblxuICAgICAgICBsZXQgbHAgPSBnbHBfY3JlYXRlX3Byb2IoKTtcbiAgICAgICAgZ2xwX3JlYWRfbHBfZnJvbV9zdHJpbmcobHAsIG51bGwsIHByb2IpO1xuXG4gICAgICAgIGdscF9zY2FsZV9wcm9iKGxwLCBHTFBfU0ZfQVVUTyk7XG4gICAgICAgICAgICBcbiAgICAgICAgbGV0IHNtY3AgPSBuZXcgU01DUCh7cHJlc29sdmU6IEdMUF9PTn0pO1xuICAgICAgICBnbHBfc2ltcGxleChscCwgc21jcCk7XG5cbiAgICAgICAgaWYgKHRoaXMubWlwKXtcbiAgICAgICAgICAgIGdscF9pbnRvcHQobHApO1xuICAgICAgICAgICAgb2JqZWN0aXZlID0gZ2xwX21pcF9vYmpfdmFsKGxwKTtcblxuICAgICAgICAgICAgZm9yKGkgPSAxOyBpIDw9IGdscF9nZXRfbnVtX2NvbHMobHApOyBpKyspe1xuICAgICAgICAgICAgICAgIHJlc3VsdFtnbHBfZ2V0X2NvbF9uYW1lKGxwLCBpKV0gPSBnbHBfbWlwX2NvbF92YWwobHAsIGkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgb2JqZWN0aXZlID0gZ2xwX2dldF9vYmpfdmFsKGxwKTtcbiAgICAgICAgICAgIGZvcihpID0gMTsgaSA8PSBnbHBfZ2V0X251bV9jb2xzKGxwKTsgaSsrKXtcbiAgICAgICAgICAgICAgICByZXN1bHRbZ2xwX2dldF9jb2xfbmFtZShscCwgaSldID0gZ2xwX2dldF9jb2xfcHJpbSAobHAsIGkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5hcHBseV9zb2x1dGlvbihyZXN1bHQpXG5cbiAgICAgICAgdGhpcy5lbGFwc2VkVGltZSA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpIC0gc3RhcnRUaW1lXG4gICAgICAgIFxuICAgIH1cblxuICAgIGZpbGxNb2RlbChtb2RlbCl7XG4gICAgICAgIG1vZGVsLm1pbmltaXplID0gXCJNaW5pbWl6ZSBcXG5cIlxuICAgICAgICBtb2RlbC5zdWJqZWN0VG8gPSBcIlN1YmplY3QgVG8gXFxuXCJcbiAgICAgICAgbW9kZWwuYm91bmRzID0gXCJcXG5Cb3VuZHMgXFxuXCJcbiAgICAgICAgLy9tb2RlbC5ib3VuZHMgPSBcIlwiXG5cbiAgICAgICAgZm9yIChsZXQgZSBvZiB0aGlzLmcuZWRnZXMpe1xuICAgICAgICAgICAgaWYgKHRoaXMuaXNTYW1lUmFua0VkZ2UoZSkpIGNvbnRpbnVlXG5cbiAgICAgICAgICAgIG1vZGVsLm1pbmltaXplICs9IFwiYmVuZF9cIiArIGUubGVmdEF0dHJpYnV0ZS5uYW1lICsgXCJfXCIgKyBlLnJpZ2h0QXR0cmlidXRlLm5hbWUgKyBcIiArIFwiXG5cbiAgICAgICAgICAgIG1vZGVsLnN1YmplY3RUbyArPSBcbiAgICAgICAgICAgICAgICBcInlfXCIgKyBlLmxlZnRBdHRyaWJ1dGUubmFtZSArIFwiIC0gXCIgKyBcbiAgICAgICAgICAgICAgICBcInlfXCIgKyBlLnJpZ2h0QXR0cmlidXRlLm5hbWUgKyBcIiAtIFwiICsgXG4gICAgICAgICAgICAgICAgXCJiZW5kX1wiICsgZS5sZWZ0QXR0cmlidXRlLm5hbWUgKyBcIl9cIiArIGUucmlnaHRBdHRyaWJ1dGUubmFtZSArXG4gICAgICAgICAgICAgICAgXCIgPD0gMFxcblwiXG5cbiAgICAgICAgICAgIG1vZGVsLnN1YmplY3RUbyArPSBcbiAgICAgICAgICAgICAgICBcInlfXCIgKyBlLnJpZ2h0QXR0cmlidXRlLm5hbWUgKyBcIiAtIFwiICsgXG4gICAgICAgICAgICAgICAgXCJ5X1wiICsgZS5sZWZ0QXR0cmlidXRlLm5hbWUgKyBcIiAtIFwiICsgXG4gICAgICAgICAgICAgICAgXCJiZW5kX1wiICsgZS5sZWZ0QXR0cmlidXRlLm5hbWUgKyBcIl9cIiArIGUucmlnaHRBdHRyaWJ1dGUubmFtZSArXG4gICAgICAgICAgICAgICAgXCIgPD0gMFxcblwiXG4gICAgICAgIH1cblxuICAgICAgICBmb3IgKGxldCBpPTA7IGk8dGhpcy5nLnRhYmxlSW5kZXgubGVuZ3RoOyBpKyspe1xuICAgICAgICAgICAgbGV0IHRhYmxlQ29sID0gdGhpcy5nLnRhYmxlSW5kZXhbaV07XG4gICAgICAgICAgICBmb3IgKGxldCBqPTA7IGo8dGFibGVDb2wubGVuZ3RoIC0gMTsgaisrKXtcbiAgICAgICAgICAgICAgICBsZXQgdCA9IHRhYmxlQ29sW2pdO1xuICAgICAgICAgICAgICAgIGxldCB0MiA9IHRhYmxlQ29sW2orMV07XG4gICAgICAgICAgICAgICAgbW9kZWwuc3ViamVjdFRvICs9IFwieV9cIiArIHQyLm5hbWUgKyBcIiAtIHlfXCIgKyB0Lm5hbWUgKyBcIiA+IFwiICsgKDIgKyB0LmF0dHJpYnV0ZXMubGVuZ3RoKSArIFwiXFxuXCJcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGZvciAobGV0IHQgb2YgdGhpcy5nLnRhYmxlcyl7XG4gICAgICAgICAgICBmb3IgKGxldCBpPTA7IGk8dC5hdHRyaWJ1dGVzLmxlbmd0aDsgaSsrKXtcbiAgICAgICAgICAgICAgICBsZXQgYXR0ciA9IHQuYXR0cmlidXRlc1tpXTtcbiAgICAgICAgICAgICAgICBtb2RlbC5zdWJqZWN0VG8gKz0gXCJ5X1wiICsgYXR0ci5uYW1lICsgXCIgLSB5X1wiICsgdC5uYW1lICsgXCIgPSBcIiArIChpICsgMSkgKyBcIlxcblwiXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvL21vZGVsLnN1YmplY3RUbyArPSBcInlfc2VsZWN0ID0gNFxcblwiXG5cbiAgICAgICAgbW9kZWwubWluaW1pemUgPSBtb2RlbC5taW5pbWl6ZS5zdWJzdHJpbmcoMCwgbW9kZWwubWluaW1pemUubGVuZ3RoIC0gMikgKyBcIlxcblxcblwiXG5cbiAgICB9XG5cbiAgICBpc1NhbWVSYW5rRWRnZShlZGdlKXtcbiAgICAgICAgcmV0dXJuIGVkZ2UubGVmdFRhYmxlLmRlcHRoID09IGVkZ2UucmlnaHRUYWJsZS5kZXB0aFxuICAgIH1cblxuICAgIG1vZGVsVG9TdHJpbmcobW9kZWwpe1xuICAgICAgICByZXR1cm4gbW9kZWwubWluaW1pemUgKyBtb2RlbC5zdWJqZWN0VG8gKyBtb2RlbC5ib3VuZHMgKyAnXFxuRW5kXFxuJ1xuICAgIH1cblxuICAgIGFwcGx5X3NvbHV0aW9uKHNvbHV0aW9uKXtcbiAgICAgICAgZm9yIChsZXQgaT0wOyBpPHRoaXMuZy50YWJsZUluZGV4Lmxlbmd0aDsgaSsrKXtcbiAgICAgICAgICAgIGxldCB0YWJsZUNvbCA9IHRoaXMuZy50YWJsZUluZGV4W2ldO1xuICAgICAgICAgICAgZm9yIChsZXQgaj0wOyBqPHRhYmxlQ29sLmxlbmd0aDsgaisrKXtcbiAgICAgICAgICAgICAgICBsZXQgdCA9IHRhYmxlQ29sW2pdO1xuXG4gICAgICAgICAgICAgICAgbGV0IHZhbCA9IHNvbHV0aW9uW1wieV9cIiArIHQubmFtZV1cbiAgICAgICAgICAgICAgICB0LnZlcnRpY2FsQXR0ck9mZnNldCA9IHZhbCAtIHQud2VpZ2h0ICogdGhpcy5nLmJhc2VSb3dEaXN0YW5jZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbn0iLCJjbGFzcyBMUEJlbmRpbmVzc0NvbWJpbmVkIHtcclxuICAgIGNvbnN0cnVjdG9yIChnKSB7XHJcbiAgICAgICAgdGhpcy5nID0gZztcclxuICAgICAgICB0aGlzLm1pcCA9IHRydWU7XHJcbiAgICAgICAgdGhpcy52ZXJib3NlID0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy5lbGFwc2VkVGltZSA9IDBcclxuICAgIH1cclxuXHJcbiAgICBhc3luYyBhcnJhbmdlKCl7XHJcblxyXG4gICAgICAgIGxldCBzdGFydFRpbWUgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKVxyXG5cclxuICAgICAgICAvLyBidWlsZCBtb2RlbCBmcm9tIGdyYXBoXHJcbiAgICAgICAgbGV0IG1vZGVsID0ge31cclxuXHJcbiAgICAgICAgdGhpcy5maWxsTW9kZWwobW9kZWwpXHJcbiAgICAgICAgbGV0IHByb2IgPSB0aGlzLm1vZGVsVG9TdHJpbmcobW9kZWwpXHJcbiAgICAgICAgLy9jb25zb2xlLmxvZyhwcm9iKVxyXG5cclxuICAgICAgICAvLyBzb2x2ZVxyXG4gICAgICAgIGxldCByZXN1bHQgPSB7fSwgb2JqZWN0aXZlLCBpO1xyXG5cclxuICAgICAgICBpZiAodGhpcy52ZXJib3NlKSBnbHBfc2V0X3ByaW50X2Z1bmMoY29uc29sZS5sb2cpO1xyXG5cclxuICAgICAgICBsZXQgbHAgPSBnbHBfY3JlYXRlX3Byb2IoKTtcclxuICAgICAgICBnbHBfcmVhZF9scF9mcm9tX3N0cmluZyhscCwgbnVsbCwgcHJvYik7XHJcblxyXG4gICAgICAgIGdscF9zY2FsZV9wcm9iKGxwLCBHTFBfU0ZfQVVUTyk7XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgIGxldCBzbWNwID0gbmV3IFNNQ1Aoe3ByZXNvbHZlOiBHTFBfT059KTtcclxuICAgICAgICBnbHBfc2ltcGxleChscCwgc21jcCk7XHJcblxyXG4gICAgICAgIGlmICh0aGlzLm1pcCl7XHJcbiAgICAgICAgICAgIGdscF9pbnRvcHQobHApO1xyXG4gICAgICAgICAgICBvYmplY3RpdmUgPSBnbHBfbWlwX29ial92YWwobHApO1xyXG5cclxuICAgICAgICAgICAgZm9yKGkgPSAxOyBpIDw9IGdscF9nZXRfbnVtX2NvbHMobHApOyBpKyspe1xyXG4gICAgICAgICAgICAgICAgcmVzdWx0W2dscF9nZXRfY29sX25hbWUobHAsIGkpXSA9IGdscF9taXBfY29sX3ZhbChscCwgaSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBvYmplY3RpdmUgPSBnbHBfZ2V0X29ial92YWwobHApO1xyXG4gICAgICAgICAgICBmb3IoaSA9IDE7IGkgPD0gZ2xwX2dldF9udW1fY29scyhscCk7IGkrKyl7XHJcbiAgICAgICAgICAgICAgICByZXN1bHRbZ2xwX2dldF9jb2xfbmFtZShscCwgaSldID0gZ2xwX2dldF9jb2xfcHJpbSAobHAsIGkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLmFwcGx5X3NvbHV0aW9uKHJlc3VsdClcclxuXHJcbiAgICAgICAgdGhpcy5lbGFwc2VkVGltZSA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpIC0gc3RhcnRUaW1lXHJcbiAgICAgICAgXHJcbiAgICB9XHJcblxyXG4gICAgZmlsbE1vZGVsKG1vZGVsKXtcclxuICAgICAgICBtb2RlbC5taW5pbWl6ZSA9IFwiTWluaW1pemUgXFxuXCJcclxuICAgICAgICBtb2RlbC5zdWJqZWN0VG8gPSBcIlN1YmplY3QgVG8gXFxuXCJcclxuICAgICAgICBtb2RlbC5ib3VuZHMgPSBcIlxcbkJvdW5kcyBcXG5cIlxyXG5cclxuICAgICAgICBsZXQgZGVmaW5pdGlvbnMgPSB7fVxyXG4gICAgICAgIGxldCBjcm9zc2luZ192YXJzID0ge31cclxuXHJcbiAgICAgICAgbGV0IG1rYyA9ICh1MSwgdjEsIHUyLCB2MikgPT4ge1xyXG4gICAgICAgICAgICBsZXQgcmVzID0gXCJjX1wiICsgdTEgKyB2MSArIFwiX1wiICsgdTIgKyB2MjtcclxuICAgICAgICAgICAgY3Jvc3NpbmdfdmFyc1tyZXNdID0gXCJcIlxyXG4gICAgICAgICAgICByZXR1cm4gcmVzXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBsZXQgbWt4ID0gKHUxLCB1MiwgcHJlPVwiXCIpID0+IHtcclxuICAgICAgICAgICAgbGV0IHJlcyA9IFwieF9cIiArIHByZSArIHUxICsgXCJfXCIgKyBwcmUgKyB1MlxyXG4gICAgICAgICAgICBsZXQgb3Bwb3NpdGVyZXMgPSBcInhfXCIgKyBwcmUgKyB1MiArIFwiX1wiICsgcHJlICsgdTFcclxuICAgICAgICAgICAgbGV0IG9mZnNldCA9IDBcclxuXHJcbiAgICAgICAgICAgIGlmIChkZWZpbml0aW9uc1tvcHBvc2l0ZXJlc10gIT0gdW5kZWZpbmVkKXtcclxuICAgICAgICAgICAgICAgIG9mZnNldCAtPSAxXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gW1wiIC0gXCIgKyBvcHBvc2l0ZXJlcywgb2Zmc2V0XVxyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKGRlZmluaXRpb25zW3Jlc10gPT0gdW5kZWZpbmVkKXtcclxuICAgICAgICAgICAgICAgIC8vZGVmaW5pdGlvbnNbcmVzXSA9ICcnXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIFtcIiArIFwiICsgcmVzLCBvZmZzZXRdXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBsZXQgbWt4QmFzZSA9ICh1MSwgdTIsIHByZT1cIlwiKSA9PiB7XHJcbiAgICAgICAgICAgIHJldHVybiBcInhfXCIgKyBwcmUgKyB1MSArIFwiX1wiICsgcHJlICsgdTJcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIHN0b3JlIGFsbCB2YXJpYWJsZSBuYW1lcyBpbiBvcmRlclxyXG4gICAgICAgIGZvciAobGV0IGs9MDsgayA8IHRoaXMuZy5tYXhEZXB0aCArIDE7IGsrKyl7XHJcbiAgICAgICAgICAgIGxldCBsYXllclRhYmxlcyA9IHRoaXMuZy50YWJsZUluZGV4W2tdO1xyXG4gICAgICAgICAgICBsZXQgbGF5ZXJBdHRyaWJ1dGVzID0gbGF5ZXJUYWJsZXMubWFwKHQgPT4gdC5hdHRyaWJ1dGVzKS5mbGF0KCk7XHJcblxyXG4gICAgICAgICAgICAvLyBzdG9yZSB0YWJsZXNcclxuICAgICAgICAgICAgZm9yIChsZXQgaT0wOyBpPGxheWVyVGFibGVzLmxlbmd0aDsgaSsrKXtcclxuICAgICAgICAgICAgICAgIGxldCB0MSA9IGxheWVyVGFibGVzW2ldLm5hbWU7XHJcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBqPWkrMTsgajxsYXllclRhYmxlcy5sZW5ndGg7IGorKyl7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IHQyID0gbGF5ZXJUYWJsZXNbal0ubmFtZTtcclxuICAgICAgICAgICAgICAgICAgICBkZWZpbml0aW9uc1tta3hCYXNlKHQxLCB0MiwgJ1QnKV0gPSAnJ1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAvLyBzdG9yZSBhdHRyaWJ1dGVzXHJcbiAgICAgICAgICAgIGZvciAobGV0IGk9MDsgaTxsYXllckF0dHJpYnV0ZXMubGVuZ3RoOyBpKyspe1xyXG4gICAgICAgICAgICAgICAgbGV0IGExID0gbGF5ZXJBdHRyaWJ1dGVzW2ldLm5hbWU7XHJcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBqPWkrMTsgajxsYXllckF0dHJpYnV0ZXMubGVuZ3RoOyBqKyspe1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCBhMiA9IGxheWVyQXR0cmlidXRlc1tqXS5uYW1lO1xyXG4gICAgICAgICAgICAgICAgICAgIGRlZmluaXRpb25zW21reEJhc2UoYTEsIGEyKV0gPSAnJ1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBcclxuICAgICAgICBmb3IgKGxldCBrPTA7IGsgPCB0aGlzLmcubWF4RGVwdGggKyAxOyBrKyspe1xyXG4gICAgICAgICAgICBsZXQgbGF5ZXJUYWJsZXMgPSB0aGlzLmcudGFibGVJbmRleFtrXTtcclxuICAgICAgICAgICAgbGV0IGxheWVyQXR0cmlidXRlcyA9IGxheWVyVGFibGVzLm1hcCh0ID0+IHQuYXR0cmlidXRlcykuZmxhdCgpXHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAvLyBnbG9iYWwgb3JkZXJpbmcgb2YgdGFibGVzIFxyXG4gICAgICAgICAgICBmb3IgKGxldCBpPTA7IGk8bGF5ZXJUYWJsZXMubGVuZ3RoOyBpKyspe1xyXG4gICAgICAgICAgICAgICAgbGV0IHQxID0gbGF5ZXJUYWJsZXNbaV0ubmFtZTtcclxuXHJcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBqID0gaSsxOyBqIDwgbGF5ZXJUYWJsZXMubGVuZ3RoOyBqKyspe1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCB0MiA9IGxheWVyVGFibGVzW2pdLm5hbWU7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGZvciAobGV0IG0gPSBqICsgMTsgbSA8IGxheWVyVGFibGVzLmxlbmd0aDsgbSsrKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHQzID0gbGF5ZXJUYWJsZXNbbV0ubmFtZTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1vZGVsLnN1YmplY3RUbyArPSBcIlwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICArIG1reEJhc2UodDEsIHQyLCAnVCcpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICArIFwiICsgXCIgKyBta3hCYXNlKHQyLCB0MywgJ1QnKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKyBcIiAtIFwiICsgbWt4QmFzZSh0MSwgdDMsICdUJylcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICsgXCIgPj0gMFxcblwiXHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBtb2RlbC5zdWJqZWN0VG8gKz0gXCJcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKyBcIi0gXCIgKyBta3hCYXNlKHQxLCB0MiwgJ1QnKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKyBcIiAtIFwiICsgbWt4QmFzZSh0MiwgdDMsICdUJylcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICsgXCIgKyBcIiArIG1reEJhc2UodDEsIHQzLCAnVCcpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICArIFwiID49IC0xXFxuXCJcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8vIGdsb2JhbCBvcmRlcmluZyBvZiBhdHRyaWJ1dGVzXHJcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGF5ZXJBdHRyaWJ1dGVzLmxlbmd0aDsgaSsrKXtcclxuICAgICAgICAgICAgICAgIGxldCB0MSA9IGxheWVyQXR0cmlidXRlc1tpXS5uYW1lO1xyXG4gICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBqID0gaSsxOyBqIDwgbGF5ZXJBdHRyaWJ1dGVzLmxlbmd0aDsgaisrKXtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgdDIgPSBsYXllckF0dHJpYnV0ZXNbal0ubmFtZTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoaSA9PSBqKSBjb250aW51ZTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGxheWVyQXR0cmlidXRlc1tpXS50YWJsZS5uYW1lICE9IGxheWVyQXR0cmlidXRlc1tqXS50YWJsZS5uYW1lKSBjb250aW51ZVxyXG5cclxuICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBtID0gaisxOyBtIDwgbGF5ZXJBdHRyaWJ1dGVzLmxlbmd0aDsgbSsrKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG0gPT0gaiB8fCBtID09IGkpIGNvbnRpbnVlXHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobGF5ZXJBdHRyaWJ1dGVzW21dLnRhYmxlLm5hbWUgIT0gbGF5ZXJBdHRyaWJ1dGVzW2ldLnRhYmxlLm5hbWUpIGNvbnRpbnVlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChsYXllckF0dHJpYnV0ZXNbbV0udGFibGUubmFtZSAhPSBsYXllckF0dHJpYnV0ZXNbal0udGFibGUubmFtZSkgY29udGludWVcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCB0MyA9IGxheWVyQXR0cmlidXRlc1ttXS5uYW1lO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgbW9kZWwuc3ViamVjdFRvICs9IFwiXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICsgbWt4QmFzZSh0MSwgdDIpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICArIFwiICsgXCIgKyBta3hCYXNlKHQyLCB0MylcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICsgXCIgLSBcIiArIG1reEJhc2UodDEsIHQzKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKyBcIiA+PSAwXFxuXCJcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1vZGVsLnN1YmplY3RUbyArPSBcIlwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICArIFwiLSBcIiArIG1reEJhc2UodDEsIHQyKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKyBcIiAtIFwiICsgbWt4QmFzZSh0MiwgdDMpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICArIFwiICsgXCIgKyBta3hCYXNlKHQxLCB0MylcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICsgXCIgPj0gLTFcXG5cIlxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gZGV0ZXJtaW5pbmcgY3Jvc3NpbmdzXHJcbiAgICAgICAgZm9yIChsZXQgaz0wOyBrIDwgdGhpcy5nLm1heERlcHRoICsgMTsgaysrKXtcclxuICAgICAgICAgICAgbGV0IGxheWVyRWRnZXMgPSB0aGlzLmcuZWRnZUluZGV4W2tdXHJcblxyXG4gICAgICAgICAgICBmb3IgKGxldCBpPTA7IGk8bGF5ZXJFZGdlcy5sZW5ndGg7IGkrKyl7XHJcbiAgICAgICAgICAgICAgICBsZXQgdTF2MSA9IGxheWVyRWRnZXNbaV07XHJcblxyXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgaj1pKzE7IGo8bGF5ZXJFZGdlcy5sZW5ndGg7IGorKyl7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IHUydjIgPSBsYXllckVkZ2VzW2pdO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAvLyBuZXc6IG1hbmFnaW5nIGdyb3Vwc1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIGVkZ2VzIHRoYXQgYXJlIG91dHNpZGUgb2YgZ3JvdXBzIHNob3VsZCBuZXZlciBjcm9zcyB3aXRoIGVkZ2VzIHRoYXQgYXJlIGluc2lkZSBvZiBncm91cHNcclxuICAgICAgICAgICAgICAgICAgICBpZiAodTF2MS5sZWZ0VGFibGUuZ3JvdXAgIT0gdW5kZWZpbmVkICYmIHUxdjEucmlnaHRUYWJsZS5ncm91cCAhPSB1bmRlZmluZWQpe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodTJ2Mi5sZWZ0VGFibGUuZ3JvdXAgIT0gdTJ2Mi5sZWZ0VGFibGUuZ3JvdXApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1vZGVsLnN1YmplY3RUbyArPSBta2ModTEsIHYxLCB1MiwgdjIpICsgXCIgPSAwXFxuXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmICghdGhpcy5pc1NhbWVSYW5rRWRnZSh1MXYxKSAmJiAhdGhpcy5pc1NhbWVSYW5rRWRnZSh1MnYyKSl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCB1MSA9IHUxdjEubGVmdEF0dHJpYnV0ZS5uYW1lXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCB2MSA9IHUxdjEucmlnaHRBdHRyaWJ1dGUubmFtZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgdTIgPSB1MnYyLmxlZnRBdHRyaWJ1dGUubmFtZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgdjIgPSB1MnYyLnJpZ2h0QXR0cmlidXRlLm5hbWVcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh1MSA9PSB1MiB8fCB2MSA9PSB2MikgY29udGludWVcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBwMSA9IG1rYyh1MSwgdjEsIHUyLCB2MilcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGZpbmFsc3VtID0gMVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBtb2RlbC5zdWJqZWN0VG8gKz0gcDEgKyBcIlwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBwMiA9IG1reEJhc2UodTIsIHUxKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZGVmaW5pdGlvbnNbcDJdICE9IHVuZGVmaW5lZCl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtb2RlbC5zdWJqZWN0VG8gKz0gXCIgKyBcIiArIHAyXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwMiA9IG1reEJhc2UodTEsIHUyKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZmluYWxzdW0gLT0gMVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbW9kZWwuc3ViamVjdFRvICs9IFwiIC0gXCIgKyBwMlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgcDMgPSBta3hCYXNlKHYxLCB2MilcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGRlZmluaXRpb25zW3AzXSAhPSB1bmRlZmluZWQpe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbW9kZWwuc3ViamVjdFRvICs9IFwiICsgXCIgKyBwM1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcDMgPSBta3hCYXNlKHYyLCB2MSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpbmFsc3VtIC09IDFcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1vZGVsLnN1YmplY3RUbyArPSBcIiAtIFwiICsgcDNcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBtb2RlbC5zdWJqZWN0VG8gKz0gXCIgPj0gXCIgKyBmaW5hbHN1bSArIFwiXFxuXCJcclxuXHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBwMSA9IG1rYyh1MSwgdjEsIHUyLCB2MilcclxuICAgICAgICAgICAgICAgICAgICAgICAgZmluYWxzdW0gPSAxXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1vZGVsLnN1YmplY3RUbyArPSBwMSArIFwiXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgcDIgPSBta3hCYXNlKHUxLCB1MilcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGRlZmluaXRpb25zW3AyXSAhPSB1bmRlZmluZWQpe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbW9kZWwuc3ViamVjdFRvICs9IFwiICsgXCIgKyBwMlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcDIgPSBta3hCYXNlKHUyLCB1MSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpbmFsc3VtIC09IDFcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1vZGVsLnN1YmplY3RUbyArPSBcIiAtIFwiICsgcDJcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICAgICAgcDMgPSBta3hCYXNlKHYyLCB2MSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGRlZmluaXRpb25zW3AzXSAhPSB1bmRlZmluZWQpe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbW9kZWwuc3ViamVjdFRvICs9IFwiICsgXCIgKyBwM1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcDMgPSBta3hCYXNlKHYxLCB2MilcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpbmFsc3VtIC09IDFcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1vZGVsLnN1YmplY3RUbyArPSBcIiAtIFwiICsgcDNcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBtb2RlbC5zdWJqZWN0VG8gKz0gXCIgPj0gXCIgKyBmaW5hbHN1bSArIFwiXFxuXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gaWYgdGhleSBhcmUgYm90aCBzYW1lIHJhbmsgZWRnZXNcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMuaXNTYW1lUmFua0VkZ2UodTF2MSkgJiYgdGhpcy5pc1NhbWVSYW5rRWRnZSh1MnYyKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgdTEgPSB1MXYxLmxlZnRBdHRyaWJ1dGUubmFtZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgdjEgPSB1MXYxLnJpZ2h0QXR0cmlidXRlLm5hbWVcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHUyID0gdTJ2Mi5sZWZ0QXR0cmlidXRlLm5hbWVcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHYyID0gdTJ2Mi5yaWdodEF0dHJpYnV0ZS5uYW1lXHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgcDEgPSBta2ModTEsIHYxLCB1MiwgdjIpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBmaW5hbHN1bSA9IDFcclxuICAgICAgICAgICAgICAgICAgICAgICAgbW9kZWwuc3ViamVjdFRvICs9IHAxICsgXCJcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgcDIgPSBta3hCYXNlKHUxLCB1MilcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGRlZmluaXRpb25zW3AyXSAhPSB1bmRlZmluZWQpe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbW9kZWwuc3ViamVjdFRvICs9IFwiICsgXCIgKyBwMlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcDIgPSBta3hCYXNlKHUyLCB1MSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpbmFsc3VtIC09IDFcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1vZGVsLnN1YmplY3RUbyArPSBcIiAtIFwiICsgcDJcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHAzID0gbWt4QmFzZSh2MSwgdjIpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkZWZpbml0aW9uc1twM10gIT0gdW5kZWZpbmVkKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1vZGVsLnN1YmplY3RUbyArPSBcIiArIFwiICsgcDNcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpbmFsc3VtIC09IDFcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHAzID0gbWt4QmFzZSh2MiwgdjEpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtb2RlbC5zdWJqZWN0VG8gKz0gXCIgLSBcIiArIHAzXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBwNCA9IG1reEJhc2UodTIsIHYxKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZGVmaW5pdGlvbnNbcDRdICE9IHVuZGVmaW5lZCl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtb2RlbC5zdWJqZWN0VG8gKz0gcDRcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpbmFsc3VtIC09IDFcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHA0ID0gbWt4QmFzZSh2MSwgdTIpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtb2RlbC5zdWJqZWN0VG8gKz0gXCIgKyBcIiArIHA0XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgbW9kZWwuc3ViamVjdFRvICs9IFwiID49IFwiICsgZmluYWxzdW0gKyBcIlxcblwiXHJcblxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgcDEgPSBta2ModTEsIHYxLCB1MiwgdjIpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZpbmFsc3VtID0gMVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBtb2RlbC5zdWJqZWN0VG8gKz0gcDEgKyBcIlwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHAyID0gbWt4QmFzZSh1MSwgdTIpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkZWZpbml0aW9uc1twMl0gIT0gdW5kZWZpbmVkKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1vZGVsLnN1YmplY3RUbyArPSBcIiArIFwiICsgcDJcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHAyID0gbWt4QmFzZSh1MiwgdTEpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaW5hbHN1bSAtPSAxXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtb2RlbC5zdWJqZWN0VG8gKz0gXCIgLSBcIiArIHAyXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHAzID0gbWt4QmFzZSh2MSwgdjIpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkZWZpbml0aW9uc1twM10gIT0gdW5kZWZpbmVkKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1vZGVsLnN1YmplY3RUbyArPSBcIiArIFwiICsgcDNcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpbmFsc3VtIC09IDFcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHAzID0gbWt4QmFzZSh2MiwgdjEpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtb2RlbC5zdWJqZWN0VG8gKz0gXCIgLSBcIiArIHAzXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHA0ID0gbWt4QmFzZSh2MiwgdTEpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkZWZpbml0aW9uc1twNF0gIT0gdW5kZWZpbmVkKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1vZGVsLnN1YmplY3RUbyArPSBwNFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZmluYWxzdW0gLT0gMVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcDQgPSBta3hCYXNlKHUxLCB2MilcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1vZGVsLnN1YmplY3RUbyArPSBcIiArIFwiICsgcDRcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBtb2RlbC5zdWJqZWN0VG8gKz0gXCIgPj0gXCIgKyBmaW5hbHN1bSArIFwiXFxuXCJcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICh0aGlzLmlzU2FtZVJhbmtFZGdlKHUxdjEpICYmICF0aGlzLmlzU2FtZVJhbmtFZGdlKHUydjIpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCB1MSA9IHUxdjEubGVmdEF0dHJpYnV0ZS5uYW1lXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCB2MSA9IHUxdjEucmlnaHRBdHRyaWJ1dGUubmFtZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgdTIgPSB1MnYyLmxlZnRBdHRyaWJ1dGUubmFtZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgdjIgPSB1MnYyLnJpZ2h0QXR0cmlidXRlLm5hbWVcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBwMSA9IG1rYyh1MSwgdjEsIHUyLCB2MilcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGZpbmFsc3VtID0gMVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBtb2RlbC5zdWJqZWN0VG8gKz0gcDEgKyBcIlwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBwMiA9IG1reEJhc2UodTIsIHUxKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZGVmaW5pdGlvbnNbcDJdICE9IHVuZGVmaW5lZCl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtb2RlbC5zdWJqZWN0VG8gKz0gXCIgKyBcIiArIHAyXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwMiA9IG1reEJhc2UodTEsIHUyKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZmluYWxzdW0gLT0gMVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbW9kZWwuc3ViamVjdFRvICs9IFwiIC0gXCIgKyBwMlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgcDMgPSBta3hCYXNlKHYxLCB1MilcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGRlZmluaXRpb25zW3AzXSAhPSB1bmRlZmluZWQpe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbW9kZWwuc3ViamVjdFRvICs9IFwiICsgXCIgKyBwM1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZmluYWxzdW0gLT0gMVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcDMgPSBta3hCYXNlKHUyLCB2MSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1vZGVsLnN1YmplY3RUbyArPSBcIiAtIFwiICsgcDNcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBtb2RlbC5zdWJqZWN0VG8gKz0gXCIgPj0gXCIgKyBmaW5hbHN1bSArIFwiXFxuXCJcclxuXHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBwMSA9IG1rYyh1MSwgdjEsIHUyLCB2MilcclxuICAgICAgICAgICAgICAgICAgICAgICAgZmluYWxzdW0gPSAxXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1vZGVsLnN1YmplY3RUbyArPSBwMSArIFwiXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgcDIgPSBta3hCYXNlKHUyLCB2MSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGRlZmluaXRpb25zW3AyXSAhPSB1bmRlZmluZWQpe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbW9kZWwuc3ViamVjdFRvICs9IFwiICsgXCIgKyBwMlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcDIgPSBta3hCYXNlKHYxLCB1MilcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpbmFsc3VtIC09IDFcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1vZGVsLnN1YmplY3RUbyArPSBcIiAtIFwiICsgcDJcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgcDMgPSBta3hCYXNlKHUxLCB1MilcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGRlZmluaXRpb25zW3AzXSAhPSB1bmRlZmluZWQpe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbW9kZWwuc3ViamVjdFRvICs9IFwiICsgXCIgKyBwM1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZmluYWxzdW0gLT0gMVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcDMgPSBta3hCYXNlKHUyLCB1MSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1vZGVsLnN1YmplY3RUbyArPSBcIiAtIFwiICsgcDNcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBtb2RlbC5zdWJqZWN0VG8gKz0gXCIgPj0gXCIgKyBmaW5hbHN1bSArIFwiXFxuXCJcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICghdGhpcy5pc1NhbWVSYW5rRWRnZSh1MXYxKSAmJiB0aGlzLmlzU2FtZVJhbmtFZGdlKHUydjIpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCB1MSA9IHUxdjEubGVmdEF0dHJpYnV0ZS5uYW1lXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCB2MSA9IHUxdjEucmlnaHRBdHRyaWJ1dGUubmFtZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgdTIgPSB1MnYyLmxlZnRBdHRyaWJ1dGUubmFtZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgdjIgPSB1MnYyLnJpZ2h0QXR0cmlidXRlLm5hbWVcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBwMSA9IG1rYyh1MSwgdjEsIHUyLCB2MilcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGZpbmFsc3VtID0gMVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBtb2RlbC5zdWJqZWN0VG8gKz0gcDEgKyBcIlwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBwMiA9IG1reEJhc2UodTEsIHUyKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZGVmaW5pdGlvbnNbcDJdICE9IHVuZGVmaW5lZCl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtb2RlbC5zdWJqZWN0VG8gKz0gXCIgKyBcIiArIHAyXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwMiA9IG1reEJhc2UodTIsIHUxKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZmluYWxzdW0gLT0gMVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbW9kZWwuc3ViamVjdFRvICs9IFwiIC0gXCIgKyBwMlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgcDMgPSBta3hCYXNlKHYyLCB1MSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGRlZmluaXRpb25zW3AzXSAhPSB1bmRlZmluZWQpe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbW9kZWwuc3ViamVjdFRvICs9IFwiICsgXCIgKyBwM1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZmluYWxzdW0gLT0gMVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcDMgPSBta3hCYXNlKHUxLCB2MilcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1vZGVsLnN1YmplY3RUbyArPSBcIiAtIFwiICsgcDNcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBtb2RlbC5zdWJqZWN0VG8gKz0gXCIgPj0gXCIgKyBmaW5hbHN1bSArIFwiXFxuXCJcclxuXHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBwMSA9IG1rYyh1MSwgdjEsIHUyLCB2MilcclxuICAgICAgICAgICAgICAgICAgICAgICAgZmluYWxzdW0gPSAxXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1vZGVsLnN1YmplY3RUbyArPSBwMSArIFwiXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgcDIgPSBta3hCYXNlKHUxLCB2MilcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGRlZmluaXRpb25zW3AyXSAhPSB1bmRlZmluZWQpe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbW9kZWwuc3ViamVjdFRvICs9IFwiICsgXCIgKyBwMlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcDIgPSBta3hCYXNlKHYyLCB1MSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpbmFsc3VtIC09IDFcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1vZGVsLnN1YmplY3RUbyArPSBcIiAtIFwiICsgcDJcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgcDMgPSBta3hCYXNlKHUyLCB1MSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGRlZmluaXRpb25zW3AzXSAhPSB1bmRlZmluZWQpe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbW9kZWwuc3ViamVjdFRvICs9IFwiICsgXCIgKyBwM1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZmluYWxzdW0gLT0gMVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcDMgPSBta3hCYXNlKHUxLCB1MilcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1vZGVsLnN1YmplY3RUbyArPSBcIiAtIFwiICsgcDNcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBtb2RlbC5zdWJqZWN0VG8gKz0gXCIgPj0gXCIgKyBmaW5hbHN1bSArIFwiXFxuXCJcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG5cclxuICAgICAgIC8vIGdyb3VwaW5nIGNvbnN0cmFpbnQgb2YgYXR0cmlidXRlcyB3aXRoaW4gdGFibGVzXHJcbiAgICAgICBmb3IgKGxldCBrPTA7IGs8dGhpcy5nLm1heERlcHRoICsgMTsgaysrKXtcclxuICAgICAgICAgICAgbGV0IGxheWVyVGFibGVzID0gdGhpcy5nLnRhYmxlSW5kZXhba107XHJcbiAgICAgICAgICAgIGxldCBsYXllckF0dHJpYnV0ZXMgPSBsYXllclRhYmxlcy5tYXAodCA9PiB0LmF0dHJpYnV0ZXMpLmZsYXQoKVxyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgZm9yIChsZXQgaT0wOyBpPGxheWVyQXR0cmlidXRlcy5sZW5ndGg7IGkrKyl7XHJcbiAgICAgICAgICAgICAgICBsZXQgYXR0cjEgPSBsYXllckF0dHJpYnV0ZXNbaV0ubmFtZTtcclxuICAgICAgICAgICAgICAgIGxldCB0MSA9IGxheWVyQXR0cmlidXRlc1tpXS50YWJsZS5uYW1lO1xyXG5cclxuICAgICAgICAgICAgICAgIGZvciAobGV0IGo9aSsxOyBqPGxheWVyQXR0cmlidXRlcy5sZW5ndGg7IGorKyl7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IGF0dHIyID0gbGF5ZXJBdHRyaWJ1dGVzW2pdLm5hbWU7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IHQyID0gbGF5ZXJBdHRyaWJ1dGVzW2pdLnRhYmxlLm5hbWVcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHQxICE9IHQyKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gbW9kZWwuc3ViamVjdFRvICs9IFwieF9cIiArIGF0dHIxLm5hbWUgKyBcIl9cIiArIGF0dHIyLm5hbWUgKyBcIiAtIFwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vICAgICArIFwieF9UXCIgKyBhdHRyMS50YWJsZS5uYW1lICsgXCJfVFwiICsgYXR0cjIudGFibGUubmFtZSArIFwiID0gMFxcblwiXHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBtb2RlbC5zdWJqZWN0VG8gKz0gbWt4QmFzZShhdHRyMSwgYXR0cjIpICsgXCJcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKyBcIiAtIFwiICsgbWt4QmFzZSh0MSwgdDIsICdUJykgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICArIFwiID0gMFxcblwiXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyAqKioqKioqKioqKipcclxuICAgICAgICAvLyBiZW5kaW5lc3NcclxuICAgICAgICAvLyAqKioqKioqKioqKipcclxuICAgICAgICBmb3IgKGxldCBlIG9mIHRoaXMuZy5lZGdlcyl7XHJcbiAgICAgICAgICAgIG1vZGVsLnN1YmplY3RUbyArPSBcclxuICAgICAgICAgICAgICAgIFwieV9cIiArIGUubGVmdEF0dHJpYnV0ZS5uYW1lICsgXCIgLSBcIiArIFxyXG4gICAgICAgICAgICAgICAgXCJ5X1wiICsgZS5yaWdodEF0dHJpYnV0ZS5uYW1lICsgXCIgLSBcIiArIFxyXG4gICAgICAgICAgICAgICAgXCJiZW5kX1wiICsgZS5sZWZ0QXR0cmlidXRlLm5hbWUgKyBcIl9cIiArIGUucmlnaHRBdHRyaWJ1dGUubmFtZSArXHJcbiAgICAgICAgICAgICAgICBcIiA8PSAwXFxuXCJcclxuXHJcbiAgICAgICAgICAgIG1vZGVsLnN1YmplY3RUbyArPSBcclxuICAgICAgICAgICAgICAgIFwieV9cIiArIGUucmlnaHRBdHRyaWJ1dGUubmFtZSArIFwiIC0gXCIgKyBcclxuICAgICAgICAgICAgICAgIFwieV9cIiArIGUubGVmdEF0dHJpYnV0ZS5uYW1lICsgXCIgLSBcIiArIFxyXG4gICAgICAgICAgICAgICAgXCJiZW5kX1wiICsgZS5sZWZ0QXR0cmlidXRlLm5hbWUgKyBcIl9cIiArIGUucmlnaHRBdHRyaWJ1dGUubmFtZSArXHJcbiAgICAgICAgICAgICAgICBcIiA8PSAwXFxuXCJcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIGZvciAobGV0IGkgaW4gdGhpcy5nLnRhYmxlSW5kZXgpe1xyXG4gICAgICAgIC8vICAgICBsZXQgdGFibGVDb2wgPSB0aGlzLmcudGFibGVJbmRleFtpXTtcclxuICAgICAgICAvLyAgICAgZm9yIChsZXQgaiBpbiB0YWJsZUNvbCl7XHJcbiAgICAgICAgLy8gICAgICAgICBsZXQgdDEgPSB0YWJsZUNvbFtqXTtcclxuICAgICAgICAvLyAgICAgICAgIGxldCB0bXBzdHIgPSBcInlfXCIgKyB0MS5uYW1lIFxyXG4gICAgICAgIC8vICAgICAgICAgbGV0IGFjY3VtdWxhdG9yID0gMFxyXG4gICAgICAgIC8vICAgICAgICAgZm9yIChsZXQgayBpbiB0YWJsZUNvbCl7XHJcbiAgICAgICAgLy8gICAgICAgICAgICAgaWYgKGogPT0gaykgY29udGludWU7XHJcbiAgICAgICAgLy8gICAgICAgICAgICAgbGV0IHQyID0gdGFibGVDb2xba107XHJcbiAgICAgICAgLy8gICAgICAgICAgICAgbGV0IHAgPSBta3hCYXNlKHQyLm5hbWUsIHQxLm5hbWUsICdUJylcclxuICAgICAgICAvLyAgICAgICAgICAgICBpZiAoZGVmaW5pdGlvbnNbcF0gIT0gdW5kZWZpbmVkKXtcclxuICAgICAgICAvLyAgICAgICAgICAgICAgICAgLy9jb25zb2xlLmxvZyhwKVxyXG4gICAgICAgIC8vICAgICAgICAgICAgICAgICB0bXBzdHIgKz0gXCIgLSBcIiArICh0Mi5hdHRyaWJ1dGVzLmxlbmd0aCArIDIpICsgXCIgXCIgKyBwIFxyXG4gICAgICAgIC8vICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgLy8gICAgICAgICAgICAgICAgIHAgPSBta3hCYXNlKHQxLm5hbWUsIHQyLm5hbWUsICdUJylcclxuICAgICAgICAvLyAgICAgICAgICAgICAgICAgdG1wc3RyICs9IFwiICsgXCIgKyAodDIuYXR0cmlidXRlcy5sZW5ndGggKyAyKSArIFwiIFwiICsgcFxyXG4gICAgICAgIC8vICAgICAgICAgICAgICAgICBhY2N1bXVsYXRvciArPSAodDIuYXR0cmlidXRlcy5sZW5ndGggKyAyKVxyXG4gICAgICAgIC8vICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgLy8gICAgICAgICB9XHJcbiAgICAgICAgLy8gICAgICAgICB0bXBzdHIgKz0gXCIgPj0gXCIgKyBhY2N1bXVsYXRvciArIFwiXFxuXCJcclxuICAgICAgICAvLyAgICAgICAgIG1vZGVsLnN1YmplY3RUbyArPSB0bXBzdHJcclxuICAgICAgICAvLyAgICAgfVxyXG4gICAgICAgIC8vIH1cclxuICAgICAgICBsZXQgbSA9IDIwO1xyXG4gICAgICAgIC8vIGxldCBiY291bnQgPSAwO1xyXG4gICAgICAgIC8vIGZvciAobGV0IHRhYmxlQ29sIG9mIHRoaXMuZy50YWJsZUluZGV4KXtcclxuICAgICAgICAvLyAgICAgZm9yIChsZXQgaSBpbiB0YWJsZUNvbCl7XHJcbiAgICAgICAgLy8gICAgICAgICBpZiAodGFibGVDb2wubGVuZ3RoID09IDEpIGNvbnRpbnVlXHJcbiAgICAgICAgLy8gICAgICAgICBsZXQgcCA9IFwiXCJcclxuICAgICAgICAvLyAgICAgICAgIGxldCB0MSA9IHRhYmxlQ29sW2ldO1xyXG4gICAgICAgIC8vICAgICAgICAgZm9yIChsZXQgaiBpbiB0YWJsZUNvbCl7XHJcbiAgICAgICAgLy8gICAgICAgICAgICAgaWYgKGogPT0gaSkgY29udGludWU7XHJcbiAgICAgICAgLy8gICAgICAgICAgICAgbGV0IHQyID0gdGFibGVDb2xbal07XHJcbiAgICAgICAgLy8gICAgICAgICAgICAgbGV0IHRtcHN0ciA9IFwiXCJcclxuICAgICAgICAvLyAgICAgICAgICAgICBsZXQgYWNjdW11bGF0b3IgPSAyXHJcbiAgICAgICAgLy8gICAgICAgICAgICAgdG1wc3RyICs9IFwieV9cIiArIHQxLm5hbWUgKyBcIiAtIHlfXCIgKyB0Mi5uYW1lICsgXCIgKyBcIiArIG0gKyBcIiBiX1wiICsgYmNvdW50XHJcbiAgICAgICAgLy8gICAgICAgICAgICAgbW9kZWwuc3ViamVjdFRvICs9IHRtcHN0ciArIFwiID49IFwiICsgKGFjY3VtdWxhdG9yKSArIFwiXFxuXCJcclxuXHJcbiAgICAgICAgLy8gICAgICAgICAgICAgdG1wc3RyID0gXCJcIlxyXG4gICAgICAgIC8vICAgICAgICAgICAgIHRtcHN0ciArPSBcInlfXCIgKyB0MS5uYW1lICsgXCIgLSB5X1wiICsgdDIubmFtZSArIFwiICsgXCIgKyBtICsgXCIgYl9cIiArIGJjb3VudFxyXG4gICAgICAgIC8vICAgICAgICAgICAgIG1vZGVsLnN1YmplY3RUbyArPSB0bXBzdHIgKyBcIiA8PSBcIiArIChtIC0gMikgKyBcIlxcblwiXHJcbiAgICAgICAgLy8gICAgICAgICAgICAgZGVmaW5pdGlvbnNbXCJiX1wiICsgYmNvdW50XSA9IFtdXHJcbiAgICAgICAgLy8gICAgICAgICAgICAgYmNvdW50ICs9IDEgXHJcbiAgICAgICAgLy8gICAgICAgICB9XHJcbiAgICAgICAgLy8gICAgIH1cclxuICAgICAgICAvLyB9XHJcblxyXG4gICAgICAgIGxldCB6Y291bnQgPSAwO1xyXG4gICAgICAgIGZvciAobGV0IHRhYmxlQ29sIG9mIHRoaXMuZy50YWJsZUluZGV4KXtcclxuICAgICAgICAgICAgZm9yIChsZXQgaSBpbiB0YWJsZUNvbCl7XHJcbiAgICAgICAgICAgICAgICBsZXQgdDEgPSB0YWJsZUNvbFtpXTtcclxuICAgICAgICAgICAgICAgIGZvciAobGV0IGogaW4gdGFibGVDb2wpe1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChpID09IGopIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCB0MiA9IHRhYmxlQ29sW2pdO1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCBwID0gbWt4QmFzZSh0Mi5uYW1lLCB0MS5uYW1lLCAnVCcpXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGRlZmluaXRpb25zW3BdICE9IHVuZGVmaW5lZCl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1vZGVsLnN1YmplY3RUbyArPSBcInpfXCIgKyB6Y291bnQgKyBcIiAtIFwiICsgbSArIFwiIFwiICsgcCArIFwiIDw9IDBcXG5cIiBcclxuICAgICAgICAgICAgICAgICAgICAgICAgbW9kZWwuc3ViamVjdFRvICs9IFwiel9cIiArIHpjb3VudCArIFwiIC0gXCIgKyBcInlfXCIgKyB0Mi5uYW1lICsgXCIgPD0gMFxcblwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1vZGVsLnN1YmplY3RUbyArPSBcInpfXCIgKyB6Y291bnQgKyBcIiAtIFwiICsgXCJ5X1wiICsgdDIubmFtZSArIFwiIC0gXCIgKyBtICsgXCIgXCIgKyBwICsgXCIgPj0gLSBcIiArIG0gKyBcIlxcblwiICBcclxuICAgICAgICAgICAgICAgICAgICAgICAgbW9kZWwuc3ViamVjdFRvICs9IFwiel9cIiArIHpjb3VudCArIFwiID49IDBcXG5cIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBtb2RlbC5zdWJqZWN0VG8gKz0gXCJ5X1wiICsgdDEubmFtZSArIFwiIC0gXCIgKyBcInpfXCIgKyB6Y291bnQgKyBcIiAtIFwiICsgKDIgKyB0Mi5hdHRyaWJ1dGVzLmxlbmd0aCkgKyBcIiBcIiArIHAgKyBcIiA+PSAwXFxuXCJcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBwID0gbWt4QmFzZSh0MS5uYW1lLCB0Mi5uYW1lLCAnVCcpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1vZGVsLnN1YmplY3RUbyArPSBcInpfXCIgKyB6Y291bnQgKyBcIiArIFwiICsgbSArIFwiIFwiICsgcCArIFwiIDw9IFwiICsgbSArIFwiXFxuXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgbW9kZWwuc3ViamVjdFRvICs9IFwiel9cIiArIHpjb3VudCArIFwiIC0gXCIgKyBcInlfXCIgKyB0Mi5uYW1lICsgXCIgPD0gMFxcblwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1vZGVsLnN1YmplY3RUbyArPSBcInpfXCIgKyB6Y291bnQgKyBcIiAtIFwiICsgXCJ5X1wiICsgdDIubmFtZSArIFwiICsgXCIgKyBtICsgXCIgXCIgKyBwICsgXCIgPj0gMFxcblwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1vZGVsLnN1YmplY3RUbyArPSBcInpfXCIgKyB6Y291bnQgKyBcIiA+PSAwXFxuXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgbW9kZWwuc3ViamVjdFRvICs9IFwieV9cIiArIHQxLm5hbWUgKyBcIiAtIFwiICsgXCJ6X1wiICsgemNvdW50ICsgXCIgKyBcIiArICgyICsgdDIuYXR0cmlidXRlcy5sZW5ndGgpICsgXCIgXCIgKyBwICsgXCIgPj0gXCIgKyAoMiArIHQyLmF0dHJpYnV0ZXMubGVuZ3RoKSArIFwiXFxuXCJcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgemNvdW50ICs9IDFcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZm9yIChsZXQgdCBvZiB0aGlzLmcudGFibGVzKXtcclxuICAgICAgICAgICAgZm9yIChsZXQgaSBpbiB0LmF0dHJpYnV0ZXMpe1xyXG4gICAgICAgICAgICAgICAgbGV0IGExID0gdC5hdHRyaWJ1dGVzW2ldXHJcbiAgICAgICAgICAgICAgICBsZXQgYWNjdW11bGF0b3IgPSAxXHJcbiAgICAgICAgICAgICAgICBsZXQgdG1wc3RyID0gXCJ5X1wiICsgYTEubmFtZSArIFwiIC0gXCIgKyBcInlfXCIgKyB0Lm5hbWVcclxuICAgICAgICAgICAgICAgIGZvciAobGV0IGogaW4gdC5hdHRyaWJ1dGVzKXtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoaSA9PSBqKSBjb250aW51ZVxyXG4gICAgICAgICAgICAgICAgICAgIGxldCBhMiA9IHQuYXR0cmlidXRlc1tqXVxyXG4gICAgICAgICAgICAgICAgICAgIGxldCBwID0gbWt4QmFzZShhMi5uYW1lLCBhMS5uYW1lKVxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChkZWZpbml0aW9uc1twXSAhPSB1bmRlZmluZWQpe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0bXBzdHIgKz0gXCIgLSBcIiArIHBcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgcCA9IG1reEJhc2UoYTEubmFtZSwgYTIubmFtZSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgdG1wc3RyICs9IFwiICsgXCIgKyBwXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGFjY3VtdWxhdG9yICs9IDFcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgdG1wc3RyICs9IFwiID0gXCIgKyBhY2N1bXVsYXRvciArIFwiXFxuXCJcclxuICAgICAgICAgICAgICAgIG1vZGVsLnN1YmplY3RUbyArPSB0bXBzdHJcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gZmlsbCBmdW5jdGlvbiB0byBtaW5pbWl6ZVxyXG4gICAgICAgIGZvciAobGV0IGVsZW0gaW4gY3Jvc3NpbmdfdmFycyl7XHJcbiAgICAgICAgICAgIG1vZGVsLm1pbmltaXplICs9IGVsZW0gKyBcIiArIFwiXHJcbiAgICAgICAgfVxyXG4gICAgICAgIGZvciAobGV0IGUgb2YgdGhpcy5nLmVkZ2VzKXtcclxuICAgICAgICAgICAgbW9kZWwubWluaW1pemUgKz0gXCIwLjEgYmVuZF9cIiArIGUubGVmdEF0dHJpYnV0ZS5uYW1lICsgXCJfXCIgKyBlLnJpZ2h0QXR0cmlidXRlLm5hbWUgKyBcIiArIFwiXHJcbiAgICAgICAgfVxyXG4gICAgICAgIG1vZGVsLm1pbmltaXplID0gbW9kZWwubWluaW1pemUuc3Vic3RyaW5nKDAsIG1vZGVsLm1pbmltaXplLmxlbmd0aCAtIDIpICsgXCJcXG5cXG5cIlxyXG5cclxuICAgICAgICBmb3IgKGxldCBlbGVtIGluIGRlZmluaXRpb25zKXtcclxuICAgICAgICAgICAgbW9kZWwuYm91bmRzICs9IFwiYmluYXJ5IFwiICsgZWxlbSArIFwiXFxuXCJcclxuICAgICAgICB9XHJcblxyXG4gICAgfVxyXG5cclxuICAgIGlzU2FtZVJhbmtFZGdlKGVkZ2Upe1xyXG4gICAgICAgIHJldHVybiBlZGdlLmxlZnRUYWJsZS5kZXB0aCA9PSBlZGdlLnJpZ2h0VGFibGUuZGVwdGhcclxuICAgIH1cclxuXHJcbiAgICBtb2RlbFRvU3RyaW5nKG1vZGVsKXtcclxuICAgICAgICByZXR1cm4gbW9kZWwubWluaW1pemUgKyBtb2RlbC5zdWJqZWN0VG8gKyBtb2RlbC5ib3VuZHMgKyAnXFxuRW5kXFxuJ1xyXG4gICAgfVxyXG5cclxuICAgIGFwcGx5X3NvbHV0aW9uKHNvbHV0aW9uKXtcclxuICAgICAgICBjb25zb2xlLmxvZyhzb2x1dGlvbilcclxuICAgICAgICBmb3IgKGxldCBpPTA7IGk8dGhpcy5nLm1heERlcHRoICsgMTsgaSsrKXtcclxuICAgICAgICAgICAgbGV0IGxheWVyVGFibGVzID0gdGhpcy5nLnRhYmxlSW5kZXhbaV07XHJcblxyXG4gICAgICAgICAgICBsYXllclRhYmxlcy5zb3J0KChhLCBiKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAvL2NvbnNvbGUubG9nKGEubmFtZSwgYi5uYW1lLCBzb2x1dGlvbltcInhfVFwiICsgYS5uYW1lICsgXCJfVFwiICsgYi5uYW1lXSwgc29sdXRpb25bXCJ4X1RcIiArIGIubmFtZSArIFwiX1RcIiArIGEubmFtZV0pXHJcbiAgICAgICAgICAgICAgICBpZiAoc29sdXRpb25bXCJ4X1RcIiArIGEubmFtZSArIFwiX1RcIiArIGIubmFtZV0gPT0gMCkgcmV0dXJuIDFcclxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKHNvbHV0aW9uW1wieF9UXCIgKyBhLm5hbWUgKyBcIl9UXCIgKyBiLm5hbWVdID09IDEpIHJldHVybiAtMVxyXG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoc29sdXRpb25bXCJ4X1RcIiArIGIubmFtZSArIFwiX1RcIiArIGEubmFtZV0gPT0gMSkgcmV0dXJuIDFcclxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKHNvbHV0aW9uW1wieF9UXCIgKyBiLm5hbWUgKyBcIl9UXCIgKyBhLm5hbWVdID09IDApIHJldHVybiAtMVxyXG4gICAgICAgICAgICB9KVxyXG5cclxuICAgICAgICAgICAgZm9yIChsZXQgayBpbiBsYXllclRhYmxlcyl7XHJcbiAgICAgICAgICAgICAgICBsYXllclRhYmxlc1trXS53ZWlnaHQgPSBrO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBmb3IgKGxldCB0YWJsZSBvZiBsYXllclRhYmxlcyl7XHJcbiAgICAgICAgICAgICAgICB0YWJsZS5hdHRyaWJ1dGVzLnNvcnQoKGEsIGIpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAvL2lmIChiLnRhYmxlLm5hbWUgPT0gXCJUOHk0XCIpIGNvbnNvbGUubG9nKGEubmFtZSwgYi5uYW1lLCBzb2x1dGlvbltcInhfXCIgKyBiLm5hbWUgKyBcIl9cIiArIGEubmFtZV0pXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHNvbHV0aW9uW1wieF9cIiArIGEubmFtZSArIFwiX1wiICsgYi5uYW1lXSA9PSAwKSByZXR1cm4gMVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKHNvbHV0aW9uW1wieF9cIiArIGEubmFtZSArIFwiX1wiICsgYi5uYW1lXSA9PSAxKSByZXR1cm4gLTFcclxuICAgICAgICAgICAgICAgICAgICBlbHNlIGlmIChzb2x1dGlvbltcInhfXCIgKyBiLm5hbWUgKyBcIl9cIiArIGEubmFtZV0gPT0gMSkgcmV0dXJuIDFcclxuICAgICAgICAgICAgICAgICAgICBlbHNlIGlmIChzb2x1dGlvbltcInhfXCIgKyBiLm5hbWUgKyBcIl9cIiArIGEubmFtZV0gPT0gMCkgcmV0dXJuIC0xXHJcbiAgICAgICAgICAgICAgICB9KVxyXG5cclxuICAgICAgICAgICAgICAgIGZvciAobGV0IGo9MDsgajx0YWJsZS5hdHRyaWJ1dGVzLmxlbmd0aDsgaisrKXtcclxuICAgICAgICAgICAgICAgICAgICB0YWJsZS5hdHRyaWJ1dGVzW2pdLndlaWdodCA9IGo7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vICoqKioqKioqKipcclxuICAgICAgICAvLyBiZW5kaW5lc3NcclxuICAgICAgICAvLyAqKioqKioqKioqXHJcbiAgICAgICAgZm9yIChsZXQgaT0wOyBpPHRoaXMuZy50YWJsZUluZGV4Lmxlbmd0aDsgaSsrKXtcclxuICAgICAgICAgICAgbGV0IHRhYmxlQ29sID0gdGhpcy5nLnRhYmxlSW5kZXhbaV07XHJcbiAgICAgICAgICAgIGZvciAobGV0IGo9MDsgajx0YWJsZUNvbC5sZW5ndGg7IGorKyl7XHJcbiAgICAgICAgICAgICAgICBsZXQgdCA9IHRhYmxlQ29sW2pdO1xyXG5cclxuICAgICAgICAgICAgICAgIGxldCB2YWwgPSBzb2x1dGlvbltcInlfXCIgKyB0Lm5hbWVdXHJcbiAgICAgICAgICAgICAgICBpZiAodmFsID09IHVuZGVmaW5lZCkgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICB0LnZlcnRpY2FsQXR0ck9mZnNldCA9IHZhbCAtIHQud2VpZ2h0ICogdGhpcy5nLmJhc2VSb3dEaXN0YW5jZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxufSIsImNsYXNzIExQQmVuZGluZXNzQ29tYmluZWRQbHVzR3JvdXBzIHtcclxuICAgIGNvbnN0cnVjdG9yIChnKSB7XHJcbiAgICAgICAgdGhpcy5nID0gZztcclxuICAgICAgICB0aGlzLm1pcCA9IHRydWU7XHJcbiAgICAgICAgdGhpcy52ZXJib3NlID0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy5lbGFwc2VkVGltZSA9IDBcclxuICAgIH1cclxuXHJcbiAgICBhc3luYyBhcnJhbmdlKCl7XHJcblxyXG4gICAgICAgIGxldCBzdGFydFRpbWUgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKVxyXG5cclxuICAgICAgICAvLyBidWlsZCBtb2RlbCBmcm9tIGdyYXBoXHJcbiAgICAgICAgbGV0IG1vZGVsID0ge31cclxuXHJcbiAgICAgICAgdGhpcy5maWxsTW9kZWwobW9kZWwpXHJcbiAgICAgICAgbGV0IHByb2IgPSB0aGlzLm1vZGVsVG9TdHJpbmcobW9kZWwpXHJcbiAgICAgICAgLy9jb25zb2xlLmxvZyhwcm9iKVxyXG5cclxuICAgICAgICAvLyBzb2x2ZVxyXG4gICAgICAgIGxldCByZXN1bHQgPSB7fSwgb2JqZWN0aXZlLCBpO1xyXG5cclxuICAgICAgICBpZiAodGhpcy52ZXJib3NlKSBnbHBfc2V0X3ByaW50X2Z1bmMoY29uc29sZS5sb2cpO1xyXG5cclxuICAgICAgICBsZXQgbHAgPSBnbHBfY3JlYXRlX3Byb2IoKTtcclxuICAgICAgICBnbHBfcmVhZF9scF9mcm9tX3N0cmluZyhscCwgbnVsbCwgcHJvYik7XHJcblxyXG4gICAgICAgIGdscF9zY2FsZV9wcm9iKGxwLCBHTFBfU0ZfQVVUTyk7XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgIGxldCBzbWNwID0gbmV3IFNNQ1Aoe3ByZXNvbHZlOiBHTFBfT059KTtcclxuICAgICAgICBnbHBfc2ltcGxleChscCwgc21jcCk7XHJcblxyXG4gICAgICAgIGlmICh0aGlzLm1pcCl7XHJcbiAgICAgICAgICAgIGdscF9pbnRvcHQobHApO1xyXG4gICAgICAgICAgICBvYmplY3RpdmUgPSBnbHBfbWlwX29ial92YWwobHApO1xyXG5cclxuICAgICAgICAgICAgZm9yKGkgPSAxOyBpIDw9IGdscF9nZXRfbnVtX2NvbHMobHApOyBpKyspe1xyXG4gICAgICAgICAgICAgICAgcmVzdWx0W2dscF9nZXRfY29sX25hbWUobHAsIGkpXSA9IGdscF9taXBfY29sX3ZhbChscCwgaSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBvYmplY3RpdmUgPSBnbHBfZ2V0X29ial92YWwobHApO1xyXG4gICAgICAgICAgICBmb3IoaSA9IDE7IGkgPD0gZ2xwX2dldF9udW1fY29scyhscCk7IGkrKyl7XHJcbiAgICAgICAgICAgICAgICByZXN1bHRbZ2xwX2dldF9jb2xfbmFtZShscCwgaSldID0gZ2xwX2dldF9jb2xfcHJpbSAobHAsIGkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLmFwcGx5X3NvbHV0aW9uKHJlc3VsdClcclxuXHJcbiAgICAgICAgdGhpcy5lbGFwc2VkVGltZSA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpIC0gc3RhcnRUaW1lXHJcbiAgICAgICAgXHJcbiAgICB9XHJcblxyXG4gICAgZmlsbE1vZGVsKG1vZGVsKXtcclxuXHJcbiAgICAgICAgbGV0IG0gPSA0MDsgLy8gVE9ETzogY2hhbmdlIHRoaXNcclxuICAgICAgICBsZXQgemNvdW50ID0gMDtcclxuICAgICAgICBsZXQgYnVmZmVyID0gMjtcclxuXHJcbiAgICAgICAgbW9kZWwubWluaW1pemUgPSBcIk1pbmltaXplIFxcblwiXHJcbiAgICAgICAgbW9kZWwuc3ViamVjdFRvID0gXCJTdWJqZWN0IFRvIFxcblwiXHJcbiAgICAgICAgbW9kZWwuYm91bmRzID0gXCJcXG5Cb3VuZHMgXFxuXCJcclxuXHJcbiAgICAgICAgbGV0IGRlZmluaXRpb25zID0ge31cclxuICAgICAgICBsZXQgY3Jvc3NpbmdfdmFycyA9IHt9XHJcblxyXG4gICAgICAgIGxldCBta2MgPSAodTEsIHYxLCB1MiwgdjIpID0+IHtcclxuICAgICAgICAgICAgbGV0IHJlcyA9IFwiY19cIiArIHUxICsgdjEgKyBcIl9cIiArIHUyICsgdjI7XHJcbiAgICAgICAgICAgIGNyb3NzaW5nX3ZhcnNbcmVzXSA9IFwiXCJcclxuICAgICAgICAgICAgcmV0dXJuIHJlc1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgbGV0IG1reEJhc2UgPSAodTEsIHUyLCBwcmU9XCJcIikgPT4ge1xyXG4gICAgICAgICAgICByZXR1cm4gXCJ4X1wiICsgcHJlICsgdTEgKyBcIl9cIiArIHByZSArIHUyXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBzdG9yZSBhbGwgdmFyaWFibGUgbmFtZXMgaW4gb3JkZXJcclxuICAgICAgICBmb3IgKGxldCBrPTA7IGsgPCB0aGlzLmcubWF4RGVwdGggKyAxOyBrKyspe1xyXG4gICAgICAgICAgICBsZXQgbGF5ZXJUYWJsZXMgPSB0aGlzLmcudGFibGVJbmRleFtrXTtcclxuICAgICAgICAgICAgbGV0IGxheWVyQXR0cmlidXRlcyA9IGxheWVyVGFibGVzLm1hcCh0ID0+IHQuYXR0cmlidXRlcykuZmxhdCgpO1xyXG5cclxuICAgICAgICAgICAgLy8gc3RvcmUgdGFibGVzXHJcbiAgICAgICAgICAgIGZvciAobGV0IGk9MDsgaTxsYXllclRhYmxlcy5sZW5ndGg7IGkrKyl7XHJcbiAgICAgICAgICAgICAgICBsZXQgdDEgPSBsYXllclRhYmxlc1tpXS5pZDtcclxuICAgICAgICAgICAgICAgIGZvciAobGV0IGo9aSsxOyBqPGxheWVyVGFibGVzLmxlbmd0aDsgaisrKXtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgdDIgPSBsYXllclRhYmxlc1tqXS5pZDtcclxuICAgICAgICAgICAgICAgICAgICBkZWZpbml0aW9uc1tta3hCYXNlKHQxLCB0MiwgJ1QnKV0gPSAnJ1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAvLyBzdG9yZSBhdHRyaWJ1dGVzXHJcbiAgICAgICAgICAgIGZvciAobGV0IGk9MDsgaTxsYXllckF0dHJpYnV0ZXMubGVuZ3RoOyBpKyspe1xyXG4gICAgICAgICAgICAgICAgbGV0IGExID0gbGF5ZXJBdHRyaWJ1dGVzW2ldLmlkO1xyXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgaj1pKzE7IGo8bGF5ZXJBdHRyaWJ1dGVzLmxlbmd0aDsgaisrKXtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgYTIgPSBsYXllckF0dHJpYnV0ZXNbal0uaWQ7XHJcbiAgICAgICAgICAgICAgICAgICAgZGVmaW5pdGlvbnNbbWt4QmFzZShhMSwgYTIpXSA9ICcnXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIGFsbCBncm91cHMgc2hvdWxkIGhhdmUgdGhlIHNhbWUgeV9zdGFydCBhbmQgeV9lbmQgb24gZXZlcnkgZGVwdGhcclxuICAgICAgICBmb3IgKGxldCBncm91cCBvZiB0aGlzLmcuZ3JvdXBzKXtcclxuICAgICAgICAgICAgZm9yIChsZXQgdGFibGUgb2YgZ3JvdXAudGFibGVzKXtcclxuICAgICAgICAgICAgICAgIG1vZGVsLnN1YmplY3RUbyArPSBcInlfZ3JvdXBzdGFydF9cIiArIGdyb3VwLmlkICsgXCIgLSB5X1wiICsgdGFibGUuaWQgKyBcIiA8PSAwXFxuXCI7XHJcbiAgICAgICAgICAgICAgICBtb2RlbC5zdWJqZWN0VG8gKz0gXCJ5X2dyb3VwZW5kX1wiICsgZ3JvdXAuaWQgKyBcIiAtIHlfXCIgKyB0YWJsZS5pZCArIFwiID49IFwiICsgKHRhYmxlLmF0dHJpYnV0ZXMubGVuZ3RoICsgYnVmZmVyKSArIFwiXFxuXCI7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGZvciAobGV0IHRhYmxlIG9mIHRoaXMuZy50YWJsZXMpe1xyXG4gICAgICAgICAgICAgICAgaWYgKGdyb3VwLnRhYmxlcy5pbmRleE9mKHRhYmxlKSA9PSAtMSAmJiBncm91cC50YWJsZXMubWFwKHQgPT4gdC5kZXB0aCkuaW5kZXhPZih0YWJsZS5kZXB0aCkgIT0gLTEpe1xyXG4gICAgICAgICAgICAgICAgICAgIG1vZGVsLnN1YmplY3RUbyArPSBcInlfXCIgKyB0YWJsZS5pZCArIFwiIC0gXCIgKyBtICsgXCIgel9cIiArIHpjb3VudCArIFwiIC0geV9ncm91cHN0YXJ0X1wiICsgZ3JvdXAuaWQgKyBcIiA8PSAtIFwiICsgKHRhYmxlLmF0dHJpYnV0ZXMubGVuZ3RoICsgYnVmZmVyKSArIFwiXFxuXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgbW9kZWwuc3ViamVjdFRvICs9IFwiLSB5X1wiICsgdGFibGUuaWQgKyBcIiArIFwiICsgbSArIFwiIHpfXCIgKyB6Y291bnQgKyBcIiArIHlfZ3JvdXBlbmRfXCIgKyBncm91cC5pZCArIFwiIDw9IFwiICsgbSArIFwiXFxuXCJcclxuICAgICAgICAgICAgICAgICAgICB6Y291bnQgKz0gMTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmb3IgKGxldCBpPTA7IGk8PXpjb3VudDsgaSsrKXtcclxuICAgICAgICAgICAgbW9kZWwuYm91bmRzICs9IFwiYmluYXJ5IHpfXCIgKyBpICsgXCJcXG5cIiBcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGxldCBnZXRGaXJzdExldmVsQ29udGFpbmVyc0luRGVwdGggPSAoZGVwdGgpID0+IHtcclxuICAgICAgICAgICAgbGV0IGxheWVyVGFibGVzID0gdGhpcy5nLnRhYmxlSW5kZXhbZGVwdGhdO1xyXG4gICAgICAgICAgICBsZXQgbGF5ZXJUYWJsZXNPdXRzaWRlR3JvdXBzID0gbGF5ZXJUYWJsZXMuZmlsdGVyKHQgPT4gdC5ncm91cHMubGVuZ3RoID09IDApO1xyXG4gICAgICAgICAgICBsZXQgbGF5ZXJHcm91cHMgPSBbLi4ubmV3IFNldChsYXllclRhYmxlcy5tYXAodCA9PiB0Lmdyb3VwcykuZmxhdCgpKV07XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gbGF5ZXJHcm91cHMuY29uY2F0KGxheWVyVGFibGVzT3V0c2lkZUdyb3Vwcyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBsZXQgZ2V0U2Vjb25kTGV2ZWxDb250YWluZXJzSW5EZXB0aEluQ29udGFpbmVyID0gKGRlcHRoLCBjb250YWluZXIpID0+IHtcclxuXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBsZXQgbWt4RGljdCA9IChzaWduLCB1MSwgdTIpID0+IHtcclxuICAgICAgICAgICAgbGV0IHJlcyA9IFwiXCJcclxuICAgICAgICAgICAgbGV0IGFjY3VtdWxhdG9yID0gMFxyXG4gICAgICAgICAgICBsZXQgb3Bwc2lnbiA9IFwiIC0gXCJcclxuXHJcbiAgICAgICAgICAgIGlmIChzaWduID09IFwiIC0gXCIpIG9wcHNpZ24gPSBcIiArIFwiXHJcblxyXG4gICAgICAgICAgICBsZXQgcCA9IG1reEJhc2UodTEsIHUyKVxyXG4gICAgICAgICAgICBpZiAoZGVmaW5pdGlvbnNbcF0gIT0gdW5kZWZpbmVkKXtcclxuICAgICAgICAgICAgICAgIHJlcyArPSBzaWduICsgcFxyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgcCA9IG1reEJhc2UodTIsIHUxKVxyXG4gICAgICAgICAgICAgICAgaWYgKGRlZmluaXRpb25zW3BdID09IHVuZGVmaW5lZCkgY29uc29sZS53YXJuKHAgKyBcIm5vdCBkZWZpbmVkXCIpO1xyXG4gICAgICAgICAgICAgICAgYWNjdW11bGF0b3IgLT0gMVxyXG4gICAgICAgICAgICAgICAgcmVzICs9IG9wcHNpZ24gKyBwXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHJldHVybiBbcmVzLCBhY2N1bXVsYXRvcl07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIFxyXG4gICAgICAgIGZvciAobGV0IGs9MDsgayA8IHRoaXMuZy5tYXhEZXB0aCArIDE7IGsrKyl7XHJcbiAgICAgICAgICAgIGxldCBsYXllclRhYmxlcyA9IHRoaXMuZy50YWJsZUluZGV4W2tdO1xyXG4gICAgICAgICAgICBsZXQgbGF5ZXJBdHRyaWJ1dGVzID0gbGF5ZXJUYWJsZXMubWFwKHQgPT4gdC5hdHRyaWJ1dGVzKS5mbGF0KClcclxuXHJcbiAgICAgICAgICAgIC8vIGxldCBmaXJzdExldmVsQ29udGFpbmVycyA9IGdldEZpcnN0TGV2ZWxDb250YWluZXJzSW5EZXB0aChrKTtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIC8vIGdsb2JhbCBvcmRlcmluZyBvZiB0YWJsZXMgXHJcbiAgICAgICAgICAgIGZvciAobGV0IGk9MDsgaTxsYXllclRhYmxlcy5sZW5ndGg7IGkrKyl7XHJcbiAgICAgICAgICAgICAgICBsZXQgdDEgPSBsYXllclRhYmxlc1tpXS5pZDtcclxuXHJcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBqID0gaSsxOyBqIDwgbGF5ZXJUYWJsZXMubGVuZ3RoOyBqKyspe1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCB0MiA9IGxheWVyVGFibGVzW2pdLmlkO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBtID0gaiArIDE7IG0gPCBsYXllclRhYmxlcy5sZW5ndGg7IG0rKyl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCB0MyA9IGxheWVyVGFibGVzW21dLmlkO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgbW9kZWwuc3ViamVjdFRvICs9IFwiXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICsgbWt4QmFzZSh0MSwgdDIsICdUJylcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICsgXCIgKyBcIiArIG1reEJhc2UodDIsIHQzLCAnVCcpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICArIFwiIC0gXCIgKyBta3hCYXNlKHQxLCB0MywgJ1QnKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKyBcIiA+PSAwXFxuXCJcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1vZGVsLnN1YmplY3RUbyArPSBcIlwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICArIFwiLSBcIiArIG1reEJhc2UodDEsIHQyLCAnVCcpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICArIFwiIC0gXCIgKyBta3hCYXNlKHQyLCB0MywgJ1QnKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKyBcIiArIFwiICsgbWt4QmFzZSh0MSwgdDMsICdUJylcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICsgXCIgPj0gLTFcXG5cIlxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLy8gZ2xvYmFsIG9yZGVyaW5nIG9mIGF0dHJpYnV0ZXNcclxuICAgICAgICAgICAgLy8gY29uc3RyYWludHMgZ2VuZXJhdGVkOiBPICggbnVtX3RhYmxlcyAqIG51bV9hdHRyaWJ1dGVzX3Blcl90YWJsZVt2YXJpYWJsZV0gKVxyXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxheWVyQXR0cmlidXRlcy5sZW5ndGg7IGkrKyl7XHJcbiAgICAgICAgICAgICAgICBsZXQgdDEgPSBsYXllckF0dHJpYnV0ZXNbaV0uaWQ7XHJcbiAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgIGZvciAobGV0IGogPSBpKzE7IGogPCBsYXllckF0dHJpYnV0ZXMubGVuZ3RoOyBqKyspe1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCB0MiA9IGxheWVyQXR0cmlidXRlc1tqXS5pZDtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoaSA9PSBqKSBjb250aW51ZTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gYXR0cnMgZG9uJ3QgbmVlZCB0cmFuc2l0aXZpdHkgaWYgdGhleSBhcmUgbm90IGluIHRoZSBzYW1lIHRhYmxlIC0gaXQncyBhbHJlYWR5IGdpdmVuIGJ5IHRoZSB0YWJsZVxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChsYXllckF0dHJpYnV0ZXNbaV0udGFibGUuaWQgIT0gbGF5ZXJBdHRyaWJ1dGVzW2pdLnRhYmxlLmlkKSBjb250aW51ZVxyXG5cclxuICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBtID0gaisxOyBtIDwgbGF5ZXJBdHRyaWJ1dGVzLmxlbmd0aDsgbSsrKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG0gPT0gaiB8fCBtID09IGkpIGNvbnRpbnVlXHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBhZ2FpbiwgYWxsIGF0dHJpYnV0ZXMgc2hvdWxkIGJlIGluIHRoZSBzYW1lIHRhYmxlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChsYXllckF0dHJpYnV0ZXNbbV0udGFibGUuaWQgIT0gbGF5ZXJBdHRyaWJ1dGVzW2ldLnRhYmxlLmlkKSBjb250aW51ZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobGF5ZXJBdHRyaWJ1dGVzW21dLnRhYmxlLmlkICE9IGxheWVyQXR0cmlidXRlc1tqXS50YWJsZS5pZCkgY29udGludWVcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCB0MyA9IGxheWVyQXR0cmlidXRlc1ttXS5pZDtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1vZGVsLnN1YmplY3RUbyArPSBcIlwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICArIG1reEJhc2UodDEsIHQyKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKyBcIiArIFwiICsgbWt4QmFzZSh0MiwgdDMpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICArIFwiIC0gXCIgKyBta3hCYXNlKHQxLCB0MylcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICsgXCIgPj0gMFxcblwiXHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBtb2RlbC5zdWJqZWN0VG8gKz0gXCJcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKyBcIi0gXCIgKyBta3hCYXNlKHQxLCB0MilcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICsgXCIgLSBcIiArIG1reEJhc2UodDIsIHQzKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKyBcIiArIFwiICsgbWt4QmFzZSh0MSwgdDMpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICArIFwiID49IC0xXFxuXCJcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIGRldGVybWluaW5nIGNyb3NzaW5nc1xyXG4gICAgICAgIGZvciAobGV0IGs9MDsgayA8IHRoaXMuZy5tYXhEZXB0aCArIDE7IGsrKyl7XHJcbiAgICAgICAgICAgIGxldCBsYXllckVkZ2VzID0gdGhpcy5nLmVkZ2VJbmRleFtrXVxyXG5cclxuICAgICAgICAgICAgZm9yIChsZXQgaT0wOyBpPGxheWVyRWRnZXMubGVuZ3RoOyBpKyspe1xyXG4gICAgICAgICAgICAgICAgbGV0IHUxdjEgPSBsYXllckVkZ2VzW2ldO1xyXG5cclxuICAgICAgICAgICAgICAgIGZvciAobGV0IGo9aSsxOyBqPGxheWVyRWRnZXMubGVuZ3RoOyBqKyspe1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCB1MnYyID0gbGF5ZXJFZGdlc1tqXTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gbmV3OiBtYW5hZ2luZyBncm91cHNcclxuICAgICAgICAgICAgICAgICAgICAvLyBlZGdlcyB0aGF0IGFyZSBvdXRzaWRlIG9mIGdyb3VwcyBzaG91bGQgbmV2ZXIgY3Jvc3Mgd2l0aCBlZGdlcyB0aGF0IGFyZSBpbnNpZGUgb2YgZ3JvdXBzXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gaWYgKHUxdjEubGVmdFRhYmxlLmdyb3VwICE9IHVuZGVmaW5lZCAmJiB1MXYxLnJpZ2h0VGFibGUuZ3JvdXAgIT0gdW5kZWZpbmVkKXtcclxuICAgICAgICAgICAgICAgICAgICAvLyAgICAgaWYgKHUydjIubGVmdFRhYmxlLmdyb3VwICE9IHUydjIubGVmdFRhYmxlLmdyb3VwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gICAgICAgICBtb2RlbC5zdWJqZWN0VG8gKz0gbWtjKHUxLCB2MSwgdTIsIHYyKSArIFwiID0gMFxcblwiO1xyXG4gICAgICAgICAgICAgICAgICAgIC8vICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICBsZXQgdTEgPSB1MXYxLmxlZnRBdHRyaWJ1dGUuaWRcclxuICAgICAgICAgICAgICAgICAgICBsZXQgdjEgPSB1MXYxLnJpZ2h0QXR0cmlidXRlLmlkXHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IHUyID0gdTJ2Mi5sZWZ0QXR0cmlidXRlLmlkXHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IHYyID0gdTJ2Mi5yaWdodEF0dHJpYnV0ZS5pZFxyXG5cclxuICAgICAgICAgICAgICAgICAgICAvLyBub3Qgbm90XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCF0aGlzLmlzU2FtZVJhbmtFZGdlKHUxdjEpICYmICF0aGlzLmlzU2FtZVJhbmtFZGdlKHUydjIpKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHUxID09IHUyIHx8IHYxID09IHYyKSBjb250aW51ZVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHAxID0gbWtjKHUxLCB2MSwgdTIsIHYyKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgZmluYWxzdW0gPSAxICsgbWt4RGljdChcIiArIFwiLCB1MiwgdTEpWzFdICsgbWt4RGljdChcIiArIFwiLCB2MSwgdjIpWzFdXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1vZGVsLnN1YmplY3RUbyArPSBwMSArIFwiXCIgKyBta3hEaWN0KFwiICsgXCIsIHUyLCB1MSlbMF0gKyBta3hEaWN0KFwiICsgXCIsIHYxLCB2MilbMF1cclxuICAgICAgICAgICAgICAgICAgICAgICAgbW9kZWwuc3ViamVjdFRvICs9IFwiID49IFwiICsgZmluYWxzdW0gKyBcIlxcblwiXHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBwMSA9IG1rYyh1MSwgdjEsIHUyLCB2MilcclxuICAgICAgICAgICAgICAgICAgICAgICAgZmluYWxzdW0gPSAxICsgbWt4RGljdChcIiArIFwiLCB1MSwgdTIpWzFdICsgbWt4RGljdChcIiArIFwiLCB2MiwgdjEpWzFdXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1vZGVsLnN1YmplY3RUbyArPSBwMSArIFwiXCIgKyBta3hEaWN0KFwiICsgXCIsIHUxLCB1MilbMF0gKyBta3hEaWN0KFwiICsgXCIsIHYyLCB2MSlbMF1cclxuICAgICAgICAgICAgICAgICAgICAgICAgbW9kZWwuc3ViamVjdFRvICs9IFwiID49IFwiICsgZmluYWxzdW0gKyBcIlxcblwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgIC8vIGlmIHRoZXkgYXJlIGJvdGggc2FtZSByYW5rIGVkZ2VzXHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICh0aGlzLmlzU2FtZVJhbmtFZGdlKHUxdjEpICYmIHRoaXMuaXNTYW1lUmFua0VkZ2UodTJ2MikpIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBwMSA9IG1rYyh1MSwgdjEsIHUyLCB2MilcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGZpbmFsc3VtID0gMSArIG1reERpY3QoXCIgKyBcIiwgdTEsIHUyKVsxXSArIG1reERpY3QoXCIgKyBcIiwgdjEsIHYyKVsxXSArIG1reERpY3QoXCIgKyBcIiwgdTIsIHYxKVsxXVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBtb2RlbC5zdWJqZWN0VG8gKz0gcDEgKyBcIlwiICsgbWt4RGljdChcIiArIFwiLCB1MSwgdTIpWzBdICsgbWt4RGljdChcIiArIFwiLCB2MSwgdjIpWzBdICsgbWt4RGljdChcIiArIFwiLCB1MiwgdjEpWzBdXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1vZGVsLnN1YmplY3RUbyArPSBcIiA+PSBcIiArIGZpbmFsc3VtICsgXCJcXG5cIlxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgcDEgPSBta2ModTEsIHYxLCB1MiwgdjIpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZpbmFsc3VtID0gMSArIG1reERpY3QoXCIgKyBcIiwgdTEsIHUyKVsxXSArIG1reERpY3QoXCIgKyBcIiwgdjEsIHYyKVsxXSArIG1reERpY3QoXCIgKyBcIiwgdjIsIHUxKVsxXVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBtb2RlbC5zdWJqZWN0VG8gKz0gcDEgKyBcIlwiICsgbWt4RGljdChcIiArIFwiLCB1MSwgdTIpWzBdICsgbWt4RGljdChcIiArIFwiLCB2MSwgdjIpWzBdICsgbWt4RGljdChcIiArIFwiLCB2MiwgdTEpWzBdXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1vZGVsLnN1YmplY3RUbyArPSBcIiA+PSBcIiArIGZpbmFsc3VtICsgXCJcXG5cIlxyXG5cclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMuaXNTYW1lUmFua0VkZ2UodTF2MSkgJiYgIXRoaXMuaXNTYW1lUmFua0VkZ2UodTJ2MikpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBwMSA9IG1rYyh1MSwgdjEsIHUyLCB2MilcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGZpbmFsc3VtID0gMSArIG1reERpY3QoXCIgKyBcIiwgdTIsIHUxKVsxXSArIG1reERpY3QoXCIgKyBcIiwgdjEsIHUyKVsxXVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBtb2RlbC5zdWJqZWN0VG8gKz0gcDEgKyBcIlwiICsgbWt4RGljdChcIiArIFwiLCB1MiwgdTEpWzBdICsgbWt4RGljdChcIiArIFwiLCB2MSwgdTIpWzBdXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1vZGVsLnN1YmplY3RUbyArPSBcIiA+PSBcIiArIGZpbmFsc3VtICsgXCJcXG5cIlxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgcDEgPSBta2ModTEsIHYxLCB1MiwgdjIpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZpbmFsc3VtID0gMSArIG1reERpY3QoXCIgKyBcIiwgdTIsIHYxKVsxXSArIG1reERpY3QoXCIgKyBcIiwgdTEsIHUyKVsxXVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBtb2RlbC5zdWJqZWN0VG8gKz0gcDEgKyBcIlwiICsgbWt4RGljdChcIiArIFwiLCB1MiwgdjEpWzBdICsgbWt4RGljdChcIiArIFwiLCB1MSwgdTIpWzBdXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1vZGVsLnN1YmplY3RUbyArPSBcIiA+PSBcIiArIGZpbmFsc3VtICsgXCJcXG5cIlxyXG5cclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKCF0aGlzLmlzU2FtZVJhbmtFZGdlKHUxdjEpICYmIHRoaXMuaXNTYW1lUmFua0VkZ2UodTJ2MikpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gY29uc29sZS5sb2codTEsIHYxLCB1MiwgdjIpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBwMSA9IG1rYyh1MSwgdjEsIHUyLCB2MilcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGZpbmFsc3VtID0gMSArIG1reERpY3QoXCIgKyBcIiwgdTEsIHUyKVsxXSArIG1reERpY3QoXCIgKyBcIiwgdjIsIHUxKVsxXVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBtb2RlbC5zdWJqZWN0VG8gKz0gcDEgKyBcIlwiICsgbWt4RGljdChcIiArIFwiLCB1MSwgdTIpWzBdICsgbWt4RGljdChcIiArIFwiLCB2MiwgdTEpWzBdXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1vZGVsLnN1YmplY3RUbyArPSBcIiA+PSBcIiArIGZpbmFsc3VtICsgXCJcXG5cIlxyXG5cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHAxID0gbWtjKHUxLCB2MSwgdTIsIHYyKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBmaW5hbHN1bSA9IDEgKyBta3hEaWN0KFwiICsgXCIsIHUxLCB2MilbMV0gKyBta3hEaWN0KFwiICsgXCIsIHUyLCB1MSlbMV0gXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1vZGVsLnN1YmplY3RUbyArPSBwMSArIFwiXCIgKyBta3hEaWN0KFwiICsgXCIsIHUxLCB2MilbMF0gKyBta3hEaWN0KFwiICsgXCIsIHUyLCB1MSlbMF1cclxuICAgICAgICAgICAgICAgICAgICAgICAgbW9kZWwuc3ViamVjdFRvICs9IFwiID49IFwiICsgZmluYWxzdW0gKyBcIlxcblwiXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuXHJcbiAgICAgICAvLyBncm91cGluZyBjb25zdHJhaW50IG9mIGF0dHJpYnV0ZXMgd2l0aGluIHRhYmxlc1xyXG4gICAgICAgLy8gdGhpcyBpcyBuZWVkZWQgZm9yIGJlbmRpbmVzc1xyXG4gICAgICAgLy8gVE9ETzogdGhpcyBpcyBub3QgeWV0IGluIHRoZSBwYXBlciwgcmlnaHQ/XHJcbiAgICAgICBmb3IgKGxldCBrPTA7IGs8dGhpcy5nLm1heERlcHRoICsgMTsgaysrKXtcclxuICAgICAgICAgICAgbGV0IGxheWVyVGFibGVzID0gdGhpcy5nLnRhYmxlSW5kZXhba107XHJcbiAgICAgICAgICAgIGxldCBsYXllckF0dHJpYnV0ZXMgPSBsYXllclRhYmxlcy5tYXAodCA9PiB0LmF0dHJpYnV0ZXMpLmZsYXQoKVxyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgZm9yIChsZXQgaT0wOyBpPGxheWVyQXR0cmlidXRlcy5sZW5ndGg7IGkrKyl7XHJcbiAgICAgICAgICAgICAgICBsZXQgYXR0cjEgPSBsYXllckF0dHJpYnV0ZXNbaV0uaWQ7XHJcbiAgICAgICAgICAgICAgICBsZXQgdDEgPSBsYXllckF0dHJpYnV0ZXNbaV0udGFibGUuaWQ7XHJcblxyXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgaj1pKzE7IGo8bGF5ZXJBdHRyaWJ1dGVzLmxlbmd0aDsgaisrKXtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgYXR0cjIgPSBsYXllckF0dHJpYnV0ZXNbal0uaWQ7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IHQyID0gbGF5ZXJBdHRyaWJ1dGVzW2pdLnRhYmxlLmlkXHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0MSAhPSB0Mil7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1vZGVsLnN1YmplY3RUbyArPSBta3hCYXNlKGF0dHIxLCBhdHRyMikgKyBcIlwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICArIFwiIC0gXCIgKyBta3hCYXNlKHQxLCB0MiwgJ1QnKSBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICsgXCIgPSAwXFxuXCJcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vICoqKioqKioqKioqKlxyXG4gICAgICAgIC8vIGJlbmRpbmVzc1xyXG4gICAgICAgIC8vICoqKioqKioqKioqKlxyXG4gICAgICAgIGZvciAobGV0IGUgb2YgdGhpcy5nLmVkZ2VzKXtcclxuICAgICAgICAgICAgbW9kZWwuc3ViamVjdFRvICs9IFxyXG4gICAgICAgICAgICAgICAgXCJ5X1wiICsgZS5sZWZ0QXR0cmlidXRlLmlkICsgXCIgLSBcIiArIFxyXG4gICAgICAgICAgICAgICAgXCJ5X1wiICsgZS5yaWdodEF0dHJpYnV0ZS5pZCArIFwiIC0gXCIgKyBcclxuICAgICAgICAgICAgICAgIFwiYmVuZF9cIiArIGUubGVmdEF0dHJpYnV0ZS5pZCArIFwiX1wiICsgZS5yaWdodEF0dHJpYnV0ZS5pZCArXHJcbiAgICAgICAgICAgICAgICBcIiA8PSAwXFxuXCJcclxuXHJcbiAgICAgICAgICAgIG1vZGVsLnN1YmplY3RUbyArPSBcclxuICAgICAgICAgICAgICAgIFwieV9cIiArIGUucmlnaHRBdHRyaWJ1dGUuaWQgKyBcIiAtIFwiICsgXHJcbiAgICAgICAgICAgICAgICBcInlfXCIgKyBlLmxlZnRBdHRyaWJ1dGUuaWQgKyBcIiAtIFwiICsgXHJcbiAgICAgICAgICAgICAgICBcImJlbmRfXCIgKyBlLmxlZnRBdHRyaWJ1dGUuaWQgKyBcIl9cIiArIGUucmlnaHRBdHRyaWJ1dGUuaWQgK1xyXG4gICAgICAgICAgICAgICAgXCIgPD0gMFxcblwiXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmb3IgKGxldCB0YWJsZUNvbCBvZiB0aGlzLmcudGFibGVJbmRleCl7XHJcbiAgICAgICAgICAgIGZvciAobGV0IGkgaW4gdGFibGVDb2wpe1xyXG4gICAgICAgICAgICAgICAgbGV0IHQxID0gdGFibGVDb2xbaV07XHJcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBqIGluIHRhYmxlQ29sKXtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoaSA9PSBqKSBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgdDIgPSB0YWJsZUNvbFtqXTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IHAgPSBta3hCYXNlKHQyLmlkLCB0MS5pZCwgJ1QnKVxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChkZWZpbml0aW9uc1twXSAhPSB1bmRlZmluZWQpe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBtb2RlbC5zdWJqZWN0VG8gKz0gXCJ6X1wiICsgemNvdW50ICsgXCIgLSBcIiArIG0gKyBcIiBcIiArIHAgKyBcIiA8PSAwXFxuXCIgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1vZGVsLnN1YmplY3RUbyArPSBcInpfXCIgKyB6Y291bnQgKyBcIiAtIFwiICsgXCJ5X1wiICsgdDIuaWQgKyBcIiA8PSAwXFxuXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgbW9kZWwuc3ViamVjdFRvICs9IFwiel9cIiArIHpjb3VudCArIFwiIC0gXCIgKyBcInlfXCIgKyB0Mi5pZCArIFwiIC0gXCIgKyBtICsgXCIgXCIgKyBwICsgXCIgPj0gLSBcIiArIG0gKyBcIlxcblwiICBcclxuICAgICAgICAgICAgICAgICAgICAgICAgbW9kZWwuc3ViamVjdFRvICs9IFwiel9cIiArIHpjb3VudCArIFwiID49IDBcXG5cIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBtb2RlbC5zdWJqZWN0VG8gKz0gXCJ5X1wiICsgdDEuaWQgKyBcIiAtIFwiICsgXCJ6X1wiICsgemNvdW50ICsgXCIgLSBcIiArIChidWZmZXIgKyB0Mi5hdHRyaWJ1dGVzLmxlbmd0aCkgKyBcIiBcIiArIHAgKyBcIiA+PSAwXFxuXCJcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBwID0gbWt4QmFzZSh0MS5pZCwgdDIuaWQsICdUJylcclxuICAgICAgICAgICAgICAgICAgICAgICAgbW9kZWwuc3ViamVjdFRvICs9IFwiel9cIiArIHpjb3VudCArIFwiICsgXCIgKyBtICsgXCIgXCIgKyBwICsgXCIgPD0gXCIgKyBtICsgXCJcXG5cIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBtb2RlbC5zdWJqZWN0VG8gKz0gXCJ6X1wiICsgemNvdW50ICsgXCIgLSBcIiArIFwieV9cIiArIHQyLmlkICsgXCIgPD0gMFxcblwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1vZGVsLnN1YmplY3RUbyArPSBcInpfXCIgKyB6Y291bnQgKyBcIiAtIFwiICsgXCJ5X1wiICsgdDIuaWQgKyBcIiArIFwiICsgbSArIFwiIFwiICsgcCArIFwiID49IDBcXG5cIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBtb2RlbC5zdWJqZWN0VG8gKz0gXCJ6X1wiICsgemNvdW50ICsgXCIgPj0gMFxcblwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1vZGVsLnN1YmplY3RUbyArPSBcInlfXCIgKyB0MS5pZCArIFwiIC0gXCIgKyBcInpfXCIgKyB6Y291bnQgKyBcIiArIFwiICsgKGJ1ZmZlciArIHQyLmF0dHJpYnV0ZXMubGVuZ3RoKSArIFwiIFwiICsgcCArIFwiID49IFwiICsgKGJ1ZmZlciArIHQyLmF0dHJpYnV0ZXMubGVuZ3RoKSArIFwiXFxuXCJcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgemNvdW50ICs9IDFcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZm9yIChsZXQgdCBvZiB0aGlzLmcudGFibGVzKXtcclxuICAgICAgICAgICAgZm9yIChsZXQgaSBpbiB0LmF0dHJpYnV0ZXMpe1xyXG4gICAgICAgICAgICAgICAgbGV0IGExID0gdC5hdHRyaWJ1dGVzW2ldXHJcbiAgICAgICAgICAgICAgICBsZXQgYWNjdW11bGF0b3IgPSAxXHJcbiAgICAgICAgICAgICAgICBsZXQgdG1wc3RyID0gXCJ5X1wiICsgYTEuaWQgKyBcIiAtIFwiICsgXCJ5X1wiICsgdC5pZFxyXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgaiBpbiB0LmF0dHJpYnV0ZXMpe1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChpID09IGopIGNvbnRpbnVlXHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IGEyID0gdC5hdHRyaWJ1dGVzW2pdXHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IHAgPSBta3hCYXNlKGEyLmlkLCBhMS5pZClcclxuICAgICAgICAgICAgICAgICAgICBpZiAoZGVmaW5pdGlvbnNbcF0gIT0gdW5kZWZpbmVkKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdG1wc3RyICs9IFwiIC0gXCIgKyBwXHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHAgPSBta3hCYXNlKGExLmlkLCBhMi5pZClcclxuICAgICAgICAgICAgICAgICAgICAgICAgdG1wc3RyICs9IFwiICsgXCIgKyBwXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGFjY3VtdWxhdG9yICs9IDFcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgdG1wc3RyICs9IFwiID0gXCIgKyBhY2N1bXVsYXRvciArIFwiXFxuXCJcclxuICAgICAgICAgICAgICAgIG1vZGVsLnN1YmplY3RUbyArPSB0bXBzdHJcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gZmlsbCBmdW5jdGlvbiB0byBtaW5pbWl6ZVxyXG4gICAgICAgIGZvciAobGV0IGVsZW0gaW4gY3Jvc3NpbmdfdmFycyl7XHJcbiAgICAgICAgICAgIG1vZGVsLm1pbmltaXplICs9IGVsZW0gKyBcIiArIFwiXHJcbiAgICAgICAgfVxyXG4gICAgICAgIGZvciAobGV0IGUgb2YgdGhpcy5nLmVkZ2VzKXtcclxuICAgICAgICAgICAgbW9kZWwubWluaW1pemUgKz0gXCIwLjEgYmVuZF9cIiArIGUubGVmdEF0dHJpYnV0ZS5pZCArIFwiX1wiICsgZS5yaWdodEF0dHJpYnV0ZS5pZCArIFwiICsgXCJcclxuICAgICAgICB9XHJcbiAgICAgICAgbW9kZWwubWluaW1pemUgPSBtb2RlbC5taW5pbWl6ZS5zdWJzdHJpbmcoMCwgbW9kZWwubWluaW1pemUubGVuZ3RoIC0gMikgKyBcIlxcblxcblwiXHJcblxyXG4gICAgICAgIGZvciAobGV0IGVsZW0gaW4gZGVmaW5pdGlvbnMpe1xyXG4gICAgICAgICAgICBtb2RlbC5ib3VuZHMgKz0gXCJiaW5hcnkgXCIgKyBlbGVtICsgXCJcXG5cIlxyXG4gICAgICAgIH1cclxuICAgICAgICBmb3IgKGxldCBlbGVtIGluIGNyb3NzaW5nX3ZhcnMpe1xyXG4gICAgICAgICAgICBtb2RlbC5ib3VuZHMgKz0gXCJiaW5hcnkgXCIgKyBlbGVtICsgXCJcXG5cIlxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gZm9yIChsZXQgaT0wOyBpPD16Y291bnQ7IGkrKyl7XHJcbiAgICAgICAgLy8gICAgIG1vZGVsLmJvdW5kcyArPSBcImJpbmFyeSB6X1wiICsgaSArIFwiXFxuXCIgXHJcbiAgICAgICAgLy8gfVxyXG4gICAgfVxyXG5cclxuICAgIGlzU2FtZVJhbmtFZGdlKGVkZ2Upe1xyXG4gICAgICAgIHJldHVybiBlZGdlLmxlZnRUYWJsZS5kZXB0aCA9PSBlZGdlLnJpZ2h0VGFibGUuZGVwdGhcclxuICAgIH1cclxuXHJcbiAgICBtb2RlbFRvU3RyaW5nKG1vZGVsKXtcclxuICAgICAgICByZXR1cm4gbW9kZWwubWluaW1pemUgKyBtb2RlbC5zdWJqZWN0VG8gKyBtb2RlbC5ib3VuZHMgKyAnXFxuRW5kXFxuJ1xyXG4gICAgfVxyXG5cclxuICAgIGFwcGx5X3NvbHV0aW9uKHNvbHV0aW9uKXtcclxuICAgICAgICBjb25zb2xlLmxvZyhzb2x1dGlvbilcclxuICAgICAgICBmb3IgKGxldCBpPTA7IGk8dGhpcy5nLm1heERlcHRoICsgMTsgaSsrKXtcclxuICAgICAgICAgICAgbGV0IGxheWVyVGFibGVzID0gdGhpcy5nLnRhYmxlSW5kZXhbaV07XHJcblxyXG4gICAgICAgICAgICBsYXllclRhYmxlcy5zb3J0KChhLCBiKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAvL2NvbnNvbGUubG9nKGEuaWQsIGIuaWQsIHNvbHV0aW9uW1wieF9UXCIgKyBhLmlkICsgXCJfVFwiICsgYi5pZF0sIHNvbHV0aW9uW1wieF9UXCIgKyBiLmlkICsgXCJfVFwiICsgYS5pZF0pXHJcbiAgICAgICAgICAgICAgICBpZiAoc29sdXRpb25bXCJ4X1RcIiArIGEuaWQgKyBcIl9UXCIgKyBiLmlkXSA9PSAwKSByZXR1cm4gMVxyXG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoc29sdXRpb25bXCJ4X1RcIiArIGEuaWQgKyBcIl9UXCIgKyBiLmlkXSA9PSAxKSByZXR1cm4gLTFcclxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKHNvbHV0aW9uW1wieF9UXCIgKyBiLmlkICsgXCJfVFwiICsgYS5pZF0gPT0gMSkgcmV0dXJuIDFcclxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKHNvbHV0aW9uW1wieF9UXCIgKyBiLmlkICsgXCJfVFwiICsgYS5pZF0gPT0gMCkgcmV0dXJuIC0xXHJcbiAgICAgICAgICAgIH0pXHJcblxyXG4gICAgICAgICAgICBmb3IgKGxldCBrIGluIGxheWVyVGFibGVzKXtcclxuICAgICAgICAgICAgICAgIGxheWVyVGFibGVzW2tdLndlaWdodCA9IGs7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGZvciAobGV0IHRhYmxlIG9mIGxheWVyVGFibGVzKXtcclxuICAgICAgICAgICAgICAgIHRhYmxlLmF0dHJpYnV0ZXMuc29ydCgoYSwgYikgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vaWYgKGIudGFibGUuaWQgPT0gXCJUOHk0XCIpIGNvbnNvbGUubG9nKGEuaWQsIGIuaWQsIHNvbHV0aW9uW1wieF9cIiArIGIuaWQgKyBcIl9cIiArIGEuaWRdKVxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChzb2x1dGlvbltcInhfXCIgKyBhLmlkICsgXCJfXCIgKyBiLmlkXSA9PSAwKSByZXR1cm4gMVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKHNvbHV0aW9uW1wieF9cIiArIGEuaWQgKyBcIl9cIiArIGIuaWRdID09IDEpIHJldHVybiAtMVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKHNvbHV0aW9uW1wieF9cIiArIGIuaWQgKyBcIl9cIiArIGEuaWRdID09IDEpIHJldHVybiAxXHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAoc29sdXRpb25bXCJ4X1wiICsgYi5pZCArIFwiX1wiICsgYS5pZF0gPT0gMCkgcmV0dXJuIC0xXHJcbiAgICAgICAgICAgICAgICB9KVxyXG5cclxuICAgICAgICAgICAgICAgIGZvciAobGV0IGo9MDsgajx0YWJsZS5hdHRyaWJ1dGVzLmxlbmd0aDsgaisrKXtcclxuICAgICAgICAgICAgICAgICAgICB0YWJsZS5hdHRyaWJ1dGVzW2pdLndlaWdodCA9IGo7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vICoqKioqKioqKipcclxuICAgICAgICAvLyBiZW5kaW5lc3NcclxuICAgICAgICAvLyAqKioqKioqKioqXHJcbiAgICAgICAgZm9yIChsZXQgaT0wOyBpPHRoaXMuZy50YWJsZUluZGV4Lmxlbmd0aDsgaSsrKXtcclxuICAgICAgICAgICAgbGV0IHRhYmxlQ29sID0gdGhpcy5nLnRhYmxlSW5kZXhbaV07XHJcbiAgICAgICAgICAgIGZvciAobGV0IGo9MDsgajx0YWJsZUNvbC5sZW5ndGg7IGorKyl7XHJcbiAgICAgICAgICAgICAgICBsZXQgdCA9IHRhYmxlQ29sW2pdO1xyXG5cclxuICAgICAgICAgICAgICAgIGxldCB2YWwgPSBzb2x1dGlvbltcInlfXCIgKyB0LmlkXVxyXG4gICAgICAgICAgICAgICAgaWYgKHZhbCA9PSB1bmRlZmluZWQpIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgdC52ZXJ0aWNhbEF0dHJPZmZzZXQgPSB2YWwgLSB0LndlaWdodCAqIHRoaXMuZy5iYXNlUm93RGlzdGFuY2U7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbn0iLCJjbGFzcyBMUEZvcm11bGF0aW9uIHtcclxuICAgIGNvbnN0cnVjdG9yIChnKSB7XHJcbiAgICAgICAgdGhpcy5nID0gZztcclxuICAgICAgICB0aGlzLm1pcCA9IHRydWU7XHJcbiAgICAgICAgdGhpcy52ZXJib3NlID0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy5lbGFwc2VkVGltZSA9IDBcclxuICAgIH1cclxuXHJcbiAgICBhc3luYyBhcnJhbmdlKCl7XHJcblxyXG4gICAgICAgIGxldCBzdGFydFRpbWUgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKVxyXG5cclxuICAgICAgICAvLyBidWlsZCBtb2RlbCBmcm9tIGdyYXBoXHJcbiAgICAgICAgbGV0IG1vZGVsID0ge31cclxuXHJcbiAgICAgICAgdGhpcy5maWxsTW9kZWwobW9kZWwpXHJcbiAgICAgICAgbGV0IHByb2IgPSB0aGlzLm1vZGVsVG9TdHJpbmcobW9kZWwpXHJcblxyXG5cclxuICAgICAgICAvLyBzb2x2ZVxyXG4gICAgICAgIGxldCByZXN1bHQgPSB7fSwgb2JqZWN0aXZlLCBpO1xyXG5cclxuICAgICAgICBpZiAodGhpcy52ZXJib3NlKSBnbHBfc2V0X3ByaW50X2Z1bmMoY29uc29sZS5sb2cpO1xyXG5cclxuICAgICAgICBsZXQgbHAgPSBnbHBfY3JlYXRlX3Byb2IoKTtcclxuICAgICAgICBnbHBfcmVhZF9scF9mcm9tX3N0cmluZyhscCwgbnVsbCwgcHJvYik7XHJcblxyXG4gICAgICAgIGdscF9zY2FsZV9wcm9iKGxwLCBHTFBfU0ZfQVVUTyk7XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgIGxldCBzbWNwID0gbmV3IFNNQ1Aoe3ByZXNvbHZlOiBHTFBfT059KTtcclxuICAgICAgICBnbHBfc2ltcGxleChscCwgc21jcCk7XHJcblxyXG4gICAgICAgIGlmICh0aGlzLm1pcCl7XHJcbiAgICAgICAgICAgIGdscF9pbnRvcHQobHApO1xyXG4gICAgICAgICAgICBvYmplY3RpdmUgPSBnbHBfbWlwX29ial92YWwobHApO1xyXG5cclxuICAgICAgICAgICAgZm9yKGkgPSAxOyBpIDw9IGdscF9nZXRfbnVtX2NvbHMobHApOyBpKyspe1xyXG4gICAgICAgICAgICAgICAgcmVzdWx0W2dscF9nZXRfY29sX25hbWUobHAsIGkpXSA9IGdscF9taXBfY29sX3ZhbChscCwgaSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBvYmplY3RpdmUgPSBnbHBfZ2V0X29ial92YWwobHApO1xyXG4gICAgICAgICAgICBmb3IoaSA9IDE7IGkgPD0gZ2xwX2dldF9udW1fY29scyhscCk7IGkrKyl7XHJcbiAgICAgICAgICAgICAgICByZXN1bHRbZ2xwX2dldF9jb2xfbmFtZShscCwgaSldID0gZ2xwX2dldF9jb2xfcHJpbSAobHAsIGkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLmFwcGx5X3NvbHV0aW9uKHJlc3VsdClcclxuXHJcbiAgICAgICAgdGhpcy5lbGFwc2VkVGltZSA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpIC0gc3RhcnRUaW1lXHJcbiAgICAgICAgXHJcbiAgICB9XHJcblxyXG4gICAgZmlsbE1vZGVsKG1vZGVsKXtcclxuICAgICAgICBtb2RlbC5taW5pbWl6ZSA9IFwiTWluaW1pemUgXFxuXCJcclxuICAgICAgICBtb2RlbC5zdWJqZWN0VG8gPSBcIlN1YmplY3QgVG8gXFxuXCJcclxuICAgICAgICBtb2RlbC5ib3VuZHMgPSBcIlxcbkJvdW5kcyBcXG5cIlxyXG5cclxuICAgICAgICBsZXQgZGVmaW5pdGlvbnMgPSB7fVxyXG4gICAgICAgIGxldCBjcm9zc2luZ192YXJzID0ge31cclxuXHJcbiAgICAgICAgbGV0IG1rYyA9ICh1MSwgdjEsIHUyLCB2MikgPT4ge1xyXG4gICAgICAgICAgICBsZXQgcmVzID0gXCJjX1wiICsgdTEgKyB2MSArIFwiX1wiICsgdTIgKyB2MjtcclxuICAgICAgICAgICAgY3Jvc3NpbmdfdmFyc1tyZXNdID0gXCJcIlxyXG4gICAgICAgICAgICByZXR1cm4gcmVzXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBsZXQgbWt4ID0gKHUxLCB1MiwgcHJlPVwiXCIpID0+IHtcclxuICAgICAgICAgICAgbGV0IHJlcyA9IFwieF9cIiArIHByZSArIHUxICsgXCJfXCIgKyBwcmUgKyB1MlxyXG4gICAgICAgICAgICBsZXQgb3Bwb3NpdGVyZXMgPSBcInhfXCIgKyBwcmUgKyB1MiArIFwiX1wiICsgcHJlICsgdTFcclxuICAgICAgICAgICAgbGV0IG9mZnNldCA9IDBcclxuXHJcbiAgICAgICAgICAgIGlmIChkZWZpbml0aW9uc1tvcHBvc2l0ZXJlc10gIT0gdW5kZWZpbmVkKXtcclxuICAgICAgICAgICAgICAgIG9mZnNldCAtPSAxXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gW1wiIC0gXCIgKyBvcHBvc2l0ZXJlcywgb2Zmc2V0XVxyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKGRlZmluaXRpb25zW3Jlc10gPT0gdW5kZWZpbmVkKXtcclxuICAgICAgICAgICAgICAgIC8vZGVmaW5pdGlvbnNbcmVzXSA9ICcnXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIFtcIiArIFwiICsgcmVzLCBvZmZzZXRdXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBsZXQgbWt4QmFzZSA9ICh1MSwgdTIsIHByZT1cIlwiKSA9PiB7XHJcbiAgICAgICAgICAgIHJldHVybiBcInhfXCIgKyBwcmUgKyB1MSArIFwiX1wiICsgcHJlICsgdTJcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIHN0b3JlIGFsbCB2YXJpYWJsZSBuYW1lcyBpbiBvcmRlclxyXG4gICAgICAgIGZvciAobGV0IGs9MDsgayA8IHRoaXMuZy5tYXhEZXB0aCArIDE7IGsrKyl7XHJcbiAgICAgICAgICAgIGxldCBsYXllclRhYmxlcyA9IHRoaXMuZy50YWJsZUluZGV4W2tdO1xyXG4gICAgICAgICAgICBsZXQgbGF5ZXJBdHRyaWJ1dGVzID0gbGF5ZXJUYWJsZXMubWFwKHQgPT4gdC5hdHRyaWJ1dGVzKS5mbGF0KCk7XHJcblxyXG4gICAgICAgICAgICAvLyBzdG9yZSB0YWJsZXNcclxuICAgICAgICAgICAgZm9yIChsZXQgaT0wOyBpPGxheWVyVGFibGVzLmxlbmd0aDsgaSsrKXtcclxuICAgICAgICAgICAgICAgIGxldCB0MSA9IGxheWVyVGFibGVzW2ldLm5hbWU7XHJcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBqPWkrMTsgajxsYXllclRhYmxlcy5sZW5ndGg7IGorKyl7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IHQyID0gbGF5ZXJUYWJsZXNbal0ubmFtZTtcclxuICAgICAgICAgICAgICAgICAgICBkZWZpbml0aW9uc1tta3hCYXNlKHQxLCB0MiwgJ1QnKV0gPSAnJ1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAvLyBzdG9yZSBhdHRyaWJ1dGVzXHJcbiAgICAgICAgICAgIGZvciAobGV0IGk9MDsgaTxsYXllckF0dHJpYnV0ZXMubGVuZ3RoOyBpKyspe1xyXG4gICAgICAgICAgICAgICAgbGV0IGExID0gbGF5ZXJBdHRyaWJ1dGVzW2ldLm5hbWU7XHJcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBqPWkrMTsgajxsYXllckF0dHJpYnV0ZXMubGVuZ3RoOyBqKyspe1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCBhMiA9IGxheWVyQXR0cmlidXRlc1tqXS5uYW1lO1xyXG4gICAgICAgICAgICAgICAgICAgIGRlZmluaXRpb25zW21reEJhc2UoYTEsIGEyKV0gPSAnJ1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBcclxuICAgICAgICBmb3IgKGxldCBrPTA7IGsgPCB0aGlzLmcubWF4RGVwdGggKyAxOyBrKyspe1xyXG4gICAgICAgICAgICBsZXQgbGF5ZXJUYWJsZXMgPSB0aGlzLmcudGFibGVJbmRleFtrXTtcclxuICAgICAgICAgICAgbGV0IGxheWVyQXR0cmlidXRlcyA9IGxheWVyVGFibGVzLm1hcCh0ID0+IHQuYXR0cmlidXRlcykuZmxhdCgpXHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAvLyBnbG9iYWwgb3JkZXJpbmcgb2YgdGFibGVzIFxyXG4gICAgICAgICAgICBmb3IgKGxldCBpPTA7IGk8bGF5ZXJUYWJsZXMubGVuZ3RoOyBpKyspe1xyXG4gICAgICAgICAgICAgICAgbGV0IHQxID0gbGF5ZXJUYWJsZXNbaV0ubmFtZTtcclxuXHJcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBqID0gaSsxOyBqIDwgbGF5ZXJUYWJsZXMubGVuZ3RoOyBqKyspe1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCB0MiA9IGxheWVyVGFibGVzW2pdLm5hbWU7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGZvciAobGV0IG0gPSBqICsgMTsgbSA8IGxheWVyVGFibGVzLmxlbmd0aDsgbSsrKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHQzID0gbGF5ZXJUYWJsZXNbbV0ubmFtZTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1vZGVsLnN1YmplY3RUbyArPSBcIlwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICArIG1reEJhc2UodDEsIHQyLCAnVCcpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICArIFwiICsgXCIgKyBta3hCYXNlKHQyLCB0MywgJ1QnKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKyBcIiAtIFwiICsgbWt4QmFzZSh0MSwgdDMsICdUJylcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICsgXCIgPj0gMFxcblwiXHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBtb2RlbC5zdWJqZWN0VG8gKz0gXCJcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKyBcIi0gXCIgKyBta3hCYXNlKHQxLCB0MiwgJ1QnKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKyBcIiAtIFwiICsgbWt4QmFzZSh0MiwgdDMsICdUJylcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICsgXCIgKyBcIiArIG1reEJhc2UodDEsIHQzLCAnVCcpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICArIFwiID49IC0xXFxuXCJcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8vIGdsb2JhbCBvcmRlcmluZyBvZiBhdHRyaWJ1dGVzXHJcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGF5ZXJBdHRyaWJ1dGVzLmxlbmd0aDsgaSsrKXtcclxuICAgICAgICAgICAgICAgIGxldCB0MSA9IGxheWVyQXR0cmlidXRlc1tpXS5uYW1lO1xyXG4gICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBqID0gaSsxOyBqIDwgbGF5ZXJBdHRyaWJ1dGVzLmxlbmd0aDsgaisrKXtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgdDIgPSBsYXllckF0dHJpYnV0ZXNbal0ubmFtZTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoaSA9PSBqKSBjb250aW51ZTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGxheWVyQXR0cmlidXRlc1tpXS50YWJsZS5uYW1lICE9IGxheWVyQXR0cmlidXRlc1tqXS50YWJsZS5uYW1lKSBjb250aW51ZVxyXG5cclxuICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBtID0gaisxOyBtIDwgbGF5ZXJBdHRyaWJ1dGVzLmxlbmd0aDsgbSsrKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG0gPT0gaiB8fCBtID09IGkpIGNvbnRpbnVlXHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobGF5ZXJBdHRyaWJ1dGVzW21dLnRhYmxlLm5hbWUgIT0gbGF5ZXJBdHRyaWJ1dGVzW2ldLnRhYmxlLm5hbWUpIGNvbnRpbnVlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChsYXllckF0dHJpYnV0ZXNbbV0udGFibGUubmFtZSAhPSBsYXllckF0dHJpYnV0ZXNbal0udGFibGUubmFtZSkgY29udGludWVcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCB0MyA9IGxheWVyQXR0cmlidXRlc1ttXS5uYW1lO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgbW9kZWwuc3ViamVjdFRvICs9IFwiXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICsgbWt4QmFzZSh0MSwgdDIpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICArIFwiICsgXCIgKyBta3hCYXNlKHQyLCB0MylcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICsgXCIgLSBcIiArIG1reEJhc2UodDEsIHQzKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKyBcIiA+PSAwXFxuXCJcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1vZGVsLnN1YmplY3RUbyArPSBcIlwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICArIFwiLSBcIiArIG1reEJhc2UodDEsIHQyKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKyBcIiAtIFwiICsgbWt4QmFzZSh0MiwgdDMpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICArIFwiICsgXCIgKyBta3hCYXNlKHQxLCB0MylcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICsgXCIgPj0gLTFcXG5cIlxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gZGV0ZXJtaW5pbmcgY3Jvc3NpbmdzXHJcbiAgICAgICAgZm9yIChsZXQgaz0wOyBrIDwgdGhpcy5nLm1heERlcHRoICsgMTsgaysrKXtcclxuICAgICAgICAgICAgbGV0IGxheWVyRWRnZXMgPSB0aGlzLmcuZWRnZUluZGV4W2tdXHJcblxyXG4gICAgICAgICAgICBmb3IgKGxldCBpPTA7IGk8bGF5ZXJFZGdlcy5sZW5ndGg7IGkrKyl7XHJcbiAgICAgICAgICAgICAgICBsZXQgdTF2MSA9IGxheWVyRWRnZXNbaV07XHJcblxyXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgaj1pKzE7IGo8bGF5ZXJFZGdlcy5sZW5ndGg7IGorKyl7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IHUydjIgPSBsYXllckVkZ2VzW2pdO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAvLyBuZXc6IG1hbmFnaW5nIGdyb3Vwc1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIGVkZ2VzIHRoYXQgYXJlIG91dHNpZGUgb2YgZ3JvdXBzIHNob3VsZCBuZXZlciBjcm9zcyB3aXRoIGVkZ2VzIHRoYXQgYXJlIGluc2lkZSBvZiBncm91cHNcclxuICAgICAgICAgICAgICAgICAgICBpZiAodTF2MS5sZWZ0VGFibGUuZ3JvdXAgIT0gdW5kZWZpbmVkICYmIHUxdjEucmlnaHRUYWJsZS5ncm91cCAhPSB1bmRlZmluZWQpe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodTJ2Mi5sZWZ0VGFibGUuZ3JvdXAgIT0gdTJ2Mi5sZWZ0VGFibGUuZ3JvdXApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1vZGVsLnN1YmplY3RUbyArPSBta2ModTEsIHYxLCB1MiwgdjIpICsgXCIgPSAwXFxuXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmICghdGhpcy5pc1NhbWVSYW5rRWRnZSh1MXYxKSAmJiAhdGhpcy5pc1NhbWVSYW5rRWRnZSh1MnYyKSl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCB1MSA9IHUxdjEubGVmdEF0dHJpYnV0ZS5uYW1lXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCB2MSA9IHUxdjEucmlnaHRBdHRyaWJ1dGUubmFtZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgdTIgPSB1MnYyLmxlZnRBdHRyaWJ1dGUubmFtZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgdjIgPSB1MnYyLnJpZ2h0QXR0cmlidXRlLm5hbWVcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh1MSA9PSB1MiB8fCB2MSA9PSB2MikgY29udGludWVcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBwMSA9IG1rYyh1MSwgdjEsIHUyLCB2MilcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGZpbmFsc3VtID0gMVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBtb2RlbC5zdWJqZWN0VG8gKz0gcDEgKyBcIlwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBwMiA9IG1reEJhc2UodTIsIHUxKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZGVmaW5pdGlvbnNbcDJdICE9IHVuZGVmaW5lZCl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtb2RlbC5zdWJqZWN0VG8gKz0gXCIgKyBcIiArIHAyXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwMiA9IG1reEJhc2UodTEsIHUyKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZmluYWxzdW0gLT0gMVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbW9kZWwuc3ViamVjdFRvICs9IFwiIC0gXCIgKyBwMlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgcDMgPSBta3hCYXNlKHYxLCB2MilcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGRlZmluaXRpb25zW3AzXSAhPSB1bmRlZmluZWQpe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbW9kZWwuc3ViamVjdFRvICs9IFwiICsgXCIgKyBwM1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcDMgPSBta3hCYXNlKHYyLCB2MSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpbmFsc3VtIC09IDFcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1vZGVsLnN1YmplY3RUbyArPSBcIiAtIFwiICsgcDNcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBtb2RlbC5zdWJqZWN0VG8gKz0gXCIgPj0gXCIgKyBmaW5hbHN1bSArIFwiXFxuXCJcclxuXHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBwMSA9IG1rYyh1MSwgdjEsIHUyLCB2MilcclxuICAgICAgICAgICAgICAgICAgICAgICAgZmluYWxzdW0gPSAxXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1vZGVsLnN1YmplY3RUbyArPSBwMSArIFwiXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgcDIgPSBta3hCYXNlKHUxLCB1MilcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGRlZmluaXRpb25zW3AyXSAhPSB1bmRlZmluZWQpe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbW9kZWwuc3ViamVjdFRvICs9IFwiICsgXCIgKyBwMlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcDIgPSBta3hCYXNlKHUyLCB1MSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpbmFsc3VtIC09IDFcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1vZGVsLnN1YmplY3RUbyArPSBcIiAtIFwiICsgcDJcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICAgICAgcDMgPSBta3hCYXNlKHYyLCB2MSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGRlZmluaXRpb25zW3AzXSAhPSB1bmRlZmluZWQpe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbW9kZWwuc3ViamVjdFRvICs9IFwiICsgXCIgKyBwM1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcDMgPSBta3hCYXNlKHYxLCB2MilcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpbmFsc3VtIC09IDFcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1vZGVsLnN1YmplY3RUbyArPSBcIiAtIFwiICsgcDNcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBtb2RlbC5zdWJqZWN0VG8gKz0gXCIgPj0gXCIgKyBmaW5hbHN1bSArIFwiXFxuXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gaWYgdGhleSBhcmUgYm90aCBzYW1lIHJhbmsgZWRnZXNcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMuaXNTYW1lUmFua0VkZ2UodTF2MSkgJiYgdGhpcy5pc1NhbWVSYW5rRWRnZSh1MnYyKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgdTEgPSB1MXYxLmxlZnRBdHRyaWJ1dGUubmFtZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgdjEgPSB1MXYxLnJpZ2h0QXR0cmlidXRlLm5hbWVcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHUyID0gdTJ2Mi5sZWZ0QXR0cmlidXRlLm5hbWVcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHYyID0gdTJ2Mi5yaWdodEF0dHJpYnV0ZS5uYW1lXHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgcDEgPSBta2ModTEsIHYxLCB1MiwgdjIpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBmaW5hbHN1bSA9IDFcclxuICAgICAgICAgICAgICAgICAgICAgICAgbW9kZWwuc3ViamVjdFRvICs9IHAxICsgXCJcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgcDIgPSBta3hCYXNlKHUxLCB1MilcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGRlZmluaXRpb25zW3AyXSAhPSB1bmRlZmluZWQpe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbW9kZWwuc3ViamVjdFRvICs9IFwiICsgXCIgKyBwMlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcDIgPSBta3hCYXNlKHUyLCB1MSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpbmFsc3VtIC09IDFcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1vZGVsLnN1YmplY3RUbyArPSBcIiAtIFwiICsgcDJcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHAzID0gbWt4QmFzZSh2MSwgdjIpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkZWZpbml0aW9uc1twM10gIT0gdW5kZWZpbmVkKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1vZGVsLnN1YmplY3RUbyArPSBcIiArIFwiICsgcDNcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpbmFsc3VtIC09IDFcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHAzID0gbWt4QmFzZSh2MiwgdjEpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtb2RlbC5zdWJqZWN0VG8gKz0gXCIgLSBcIiArIHAzXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBwNCA9IG1reEJhc2UodTIsIHYxKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZGVmaW5pdGlvbnNbcDRdICE9IHVuZGVmaW5lZCl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtb2RlbC5zdWJqZWN0VG8gKz0gcDRcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpbmFsc3VtIC09IDFcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHA0ID0gbWt4QmFzZSh2MSwgdTIpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtb2RlbC5zdWJqZWN0VG8gKz0gXCIgKyBcIiArIHA0XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgbW9kZWwuc3ViamVjdFRvICs9IFwiID49IFwiICsgZmluYWxzdW0gKyBcIlxcblwiXHJcblxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgcDEgPSBta2ModTEsIHYxLCB1MiwgdjIpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZpbmFsc3VtID0gMVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBtb2RlbC5zdWJqZWN0VG8gKz0gcDEgKyBcIlwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHAyID0gbWt4QmFzZSh1MSwgdTIpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkZWZpbml0aW9uc1twMl0gIT0gdW5kZWZpbmVkKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1vZGVsLnN1YmplY3RUbyArPSBcIiArIFwiICsgcDJcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHAyID0gbWt4QmFzZSh1MiwgdTEpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaW5hbHN1bSAtPSAxXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtb2RlbC5zdWJqZWN0VG8gKz0gXCIgLSBcIiArIHAyXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHAzID0gbWt4QmFzZSh2MSwgdjIpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkZWZpbml0aW9uc1twM10gIT0gdW5kZWZpbmVkKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1vZGVsLnN1YmplY3RUbyArPSBcIiArIFwiICsgcDNcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpbmFsc3VtIC09IDFcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHAzID0gbWt4QmFzZSh2MiwgdjEpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtb2RlbC5zdWJqZWN0VG8gKz0gXCIgLSBcIiArIHAzXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHA0ID0gbWt4QmFzZSh2MiwgdTEpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkZWZpbml0aW9uc1twNF0gIT0gdW5kZWZpbmVkKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1vZGVsLnN1YmplY3RUbyArPSBwNFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZmluYWxzdW0gLT0gMVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcDQgPSBta3hCYXNlKHUxLCB2MilcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1vZGVsLnN1YmplY3RUbyArPSBcIiArIFwiICsgcDRcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBtb2RlbC5zdWJqZWN0VG8gKz0gXCIgPj0gXCIgKyBmaW5hbHN1bSArIFwiXFxuXCJcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICh0aGlzLmlzU2FtZVJhbmtFZGdlKHUxdjEpICYmICF0aGlzLmlzU2FtZVJhbmtFZGdlKHUydjIpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCB1MSA9IHUxdjEubGVmdEF0dHJpYnV0ZS5uYW1lXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCB2MSA9IHUxdjEucmlnaHRBdHRyaWJ1dGUubmFtZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgdTIgPSB1MnYyLmxlZnRBdHRyaWJ1dGUubmFtZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgdjIgPSB1MnYyLnJpZ2h0QXR0cmlidXRlLm5hbWVcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBwMSA9IG1rYyh1MSwgdjEsIHUyLCB2MilcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGZpbmFsc3VtID0gMVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBtb2RlbC5zdWJqZWN0VG8gKz0gcDEgKyBcIlwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBwMiA9IG1reEJhc2UodTIsIHUxKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZGVmaW5pdGlvbnNbcDJdICE9IHVuZGVmaW5lZCl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtb2RlbC5zdWJqZWN0VG8gKz0gXCIgKyBcIiArIHAyXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwMiA9IG1reEJhc2UodTEsIHUyKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZmluYWxzdW0gLT0gMVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbW9kZWwuc3ViamVjdFRvICs9IFwiIC0gXCIgKyBwMlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgcDMgPSBta3hCYXNlKHYxLCB1MilcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGRlZmluaXRpb25zW3AzXSAhPSB1bmRlZmluZWQpe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbW9kZWwuc3ViamVjdFRvICs9IFwiICsgXCIgKyBwM1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZmluYWxzdW0gLT0gMVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcDMgPSBta3hCYXNlKHUyLCB2MSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1vZGVsLnN1YmplY3RUbyArPSBcIiAtIFwiICsgcDNcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBtb2RlbC5zdWJqZWN0VG8gKz0gXCIgPj0gXCIgKyBmaW5hbHN1bSArIFwiXFxuXCJcclxuXHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBwMSA9IG1rYyh1MSwgdjEsIHUyLCB2MilcclxuICAgICAgICAgICAgICAgICAgICAgICAgZmluYWxzdW0gPSAxXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1vZGVsLnN1YmplY3RUbyArPSBwMSArIFwiXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgcDIgPSBta3hCYXNlKHUyLCB2MSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGRlZmluaXRpb25zW3AyXSAhPSB1bmRlZmluZWQpe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbW9kZWwuc3ViamVjdFRvICs9IFwiICsgXCIgKyBwMlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcDIgPSBta3hCYXNlKHYxLCB1MilcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpbmFsc3VtIC09IDFcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1vZGVsLnN1YmplY3RUbyArPSBcIiAtIFwiICsgcDJcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgcDMgPSBta3hCYXNlKHUxLCB1MilcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGRlZmluaXRpb25zW3AzXSAhPSB1bmRlZmluZWQpe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbW9kZWwuc3ViamVjdFRvICs9IFwiICsgXCIgKyBwM1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZmluYWxzdW0gLT0gMVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcDMgPSBta3hCYXNlKHUyLCB1MSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1vZGVsLnN1YmplY3RUbyArPSBcIiAtIFwiICsgcDNcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBtb2RlbC5zdWJqZWN0VG8gKz0gXCIgPj0gXCIgKyBmaW5hbHN1bSArIFwiXFxuXCJcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICghdGhpcy5pc1NhbWVSYW5rRWRnZSh1MXYxKSAmJiB0aGlzLmlzU2FtZVJhbmtFZGdlKHUydjIpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCB1MSA9IHUxdjEubGVmdEF0dHJpYnV0ZS5uYW1lXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCB2MSA9IHUxdjEucmlnaHRBdHRyaWJ1dGUubmFtZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgdTIgPSB1MnYyLmxlZnRBdHRyaWJ1dGUubmFtZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgdjIgPSB1MnYyLnJpZ2h0QXR0cmlidXRlLm5hbWVcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBwMSA9IG1rYyh1MSwgdjEsIHUyLCB2MilcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGZpbmFsc3VtID0gMVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBtb2RlbC5zdWJqZWN0VG8gKz0gcDEgKyBcIlwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBwMiA9IG1reEJhc2UodTEsIHUyKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZGVmaW5pdGlvbnNbcDJdICE9IHVuZGVmaW5lZCl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtb2RlbC5zdWJqZWN0VG8gKz0gXCIgKyBcIiArIHAyXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwMiA9IG1reEJhc2UodTIsIHUxKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZmluYWxzdW0gLT0gMVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbW9kZWwuc3ViamVjdFRvICs9IFwiIC0gXCIgKyBwMlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgcDMgPSBta3hCYXNlKHYyLCB1MSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGRlZmluaXRpb25zW3AzXSAhPSB1bmRlZmluZWQpe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbW9kZWwuc3ViamVjdFRvICs9IFwiICsgXCIgKyBwM1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZmluYWxzdW0gLT0gMVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcDMgPSBta3hCYXNlKHUxLCB2MilcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1vZGVsLnN1YmplY3RUbyArPSBcIiAtIFwiICsgcDNcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBtb2RlbC5zdWJqZWN0VG8gKz0gXCIgPj0gXCIgKyBmaW5hbHN1bSArIFwiXFxuXCJcclxuXHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBwMSA9IG1rYyh1MSwgdjEsIHUyLCB2MilcclxuICAgICAgICAgICAgICAgICAgICAgICAgZmluYWxzdW0gPSAxXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1vZGVsLnN1YmplY3RUbyArPSBwMSArIFwiXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgcDIgPSBta3hCYXNlKHUxLCB2MilcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGRlZmluaXRpb25zW3AyXSAhPSB1bmRlZmluZWQpe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbW9kZWwuc3ViamVjdFRvICs9IFwiICsgXCIgKyBwMlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcDIgPSBta3hCYXNlKHYyLCB1MSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpbmFsc3VtIC09IDFcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1vZGVsLnN1YmplY3RUbyArPSBcIiAtIFwiICsgcDJcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgcDMgPSBta3hCYXNlKHUyLCB1MSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGRlZmluaXRpb25zW3AzXSAhPSB1bmRlZmluZWQpe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbW9kZWwuc3ViamVjdFRvICs9IFwiICsgXCIgKyBwM1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZmluYWxzdW0gLT0gMVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcDMgPSBta3hCYXNlKHUxLCB1MilcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1vZGVsLnN1YmplY3RUbyArPSBcIiAtIFwiICsgcDNcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBtb2RlbC5zdWJqZWN0VG8gKz0gXCIgPj0gXCIgKyBmaW5hbHN1bSArIFwiXFxuXCJcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG5cclxuICAgICAgIC8vIGdyb3VwaW5nIGNvbnN0cmFpbnQgb2YgYXR0cmlidXRlcyB3aXRoaW4gdGFibGVzXHJcbiAgICAgICBmb3IgKGxldCBrPTA7IGs8dGhpcy5nLm1heERlcHRoICsgMTsgaysrKXtcclxuICAgICAgICAgICAgbGV0IGxheWVyVGFibGVzID0gdGhpcy5nLnRhYmxlSW5kZXhba107XHJcbiAgICAgICAgICAgIGxldCBsYXllckF0dHJpYnV0ZXMgPSBsYXllclRhYmxlcy5tYXAodCA9PiB0LmF0dHJpYnV0ZXMpLmZsYXQoKVxyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgZm9yIChsZXQgaT0wOyBpPGxheWVyQXR0cmlidXRlcy5sZW5ndGg7IGkrKyl7XHJcbiAgICAgICAgICAgICAgICBsZXQgYXR0cjEgPSBsYXllckF0dHJpYnV0ZXNbaV0ubmFtZTtcclxuICAgICAgICAgICAgICAgIGxldCB0MSA9IGxheWVyQXR0cmlidXRlc1tpXS50YWJsZS5uYW1lO1xyXG5cclxuICAgICAgICAgICAgICAgIGZvciAobGV0IGo9aSsxOyBqPGxheWVyQXR0cmlidXRlcy5sZW5ndGg7IGorKyl7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IGF0dHIyID0gbGF5ZXJBdHRyaWJ1dGVzW2pdLm5hbWU7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IHQyID0gbGF5ZXJBdHRyaWJ1dGVzW2pdLnRhYmxlLm5hbWVcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHQxICE9IHQyKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gbW9kZWwuc3ViamVjdFRvICs9IFwieF9cIiArIGF0dHIxLm5hbWUgKyBcIl9cIiArIGF0dHIyLm5hbWUgKyBcIiAtIFwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vICAgICArIFwieF9UXCIgKyBhdHRyMS50YWJsZS5uYW1lICsgXCJfVFwiICsgYXR0cjIudGFibGUubmFtZSArIFwiID0gMFxcblwiXHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBtb2RlbC5zdWJqZWN0VG8gKz0gbWt4QmFzZShhdHRyMSwgYXR0cjIpICsgXCJcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKyBcIiAtIFwiICsgbWt4QmFzZSh0MSwgdDIsICdUJykgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICArIFwiID0gMFxcblwiXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBmaWxsIGZ1bmN0aW9uIHRvIG1pbmltaXplXHJcbiAgICAgICAgZm9yIChsZXQgZWxlbSBpbiBjcm9zc2luZ192YXJzKXtcclxuICAgICAgICAgICAgbW9kZWwubWluaW1pemUgKz0gZWxlbSArIFwiICsgXCJcclxuICAgICAgICB9XHJcbiAgICAgICAgbW9kZWwubWluaW1pemUgPSBtb2RlbC5taW5pbWl6ZS5zdWJzdHJpbmcoMCwgbW9kZWwubWluaW1pemUubGVuZ3RoIC0gMikgKyBcIlxcblxcblwiXHJcblxyXG4gICAgICAgIGZvciAobGV0IGVsZW0gaW4gZGVmaW5pdGlvbnMpe1xyXG4gICAgICAgICAgICBtb2RlbC5ib3VuZHMgKz0gXCJiaW5hcnkgXCIgKyBlbGVtICsgXCJcXG5cIlxyXG4gICAgICAgIH1cclxuXHJcbiAgICB9XHJcblxyXG5cclxuICAgIGZpbGxNb2RlbDIobW9kZWwpe1xyXG4gICAgICAgIG1vZGVsLm1pbmltaXplID0gXCJNaW5pbWl6ZSBcXG5jcm9zc2luZ3M6IFwiXHJcbiAgICAgICAgbW9kZWwuc3ViamVjdFRvID0gXCJTdWJqZWN0IFRvIFxcblwiXHJcbiAgICAgICAgbW9kZWwuYm91bmRzID0gXCJcXG5Cb3VuZHMgXFxuXCJcclxuXHJcbiAgICAgICAgLy8gb2JqZWN0aXZlIGZ1bmN0aW9uXHJcbiAgICAgICAgZm9yIChsZXQgaz0wOyBrPHRoaXMuZy5tYXhEZXB0aCArIDE7IGsrKyl7XHJcbiAgICAgICAgICAgIGxldCBsYXllckVkZ2VzID0gdGhpcy5nLmVkZ2VJbmRleFtrXVxyXG4gICAgICAgICAgICBmb3IgKGxldCBpPTA7IGk8bGF5ZXJFZGdlcy5sZW5ndGg7IGkrKyl7XHJcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBqPTA7IGo8bGF5ZXJFZGdlcy5sZW5ndGg7IGorKyl7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGxheWVyRWRnZXNbaV0gIT0gbGF5ZXJFZGdlc1tqXSl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBjcm9zc3ZhciA9IFwiY19cIiArIGxheWVyRWRnZXNbaV0ubGVmdEF0dHJpYnV0ZS5uYW1lICsgbGF5ZXJFZGdlc1tpXS5yaWdodEF0dHJpYnV0ZS5uYW1lIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKyBcIl9cIiArIGxheWVyRWRnZXNbal0ubGVmdEF0dHJpYnV0ZS5uYW1lICsgbGF5ZXJFZGdlc1tqXS5yaWdodEF0dHJpYnV0ZS5uYW1lXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1vZGVsLm1pbmltaXplICs9IGNyb3NzdmFyICsgJyArICdcclxuICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBtb2RlbC5ib3VuZHMgKz0gXCJiaW5hcnkgXCIgKyBjcm9zc3ZhciArIFwiXFxuXCJcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0gICAgICBcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIG1vZGVsLm1pbmltaXplID0gbW9kZWwubWluaW1pemUuc3Vic3RyaW5nKDAsIG1vZGVsLm1pbmltaXplLmxlbmd0aCAtIDIpICsgJ1xcblxcbic7XHJcbiAgICAgICAgXHJcbiAgICAgICAgLy8gZWFjaCB0YWJsZSBtdXN0IGJlIGFib3ZlIG9yIGJlbG93IGFub3RoZXIgb25lXHJcbiAgICAgICAgZm9yIChsZXQgaz0wOyBrPHRoaXMuZy5tYXhEZXB0aCArIDE7IGsrKyl7XHJcbiAgICAgICAgICAgIGxldCBsYXllclRhYmxlcyA9IHRoaXMuZy50YWJsZUluZGV4W2tdO1xyXG4gICAgICAgICAgICBmb3IgKGxldCBpPTA7IGk8bGF5ZXJUYWJsZXMubGVuZ3RoOyBpKyspe1xyXG4gICAgICAgICAgICAgICAgbGV0IHQxID0gbGF5ZXJUYWJsZXNbaV1cclxuICAgICAgICAgICAgICAgIGZvciAobGV0IGo9MDsgajxsYXllclRhYmxlcy5sZW5ndGg7IGorKyl7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGk9PWopIGNvbnRpbnVlXHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IHQyID0gbGF5ZXJUYWJsZXNbal1cclxuICAgICAgICAgICAgICAgICAgICBpZiAodDEgIT0gdDIpe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBtb2RlbC5zdWJqZWN0VG8gKz0gXCJ4X1RcIiArIHQxLm5hbWUgKyBcIl9UXCIgKyB0Mi5uYW1lIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKyBcIiArIHhfVFwiICsgdDIubmFtZSArIFwiX1RcIiArIHQxLm5hbWUgKyBcIiA9IDFcXG5cIlxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gYWRkIHZhcnMgdG8gYm91bmRzXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1vZGVsLmJvdW5kcyArPSBcImJpbmFyeSB4X1RcIiArIHQxLm5hbWUgKyBcIl9UXCIgKyB0Mi5uYW1lICsgXCJcXG5cIlxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gdHJhbnNpdGl2aXR5IG9mIHJlbGF0aW9uc2hpcCBhYm92ZVxyXG4gICAgICAgIGZvciAobGV0IGs9MDsgayA8IHRoaXMuZy5tYXhEZXB0aCArIDE7IGsrKyl7XHJcbiAgICAgICAgICAgICBsZXQgbGF5ZXJUYWJsZXMgPSB0aGlzLmcudGFibGVJbmRleFtrXTtcclxuICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGF5ZXJUYWJsZXMubGVuZ3RoOyBpKyspe1xyXG4gICAgICAgICAgICAgICAgIGxldCB0MSA9IGxheWVyVGFibGVzW2ldO1xyXG4gICAgICAgICAgICAgICAgIGZvciAobGV0IGogPTA7IGogPCBsYXllclRhYmxlcy5sZW5ndGg7IGorKyl7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGk9PWopIGNvbnRpbnVlXHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IHQyID0gbGF5ZXJUYWJsZXNbal07XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGZvciAobGV0IG0gPSBqICsgMTsgbSA8IGxheWVyVGFibGVzLmxlbmd0aDsgbSsrKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHQzID0gbGF5ZXJUYWJsZXNbbV07XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBtb2RlbC5zdWJqZWN0VG8gKz0gXCJ4X1RcIiArIHQzLm5hbWUgKyBcIl9UXCIgKyB0MS5uYW1lICsgXCIgLSB4X1RcIiArIHQzLm5hbWUgKyBcIl9UXCIgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICArIHQyLm5hbWUgKyBcIiAtIHhfVFwiICsgdDIubmFtZSArIFwiX1RcIiArIHQxLm5hbWUgKyBcIiA+PSAtIDFcXG5cIiBcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBlYWNoIGF0dHJpYnV0ZSBtdXN0IGJlIGFib3ZlIG9yIGJlbG93IGFub3RoZXIgb25lXHJcbiAgICAgICAgZm9yIChsZXQgaz0wOyBrPHRoaXMuZy5tYXhEZXB0aCArIDE7IGsrKyl7XHJcbiAgICAgICAgICAgIGxldCBsYXllclRhYmxlcyA9IHRoaXMuZy50YWJsZUluZGV4W2tdO1xyXG4gICAgICAgICAgICBsZXQgbGF5ZXJBdHRyaWJ1dGVzID0gbGF5ZXJUYWJsZXMubWFwKHQgPT4gdC5hdHRyaWJ1dGVzKS5mbGF0KClcclxuICAgICAgICAgICAgZm9yIChsZXQgaT0wOyBpPGxheWVyQXR0cmlidXRlcy5sZW5ndGg7IGkrKyl7XHJcbiAgICAgICAgICAgICAgICBsZXQgdDEgPSBsYXllckF0dHJpYnV0ZXNbaV1cclxuICAgICAgICAgICAgICAgIGZvciAobGV0IGo9aSsxOyBqPGxheWVyQXR0cmlidXRlcy5sZW5ndGg7IGorKyl7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IHQyID0gbGF5ZXJBdHRyaWJ1dGVzW2pdXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHQxICE9IHQyKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbW9kZWwuc3ViamVjdFRvICs9IFwieF9cIiArIHQxLm5hbWUgKyBcIl9cIiArIHQyLm5hbWUgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICArIFwiICsgeF9cIiArIHQyLm5hbWUgKyBcIl9cIiArIHQxLm5hbWUgKyBcIiA9IDFcXG5cIlxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gZ3JvdXBpbmcgY29uc3RyYWludCBvZiBhdHRyaWJ1dGVzIHdpdGhpbiB0YWJsZXNcclxuICAgICAgICBmb3IgKGxldCBrPTA7IGs8dGhpcy5nLm1heERlcHRoICsgMTsgaysrKXtcclxuICAgICAgICAgICAgbGV0IGxheWVyVGFibGVzID0gdGhpcy5nLnRhYmxlSW5kZXhba107XHJcbiAgICAgICAgICAgIGxldCBsYXllckF0dHJpYnV0ZXMgPSBsYXllclRhYmxlcy5tYXAodCA9PiB0LmF0dHJpYnV0ZXMpLmZsYXQoKVxyXG4gICAgICAgICAgICBmb3IgKGxldCBhdHRyMSBvZiBsYXllckF0dHJpYnV0ZXMpe1xyXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgYXR0cjIgb2YgbGF5ZXJBdHRyaWJ1dGVzKXtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoYXR0cjEudGFibGUgIT0gYXR0cjIudGFibGUpe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBtb2RlbC5zdWJqZWN0VG8gKz0gXCJ4X1wiICsgYXR0cjEubmFtZSArIFwiX1wiICsgYXR0cjIubmFtZSArIFwiIC0gXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICsgXCJ4X1RcIiArIGF0dHIxLnRhYmxlLm5hbWUgKyBcIl9UXCIgKyBhdHRyMi50YWJsZS5uYW1lICsgXCIgPSAwXFxuXCJcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG5cclxuICAgICAgICAvLyB0cmFuc2l0aXZpdHkgb2YgcmVsYXRpb25zaGlwIGFib3ZlXHJcbiAgICAgICAgZm9yIChsZXQgaz0wOyBrIDwgdGhpcy5nLm1heERlcHRoICsgMTsgaysrKXtcclxuICAgICAgICAgICAgbGV0IGxheWVyVGFibGVzID0gdGhpcy5nLnRhYmxlSW5kZXhba107XHJcbiAgICAgICAgICAgIGxldCBsYXllckF0dHJpYnV0ZXMgPSBsYXllclRhYmxlcy5tYXAodCA9PiB0LmF0dHJpYnV0ZXMpLmZsYXQoKVxyXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxheWVyQXR0cmlidXRlcy5sZW5ndGg7IGkrKyl7XHJcbiAgICAgICAgICAgICAgICBsZXQgdDEgPSBsYXllckF0dHJpYnV0ZXNbaV07XHJcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBqID0gMDsgaiA8IGxheWVyQXR0cmlidXRlcy5sZW5ndGg7IGorKyl7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IHQyID0gbGF5ZXJBdHRyaWJ1dGVzW2pdO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChpID09IGopIGNvbnRpbnVlIFxyXG5cclxuICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBtID0gMDsgbSA8IGxheWVyQXR0cmlidXRlcy5sZW5ndGg7IG0rKyl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChtID09IGkgfHwgbSA9PSBqKSBjb250aW51ZVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHQzID0gbGF5ZXJBdHRyaWJ1dGVzW21dO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgbW9kZWwuc3ViamVjdFRvICs9IFwieF9cIiArIHQzLm5hbWUgKyBcIl9cIiArIHQxLm5hbWUgKyBcIiAtIHhfXCIgKyB0My5uYW1lICsgXCJfXCIgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICsgdDIubmFtZSArIFwiIC0geF9cIiArIHQyLm5hbWUgKyBcIl9cIiArIHQxLm5hbWUgKyBcIiA+PSAtIDFcXG5cIiBcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGFkZCB2YXJzIHRvIGJvdW5kc1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvL21vZGVsLmJvdW5kcyArPSBcImJpbmFyeSB4X1RcIiArIHQzLm5hbWUgKyBcIl9UXCIgKyB0MS5uYW1lICsgXCJcXG5cIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvL21vZGVsLmJvdW5kcyArPSBcImJpbmFyeSB4X1RcIiArIHQzLm5hbWUgKyBcIl9UXCIgKyB0Mi5uYW1lICsgXCJcXG5cIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvL21vZGVsLmJvdW5kcyArPSBcImJpbmFyeSB4X1RcIiArIHQyLm5hbWUgKyBcIl9UXCIgKyB0MS5uYW1lICsgXCJcXG5cIlxyXG4gICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgIH1cclxuICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gYXR0cmlidXRlIHBvc2l0aW9ucyBkZXRlcm1pbmUgY3Jvc3NpbmdzIGZvciBub24tc2FtZS1yYW5rIGVkZ2VzXHJcbiAgICAgICAgZm9yIChsZXQgaz0wOyBrIDwgdGhpcy5nLm1heERlcHRoOyBrKyspe1xyXG4gICAgICAgICAgICBsZXQgbGF5ZXJFZGdlcyA9IHRoaXMuZy5lZGdlSW5kZXhba11cclxuICAgICAgICAgICAgZm9yIChsZXQgaT0wOyBpPGxheWVyRWRnZXMubGVuZ3RoOyBpKyspe1xyXG4gICAgICAgICAgICAgICAgbGV0IHUxdjEgPSBsYXllckVkZ2VzW2ldXHJcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBqPTA7IGo8bGF5ZXJFZGdlcy5sZW5ndGg7IGorKyl7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGk9PWopIGNvbnRpbnVlXHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IHUydjIgPSBsYXllckVkZ2VzW2pdXHJcblxyXG4gICAgICAgICAgICAgICAgICAgIC8vIGxlYXZlIHNhbWUgcmFuayBlZGdlcyBvdXQgZm9yIG5vd1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh1MXYxLmxlZnRUYWJsZS5kZXB0aCA9PSB1MXYxLnJpZ2h0VGFibGUuZGVwdGggfHwgdTJ2Mi5sZWZ0VGFibGUuZGVwdGggPT0gdTJ2Mi5yaWdodFRhYmxlLmRlcHRoKSBjb250aW51ZVxyXG5cclxuICAgICAgICAgICAgICAgICAgICBsZXQgdTEgPSB1MXYxLmxlZnRBdHRyaWJ1dGUubmFtZSBcclxuICAgICAgICAgICAgICAgICAgICBsZXQgdjEgPSB1MXYxLnJpZ2h0QXR0cmlidXRlLm5hbWVcclxuICAgICAgICAgICAgICAgICAgICBsZXQgdTIgPSB1MnYyLmxlZnRBdHRyaWJ1dGUubmFtZVxyXG4gICAgICAgICAgICAgICAgICAgIGxldCB2MiA9IHUydjIucmlnaHRBdHRyaWJ1dGUubmFtZVxyXG5cclxuICAgICAgICAgICAgICAgICAgICBtb2RlbC5zdWJqZWN0VG8gKz0gXCJjX1wiICsgdTEgKyB2MSAgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICsgXCJfXCIgKyB1MiArIHYyIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICArIFwiICsgeF9cIiArIHUyICsgXCJfXCIgKyB1MSBcclxuICAgICAgICAgICAgICAgICAgICAgICAgKyBcIiArIHhfXCIgKyB2MSArIFwiX1wiICsgdjIgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICsgXCIgPj0gMVxcblwiXHJcblxyXG4gICAgICAgICAgICAgICAgICAgIG1vZGVsLnN1YmplY3RUbyArPSBcImNfXCIgKyB1MSArIHYxICBcclxuICAgICAgICAgICAgICAgICAgICAgICAgKyBcIl9cIiArIHUyICsgdjIgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICsgXCIgKyB4X1wiICsgdTEgKyBcIl9cIiArIHUyIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICArIFwiICsgeF9cIiArIHYyICsgXCJfXCIgKyB2MSBcclxuICAgICAgICAgICAgICAgICAgICAgICAgKyBcIiA+PSAxXFxuXCJcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gc2FtZSByYW5rIGVkZ2VzXHJcbiAgICAgICAgZm9yIChsZXQgaz0wOyBrIDwgdGhpcy5nLm1heERlcHRoICsgMTsgaysrKXtcclxuXHJcbiAgICAgICAgICAgIGxldCBsYXllckVkZ2VzID0gdGhpcy5nLmVkZ2VJbmRleFtrXTtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIGZvciAobGV0IGk9MDsgaTxsYXllckVkZ2VzLmxlbmd0aDsgaSsrKXtcclxuICAgICAgICAgICAgICAgIGxldCB1MXYxID0gbGF5ZXJFZGdlc1tpXVxyXG4gICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBqPTA7IGo8bGF5ZXJFZGdlcy5sZW5ndGg7IGorKyl7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IHUydjIgPSBsYXllckVkZ2VzW2pdXHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmICh1MXYxID09IHUydjIpIGNvbnRpbnVlXHJcblxyXG4gICAgICAgICAgICAgICAgICAgIC8vIGlmIHRoZXkgYXJlIGJvdGggc2FtZSByYW5rIGVkZ2VzXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHUxdjEubGVmdFRhYmxlLmRlcHRoID09IHUxdjEucmlnaHRUYWJsZS5kZXB0aCAmJiB1MnYyLmxlZnRUYWJsZS5kZXB0aCA9PSB1MnYyLnJpZ2h0VGFibGUuZGVwdGgpe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgdTEgPSB1MXYxLmxlZnRBdHRyaWJ1dGUubmFtZSBcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHYxID0gdTF2MS5yaWdodEF0dHJpYnV0ZS5uYW1lXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCB1MiA9IHUydjIubGVmdEF0dHJpYnV0ZS5uYW1lXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCB2MiA9IHUydjIucmlnaHRBdHRyaWJ1dGUubmFtZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBJIGFtIHN0aWxsIGRvdWJ0ZnVsIGFib3V0IHRoaXMgbmVlZGluZyB0byBiZSBkZWNsYXJlZCBmb3IgaW52ZXJ0ZWQgbGVmdC1yaWdodCBlZGdlcyBvciBub3QuLi5cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1vZGVsLnN1YmplY3RUbyArPSBcImNfXCIgKyB1MSArIHYxICBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICsgXCJfXCIgKyB1MiArIHYyIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKyBcIiArIHhfXCIgKyB1MSArIFwiX1wiICsgdTIgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICArIFwiICsgeF9cIiArIHYxICsgXCJfXCIgKyB2MiBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICsgXCIgKyB4X1wiICsgdTIgKyBcIl9cIiArIHYxIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKyBcIiA+PSAxXFxuXCJcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1vZGVsLnN1YmplY3RUbyArPSBcImNfXCIgKyB1MSArIHYxICBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICsgXCJfXCIgKyB1MiArIHYyIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKyBcIiArIHhfXCIgKyB1MSArIFwiX1wiICsgdTIgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICArIFwiICsgeF9cIiArIHYxICsgXCJfXCIgKyB2MiBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICsgXCIgKyB4X1wiICsgdjIgKyBcIl9cIiArIHUxIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKyBcIiA+PSAxXFxuXCJcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gaWYgdTF2MSBpcyB0aGUgc2FtZSByYW5rIGVkZ2UgYW5kIHRoZSBvdGhlciBpcyBub3RcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMuaXNTYW1lUmFua0VkZ2UodTF2MSkgJiYgIXRoaXMuaXNTYW1lUmFua0VkZ2UodTJ2Mikpe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgdTEgPSB1MXYxLmxlZnRBdHRyaWJ1dGUubmFtZSBcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHYxID0gdTF2MS5yaWdodEF0dHJpYnV0ZS5uYW1lXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCB1MiA9IHUydjIubGVmdEF0dHJpYnV0ZS5uYW1lXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCB2MiA9IHUydjIucmlnaHRBdHRyaWJ1dGUubmFtZVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgbW9kZWwuc3ViamVjdFRvICs9IFwiY19cIiArIHUxICsgdjEgIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKyBcIl9cIiArIHUyICsgdjIgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICArIFwiICsgeF9cIiArIHUyICsgXCJfXCIgKyB1MSBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICsgXCIgKyB4X1wiICsgdjEgKyBcIl9cIiArIHUyIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKyBcIiA+PSAxXFxuXCJcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1vZGVsLnN1YmplY3RUbyArPSBcImNfXCIgKyB1MSArIHYxICBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICsgXCJfXCIgKyB1MiArIHYyIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKyBcIiArIHhfXCIgKyB1MiArIFwiX1wiICsgdjEgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICArIFwiICsgeF9cIiArIHUxICsgXCJfXCIgKyB1MiBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICsgXCIgPj0gMVxcblwiXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgIH1cclxuXHJcbiAgICBpc1NhbWVSYW5rRWRnZShlZGdlKXtcclxuICAgICAgICByZXR1cm4gZWRnZS5sZWZ0VGFibGUuZGVwdGggPT0gZWRnZS5yaWdodFRhYmxlLmRlcHRoXHJcbiAgICB9XHJcblxyXG4gICAgbW9kZWxUb1N0cmluZyhtb2RlbCl7XHJcbiAgICAgICAgcmV0dXJuIG1vZGVsLm1pbmltaXplICsgbW9kZWwuc3ViamVjdFRvICsgbW9kZWwuYm91bmRzICsgJ1xcbkVuZFxcbidcclxuICAgIH1cclxuXHJcbiAgICBhcHBseV9zb2x1dGlvbihzb2x1dGlvbil7XHJcbiAgICAgICAgLy9jb25zb2xlLmxvZyhzb2x1dGlvbilcclxuICAgICAgICBmb3IgKGxldCBpPTA7IGk8dGhpcy5nLm1heERlcHRoICsgMTsgaSsrKXtcclxuICAgICAgICAgICAgbGV0IGxheWVyVGFibGVzID0gdGhpcy5nLnRhYmxlSW5kZXhbaV07XHJcblxyXG4gICAgICAgICAgICBsYXllclRhYmxlcy5zb3J0KChhLCBiKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAvL2NvbnNvbGUubG9nKGEubmFtZSwgYi5uYW1lLCBzb2x1dGlvbltcInhfVFwiICsgYS5uYW1lICsgXCJfVFwiICsgYi5uYW1lXSwgc29sdXRpb25bXCJ4X1RcIiArIGIubmFtZSArIFwiX1RcIiArIGEubmFtZV0pXHJcbiAgICAgICAgICAgICAgICBpZiAoc29sdXRpb25bXCJ4X1RcIiArIGEubmFtZSArIFwiX1RcIiArIGIubmFtZV0gPT0gMCkgcmV0dXJuIDFcclxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKHNvbHV0aW9uW1wieF9UXCIgKyBhLm5hbWUgKyBcIl9UXCIgKyBiLm5hbWVdID09IDEpIHJldHVybiAtMVxyXG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoc29sdXRpb25bXCJ4X1RcIiArIGIubmFtZSArIFwiX1RcIiArIGEubmFtZV0gPT0gMSkgcmV0dXJuIDFcclxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKHNvbHV0aW9uW1wieF9UXCIgKyBiLm5hbWUgKyBcIl9UXCIgKyBhLm5hbWVdID09IDApIHJldHVybiAtMVxyXG4gICAgICAgICAgICB9KVxyXG5cclxuICAgICAgICAgICAgZm9yIChsZXQgayBpbiBsYXllclRhYmxlcyl7XHJcbiAgICAgICAgICAgICAgICBsYXllclRhYmxlc1trXS53ZWlnaHQgPSBrO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBmb3IgKGxldCB0YWJsZSBvZiBsYXllclRhYmxlcyl7XHJcbiAgICAgICAgICAgICAgICB0YWJsZS5hdHRyaWJ1dGVzLnNvcnQoKGEsIGIpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAvL2lmIChiLnRhYmxlLm5hbWUgPT0gXCJUOHk0XCIpIGNvbnNvbGUubG9nKGEubmFtZSwgYi5uYW1lLCBzb2x1dGlvbltcInhfXCIgKyBiLm5hbWUgKyBcIl9cIiArIGEubmFtZV0pXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHNvbHV0aW9uW1wieF9cIiArIGEubmFtZSArIFwiX1wiICsgYi5uYW1lXSA9PSAwKSByZXR1cm4gMVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKHNvbHV0aW9uW1wieF9cIiArIGEubmFtZSArIFwiX1wiICsgYi5uYW1lXSA9PSAxKSByZXR1cm4gLTFcclxuICAgICAgICAgICAgICAgICAgICBlbHNlIGlmIChzb2x1dGlvbltcInhfXCIgKyBiLm5hbWUgKyBcIl9cIiArIGEubmFtZV0gPT0gMSkgcmV0dXJuIDFcclxuICAgICAgICAgICAgICAgICAgICBlbHNlIGlmIChzb2x1dGlvbltcInhfXCIgKyBiLm5hbWUgKyBcIl9cIiArIGEubmFtZV0gPT0gMCkgcmV0dXJuIC0xXHJcbiAgICAgICAgICAgICAgICB9KVxyXG5cclxuICAgICAgICAgICAgICAgIGZvciAobGV0IGo9MDsgajx0YWJsZS5hdHRyaWJ1dGVzLmxlbmd0aDsgaisrKXtcclxuICAgICAgICAgICAgICAgICAgICB0YWJsZS5hdHRyaWJ1dGVzW2pdLndlaWdodCA9IGo7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbn0iLCJjbGFzcyBTd2VlcCB7XHJcbiAgICBjb25zdHJ1Y3RvcihnKXtcclxuICAgICAgICB0aGlzLmcgPSBnO1xyXG4gICAgICAgIHRoaXMuZWxhcHNlZFRpbWUgPSAwO1xyXG4gICAgfVxyXG5cclxuICAgIGFycmFuZ2UoKXtcclxuICAgICAgICBsZXQgc3RhcnRUaW1lID0gbmV3IERhdGUoKS5nZXRUaW1lKCk7XHJcblxyXG4gICAgICAgIHRoaXMuZy5zZXRFeGFjdFdlaWdodHMoKTtcclxuICAgICAgICB0aGlzLnN3ZWVwUmlnaHQoKTtcclxuICAgICAgICB0aGlzLnN3ZWVwTGVmdCgpO1xyXG5cclxuICAgICAgICB0aGlzLmVsYXBzZWRUaW1lID0gbmV3IERhdGUoKS5nZXRUaW1lKCkgLSBzdGFydFRpbWU7XHJcbiAgICB9XHJcblxyXG4gICAgc3dlZXBSaWdodCgpe1xyXG4gICAgICAgIGZvciAobGV0IGkgPSAxOyBpIDw9IHRoaXMuZy5tYXhEZXB0aDsgaSsrKXtcclxuICAgICAgICAgICAgbGV0IGxheWVyVGFibGVzID0gdGhpcy5nLnRhYmxlSW5kZXhbaV07XHJcbiAgICAgICAgICAgIGxldCBjcm9zc2VzLCBjdXJDcm9zc2VzO1xyXG5cclxuICAgICAgICAgICAgZG8ge1xyXG4gICAgICAgICAgICAgICAgY3Jvc3NlcyA9IHRoaXMuZy5nZXRFZGdlQ3Jvc3NpbmdzQXREZXB0aChpLTEpICsgdGhpcy5nLmdldEVkZ2VDcm9zc2luZ3NBdERlcHRoKGkpO1xyXG4gICAgICAgICAgICAgICAgY3VyQ3Jvc3NlcyA9IGNyb3NzZXM7XHJcblxyXG4gICAgICAgICAgICAgICAgZG8ge1xyXG4gICAgICAgICAgICAgICAgICAgIGNyb3NzZXMgPSB0aGlzLmcuZ2V0RWRnZUNyb3NzaW5nc0F0RGVwdGgoaS0xKSArIHRoaXMuZy5nZXRFZGdlQ3Jvc3NpbmdzQXREZXB0aChpKTtcclxuICAgICAgICAgICAgICAgICAgICBjdXJDcm9zc2VzID0gY3Jvc3NlcztcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgaj0wOyBqPGxheWVyVGFibGVzLmxlbmd0aCAtIDE7IGorKyl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCB0MSA9IGxheWVyVGFibGVzW2pdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgdDIgPSBsYXllclRhYmxlc1tqKzFdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnN3YXAodDEsIHQyKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IG5ld0Nyb3NzZXMgPSB0aGlzLmcuZ2V0RWRnZUNyb3NzaW5nc0F0RGVwdGgoaS0xKSArIHRoaXMuZy5nZXRFZGdlQ3Jvc3NpbmdzQXREZXB0aChpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGN1ckNyb3NzZXMgPiBuZXdDcm9zc2VzKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN1ckNyb3NzZXMgPSBuZXdDcm9zc2VzXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYXllclRhYmxlc1tqXSA9IHQyO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGF5ZXJUYWJsZXNbaisxXSA9IHQxO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgdGhpcy5zd2FwKHQxLCB0Mik7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIH0gd2hpbGUgKGNyb3NzZXMgPiBjdXJDcm9zc2VzKTtcclxuXHJcbiAgICAgICAgICAgICAgICBkbyB7XHJcbiAgICAgICAgICAgICAgICAgICAgY3Jvc3NlcyA9IHRoaXMuZy5nZXRFZGdlQ3Jvc3NpbmdzQXREZXB0aChpLTEpICsgdGhpcy5nLmdldEVkZ2VDcm9zc2luZ3NBdERlcHRoKGkpO1xyXG4gICAgICAgICAgICAgICAgICAgIGN1ckNyb3NzZXMgPSBjcm9zc2VzO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBqPTA7IGo8bGF5ZXJUYWJsZXMubGVuZ3RoOyBqKyspe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgYXR0cnMgPSBsYXllclRhYmxlc1tqXS5hdHRyaWJ1dGVzO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgaz0wOyBrPGF0dHJzLmxlbmd0aCAtMTsgaysrKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBhMSA9IGF0dHJzW2tdXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgYTIgPSBhdHRyc1trKzFdXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnN3YXAoYTEsIGEyKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgbmV3Q3Jvc3NlcyA9IHRoaXMuZy5nZXRFZGdlQ3Jvc3NpbmdzQXREZXB0aChpLTEpICsgdGhpcy5nLmdldEVkZ2VDcm9zc2luZ3NBdERlcHRoKGkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjdXJDcm9zc2VzID4gbmV3Q3Jvc3Nlcyl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY3VyQ3Jvc3NlcyA9IG5ld0Nyb3NzZXM7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXR0cnNba10gPSBhMjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhdHRyc1trKzFdID0gYTE7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgdGhpcy5zd2FwKGExLCBhMik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgfSB3aGlsZSAoY3Jvc3NlcyA+IGN1ckNyb3NzZXMpO1xyXG5cclxuICAgICAgICAgICAgfSB3aGlsZSAoY3Jvc3NlcyA+IGN1ckNyb3NzZXMpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBzd2VlcExlZnQoKXtcclxuICAgICAgICBmb3IgKGxldCBpPXRoaXMuZy5tYXhEZXB0aDsgaT49MjsgaS0tKXtcclxuICAgICAgICAgICAgbGV0IGxheWVyVGFibGVzID0gdGhpcy5nLnRhYmxlSW5kZXhbaS0xXTtcclxuICAgICAgICAgICAgbGV0IGNyb3NzZXMsIGN1ckNyb3NzZXM7XHJcblxyXG4gICAgICAgICAgICBkbyB7XHJcbiAgICAgICAgICAgICAgICBjcm9zc2VzID0gdGhpcy5nLmdldEVkZ2VDcm9zc2luZ3NBdERlcHRoKGktMSkgKyB0aGlzLmcuZ2V0RWRnZUNyb3NzaW5nc0F0RGVwdGgoaS0yKTtcclxuICAgICAgICAgICAgICAgIGN1ckNyb3NzZXMgPSBjcm9zc2VzO1xyXG5cclxuICAgICAgICAgICAgICAgIGRvIHtcclxuICAgICAgICAgICAgICAgICAgICBjcm9zc2VzID0gdGhpcy5nLmdldEVkZ2VDcm9zc2luZ3NBdERlcHRoKGktMSkgKyB0aGlzLmcuZ2V0RWRnZUNyb3NzaW5nc0F0RGVwdGgoaS0yKTtcclxuICAgICAgICAgICAgICAgICAgICBjdXJDcm9zc2VzID0gY3Jvc3NlcztcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgaj0wOyBqPGxheWVyVGFibGVzLmxlbmd0aCAtIDE7IGorKyl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCB0MSA9IGxheWVyVGFibGVzW2pdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgdDIgPSBsYXllclRhYmxlc1tqKzFdO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zd2FwKHQxLCB0Mik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBuZXdDcm9zc2VzID0gdGhpcy5nLmdldEVkZ2VDcm9zc2luZ3NBdERlcHRoKGktMSkgKyB0aGlzLmcuZ2V0RWRnZUNyb3NzaW5nc0F0RGVwdGgoaS0yKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGN1ckNyb3NzZXMgPiBuZXdDcm9zc2VzKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN1ckNyb3NzZXMgPSBuZXdDcm9zc2VzO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGF5ZXJUYWJsZXNbal0gPSB0MjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxheWVyVGFibGVzW2orMV0gPSB0MTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHRoaXMuc3dhcCh0MSwgdDIpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0gd2hpbGUgKGNyb3NzZXMgPiBjdXJDcm9zc2VzKTtcclxuXHJcbiAgICAgICAgICAgICAgICBkbyB7XHJcbiAgICAgICAgICAgICAgICAgICAgY3Jvc3NlcyA9IHRoaXMuZy5nZXRFZGdlQ3Jvc3NpbmdzQXREZXB0aChpLTEpICsgdGhpcy5nLmdldEVkZ2VDcm9zc2luZ3NBdERlcHRoKGktMik7XHJcbiAgICAgICAgICAgICAgICAgICAgY3VyQ3Jvc3NlcyA9IGNyb3NzZXM7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGZvciAobGV0IGo9MDsgajxsYXllclRhYmxlcy5sZW5ndGg7IGorKyl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBhdHRycyA9IGxheWVyVGFibGVzW2pdLmF0dHJpYnV0ZXM7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBrPTA7IGs8YXR0cnMubGVuZ3RoIC0xOyBrKyspe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGExID0gYXR0cnNba11cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBhMiA9IGF0dHJzW2srMV1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc3dhcChhMSwgYTIpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBuZXdDcm9zc2VzID0gdGhpcy5nLmdldEVkZ2VDcm9zc2luZ3NBdERlcHRoKGktMSkgKyB0aGlzLmcuZ2V0RWRnZUNyb3NzaW5nc0F0RGVwdGgoaS0yKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoY3VyQ3Jvc3NlcyA+IG5ld0Nyb3NzZXMpe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN1ckNyb3NzZXMgPSBuZXdDcm9zc2VzO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJzW2tdID0gYTI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXR0cnNbaysxXSA9IGExO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHRoaXMuc3dhcChhMSwgYTIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSB3aGlsZSAoY3Jvc3NlcyA+IGN1ckNyb3NzZXMpO1xyXG5cclxuICAgICAgICAgICAgfSB3aGlsZSAoY3Jvc3NlcyA+IGN1ckNyb3NzZXMpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBzd2FwKHcxLCB3Mil7XHJcbiAgICAgICAgbGV0IHRtcHcgPSB3MS53ZWlnaHQ7XHJcbiAgICAgICAgdzEud2VpZ2h0ID0gdzIud2VpZ2h0O1xyXG4gICAgICAgIHcyLndlaWdodCA9IHRtcHc7XHJcbiAgICB9XHJcbn0iLCJjbGFzcyBUYWJsZSB7XHJcbiAgICBjb25zdHJ1Y3RvcihuYW1lLCBoZWFkZXIsIG1haW4sIGRlcHRoLCB0eXBlPXVuZGVmaW5lZCl7XHJcbiAgICAgICAgdGhpcy5uYW1lID0gbmFtZTtcclxuICAgICAgICB0aGlzLmhlYWRlciA9IGhlYWRlcjtcclxuICAgICAgICB0aGlzLm1haW4gPSBtYWluO1xyXG4gICAgICAgIHRoaXMuZGVwdGggPSBkZXB0aDtcclxuICAgICAgICB0aGlzLmF0dHJpYnV0ZXMgPSBbXTtcclxuICAgICAgICB0aGlzLmF0dHJNYXBzID0gW107XHJcbiAgICAgICAgdGhpcy53ZWlnaHQgPSAwO1xyXG4gICAgICAgIHRoaXMuZ3JvdXAgPSB1bmRlZmluZWQ7XHJcbiAgICAgICAgdGhpcy5ncm91cHMgPSBbXTtcclxuICAgICAgICB0aGlzLmdyYXBoID0gdW5kZWZpbmVkO1xyXG4gICAgICAgIHRoaXMudmlzaWJpbGl0eSA9ICd2aXNpYmxlJztcclxuICAgICAgICB0aGlzLnZlcnRpY2FsQXR0ck9mZnNldCA9IDA7XHJcbiAgICAgICAgdGhpcy5pZCA9IG5hbWU7XHJcbiAgICAgICAgdGhpcy50eXBlID0gdHlwZTtcclxuICAgIH1cclxuXHJcbiAgICBhZGRBdHRyaWJ1dGUoYXR0cmlidXRlKXtcclxuICAgICAgICB0aGlzLmF0dHJpYnV0ZXMucHVzaChuZXcgQXR0cmlidXRlKHRoaXMsIGF0dHJpYnV0ZSkpXHJcbiAgICB9XHJcblxyXG4gICAgY29tcGFyZVRvKG90aGVyVGFibGUpe1xyXG4gICAgICAgIGlmICh0aGlzLmRlcHRoID4gb3RoZXJUYWJsZS5kZXB0aCkgcmV0dXJuIC0xO1xyXG4gICAgICAgIGVsc2UgaWYgKHRoaXMuZGVwdGggPCBvdGhlclRhYmxlLmRlcHRoKSByZXR1cm4gMTtcclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMud2VpZ2h0IDwgb3RoZXJUYWJsZS53ZWlnaHQpIHJldHVybiAxO1xyXG4gICAgICAgICAgICBlbHNlIGlmICh0aGlzLndlaWdodCA+IG90aGVyVGFibGUud2VpZ2h0KSByZXR1cm4gLTE7XHJcbiAgICAgICAgICAgIGVsc2UgcmV0dXJuIDA7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59IiwibGV0IGRyYXdHcmFwaCA9IChzdmcsIGcsIGFsZ29yaXRobSA9IHVuZGVmaW5lZCkgPT4ge1xuICAgIGxldCBsaW5lID0gZDMubGluZSgpXG4gICAgICAgIC5jdXJ2ZShkMy5jdXJ2ZUJhc2lzKTtcblxuICAgIGxldCBzdHJhaWdodGxpbmUgPSBkMy5saW5lKClcblxuICAgIHRhYmxlX3ZlcnRfc3BhY2UgPSBnLmJhc2VSb3dEaXN0YW5jZSAqIGF0dHJfaGVpZ2h0XG5cbiAgICB2aXNnID0gc3ZnLmFwcGVuZCgnZycpXG4gICAgICAgIC5hdHRyKCd0cmFuc2Zvcm0nLCAndHJhbnNsYXRlKDIwLCAyMCknKVxuXG4gICAgLy8gdGVtcCBncmlkIGluZGljYXRvclxuICAgIGZvciAobGV0IGkgaW4gWyAuLi4gQXJyYXkoMTApLmtleXMoKV0pe1xuICAgICAgICB2aXNnLmFwcGVuZCgncGF0aCcpXG4gICAgICAgICAgICAuYXR0cignc3Ryb2tlLXdpZHRoJywgMSlcbiAgICAgICAgICAgIC5hdHRyKCdzdHJva2UnLCAnI2NjYycpXG4gICAgICAgICAgICAuYXR0cignZmlsbCcsICdub25lJylcbiAgICAgICAgICAgIC5zdHlsZShcInN0cm9rZS1kYXNoYXJyYXlcIiwgKFwiNSwgM1wiKSlcbiAgICAgICAgICAgIC5hdHRyKCdkJywgc3RyYWlnaHRsaW5lKFtbMCwgYXR0cl9oZWlnaHQqZy5iYXNlUm93RGlzdGFuY2UqaV0sIFsxMDAwLCBhdHRyX2hlaWdodCpnLmJhc2VSb3dEaXN0YW5jZSppXV0pKVxuICAgIH1cbiAgICBcblxuICAgIC8vICoqKioqXG4gICAgLy8gdGFibGVzXG4gICAgLy8gKioqKipcbiAgICB0YWJsZWdyb3VwcyA9IHZpc2cuc2VsZWN0QWxsKFwiLnRhYmxlc1wiKVxuICAgICAgICAuZGF0YShnLnRhYmxlcylcbiAgICAgICAgLmVudGVyKClcbiAgICAgICAgLmFwcGVuZCgnZycpXG4gICAgICAgIC5hdHRyKCdjbGFzcycsICd0YWJsZWdyb3VwJylcbiAgICAgICAgLmF0dHIoJ2lkJywgZCA9PiAndGFibGVncm91cF8nICsgZC5uYW1lKVxuICAgICAgICAuc3R5bGUoJ3Zpc2liaWxpdHknLCBkID0+IGQudmlzaWJpbGl0eSlcbiAgICAgICAgLmF0dHIoJ3RyYW5zZm9ybScsIGQgPT4gXG4gICAgICAgICAgICBcInRyYW5zbGF0ZShcIiArIChkLmRlcHRoKmRlcHRoX2Rpc3RhbmNlKSArIFwiLFwiIFxuICAgICAgICAgICAgKyAoZy50YWJsZUluZGV4W2QuZGVwdGhdLmluZGV4T2YoZCkgKiB0YWJsZV92ZXJ0X3NwYWNlICsgZC52ZXJ0aWNhbEF0dHJPZmZzZXQgKiBhdHRyX2hlaWdodCkgKyBcIilcIiApXG5cbiAgICB0YWJsZWdyb3Vwcy5hcHBlbmQoJ3JlY3QnKVxuICAgICAgICAuYXR0cignd2lkdGgnLCB0YWJsZV93aWR0aClcbiAgICAgICAgLmF0dHIoJ2hlaWdodCcsIGQgPT4gZC5hdHRyaWJ1dGVzLmxlbmd0aCAqIGF0dHJfaGVpZ2h0ICsgaGVhZGVyX2hlaWdodCkgIFxuICAgICAgICAuYXR0cignZmlsbCcsIGQgPT4gZC50eXBlID09IFwiZ3JvdXBoZWFkZXJcIj8gXCIjZWVlXCIgOiAnYmxhY2snKVxuICAgICAgICAuYXR0cignc3Ryb2tlJywgJ2dyYXknKVxuICAgICAgICAub24oJ2NsaWNrJywgZCA9PiBjb25zb2xlLmxvZyhkKSlcblxuICAgIHRhYmxlZ3JvdXBzLmFwcGVuZCgndGV4dCcpXG4gICAgICAgIC5hdHRyKCd4JywgdGFibGVfd2lkdGgvMilcbiAgICAgICAgLmF0dHIoJ3knLCBhdHRyX2hlaWdodC8yICsgNSlcbiAgICAgICAgLmF0dHIoJ3RleHQtYW5jaG9yJywgJ21pZGRsZScpXG4gICAgICAgIC5hdHRyKCdmaWxsJywgZCA9PiBkLnR5cGUgPT0gXCJncm91cGhlYWRlclwiPyBcImJsYWNrXCIgOiAnd2hpdGUnKVxuICAgICAgICAuYXR0cignZm9udC1zaXplJywgJzAuN2VtJylcbiAgICAgICAgLmF0dHIoXCJmb250LWZhbWlseVwiLCBcIkFyaWFsXCIpXG4gICAgICAgIC50ZXh0KGQgPT4gZC5oZWFkZXIgKyBcIiB3OlwiICsgZC53ZWlnaHQpXG4gICAgXG4gICAgLy8gKioqKipcbiAgICAvLyBhdHRyaWJ1dGVzXG4gICAgLy8gKioqKipcbiAgICBhdHRyZ3JvdXBzID0gdGFibGVncm91cHMuc2VsZWN0QWxsKCcuYXR0cnMnKVxuICAgICAgICAuZGF0YShkID0+IGQuYXR0cmlidXRlcylcbiAgICAgICAgLmVudGVyKClcbiAgICAgICAgLmFwcGVuZCgnZycpXG4gICAgICAgIC5hdHRyKCd0cmFuc2Zvcm0nLCAoZCwgaSkgPT4gXCJ0cmFuc2xhdGUoMCwgXCIgKyAoaGVhZGVyX2hlaWdodCArIChpKSphdHRyX2hlaWdodCkgKyBcIilcIilcbiAgICAgICAgXG4gICAgYXR0cmdyb3Vwcy5hcHBlbmQoXCJyZWN0XCIpXG4gICAgICAgIC5hdHRyKFwid2lkdGhcIiwgdGFibGVfd2lkdGgpXG4gICAgICAgIC5hdHRyKFwiaGVpZ2h0XCIsIGF0dHJfaGVpZ2h0KVxuICAgICAgICAuYXR0cihcImZpbGxcIiwgXCIjY2NjXCIpXG4gICAgICAgIC5hdHRyKFwic3Ryb2tlXCIsIFwid2hpdGVcIilcbiAgICAgICAgLmF0dHIoXCJzdHJva2Utd2lkdGhcIiwgMilcbiAgICAgICAgLm9uKCdjbGljaycsIGQgPT4gY29uc29sZS5sb2coZCkpXG5cbiAgICBhdHRyZ3JvdXBzLmFwcGVuZCgndGV4dCcpXG4gICAgICAgIC5hdHRyKCd4JywgdGFibGVfd2lkdGgvMilcbiAgICAgICAgLmF0dHIoJ3knLCBhdHRyX2hlaWdodC8yICsgMylcbiAgICAgICAgLmF0dHIoJ3RleHQtYW5jaG9yJywgJ21pZGRsZScpXG4gICAgICAgIC5hdHRyKCdmb250LXNpemUnLCAnMC43ZW0nKVxuICAgICAgICAuYXR0cihcImZvbnQtZmFtaWx5XCIsIFwiQXJpYWxcIilcbiAgICAgICAgLnRleHQoZCA9PiBkLmF0dHIgKyBcIiB3OlwiICsgZC53ZWlnaHQpIFxuXG4gICAgbGV0IGdldF8xc3RfY29vcmQgPSAoZCkgPT4gXG4gICAgICAgIFtkLmxlZnRUYWJsZS5kZXB0aCAqIGRlcHRoX2Rpc3RhbmNlICsgdGFibGVfd2lkdGgsXG4gICAgICAgIGQubGVmdFRhYmxlLmF0dHJpYnV0ZXMuaW5kZXhPZihkLmF0dDEpKmF0dHJfaGVpZ2h0ICsgaGVhZGVyX2hlaWdodCArIGF0dHJfaGVpZ2h0LzIgKyBnLnRhYmxlSW5kZXhbZC5sZWZ0VGFibGUuZGVwdGhdLmluZGV4T2YoZC5sZWZ0VGFibGUpKnRhYmxlX3ZlcnRfc3BhY2UgKyBkLmxlZnRUYWJsZS52ZXJ0aWNhbEF0dHJPZmZzZXQqYXR0cl9oZWlnaHRdXG4gICBcbiAgICBsZXQgZ2V0XzJuZF9jb29yZCA9IChkKSA9PiB7XG4gICAgICAgIGlmIChkLmxlZnRUYWJsZS5kZXB0aCAhPSBkLnJpZ2h0VGFibGUuZGVwdGgpXG4gICAgICAgICAgICByZXR1cm4gW2QucmlnaHRUYWJsZS5kZXB0aCAqIGRlcHRoX2Rpc3RhbmNlLCBcbiAgICAgICAgICAgICAgICBkLnJpZ2h0VGFibGUuYXR0cmlidXRlcy5pbmRleE9mKGQuYXR0MikqYXR0cl9oZWlnaHQgKyBoZWFkZXJfaGVpZ2h0ICsgYXR0cl9oZWlnaHQvMiArIGcudGFibGVJbmRleFtkLnJpZ2h0VGFibGUuZGVwdGhdLmluZGV4T2YoZC5yaWdodFRhYmxlKSp0YWJsZV92ZXJ0X3NwYWNlICsgZC5yaWdodFRhYmxlLnZlcnRpY2FsQXR0ck9mZnNldCphdHRyX2hlaWdodF1cbiAgICAgICAgZWxzZSByZXR1cm4gW2QubGVmdFRhYmxlLmRlcHRoICogZGVwdGhfZGlzdGFuY2UgKyB0YWJsZV93aWR0aCxcbiAgICAgICAgICAgIGQucmlnaHRUYWJsZS5hdHRyaWJ1dGVzLmluZGV4T2YoZC5hdHQyKSphdHRyX2hlaWdodCArIGhlYWRlcl9oZWlnaHQgKyBhdHRyX2hlaWdodC8yICsgZy50YWJsZUluZGV4W2QucmlnaHRUYWJsZS5kZXB0aF0uaW5kZXhPZihkLnJpZ2h0VGFibGUpKnRhYmxlX3ZlcnRfc3BhY2UgKyBkLnJpZ2h0VGFibGUudmVydGljYWxBdHRyT2Zmc2V0KmF0dHJfaGVpZ2h0XSAgICBcbiAgICB9XG5cbiAgICAvLyAqKioqKlxuICAgIC8vIGdyb3Vwc1xuICAgIC8vICoqKioqXG4gICAgZy51cGRhdGVHcm91cENvb3JkcygpXG4gICAgdmlzZy5zZWxlY3RBbGwoJy5ncm91cHJlY3RzJykgXG4gICAgICAgIC5kYXRhKGcuZ3JvdXBzKVxuICAgICAgICAuZW50ZXIoKVxuICAgICAgICAuYXBwZW5kKCdwYXRoJylcbiAgICAgICAgLmF0dHIoJ2NsYXNzJywgJ2dyb3VwbGluZXMnKVxuICAgICAgICAuYXR0cignc3Ryb2tlLXdpZHRoJywgMylcbiAgICAgICAgLmF0dHIoJ3N0cm9rZScsICdibGFjaycpXG4gICAgICAgIC5hdHRyKCdmaWxsJywgJ25vbmUnKVxuICAgICAgICAuc3R5bGUoXCJzdHJva2UtZGFzaGFycmF5XCIsIChcIjUsIDNcIikpXG4gICAgICAgIC5hdHRyKCdkJywgZCA9PiB7IHJldHVybiBzdHJhaWdodGxpbmUoZC5jb29yZHMpIH0pXG5cblxuICAgIC8vICoqKioqXG4gICAgLy8gZWRnZXNcbiAgICAvLyAqKioqKlxuICAgIGVkZ2VzID0gdmlzZy5zZWxlY3RBbGwoJy5lZGdlcycpXG4gICAgICAgIC5kYXRhKGcuZWRnZXMpXG4gICAgICAgIC5lbnRlcigpXG4gICAgICAgIC5hcHBlbmQoJ3BhdGgnKVxuICAgICAgICAuYXR0cignc3Ryb2tlJywgJ2JsYWNrJylcbiAgICAgICAgLmF0dHIoJ2ZpbGwnLCAnbm9uZScpXG4gICAgICAgIC5hdHRyKCdkJywgZCA9PiB7XG4gICAgICAgICAgICBmaXJzdCA9IGdldF8xc3RfY29vcmQoZClcbiAgICAgICAgICAgIHNlY29uZCA9IGdldF8ybmRfY29vcmQoZClcbiAgICAgICAgICAgIHJldHVybiBsaW5lKFxuICAgICAgICAgICAgICAgIFtmaXJzdCwgXG4gICAgICAgICAgICAgICAgW2ZpcnN0WzBdICsgZGVwdGhfZGlzdGFuY2UqMC4yLCBmaXJzdFsxXV0sXG4gICAgICAgICAgICAgICAgW3NlY29uZFswXSArIChkLmxlZnRUYWJsZS5kZXB0aCA9PSBkLnJpZ2h0VGFibGUuZGVwdGggPyAxIDogLTEpKmRlcHRoX2Rpc3RhbmNlKjAuMiwgc2Vjb25kWzFdXSxcbiAgICAgICAgICAgICAgICBzZWNvbmRdXG4gICAgICAgICAgICApXG4gICAgICAgIH0pXG5cbiAgICBkMy5zZWxlY3Qoc3ZnLm5vZGUoKS5wYXJlbnROb2RlKVxuICAgICAgICAuYXBwZW5kKCdkaXYnKS5hcHBlbmQoJ3RleHQnKVxuICAgICAgICAudGV4dCgnY3Jvc3NpbmdzOiAnICsgZy5nZXRFZGdlQ3Jvc3NpbmdzKCkgKyAnLCB0YWJsZXM6ICcgKyBnLnRhYmxlcy5sZW5ndGggKyAnLCBlZGdlczogJyArIGcuZWRnZXMubGVuZ3RoICsgXCIsIGJlbmRpbmVzczogXCIgKyBnLmdldEdyYXBoVG90YWxFZGdlQmVuZGluZXNzKCkpXG4gICAgICAgIC5zdHlsZSgnZm9udC1mYW1pbHknLCAnQXJpYWwnKVxuICAgICAgICAuYXR0cignY2xhc3MnLCAnY3Jvc3NpbmdfY291bnQnKVxuXG4gICAgaWYgKGFsZ29yaXRobSAhPSB1bmRlZmluZWQgJiYgYWxnb3JpdGhtLmVsYXBzZWRUaW1lICE9IHVuZGVmaW5lZCl7XG4gICAgICAgIGQzLnNlbGVjdChzdmcubm9kZSgpLnBhcmVudE5vZGUpXG4gICAgICAgICAgICAuYXBwZW5kKCdkaXYnKS5hcHBlbmQoJ3RleHQnKVxuICAgICAgICAgICAgLnRleHQoJ3RpbWU6ICcgKyBhbGdvcml0aG0uZWxhcHNlZFRpbWUgKyAnbXMnKVxuICAgICAgICAgICAgLnN0eWxlKCdmb250LWZhbWlseScsICdBcmlhbCcpXG4gICAgICAgICAgICAuYXR0cignY2xhc3MnLCAnY3Jvc3NpbmdfY291bnQnKVxuXG4gICAgICAgIGlmIChhbGdvcml0aG0uaXRlcmF0aW9ucyAhPSB1bmRlZmluZWQpe1xuXG4gICAgICAgICAgICBkMy5zZWxlY3Qoc3ZnLm5vZGUoKS5wYXJlbnROb2RlKVxuICAgICAgICAgICAgICAgIC5hcHBlbmQoJ3RleHQnKVxuICAgICAgICAgICAgICAgIC50ZXh0KCfij7nvuI8nKVxuXG4gICAgICAgICAgICBkMy5zZWxlY3Qoc3ZnLm5vZGUoKS5wYXJlbnROb2RlKVxuICAgICAgICAgICAgICAgIC5hcHBlbmQoJ3RleHQnKVxuICAgICAgICAgICAgICAgIC50ZXh0KCfij6onKVxuICAgICAgICAgICAgICAgIC5vbignY2xpY2snLCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGFsZ29yaXRobS5jdXJfaXRlcmF0aW9uLS07XG4gICAgICAgICAgICAgICAgICAgIGFsZ29yaXRobS5hcHBseV9pdGVyYXRpb24oYWxnb3JpdGhtLmN1cl9pdGVyYXRpb24pO1xuXG4gICAgICAgICAgICAgICAgICAgIHN2Zy5zZWxlY3RBbGwoJy50YWJsZWdyb3VwJylcbiAgICAgICAgICAgICAgICAgICAgICAgIC50cmFuc2l0aW9uKClcbiAgICAgICAgICAgICAgICAgICAgICAgIC5kdXJhdGlvbig3NTApXG4gICAgICAgICAgICAgICAgICAgICAgICAuYXR0cigndHJhbnNmb3JtJywgZCA9PiBcbiAgICAgICAgICAgICAgICAgICAgICAgICd0cmFuc2xhdGUoJyArIChkLmRlcHRoKmRlcHRoX2Rpc3RhbmNlKSArICcgLCAgJyArIChhbGdvcml0aG0uZy50YWJsZUluZGV4W2QuZGVwdGhdLmluZGV4T2YoZCkgKiB0YWJsZV92ZXJ0X3NwYWNlKSAgKyAnICknKVxuXG4gICAgICAgICAgICAgICAgICAgIC8vIGQzLnNlbGVjdEFsbFxuICAgICAgICAgICAgICAgICAgICAvLyAuYXR0cigndHJhbnNmb3JtJywgZCA9PiBcbiAgICAgICAgICAgICAgICAgICAgLy8gICAgIC8vIFwidHJhbnNsYXRlKFwiICsgKGQuZGVwdGgqZGVwdGhfZGlzdGFuY2UpICsgXCIsXCIgXG4gICAgICAgICAgICAgICAgICAgIC8vICAgICAvLyArIGFsZ29yaXRobS5nLnRhYmxlSW5kZXhbZC5kZXB0aF0uaW5kZXhPZihkKSAqIHRhYmxlX3ZlcnRfc3BhY2UgKyBcIilcIiApXG4gICAgICAgICAgICAgICAgICAgIC8vICAgICBcInRyYW5zbGF0ZSgwLCAwKVwiXG4gICAgICAgICAgICAgICAgICAgIC8vICAgICApXG4gICAgICAgICAgICAgICAgfSlcblxuICAgICAgICAgICAgZDMuc2VsZWN0KHN2Zy5ub2RlKCkucGFyZW50Tm9kZSlcbiAgICAgICAgICAgICAgICAuYXBwZW5kKCd0ZXh0JylcbiAgICAgICAgICAgICAgICAudGV4dChhbGdvcml0aG0uY3VyX2l0ZXJhdGlvbilcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgZDMuc2VsZWN0KHN2Zy5ub2RlKCkucGFyZW50Tm9kZSlcbiAgICAgICAgICAgICAgICAuYXBwZW5kKCd0ZXh0JylcbiAgICAgICAgICAgICAgICAudGV4dCgn4o+pJylcbiAgICAgICAgICAgICAgICAub24oJ2NsaWNrJywgKCkgPT4ge1xuXG4gICAgICAgICAgICAgICAgfSlcblxuICAgICAgICAgICAgZDMuc2VsZWN0KHN2Zy5ub2RlKCkucGFyZW50Tm9kZSlcbiAgICAgICAgICAgICAgICAuYXBwZW5kKCd0ZXh0JylcbiAgICAgICAgICAgICAgICAudGV4dCgn4pa277iPJylcbiAgICAgICAgfVxuICAgIH1cbn0iLCIiXX0=
