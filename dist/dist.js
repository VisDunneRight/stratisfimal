class Attribute{constructor(t,s){this.table=t,this.name=s,this.attr=s,this.weight=0,this.diffEdges=0,this.randomEdges=0,this.sameEdges=0}}
class Edge{constructor(t,e,i,h){this.leftTable=t,this.att1=e,this.leftAttribute=e,this.rightTable=i,this.att2=h,this.rightAttribute=h}compareTo(t){if(this.leftTable==t.leftTable)if(this.rightTable==t.rightTable){if(this.leftAttribute.weight>t.leftAttribute.weight&&this.rightAttribute.weight<t.rightAttribute.weight)return!0;if(this.leftAttribute.weight<t.leftAttribute.weight&&this.rightAttribute.weight>t.rightAttribute.weight)return!0}else{if(this.rightTable.weight<t.rightTable.weight&&this.leftAttribute.weight>t.leftAttribute.weight)return!0;if(this.rightTable.weight>t.rightTable.weight&&this.leftAttribute.weight<t.leftAttribute.weight)return!0}else if(this.rightTable==t.rightTable)if(this.leftTable==t.leftTable){if(this.leftAttribute.weight>t.leftAttribute.weight&&this.rightAttribute.weight<t.rightAttribute.weight)return!0;if(this.leftAttribute.weight<t.leftAttribute.weight&&this.rightAttribute.weight>t.rightAttribute.weight)return!0}else{if(this.leftTable.weight<t.leftTable.weight&&this.rightAttribute.weight>t.rightAttribute.weight)return!0;if(this.leftTable.weight>t.leftTable.weight&&this.rightAttribute.weight<t.rightAttribute.weight)return!0}else{if(this.leftTable.weight<t.leftTable.weight&&this.rightTable.weight>t.rightTable.weight)return!0;if(this.leftTable.weight>t.leftTable.weight&&this.rightTable.weight<t.rightTable.weight)return!0}return!1}crosses(t){return this.leftTable.depth!=this.rightTable.depth&&t.leftTable.depth!=t.rightTable.depth&&!!this.compareTo(t)}}
class Graph{constructor(){this.edges=[],this.tables=[],this.tableIndex=[],this.edgeIndex=[],this.maxDepth=0,this.newLayer()}newLayer(){this.tableIndex.push([]),this.edgeIndex.push([])}addTable(t){for(;this.maxDepth<t.depth;)this.maxDepth+=1,this.newLayer();this.tables.push(t),this.tableIndex[t.depth].push(t)}addEdge(t){this.edges.push(t),this.edgeIndex[t.leftTable.depth].push(t)}ensureUniqueEdges(){}getEdgeCrossings(){let t=0;for(let e in this.edgeIndex)t+=this.getEdgeCrossingsAtDepth(e);return t}getEdgeCrossingsAtDepth(t){let e=0,s=this.edgeIndex[t];for(let t in s){let h=s[t];for(let i=parseFloat(t)+1;i<s.length;i++){let t=s[i];h.crosses(t)&&(console.log("Edge "+h.leftAttribute.name+h.rightAttribute.name+" crosses "+t.leftAttribute.name+t.rightAttribute.name),e+=1)}}return e}sortGraph(){for(let t of this.tables)t.main||(t.attributes=t.attributes.sort((t,e)=>t.weight>e.weight?1:-1));this.tables=this.tables.sort((t,e)=>t.weight>e.weight?1:-1)}setExactWeights(){for(let t in this.tableIndex){let e=this.tableIndex[t];e=e.sort((t,e)=>t.weight>e.weight?1:-1);for(let t in e){let s=e[t];s.weight=t;let h=s.attributes;h=h.sort((t,e)=>t.weight>e.weight?1:-1);for(let t in h)h[t].weight=t}}}}
class GraphGenerator{constructor(t=3,e="hello",r=[2,3],a=[1,5]){this.d=t,this.s=3,this.jd=.1,this.js=.05,this.attributeCounter=0,this.seed=e,this.rng=new Math.seedrandom(this.seed),this.tableDist=()=>r[0]+Math.round(this.rng()*(r[1]-r[0])),this.attrDist=()=>a[0]+Math.round(this.rng()*(a[1]-a[0]))}generate(){g=new Graph;for(var t=1;t<this.d;t++){g.newLayer();for(var e=0;e<this.tableDist();e++)g.addTable(this.generateTable(t,e))}return this.generateProjections(g),this.generateJoins(g),g.ensureUniqueEdges(),g}generateTable(t,e){name="T"+t+"_"+e;for(var r=new Table(name,name,!1,t),a=0;a<this.attrDist();a++)r.addAttribute("a"+this.attributeCounter),this.attributeCounter+=1;return r}generateProjections(t){let e=t.tableIndex[1],r=[],a=new Table("select","SELECT",!0,0),s=[],n=[],i=0;for(let t of e){let e=t.attributes,a=e[Math.floor(this.rng()*e.length)];s.push(a),n.push(a);for(let s of e)s!=a&&r.push(new Attribute(t,s));i++}let o=this.s*(r.length+i);for(t.addTable(a);i<o;i++){let t=Math.floor(this.rng()*r.length);r[t];r.splice(t,1)}for(let e of s){let r=new Attribute(a,"a"+this.attributeCounter++);a.attributes.push(r),t.addEdge(new Edge(a,r,e.table,e))}}generateInterLayerJoins(t){for(var e=1;e<this.d;e++){let r=t.tableIndex[e],a=t.tableIndex[e+1],s=[],n=[];for(let t of r){let e=t.attributes;for(let r of e)s.push(new Attribute(t,r))}for(let e of a){if(0==s.length)break;let r=e.attributes,a=r[Math.floor(this.rng()*r.length)],i=Math.floor(this.rng()*s.length),o=s[i];s.splice(i,1),t.addEdge(new Edge(o.table,o.attr,e,a)),o.diffEdges++,a.diffEdges++;for(let t of r)t!=a&&n.push(new Attribute(e,t))}for(let e of s){if(0==n.length)break;if(this.rng()<this.jd){let r=Math.floor(this.rng()*n.length),a=n[r];n.splice(r,1),t.addEdge(new Edge(e.table,e.attr,a.table,a.attr)),e.diffEdges++,a.diffEdges++}}}}generateInLayerJoins(){for(var t=1;t<this.d;t++){let e=g.tableIndex[t];for(let t of e){let r=[],a=[];for(let e of t.attributes)r.push(new Attribute(t,e));for(let r of e)if(t!=r)for(let t of r.attributes)0==t.sameEdges&&a.push(new Attribute(r,t));for(let t of r){if(0==a.length)break;if(this.rng()<this.js){let e=Math.floor(this.rng()*a.length),r=a[e];a.splice(e,1),g.addEdge(new Edge(t.table,t.attr,r.table,r.attr)),t.sameEdges++,r.sameEdges++}}}}}generateRandomJoins(){}generateJoins(t){this.generateInterLayerJoins(t),this.generateInLayerJoins(t),this.generateRandomJoins(t)}}
class Table{constructor(t,h,i,e){this.name=t,this.header=h,this.main=i,this.depth=e,this.attributes=[],this.attrMaps=[],this.weight=0}addAttribute(t){this.attributes.push(new Attribute(this,t))}compareTo(t){return this.depth<t.depth?-1:this.depth>t.depth?1:this.weight>t.weight}}
//# sourceMappingURL=data:application/json;charset=utf8;base64,
