class Attribute{constructor(t,i){this.table=t,this.name=i,this.attr=i,this.weight=0,this.diffEdges=0,this.randomEdges=0,this.sameEdges=0,this.mutable=!0,this.id=i}compareTo(t){return this.weight>t.weight?-1:this.weight<t.weight?1:0}}
class DumbHeuristic{constructor(t){this.g=t}arrange(){for(let t=0;t<this.g.maxDepth;t++){let e=g.edgeIndex[t];e=e.sort((t,e)=>t.compareTo(e));for(let t=0;t<e.length-1;t++){let i=e[t],r=e[t+1];i.leftTable==r.leftTable&&(i.leftAttribute.mutable||r.leftAttribute.mutable)&&(this.swap(i.leftAttribute,r.leftAttribute),(i.rightAttribute.mutable||r.rightAttribute.mutable)&&(i.rightTable==r.rightTable?this.swap(i.rightAttribute,r.rightAttribute):this.swap(i.rightTable,r.rightTable)))}}}swap(t,e){let i=t.weight;t.weight=e.weight,e.weight=i}}
class Edge{constructor(t,e,i,h){this.leftTable=t,this.att1=e,this.leftAttribute=e,this.rightTable=i,this.att2=h,this.rightAttribute=h}compareTo(t){if(this.leftTable==t.leftTable)if(this.rightTable==t.rightTable){if(this.leftAttribute.weight>t.leftAttribute.weight&&this.rightAttribute.weight<t.rightAttribute.weight)return!0;if(this.leftAttribute.weight<t.leftAttribute.weight&&this.rightAttribute.weight>t.rightAttribute.weight)return!0}else{if(this.rightTable.weight<t.rightTable.weight&&this.leftAttribute.weight>t.leftAttribute.weight)return!0;if(this.rightTable.weight>t.rightTable.weight&&this.leftAttribute.weight<t.leftAttribute.weight)return!0}else if(this.rightTable==t.rightTable)if(this.leftTable==t.leftTable){if(this.leftAttribute.weight>t.leftAttribute.weight&&this.rightAttribute.weight<t.rightAttribute.weight)return!0;if(this.leftAttribute.weight<t.leftAttribute.weight&&this.rightAttribute.weight>t.rightAttribute.weight)return!0}else{if(this.leftTable.weight<t.leftTable.weight&&this.rightAttribute.weight>t.rightAttribute.weight)return!0;if(this.leftTable.weight>t.leftTable.weight&&this.rightAttribute.weight<t.rightAttribute.weight)return!0}else{if(this.leftTable.weight<t.leftTable.weight&&this.rightTable.weight>t.rightTable.weight)return!0;if(this.leftTable.weight>t.leftTable.weight&&this.rightTable.weight<t.rightTable.weight)return!0}return!1}compareSelfEdgeTo(t){if(this.leftTable.depth==this.rightTable.depth&&t.leftTable.depth==t.rightTable.depth){if(this.leftTable==t.leftTable)if(this.rightTable==t.rightTable){if(this.leftAttribute.weight<t.leftAttribute.weight&&this.rightAttribute.weight<t.rightAttribute.weight)return!0;if(this.leftAttribute.weight>t.leftAttribute.weight&&this.rightAttribute.weight>t.rightAttribute.weight)return!0}else{if(this.leftAttribute.weight<t.leftAttribute.weight&&this.rightTable.weight<t.rightTable.weight)return!0;if(this.leftAttribute.weight>t.leftAttribute.weight&&this.rightTable.weight>t.rightTable.weight)return!0}else if(this.leftTable==t.rightTable)if(this.rightTable==t.leftTable){if(this.rightAttribute.weight<t.leftAttribute.weight&&this.leftAttribute.weight<t.rightAttribute.weight)return!0;if(this.rightAttribute.weight>t.leftAttribute.weight&&this.leftAttribute.weight>t.rightAttribute.weight)return!0}else{if(this.leftAttribute.weight<t.rightAttribute.weight&&this.rightTable.weight<t.leftTable.weight)return!0;if(this.leftAttribute.weight>t.rightAttribute.weight&&this.rightTable.weight>t.leftTable.weight)return!0}else if(this.rightTable==t.leftTable)if(this.leftTable==t.rightTable){if(this.rightAttribute.weight<t.leftAttribute.weight&&this.leftAttribute.weight<t.rightAttribute.weight)return!0;if(this.rightAttribute.weight>t.leftAttribute.weight&&this.leftAttribute.weight>t.rightAttribute.weight)return!0}else{if(this.rightAttribute.weight<t.leftAttribute.weight&&this.leftTable.weight<t.rightTable.weight)return!0;if(this.rightAttribute.weight>t.leftAttribute.weight&&this.leftTable.weight>t.rightTable.weight)return!0}else if(this.rightTable==t.rightTable)if(this.leftTable==t.leftTable){if(this.leftAttribute.weight<t.leftAttribute.weight&&this.rightAttribute.weight<t.rightAttribute.weight)return!0;if(this.leftAttribute.weight>t.leftAttribute.weight&&this.rightAttribute.weight>t.rightAttribute.weight)return!0}else{if(this.rightAttribute.weight<t.rightAttribute.weight&&this.leftTable.weight<t.leftTable.weight)return!0;if(this.rightAttribute.weight>t.rightAttribute.weight&&this.leftTable.weight>t.leftTable.weight)return!0}}else if(this.leftTable.depth==this.rightTable.depth)if(this.leftTable==t.leftTable){if(this.leftAttribute.weight<t.leftAttribute.weight&&this.rightTable.weight>t.leftTable.weight)return!0;if(this.leftAttribute.weight>t.leftAttribute.weight&&this.rightTable.weight<t.leftTable.weight)return!0}else if(this.rightTable==t.rightTable){if(this.rightAttribute.weight<t.leftAttribute.weight&&this.leftTable.weight>t.leftTable.weight)return!0;if(this.rightAttribute.weight>t.leftAttribute.weight&&this.leftTable.weight<t.leftTable.weight)return!0}else{if(this.leftTable.weight>t.leftTable.weight&&this.rightTable.weight<t.leftTable.weight)return!0;if(this.leftTable.weight<t.leftTable.weight&&this.rightTable.weight>t.leftTable.weight)return!0}else if(t.leftTable==this.leftTable){if(t.leftAttribute.weight<this.leftAttribute.weight&&t.rightTable.weight>this.leftTable.weight)return!0;if(t.leftAttribute.weight>this.leftAttribute.weight&&t.rightTable.weight<this.leftTable.weight)return!0}else if(t.rightTable==this.leftTable){if(t.rightAttribute.weight<this.leftAttribute.weight&&t.leftTable.weight>this.leftTable.weight)return!0;if(t.rightAttribute.weight>this.leftAttribute.weight&&t.leftTable.weight<this.leftTable.weight)return!0}else{if(t.leftTable.weight<this.leftAttribute.weight&&t.rightTable.weight>this.leftAttribute.weight)return!0;if(t.leftTable.weight>this.leftAttribute.weight&&t.rightTable.weight<this.leftAttribute.weight)return!0}}crosses(t){return this.leftTable.depth==this.rightTable.depth||t.leftTable.depth==t.rightTable.depth?this.compareSelfEdgeTo(t):!!this.compareTo(t)}compare(t){if(null==t)return 1;this.compareAttributes(this.leftTable,this.leftAttribute,t.leftTable,t.leftAttribute)}compareAttributes(t,e,i,h){let r=t.compareTo(i);return 0==r&&(r=e.compareTo(h)),r}isSameRankEdge(){return this.leftTable.depth==this.rightTable.depth}getBendiness(){let t=0,e=10/(10*this.leftTable.graph.baseRowDistance);return t=this.rightTable.weight+this.rightAttribute.weight*e+this.rightTable.verticalAttrOffset*e-(this.leftTable.weight+this.leftAttribute.weight*e+this.leftTable.verticalAttrOffset*e),t=Math.round(1e3*t)/1e3,Math.abs(t)}}
class Gansner{constructor(t){this.g=t,this.max_iterations=11,this.elapsedTime=0}median(t){return(t=t.sort()).length%2==0?(t[t.length/2]+t[t.length/2-1])/2:t[(t.length-1)/2]}applyArrangement(t){for(let e of t.tables){let t=this.g.tables.find(t=>t.name==e.name);t.weight=e.weight;for(let i of e.attributes){t.attributes.find(t=>t.name==i.name).weight=i.weight}}}arrange(){let t=(new Date).getTime(),e=this.g.getEdgeCrossings();for(let t=0;t<this.max_iterations;t++){let i=_.cloneDeep(this.g);t%2==0?this.arrangeLeft(i):this.arrangeRight(i),this.transpose(i);let a=i.getEdgeCrossings();a<=e&&(this.applyArrangement(i),e=a)}this.elapsedTime=(new Date).getTime()-t}arrangeLeft(t){for(let e=1;e<=t.maxDepth;e++){let i=t.tableIndex[e],a=t.edgeIndex[e-1];for(let t of i){let e=a.filter(e=>e.rightTable==t&&e.leftTable.depth!=e.rightTable.depth).map(t=>parseFloat(t.leftTable.weight));t.weight=this.median(e);for(let e of t.attributes){let i=a.filter(t=>t.rightAttribute==e&&t.leftTable.depth!=t.rightTable.depth).map(t=>parseFloat(t.leftTable.weight)),l=a.filter(t=>t.rightAttribute==e&&t.leftTable.depth!=t.rightTable.depth).map(t=>parseFloat(t.leftAttribute.weight));0!=i.length&&(e.weight=this.median(i)+this.median(l)/t.attributes.length)}}t.setExactWeights()}}arrangeRight(t){for(let e=t.maxDepth-1;e>0;e--){let i=t.tableIndex[e],a=t.edgeIndex[e];for(let t of i){let e=a.filter(e=>e.leftTable==t&&e.leftTable.depth!=e.rightTable.depth).map(t=>parseFloat(t.rightTable.weight));t.weight=this.median(e);for(let e of t.attributes){let i=a.filter(t=>t.leftAttribute==e&&t.leftTable.depth!=t.rightTable.depth).map(t=>parseFloat(t.rightTable.weight)),l=a.filter(t=>t.leftAttribute==e&&t.leftTable.depth!=t.rightTable.depth).map(t=>parseFloat(t.rightAttribute.weight));0!=i.length&&(e.weight=this.median(i)+this.median(l)/t.attributes.length)}}t.setExactWeights()}}transpose(t){let e=!0;for(;e;){e=!1;for(let i=0;i<=t.maxDepth;i++){let a=t.getEdgeCrossingsAtDepth(i),l=t.tableIndex[i];for(let h=0;h<l.length-1;h++){let r=l[h],s=l[h+1];this.swap(r,s),t.getEdgeCrossingsAtDepth(i)+t.getEdgeCrossingsAtDepth(i+1)<a?e=!0:this.swap(r,s)}for(let h of l)for(let l=0;l<h.attributes.length-1;l++){let r=h.attributes[l],s=h.attributes[l+1];this.swap(r,s),t.getEdgeCrossingsAtDepth(i)+t.getEdgeCrossingsAtDepth(i+1)<a?e=!0:this.swap(r,s)}}}}swap(t,e){let i=t.weight;t.weight=e.weight,e.weight=i}}
class GansnerSameRank{constructor(t){this.g=t,this.max_iterations=6,this.elapsedTime=0,this.iterations=[],this.cur_iteration=0}apply_iteration(t){this.applyArrangement(this.iterations[t])}quicksort(t){if(t.length<=1)return t;for(var e=t[0],i=[],a=[],s=1;s<t.length;s++)t[s]<e?i.push(t[s]):a.push(t[s]);return quicksort(i).concat(e,quicksort(a))}median(t){return(t=t.sort()).length%2==0?(t[t.length/2]+t[t.length/2-1])/2:t[(t.length-1)/2]}applyArrangement(t){for(let e of t.tables){let t=this.g.tables.find(t=>t.name==e.name);t.weight=e.weight,t.assignedWeight=e.assignedWeight;for(let i of e.attributes){let e=t.attributes.find(t=>t.name==i.name);e.weight=i.weight,e.assignedWeight=i.assignedWeight}}}arrange(){let t=(new Date).getTime();this.g.setExactWeights();let e=this.g.getEdgeCrossings();for(let t=0;t<this.max_iterations;t++){this.cur_iteration=t;let i=_.cloneDeep(this.g);t%2==0?this.arrangeLeft(i):this.arrangeRight(i),this.transpose(i);let a=i.getEdgeCrossings();a<=e&&(this.applyArrangement(i),e=a),this.iterations[this.cur_iteration]=_.cloneDeep(i)}this.elapsedTime=(new Date).getTime()-t}arrangeLeft(t){console.log("Left");let e={},i={};for(let a=1;a<=t.maxDepth+1;a++){let s=t.tableIndex[a],r=t.edgeIndex[a-1];for(let t in s){let a=s[t],n=r.filter(t=>t.rightTable==a&&!this.isSameRankEdge(t)).map(t=>parseFloat(t.leftTable.weight)),l=this.median(n);isNaN(l)||(e[a.name]=l),i[a.name]={};for(let t of a.attributes){let e=r.filter(e=>e.rightAttribute==t&&!this.isSameRankEdge(e)).map(t=>parseFloat(t.leftTable.weight)),s=r.filter(e=>e.rightAttribute==t&&!this.isSameRankEdge(e)).map(t=>parseFloat(t.leftAttribute.weight)),n=parseFloat(this.median(e))+parseFloat(this.median(s)/a.attributes.length);isNaN(n)||(i[a.name][t.name]=n)}}}this.reorder(t,e,i)}arrangeRight(t){console.log("Right");let e={},i={};for(let a=t.maxDepth-1;a>0;a--){let s=t.tableIndex[a],r=t.edgeIndex[a];for(let t of s){let a=r.filter(e=>e.leftTable==t).map(t=>parseFloat(t.rightTable.weight)),s=parseFloat(this.median(a));isNaN(s)||(e[t.name]=s),i[t.name]={};for(let e of t.attributes){let a=r.filter(t=>t.leftAttribute==e).map(t=>parseFloat(t.rightTable.weight)),s=r.filter(t=>t.leftAttribute==e).map(t=>parseFloat(t.rightAttribute.weight)),n=parseFloat(this.median(a))+parseFloat(this.median(s)/t.attributes.length);isNaN(n)||(i[t.name][e.name]=n)}}}this.reorder(t,e,i)}isSameRankEdge(t){return t.leftTable.depth==t.rightTable.depth}reorder(t,e,i){for(let a in t.tableIndex)if(0!=a){for(let s in t.tableIndex[a]){let r=t.tableIndex[a][s];if(null!=e[r.name]){r.weight=e[r.name],r.assignedWeight=e[r.name];for(let t in r.attributes){let e=r.attributes[t];e.weight=i[r.name][e.name],e.assignedWeight=i[r.name][e.name]}r.attributes.sort((t,e)=>isNaN(t.weight)||isNaN(e.weight)?0:t.weight>e.weight?1:-1);for(let t in r.attributes){r.attributes[t].weight=t}}}t.tableIndex[a].sort((t,e)=>isNaN(t.weight)||isNaN(e.weight)?0:t.weight>e.weight?1:-1);for(let e in t.tableIndex[a]){t.tableIndex[a][e].weight=e}}}transpose(t){let e=!0;for(;e;){e=!1;for(let i=0;i<=t.maxDepth;i++){let a=t.getEdgeCrossingsAtDepth(i),s=t.tableIndex[i];for(let r=0;r<s.length-1;r++){let n=s[r],l=s[r+1];this.swap(n,l),t.getEdgeCrossingsAtDepth(i)+t.getEdgeCrossingsAtDepth(i+1)<a?e=!0:this.swap(n,l)}for(let r of s)for(let s=0;s<r.attributes.length-1;s++){let n=r.attributes[s],l=r.attributes[s+1];this.swap(n,l),t.getEdgeCrossingsAtDepth(i)+t.getEdgeCrossingsAtDepth(i+1)<a?e=!0:this.swap(n,l)}}}}swap(t,e){let i=t.weight;t.weight=e.weight,e.weight=i}}
class Graph{constructor(e){null==e?(this.edges=[],this.tables=[],this.tableIndex=[],this.edgeIndex=[],this.maxDepth=0,this.groups=[],this.baseRowDistance=6,this.newLayer()):e&&Object.assign(this,e)}addGroup(e){this.groups.push(e),e.id="g"+this.groups.indexOf(e);let t=e.groupHeaderTable;this.addTable(t)}updateGroupCoords(){for(let e of this.groups)e.updateCoords()}newLayer(){this.tableIndex.push([]),this.edgeIndex.push([])}addTable(e){for(;this.maxDepth<e.depth;)this.maxDepth+=1,this.newLayer();e.graph=this,this.tables.push(e),this.tableIndex[e.depth].push(e)}addEdge(e){this.edges.push(e),this.edgeIndex[e.leftTable.depth].push(e)}ensureUniqueEdges(){}getEdgeCrossings(){let e=0;for(let t in this.edgeIndex)e+=this.getEdgeCrossingsAtDepth(t);return e}getEdgeCrossingsAtDepth(e,t=!1){let s=0,i=this.edgeIndex[e];for(let e in i){let h=i[e];for(let r=parseFloat(e)+1;r<i.length;r++){let e=i[r];h.crosses(e)&&(t&&console.log("Edge "+h.leftAttribute.name+h.rightAttribute.name+" crosses "+e.leftAttribute.name+e.rightAttribute.name),s+=1)}}return s}sortGraph(){for(let e of this.tables)e.main||(e.attributes=e.attributes.sort((e,t)=>e.weight>t.weight?1:-1));this.tables=this.tables.sort((e,t)=>e.weight>t.weight?1:-1);for(let e of this.tableIndex)e.sort((e,t)=>e.weight>t.weight?1:-1)}setExactWeights(){for(let e in this.tableIndex){let t=this.tableIndex[e];t=t.sort((e,t)=>e.weight>t.weight?1:-1);for(let e in t){let s=t[e];s.weight=parseFloat(e);let i=s.attributes;i=i.sort((e,t)=>e.weight>t.weight?1:-1);for(let e in i)i[e].weight=parseFloat(e)}}this.updateGroupCoords()}getNumStraightEdges(){let e=0;for(let t in this.edgeIndex)e+=this.getNumStraightEdgesAtDepth(t);return e}getNumStraightEdgesAtDepth(e){let t=0;for(let s of this.edgeIndex[e])s.leftTable.weight==s.rightTable.weight&&(t+=1);return t}adjustTableYPosition(){this.adjustAttrOffset()}getBendLeft(e){let t=e.depth,s=this.edgeIndex[t-1].filter(t=>t.rightTable==e&&!t.isSameRankEdge());return 0==s.length?0:Math.abs(s.map(e=>e.getBendiness()).reduce((e,t)=>Math.round(1e3*e+1e3*t)/1e3))}getBendRight(e){let t=e.depth,s=this.edgeIndex[t].filter(t=>t.leftTable==e&&!t.isSameRankEdge());return 0==s.length?0:Math.abs(s.map(e=>e.getBendiness()).reduce((e,t)=>Math.round(1e3*e+1e3*t)/1e3))}getTableBendiness(e){return 0==e.depth?Math.round(1e3*this.getBendRight(e))/1e3:Math.round(1e3*this.getBendLeft(e)+1e3*this.getBendRight(e))/1e3}getGraphTotalEdgeBendiness(){return Math.round(1e3*this.tables.map(e=>this.getTableBendiness(e)).reduce((e,t)=>e+t))/1e3}adjustAttrOffset(){let e=!0,t=0,s=(e,t)=>{let s=-2;return s=0==t?0:e[t-1].verticalAttrOffset-this.baseRowDistance+e[t-1].attributes.length+2,s},i=(e,t)=>{let s=2;return s=1==e.length||null==e[t+1]?20:e[t+1].verticalAttrOffset+this.baseRowDistance-e[t].attributes.length-2,s},h=()=>{for(let t=0;t<this.tableIndex.length;t++){let h=this.tableIndex[t];for(let t=0;t<h.length;t++){let r=h[t],a=this.getTableBendiness(r),l=r.verticalAttrOffset,n=s(h,t),d=i(h,t);for(let t=n;t<=d;t++){r.verticalAttrOffset=t;let s=this.getTableBendiness(r);s<=a&&(l=t,a=s,e=!0)}r.verticalAttrOffset=l}}},r=()=>{for(let e=this.tableIndex.length-1;e>0;e--){let t=this.tableIndex[e];for(let e=t.length-1;e>=0;e--){let h=t[e],r=this.getTableBendiness(h),a=h.verticalAttrOffset,l=s(t,e),n=i(t,e);for(let e=l;e<=n;e++){h.verticalAttrOffset=e;let t=this.getTableBendiness(h);t<r&&(a=e,r=t)}h.verticalAttrOffset=a}}};for(;t<10;)t++,t%2==0?h():r();this.updateGroupCoords()}}
class GraphGenerator{constructor(t=3,e="hello",r=[2,3],i=[1,5],s=.05,a=.05){this.d=t,this.s=3,this.jd=.1,this.v=a,this.js=s,this.attributeCounter=0,this.seed=e,this.tableDistribution=r,this.attributeDistribution=i,this.rng=new Math.seedrandom(this.seed),this.tableDist=()=>r[0]+Math.round(this.rng()*(r[1]-r[0])),this.attrDist=()=>i[0]+Math.round(this.rng()*(i[1]-i[0]))}generate(){g=new Graph,g.baseRowDistance=this.attributeDistribution[1]+2;for(var t=1;t<this.d;t++){g.newLayer();for(var e=0;e<this.tableDist();e++)g.addTable(this.generateTable(t,e))}return this.generateProjections(g),this.generateJoins(g),g.ensureUniqueEdges(),g}generateTable(t,e){name="T"+t+"y"+e;for(var r=new Table(name,name,!1,t),i=0;i<this.attrDist();i++)r.addAttribute("a"+this.attributeCounter),this.attributeCounter+=1;return r}generateProjections(t){let e=t.tableIndex[1],r=[],i=new Table("select","SELECT",!0,0),s=[],a=[],n=0;for(let t of e){let e=t.attributes,i=e[Math.floor(this.rng()*e.length)];s.push(i),a.push(i);for(let s of e)s!=i&&r.push(new Attribute(t,s));n++}let l=this.s*(r.length+n);for(t.addTable(i);n<l;n++){let t=Math.floor(this.rng()*r.length);r[t];r.splice(t,1)}for(let e of s){let r=new Attribute(i,"a"+this.attributeCounter++);r.mutable=!1,i.attributes.push(r),t.addEdge(new Edge(i,r,e.table,e))}}generateInterLayerJoins(t){for(var e=1;e<this.d;e++){let r=t.tableIndex[e],i=t.tableIndex[e+1],s=[],a=[];for(let t of r){let e=t.attributes;for(let r of e)s.push(new Attribute(t,r))}for(let e of i){if(0==s.length)break;let r=e.attributes,i=r[Math.floor(this.rng()*r.length)],n=Math.floor(this.rng()*s.length),l=s[n];s.splice(n,1),t.addEdge(new Edge(l.table,l.attr,e,i)),l.diffEdges++,i.diffEdges++;for(let t of r)t!=i&&a.push(new Attribute(e,t))}for(let e of s){if(0==a.length)break;if(this.rng()<this.jd){let r=Math.floor(this.rng()*a.length),i=a[r];a.splice(r,1),t.addEdge(new Edge(e.table,e.attr,i.table,i.attr)),e.diffEdges++,i.diffEdges++}}}}generateInLayerJoins(){for(var t=1;t<this.d;t++){let e=g.tableIndex[t];for(let t of e){let r=[],i=[];for(let e of t.attributes)r.push(new Attribute(t,e));for(let r of e)if(t!=r)for(let t of r.attributes)0==t.sameEdges&&i.push(new Attribute(r,t));for(let t of r){if(0==i.length)break;if(this.rng()<this.js){let e=Math.floor(this.rng()*i.length),r=i[e];i.splice(e,1),g.addEdge(new Edge(t.table,t.attr,r.table,r.attr)),t.sameEdges++,r.sameEdges++}}}}}generateRandomJoins(t){let e=[];for(let r=1;r<this.d;r++){let i=t.tableIndex[r].map(t=>t.attributes).flat().filter(e=>null==t.edges.find(t=>t.rightAttribute==e)),s=t.tableIndex[r+1].map(t=>t.attributes).flat();for(let r of i)if(this.rng()<this.v){let i=e.length/(e.length+s.length);if(this.rng()<i){let i=Math.floor(this.rng()*e.length),s=e[i];e.splice(i,1),t.addEdge(new Edge(s.table,s,r.table,r))}}e=i.filter(e=>null==t.edges.find(t=>t.leftAttribute==e)),i=[],s=[]}}generateJoins(t){this.generateInterLayerJoins(t),this.generateInLayerJoins(t),this.generateRandomJoins(t)}}
class Group{constructor(){this.tables=[],this.coords=[],this.x_coord=0,this.y_coord=0,this.width_coord=0,this.height_coord=0,this.id=void 0,this.margin=7,this.groupHeader="count",this.groupHeaderTable=new Table(this.groupHeader,this.groupHeader,!0,20,"groupheader"),this.addTable(this.groupHeaderTable),this.coords=[]}addTable(t){t.group=this,t.groups.push(this),this.tables.push(t),this.updateCoords()}updateCoordsPrecise(){this.coords=[];let t=Math.min.apply(0,this.tables.map(t=>t.depth)),h=this.tables.find(h=>h.depth==t);this.x_coord=h.depth;let e=Math.min.apply(0,this.tables.map(t=>t.weight)),i=this.tables.find(t=>t.weight==e);this.y_coord=i.weight;let s=Math.max.apply(0,this.tables.map(t=>t.depth)),a=this.tables.find(t=>t.depth==s);this.width_coord=a.depth-h.depth;let d=Math.max.apply(0,this.tables.map(t=>t.weight)),r=this.tables.find(t=>t.weight==d);this.height_coord=r.weight-i.weight;let p=[h.depth,a.depth];for(let t=0;t<p.length;t++){let h=p[t],e=Math.min.apply(0,this.tables.filter(t=>t.depth==h).map(t=>t.weight)),i=this.tables.find(t=>t.depth==h&&t.weight==e);this.coords.push([i.depth*depth_distance-this.margin,i.weight*table_vert_space+i.verticalAttrOffset*attr_height-this.margin]),this.coords.push([i.depth*depth_distance+table_width+this.margin,i.weight*table_vert_space+i.verticalAttrOffset*attr_height-this.margin])}for(let t=p.length-1;t>=0;t--){let h=p[t],e=Math.max.apply(0,this.tables.filter(t=>t.depth==h).map(t=>t.weight)),i=this.tables.find(t=>t.depth==h&&t.weight==e);this.coords.push([i.depth*depth_distance+table_width+this.margin,i.weight*table_vert_space+(1+i.attributes.length)*attr_height+i.verticalAttrOffset*attr_height+this.margin]),this.coords.push([i.depth*depth_distance-this.margin,i.weight*table_vert_space+(1+i.attributes.length)*attr_height+i.verticalAttrOffset*attr_height+this.margin])}this.coords.push(this.coords[0])}updateCoords(){this.coords=[];let t=Math.min.apply(0,this.tables.map(t=>t.depth)),h=this.tables.find(h=>h.depth==t);this.x_coord=h.depth;let e=Math.min.apply(0,this.tables.map(t=>t.weight)),i=this.tables.find(t=>t.weight==e);this.y_coord=i.weight;let s=Math.max.apply(0,this.tables.map(t=>t.depth)),a=this.tables.find(t=>t.depth==s);this.width_coord=a.depth-h.depth;let d=Math.max.apply(0,this.tables.map(t=>t.weight)),r=this.tables.find(t=>t.weight==d);this.height_coord=r.weight-i.weight,this.coords.push([h.depth*depth_distance-this.margin,i.weight*table_vert_space+i.verticalAttrOffset*attr_height-this.margin]),this.coords.push([h.depth*depth_distance+this.margin+this.width_coord*depth_distance+table_width,i.weight*table_vert_space+i.verticalAttrOffset*attr_height-this.margin]),this.coords.push([h.depth*depth_distance+this.margin+this.width_coord*depth_distance+table_width,r.weight*table_vert_space+(1+r.attributes.length)*attr_height+r.verticalAttrOffset*attr_height+this.margin]),this.coords.push([h.depth*depth_distance-this.margin,r.weight*table_vert_space+(1+r.attributes.length)*attr_height+r.verticalAttrOffset*attr_height+this.margin]),this.coords.push(this.coords[0]),this.groupHeaderTable.depth=t}}
class LPBendiness{constructor(e){this.g=e,this.mip=!0,this.verbose=!1,this.elapsedTime=0}async arrange(){let e=(new Date).getTime(),t={};this.fillModel(t);let i,l,n=this.modelToString(t),s={};this.verbose&&glp_set_print_func(console.log);let _=glp_create_prob();glp_read_lp_from_string(_,null,n),glp_scale_prob(_,GLP_SF_AUTO);let g=new SMCP({presolve:GLP_ON});if(glp_simplex(_,g),this.mip)for(glp_intopt(_),i=glp_mip_obj_val(_),l=1;l<=glp_get_num_cols(_);l++)s[glp_get_col_name(_,l)]=glp_mip_col_val(_,l);else for(i=glp_get_obj_val(_),l=1;l<=glp_get_num_cols(_);l++)s[glp_get_col_name(_,l)]=glp_get_col_prim(_,l);this.apply_solution(s),this.elapsedTime=(new Date).getTime()-e}fillModel(e){e.minimize="Minimize \n",e.subjectTo="Subject To \n",e.bounds="\nBounds \n";for(let t of this.g.edges)this.isSameRankEdge(t)||(e.minimize+="bend_"+t.leftAttribute.name+"_"+t.rightAttribute.name+" + ",e.subjectTo+="y_"+t.leftAttribute.name+" - y_"+t.rightAttribute.name+" - bend_"+t.leftAttribute.name+"_"+t.rightAttribute.name+" <= 0\n",e.subjectTo+="y_"+t.rightAttribute.name+" - y_"+t.leftAttribute.name+" - bend_"+t.leftAttribute.name+"_"+t.rightAttribute.name+" <= 0\n");for(let t=0;t<this.g.tableIndex.length;t++){let i=this.g.tableIndex[t];for(let t=0;t<i.length-1;t++){let l=i[t],n=i[t+1];e.subjectTo+="y_"+n.name+" - y_"+l.name+" > "+(2+l.attributes.length)+"\n"}}for(let t of this.g.tables)for(let i=0;i<t.attributes.length;i++){let l=t.attributes[i];e.subjectTo+="y_"+l.name+" - y_"+t.name+" = "+(i+1)+"\n"}e.minimize=e.minimize.substring(0,e.minimize.length-2)+"\n\n"}isSameRankEdge(e){return e.leftTable.depth==e.rightTable.depth}modelToString(e){return e.minimize+e.subjectTo+e.bounds+"\nEnd\n"}apply_solution(e){for(let t=0;t<this.g.tableIndex.length;t++){let i=this.g.tableIndex[t];for(let t=0;t<i.length;t++){let l=i[t],n=e["y_"+l.name];l.verticalAttrOffset=n-l.weight*this.g.baseRowDistance}}}}
class LPBendinessCombined{constructor(e){this.g=e,this.mip=!0,this.verbose=!1,this.elapsedTime=0}async arrange(){let e=(new Date).getTime(),t={};this.fillModel(t);let l,n,i=this.modelToString(t),s={};this.verbose&&glp_set_print_func(console.log);let o=glp_create_prob();glp_read_lp_from_string(o,null,i),glp_scale_prob(o,GLP_SF_AUTO);let a=new SMCP({presolve:GLP_ON});if(glp_simplex(o,a),this.mip)for(glp_intopt(o),l=glp_mip_obj_val(o),n=1;n<=glp_get_num_cols(o);n++)s[glp_get_col_name(o,n)]=glp_mip_col_val(o,n);else for(l=glp_get_obj_val(o),n=1;n<=glp_get_num_cols(o);n++)s[glp_get_col_name(o,n)]=glp_get_col_prim(o,n);this.apply_solution(s),this.elapsedTime=(new Date).getTime()-e}fillModel(e){e.minimize="Minimize \n",e.subjectTo="Subject To \n",e.bounds="\nBounds \n";let t={},l={},n=(e,t,n,i)=>{let s="c_"+e+t+"_"+n+i;return l[s]="",s},i=(e,t,l="")=>"x_"+l+e+"_"+l+t;for(let e=0;e<this.g.maxDepth+1;e++){let l=this.g.tableIndex[e],n=l.map(e=>e.attributes).flat();for(let e=0;e<l.length;e++){let n=l[e].name;for(let s=e+1;s<l.length;s++){let e=l[s].name;t[i(n,e,"T")]=""}}for(let e=0;e<n.length;e++){let l=n[e].name;for(let s=e+1;s<n.length;s++){let e=n[s].name;t[i(l,e)]=""}}}for(let t=0;t<this.g.maxDepth+1;t++){let l=this.g.tableIndex[t],n=l.map(e=>e.attributes).flat();for(let t=0;t<l.length;t++){let n=l[t].name;for(let s=t+1;s<l.length;s++){let t=l[s].name;for(let o=s+1;o<l.length;o++){let s=l[o].name;e.subjectTo+=i(n,t,"T")+" + "+i(t,s,"T")+" - "+i(n,s,"T")+" >= 0\n",e.subjectTo+="- "+i(n,t,"T")+" - "+i(t,s,"T")+" + "+i(n,s,"T")+" >= -1\n"}}}for(let t=0;t<n.length;t++){let l=n[t].name;for(let s=t+1;s<n.length;s++){let o=n[s].name;if(t!=s&&n[t].table.name==n[s].table.name)for(let a=s+1;a<n.length;a++){if(a==s||a==t)continue;if(n[a].table.name!=n[t].table.name)continue;if(n[a].table.name!=n[s].table.name)continue;let u=n[a].name;e.subjectTo+=i(l,o)+" + "+i(o,u)+" - "+i(l,u)+" >= 0\n",e.subjectTo+="- "+i(l,o)+" - "+i(o,u)+" + "+i(l,u)+" >= -1\n"}}}}for(let l=0;l<this.g.maxDepth+1;l++){let s=this.g.edgeIndex[l];for(let l=0;l<s.length;l++){let o=s[l];for(let a=l+1;a<s.length;a++){let l=s[a];if(null!=o.leftTable.group&&null!=o.rightTable.group&&l.leftTable.group!=l.leftTable.group&&(e.subjectTo+=n(u1,v1,u2,v2)+" = 0\n"),this.isSameRankEdge(o)||this.isSameRankEdge(l)){if(this.isSameRankEdge(o)&&this.isSameRankEdge(l)){let s=o.leftAttribute.name,a=o.rightAttribute.name,u=l.leftAttribute.name,b=l.rightAttribute.name,m=n(s,a,u,b),r=1;e.subjectTo+=m+"";let T=i(s,u);null!=t[T]?e.subjectTo+=" + "+T:(T=i(u,s),r-=1,e.subjectTo+=" - "+T);let g=i(a,b);null!=t[g]?e.subjectTo+=" + "+g:(r-=1,g=i(b,a),e.subjectTo+=" - "+g);let c=i(u,a);null!=t[c]?e.subjectTo+=c:(r-=1,c=i(a,u),e.subjectTo+=" + "+c),e.subjectTo+=" >= "+r+"\n",m=n(s,a,u,b),r=1,e.subjectTo+=m+"",T=i(s,u),null!=t[T]?e.subjectTo+=" + "+T:(T=i(u,s),r-=1,e.subjectTo+=" - "+T),g=i(a,b),null!=t[g]?e.subjectTo+=" + "+g:(r-=1,g=i(b,a),e.subjectTo+=" - "+g),c=i(b,s),null!=t[c]?e.subjectTo+=c:(r-=1,c=i(s,b),e.subjectTo+=" + "+c),e.subjectTo+=" >= "+r+"\n"}else if(this.isSameRankEdge(o)&&!this.isSameRankEdge(l)){let s=o.leftAttribute.name,a=o.rightAttribute.name,u=l.leftAttribute.name,b=l.rightAttribute.name,m=n(s,a,u,b),r=1;e.subjectTo+=m+"";let T=i(u,s);null!=t[T]?e.subjectTo+=" + "+T:(T=i(s,u),r-=1,e.subjectTo+=" - "+T);let g=i(a,u);null!=t[g]?e.subjectTo+=" + "+g:(r-=1,g=i(u,a),e.subjectTo+=" - "+g),e.subjectTo+=" >= "+r+"\n",m=n(s,a,u,b),r=1,e.subjectTo+=m+"",T=i(u,a),null!=t[T]?e.subjectTo+=" + "+T:(T=i(a,u),r-=1,e.subjectTo+=" - "+T),g=i(s,u),null!=t[g]?e.subjectTo+=" + "+g:(r-=1,g=i(u,s),e.subjectTo+=" - "+g),e.subjectTo+=" >= "+r+"\n"}else if(!this.isSameRankEdge(o)&&this.isSameRankEdge(l)){let s=o.leftAttribute.name,a=o.rightAttribute.name,u=l.leftAttribute.name,b=l.rightAttribute.name,m=n(s,a,u,b),r=1;e.subjectTo+=m+"";let T=i(s,u);null!=t[T]?e.subjectTo+=" + "+T:(T=i(u,s),r-=1,e.subjectTo+=" - "+T);let g=i(b,s);null!=t[g]?e.subjectTo+=" + "+g:(r-=1,g=i(s,b),e.subjectTo+=" - "+g),e.subjectTo+=" >= "+r+"\n",m=n(s,a,u,b),r=1,e.subjectTo+=m+"",T=i(s,b),null!=t[T]?e.subjectTo+=" + "+T:(T=i(b,s),r-=1,e.subjectTo+=" - "+T),g=i(u,s),null!=t[g]?e.subjectTo+=" + "+g:(r-=1,g=i(s,u),e.subjectTo+=" - "+g),e.subjectTo+=" >= "+r+"\n"}}else{let s=o.leftAttribute.name,a=o.rightAttribute.name,u=l.leftAttribute.name,b=l.rightAttribute.name;if(s==u||a==b)continue;let m=n(s,a,u,b),r=1;e.subjectTo+=m+"";let T=i(u,s);null!=t[T]?e.subjectTo+=" + "+T:(T=i(s,u),r-=1,e.subjectTo+=" - "+T);let g=i(a,b);null!=t[g]?e.subjectTo+=" + "+g:(g=i(b,a),r-=1,e.subjectTo+=" - "+g),e.subjectTo+=" >= "+r+"\n",m=n(s,a,u,b),r=1,e.subjectTo+=m+"",T=i(s,u),null!=t[T]?e.subjectTo+=" + "+T:(T=i(u,s),r-=1,e.subjectTo+=" - "+T),g=i(b,a),null!=t[g]?e.subjectTo+=" + "+g:(g=i(a,b),r-=1,e.subjectTo+=" - "+g),e.subjectTo+=" >= "+r+"\n"}}}}for(let t=0;t<this.g.maxDepth+1;t++){let l=this.g.tableIndex[t].map(e=>e.attributes).flat();for(let t=0;t<l.length;t++){let n=l[t].name,s=l[t].table.name;for(let o=t+1;o<l.length;o++){let t=l[o].name,a=l[o].table.name;s!=a&&(e.subjectTo+=i(n,t)+" - "+i(s,a,"T")+" = 0\n")}}}for(let t of this.g.edges)e.subjectTo+="y_"+t.leftAttribute.name+" - y_"+t.rightAttribute.name+" - bend_"+t.leftAttribute.name+"_"+t.rightAttribute.name+" <= 0\n",e.subjectTo+="y_"+t.rightAttribute.name+" - y_"+t.leftAttribute.name+" - bend_"+t.leftAttribute.name+"_"+t.rightAttribute.name+" <= 0\n";let s=0;for(let l of this.g.tableIndex)for(let n in l){let o=l[n];for(let a in l){if(n==a)continue;let u=l[a],b=i(u.name,o.name,"T");null!=t[b]?(e.subjectTo+="z_"+s+" - "+"20 "+b+" <= 0\n",e.subjectTo+="z_"+s+" - y_"+u.name+" <= 0\n",e.subjectTo+="z_"+s+" - y_"+u.name+" - "+"20 "+b+" >= - "+"20\n",e.subjectTo+="z_"+s+" >= 0\n",e.subjectTo+="y_"+o.name+" - z_"+s+" - "+(2+u.attributes.length)+" "+b+" >= 0\n"):(b=i(o.name,u.name,"T"),e.subjectTo+="z_"+s+" + "+"20 "+b+" <= "+"20\n",e.subjectTo+="z_"+s+" - y_"+u.name+" <= 0\n",e.subjectTo+="z_"+s+" - y_"+u.name+" + "+"20 "+b+" >= 0\n",e.subjectTo+="z_"+s+" >= 0\n",e.subjectTo+="y_"+o.name+" - z_"+s+" + "+(2+u.attributes.length)+" "+b+" >= "+(2+u.attributes.length)+"\n"),s+=1}}for(let l of this.g.tables)for(let n in l.attributes){let s=l.attributes[n],o=1,a="y_"+s.name+" - y_"+l.name;for(let e in l.attributes){if(n==e)continue;let u=l.attributes[e],b=i(u.name,s.name);if(null!=t[b])a+=" - "+b;else{a+=" + "+i(s.name,u.name),o+=1}}a+=" = "+o+"\n",e.subjectTo+=a}for(let t in l)e.minimize+=t+" + ";for(let t of this.g.edges)e.minimize+="0.1 bend_"+t.leftAttribute.name+"_"+t.rightAttribute.name+" + ";e.minimize=e.minimize.substring(0,e.minimize.length-2)+"\n\n";for(let l in t)e.bounds+="binary "+l+"\n"}isSameRankEdge(e){return e.leftTable.depth==e.rightTable.depth}modelToString(e){return e.minimize+e.subjectTo+e.bounds+"\nEnd\n"}apply_solution(e){console.log(e);for(let t=0;t<this.g.maxDepth+1;t++){let l=this.g.tableIndex[t];l.sort((t,l)=>0==e["x_T"+t.name+"_T"+l.name]?1:1==e["x_T"+t.name+"_T"+l.name]?-1:1==e["x_T"+l.name+"_T"+t.name]?1:0==e["x_T"+l.name+"_T"+t.name]?-1:void 0);for(let e in l)l[e].weight=e;for(let t of l){t.attributes.sort((t,l)=>0==e["x_"+t.name+"_"+l.name]?1:1==e["x_"+t.name+"_"+l.name]?-1:1==e["x_"+l.name+"_"+t.name]?1:0==e["x_"+l.name+"_"+t.name]?-1:void 0);for(let e=0;e<t.attributes.length;e++)t.attributes[e].weight=e}}for(let t=0;t<this.g.tableIndex.length;t++){let l=this.g.tableIndex[t];for(let t=0;t<l.length;t++){let n=l[t],i=e["y_"+n.name];null!=i&&(n.verticalAttrOffset=i-n.weight*this.g.baseRowDistance)}}}}
class LPBendinessCombinedPlusGroups{constructor(t){this.g=t,this.mip=!0,this.verbose=!1,this.elapsedTime=0}async arrange(){let t=(new Date).getTime(),e={};this.fillModel(e);let i,s,n=this.modelToString(e),l={};this.verbose&&glp_set_print_func(console.log);let o=glp_create_prob();glp_read_lp_from_string(o,null,n),glp_scale_prob(o,GLP_SF_AUTO);let d=new SMCP({presolve:GLP_ON});if(glp_simplex(o,d),this.mip)for(glp_intopt(o),i=glp_mip_obj_val(o),s=1;s<=glp_get_num_cols(o);s++)l[glp_get_col_name(o,s)]=glp_mip_col_val(o,s);else for(i=glp_get_obj_val(o),s=1;s<=glp_get_num_cols(o);s++)l[glp_get_col_name(o,s)]=glp_get_col_prim(o,s);this.apply_solution(l),this.elapsedTime=(new Date).getTime()-t}fillModel(t){this.m=30,this.zcount=0,this.buffer=2,t.minimize="Minimize \n",t.subjectTo="Subject To \n",t.bounds="\nBounds \n",this.definitions={};let e={},i=(t,i,s,n)=>{let l="c_"+t+i+"_"+s+n;return e[l]="",l};for(let t=0;t<this.g.maxDepth+1;t++){let e=this.g.tableIndex[t],i=e.map(t=>t.attributes).flat();for(let t=0;t<e.length;t++){let i=e[t].id;for(let s=t+1;s<e.length;s++){let t=e[s].id;this.definitions[this.mkxBase(i,t,"T")]=""}}for(let t=0;t<i.length;t++){let e=i[t].id;for(let s=t+1;s<i.length;s++){let t=i[s].id;this.definitions[this.mkxBase(e,t)]=""}}}for(let e of this.g.groups){for(let i of e.tables)t.subjectTo+="y_groupstart_"+e.id+" - y_"+i.id+" <= 0\n",t.subjectTo+="y_groupend_"+e.id+" - y_"+i.id+" >= "+(i.attributes.length+this.buffer)+"\n";for(let i of this.g.tables)-1==e.tables.indexOf(i)&&-1!=e.tables.map(t=>t.depth).indexOf(i.depth)&&(t.subjectTo+="y_"+i.id+" - "+m+" z_"+this.zcount+" - y_groupstart_"+e.id+" <= - "+(i.attributes.length+this.buffer)+"\n",t.subjectTo+="- y_"+i.id+" + "+m+" z_"+this.zcount+" + y_groupend_"+e.id+" <= "+m+"\n",this.zcount+=1)}for(let e=0;e<=this.zcount;e++)t.bounds+="binary z_"+e+"\n";let s=(t,e,i)=>{let s="",n=0,l=" - ";" - "==t&&(l=" + ");let o=this.mkxBase(e,i);return null!=this.definitions[o]?s+=t+o:(o=this.mkxBase(i,e),null==this.definitions[o]&&console.warn(o+"not defined"),n-=1,s+=l+o),[s,n]};for(let e=0;e<this.g.maxDepth+1;e++){let i=this.g.tableIndex[e],s=i.map(t=>t.attributes).flat();for(let e=0;e<i.length;e++){let s=i[e].id;for(let n=e+1;n<i.length;n++){let e=i[n].id;for(let l=n+1;l<i.length;l++){let n=i[l].id;t.subjectTo+=this.mkxBase(s,e,"T")+" + "+this.mkxBase(e,n,"T")+" - "+this.mkxBase(s,n,"T")+" >= 0\n",t.subjectTo+="- "+this.mkxBase(s,e,"T")+" - "+this.mkxBase(e,n,"T")+" + "+this.mkxBase(s,n,"T")+" >= -1\n"}}}for(let e=0;e<s.length;e++){let i=s[e].id;for(let n=e+1;n<s.length;n++){let l=s[n].id;if(e!=n&&s[e].table.id==s[n].table.id)for(let o=n+1;o<s.length;o++){if(o==n||o==e)continue;if(s[o].table.id!=s[e].table.id)continue;if(s[o].table.id!=s[n].table.id)continue;let d=s[o].id;t.subjectTo+=this.mkxBase(i,l)+" + "+this.mkxBase(l,d)+" - "+this.mkxBase(i,d)+" >= 0\n",t.subjectTo+="- "+this.mkxBase(i,l)+" - "+this.mkxBase(l,d)+" + "+this.mkxBase(i,d)+" >= -1\n"}}}}for(let e=0;e<this.g.maxDepth+1;e++){let n=this.g.edgeIndex[e];for(let e=0;e<n.length;e++){let l=n[e];for(let o=e+1;o<n.length;o++){let e=n[o],d=l.leftAttribute.id,h=l.rightAttribute.id,u=e.leftAttribute.id,r=e.rightAttribute.id;if(this.isSameRankEdge(l)||this.isSameRankEdge(e)){if(this.isSameRankEdge(l)&&this.isSameRankEdge(e)){let e=i(d,h,u,r),n=1+s(" + ",d,u)[1]+s(" + ",h,r)[1]+s(" + ",u,h)[1];t.subjectTo+=e+""+s(" + ",d,u)[0]+s(" + ",h,r)[0]+s(" + ",u,h)[0],t.subjectTo+=" >= "+n+"\n",e=i(d,h,u,r),n=1+s(" + ",d,u)[1]+s(" + ",h,r)[1]+s(" + ",r,d)[1],t.subjectTo+=e+""+s(" + ",d,u)[0]+s(" + ",h,r)[0]+s(" + ",r,d)[0],t.subjectTo+=" >= "+n+"\n"}else if(this.isSameRankEdge(l)&&!this.isSameRankEdge(e)){let e=i(d,h,u,r),n=1+s(" + ",u,d)[1]+s(" + ",h,u)[1];t.subjectTo+=e+""+s(" + ",u,d)[0]+s(" + ",h,u)[0],t.subjectTo+=" >= "+n+"\n",e=i(d,h,u,r),n=1+s(" + ",u,h)[1]+s(" + ",d,u)[1],t.subjectTo+=e+""+s(" + ",u,h)[0]+s(" + ",d,u)[0],t.subjectTo+=" >= "+n+"\n"}else if(!this.isSameRankEdge(l)&&this.isSameRankEdge(e)){let e=i(d,h,u,r),n=1+s(" + ",d,u)[1]+s(" + ",r,d)[1];t.subjectTo+=e+""+s(" + ",d,u)[0]+s(" + ",r,d)[0],t.subjectTo+=" >= "+n+"\n",e=i(d,h,u,r),n=1+s(" + ",d,r)[1]+s(" + ",u,d)[1],t.subjectTo+=e+""+s(" + ",d,r)[0]+s(" + ",u,d)[0],t.subjectTo+=" >= "+n+"\n"}}else{if(d==u||h==r)continue;let e=i(d,h,u,r),n=1+s(" + ",u,d)[1]+s(" + ",h,r)[1];t.subjectTo+=e+""+s(" + ",u,d)[0]+s(" + ",h,r)[0],t.subjectTo+=" >= "+n+"\n",e=i(d,h,u,r),n=1+s(" + ",d,u)[1]+s(" + ",r,h)[1],t.subjectTo+=e+""+s(" + ",d,u)[0]+s(" + ",r,h)[0],t.subjectTo+=" >= "+n+"\n"}}}}for(let e=0;e<this.g.maxDepth+1;e++){let i=this.g.tableIndex[e].map(t=>t.attributes).flat();for(let e=0;e<i.length;e++){let s=i[e].id,n=i[e].table.id;for(let l=e+1;l<i.length;l++){let e=i[l].id,o=i[l].table.id;n!=o&&(t.subjectTo+=this.mkxBase(s,e)+" - "+this.mkxBase(n,o,"T")+" = 0\n")}}}for(let i in e)t.minimize+=i+" + ";this.addSimpleBendiness(this.g,t);for(let e in this.definitions)t.bounds+="binary "+e+"\n";for(let i in e)t.bounds+="binary "+i+"\n";console.log("number of constraints: ",t.subjectTo.split("\n").length)}isSameRankEdge(t){return t.leftTable.depth==t.rightTable.depth}modelToString(t){return t.minimize+t.subjectTo+t.bounds+"\nEnd\n"}mkxBase(t,e,i=""){return"x_"+i+t+"_"+i+e}addBendinessPlusMaximizeCrossingAngle(t,e){}addSimpleBendiness(t,e){for(let i of t.edges)this.isSameRankEdge(i)||(e.subjectTo+="y_"+i.leftAttribute.id+" - y_"+i.rightAttribute.id+" - bend_"+i.leftAttribute.id+"_"+i.rightAttribute.id+" <= 0\n",e.subjectTo+="y_"+i.rightAttribute.id+" - y_"+i.leftAttribute.id+" - bend_"+i.leftAttribute.id+"_"+i.rightAttribute.id+" <= 0\n");for(let i of t.tableIndex)for(let t in i){let s=i[t];for(let n in i){if(t==n)continue;let l=i[n],o=this.mkxBase(l.id,s.id,"T");null!=this.definitions[o]?(e.subjectTo+="z_"+this.zcount+" - "+this.m+" "+o+" <= 0\n",e.subjectTo+="z_"+this.zcount+" - y_"+l.id+" <= 0\n",e.subjectTo+="z_"+this.zcount+" - y_"+l.id+" - "+this.m+" "+o+" >= - "+this.m+"\n",e.subjectTo+="z_"+this.zcount+" >= 0\n",e.subjectTo+="y_"+s.id+" - z_"+this.zcount+" - "+(this.buffer+l.attributes.length)+" "+o+" >= 0\n"):(o=this.mkxBase(s.id,l.id,"T"),e.subjectTo+="z_"+this.zcount+" + "+this.m+" "+o+" <= "+this.m+"\n",e.subjectTo+="z_"+this.zcount+" - y_"+l.id+" <= 0\n",e.subjectTo+="z_"+this.zcount+" - y_"+l.id+" + "+this.m+" "+o+" >= 0\n",e.subjectTo+="z_"+this.zcount+" >= 0\n",e.subjectTo+="y_"+s.id+" - z_"+this.zcount+" + "+(this.buffer+l.attributes.length)+" "+o+" >= "+(this.buffer+l.attributes.length)+"\n"),this.zcount+=1}}for(let i of t.tables)for(let t in i.attributes){let s=i.attributes[t],n=1,l="y_"+s.id+" - y_"+i.id;for(let e in i.attributes){if(t==e)continue;let o=i.attributes[e],d=this.mkxBase(o.id,s.id);if(null!=this.definitions[d])l+=" - "+d;else{l+=" + "+this.mkxBase(s.id,o.id),n+=1}}l+=" = "+n+"\n",e.subjectTo+=l}for(let i of t.edges)this.isSameRankEdge(i)||(e.minimize+="0.1 bend_"+i.leftAttribute.id+"_"+i.rightAttribute.id+" + ");e.minimize=e.minimize.substring(0,e.minimize.length-2)+"\n\n"}apply_solution(t){console.log(t);for(let e=0;e<this.g.maxDepth+1;e++){let i=this.g.tableIndex[e];i.sort((e,i)=>0==t["x_T"+e.id+"_T"+i.id]?1:1==t["x_T"+e.id+"_T"+i.id]?-1:1==t["x_T"+i.id+"_T"+e.id]?1:0==t["x_T"+i.id+"_T"+e.id]?-1:void 0);for(let t in i)i[t].weight=t;for(let e of i){e.attributes.sort((e,i)=>0==t["x_"+e.id+"_"+i.id]?1:1==t["x_"+e.id+"_"+i.id]?-1:1==t["x_"+i.id+"_"+e.id]?1:0==t["x_"+i.id+"_"+e.id]?-1:void 0);for(let t=0;t<e.attributes.length;t++)e.attributes[t].weight=t}}for(let e=0;e<this.g.tableIndex.length;e++){let i=this.g.tableIndex[e];for(let e=0;e<i.length;e++){let s=i[e],n=t["y_"+s.id];null!=n&&(s.verticalAttrOffset=n-s.weight*this.g.baseRowDistance)}}}}
class LPFormulation{constructor(e){this.g=e,this.mip=!0,this.verbose=!1,this.elapsedTime=0}async arrange(){let e=(new Date).getTime(),t={};this.fillModel(t);let l,n,i=this.modelToString(t),a={};this.verbose&&glp_set_print_func(console.log);let o=glp_create_prob();glp_read_lp_from_string(o,null,i),glp_scale_prob(o,GLP_SF_AUTO);let s=new SMCP({presolve:GLP_ON});if(glp_simplex(o,s),this.mip)for(glp_intopt(o),l=glp_mip_obj_val(o),n=1;n<=glp_get_num_cols(o);n++)a[glp_get_col_name(o,n)]=glp_mip_col_val(o,n);else for(l=glp_get_obj_val(o),n=1;n<=glp_get_num_cols(o);n++)a[glp_get_col_name(o,n)]=glp_get_col_prim(o,n);this.apply_solution(a),this.elapsedTime=(new Date).getTime()-e}fillModel(e){e.minimize="Minimize \n",e.subjectTo="Subject To \n",e.bounds="\nBounds \n";let t={},l={},n=(e,t,n,i)=>{let a="c_"+e+t+"_"+n+i;return l[a]="",a},i=(e,t,l="")=>"x_"+l+e+"_"+l+t;for(let e=0;e<this.g.maxDepth+1;e++){let l=this.g.tableIndex[e],n=l.map(e=>e.attributes).flat();for(let e=0;e<l.length;e++){let n=l[e].name;for(let a=e+1;a<l.length;a++){let e=l[a].name;t[i(n,e,"T")]=""}}for(let e=0;e<n.length;e++){let l=n[e].name;for(let a=e+1;a<n.length;a++){let e=n[a].name;t[i(l,e)]=""}}}for(let t=0;t<this.g.maxDepth+1;t++){let l=this.g.tableIndex[t],n=l.map(e=>e.attributes).flat();for(let t=0;t<l.length;t++){let n=l[t].name;for(let a=t+1;a<l.length;a++){let t=l[a].name;for(let o=a+1;o<l.length;o++){let a=l[o].name;e.subjectTo+=i(n,t,"T")+" + "+i(t,a,"T")+" - "+i(n,a,"T")+" >= 0\n",e.subjectTo+="- "+i(n,t,"T")+" - "+i(t,a,"T")+" + "+i(n,a,"T")+" >= -1\n"}}}for(let t=0;t<n.length;t++){let l=n[t].name;for(let a=t+1;a<n.length;a++){let o=n[a].name;if(t!=a&&n[t].table.name==n[a].table.name)for(let s=a+1;s<n.length;s++){if(s==a||s==t)continue;if(n[s].table.name!=n[t].table.name)continue;if(n[s].table.name!=n[a].table.name)continue;let u=n[s].name;e.subjectTo+=i(l,o)+" + "+i(o,u)+" - "+i(l,u)+" >= 0\n",e.subjectTo+="- "+i(l,o)+" - "+i(o,u)+" + "+i(l,u)+" >= -1\n"}}}}for(let l=0;l<this.g.maxDepth+1;l++){let a=this.g.edgeIndex[l];for(let l=0;l<a.length;l++){let o=a[l];for(let s=l+1;s<a.length;s++){let l=a[s];if(null!=o.leftTable.group&&null!=o.rightTable.group&&l.leftTable.group!=l.leftTable.group&&(e.subjectTo+=n(u1,v1,u2,v2)+" = 0\n"),this.isSameRankEdge(o)||this.isSameRankEdge(l)){if(this.isSameRankEdge(o)&&this.isSameRankEdge(l)){let a=o.leftAttribute.name,s=o.rightAttribute.name,u=l.leftAttribute.name,b=l.rightAttribute.name,m=n(a,s,u,b),r=1;e.subjectTo+=m+"";let g=i(a,u);null!=t[g]?e.subjectTo+=" + "+g:(g=i(u,a),r-=1,e.subjectTo+=" - "+g);let _=i(s,b);null!=t[_]?e.subjectTo+=" + "+_:(r-=1,_=i(b,s),e.subjectTo+=" - "+_);let h=i(u,s);null!=t[h]?e.subjectTo+=h:(r-=1,h=i(s,u),e.subjectTo+=" + "+h),e.subjectTo+=" >= "+r+"\n",m=n(a,s,u,b),r=1,e.subjectTo+=m+"",g=i(a,u),null!=t[g]?e.subjectTo+=" + "+g:(g=i(u,a),r-=1,e.subjectTo+=" - "+g),_=i(s,b),null!=t[_]?e.subjectTo+=" + "+_:(r-=1,_=i(b,s),e.subjectTo+=" - "+_),h=i(b,a),null!=t[h]?e.subjectTo+=h:(r-=1,h=i(a,b),e.subjectTo+=" + "+h),e.subjectTo+=" >= "+r+"\n"}else if(this.isSameRankEdge(o)&&!this.isSameRankEdge(l)){let a=o.leftAttribute.name,s=o.rightAttribute.name,u=l.leftAttribute.name,b=l.rightAttribute.name,m=n(a,s,u,b),r=1;e.subjectTo+=m+"";let g=i(u,a);null!=t[g]?e.subjectTo+=" + "+g:(g=i(a,u),r-=1,e.subjectTo+=" - "+g);let _=i(s,u);null!=t[_]?e.subjectTo+=" + "+_:(r-=1,_=i(u,s),e.subjectTo+=" - "+_),e.subjectTo+=" >= "+r+"\n",m=n(a,s,u,b),r=1,e.subjectTo+=m+"",g=i(u,s),null!=t[g]?e.subjectTo+=" + "+g:(g=i(s,u),r-=1,e.subjectTo+=" - "+g),_=i(a,u),null!=t[_]?e.subjectTo+=" + "+_:(r-=1,_=i(u,a),e.subjectTo+=" - "+_),e.subjectTo+=" >= "+r+"\n"}else if(!this.isSameRankEdge(o)&&this.isSameRankEdge(l)){let a=o.leftAttribute.name,s=o.rightAttribute.name,u=l.leftAttribute.name,b=l.rightAttribute.name,m=n(a,s,u,b),r=1;e.subjectTo+=m+"";let g=i(a,u);null!=t[g]?e.subjectTo+=" + "+g:(g=i(u,a),r-=1,e.subjectTo+=" - "+g);let _=i(b,a);null!=t[_]?e.subjectTo+=" + "+_:(r-=1,_=i(a,b),e.subjectTo+=" - "+_),e.subjectTo+=" >= "+r+"\n",m=n(a,s,u,b),r=1,e.subjectTo+=m+"",g=i(a,b),null!=t[g]?e.subjectTo+=" + "+g:(g=i(b,a),r-=1,e.subjectTo+=" - "+g),_=i(u,a),null!=t[_]?e.subjectTo+=" + "+_:(r-=1,_=i(a,u),e.subjectTo+=" - "+_),e.subjectTo+=" >= "+r+"\n"}}else{let a=o.leftAttribute.name,s=o.rightAttribute.name,u=l.leftAttribute.name,b=l.rightAttribute.name;if(a==u||s==b)continue;let m=n(a,s,u,b),r=1;e.subjectTo+=m+"";let g=i(u,a);null!=t[g]?e.subjectTo+=" + "+g:(g=i(a,u),r-=1,e.subjectTo+=" - "+g);let _=i(s,b);null!=t[_]?e.subjectTo+=" + "+_:(_=i(b,s),r-=1,e.subjectTo+=" - "+_),e.subjectTo+=" >= "+r+"\n",m=n(a,s,u,b),r=1,e.subjectTo+=m+"",g=i(a,u),null!=t[g]?e.subjectTo+=" + "+g:(g=i(u,a),r-=1,e.subjectTo+=" - "+g),_=i(b,s),null!=t[_]?e.subjectTo+=" + "+_:(_=i(s,b),r-=1,e.subjectTo+=" - "+_),e.subjectTo+=" >= "+r+"\n"}}}}for(let t=0;t<this.g.maxDepth+1;t++){let l=this.g.tableIndex[t].map(e=>e.attributes).flat();for(let t=0;t<l.length;t++){let n=l[t].name,a=l[t].table.name;for(let o=t+1;o<l.length;o++){let t=l[o].name,s=l[o].table.name;a!=s&&(e.subjectTo+=i(n,t)+" - "+i(a,s,"T")+" = 0\n")}}}for(let t in l)e.minimize+=t+" + ";e.minimize=e.minimize.substring(0,e.minimize.length-2)+"\n\n";for(let l in t)e.bounds+="binary "+l+"\n"}fillModel2(e){e.minimize="Minimize \ncrossings: ",e.subjectTo="Subject To \n",e.bounds="\nBounds \n";for(let t=0;t<this.g.maxDepth+1;t++){let l=this.g.edgeIndex[t];for(let t=0;t<l.length;t++)for(let n=0;n<l.length;n++)if(l[t]!=l[n]){let i="c_"+l[t].leftAttribute.name+l[t].rightAttribute.name+"_"+l[n].leftAttribute.name+l[n].rightAttribute.name;e.minimize+=i+" + ",e.bounds+="binary "+i+"\n"}}e.minimize=e.minimize.substring(0,e.minimize.length-2)+"\n\n";for(let t=0;t<this.g.maxDepth+1;t++){let l=this.g.tableIndex[t];for(let t=0;t<l.length;t++){let n=l[t];for(let i=0;i<l.length;i++){if(t==i)continue;let a=l[i];n!=a&&(e.subjectTo+="x_T"+n.name+"_T"+a.name+" + x_T"+a.name+"_T"+n.name+" = 1\n",e.bounds+="binary x_T"+n.name+"_T"+a.name+"\n")}}}for(let t=0;t<this.g.maxDepth+1;t++){let l=this.g.tableIndex[t];for(let t=0;t<l.length;t++){let n=l[t];for(let i=0;i<l.length;i++){if(t==i)continue;let a=l[i];for(let t=i+1;t<l.length;t++){let i=l[t];e.subjectTo+="x_T"+i.name+"_T"+n.name+" - x_T"+i.name+"_T"+a.name+" - x_T"+a.name+"_T"+n.name+" >= - 1\n"}}}}for(let t=0;t<this.g.maxDepth+1;t++){let l=this.g.tableIndex[t].map(e=>e.attributes).flat();for(let t=0;t<l.length;t++){let n=l[t];for(let i=t+1;i<l.length;i++){let t=l[i];n!=t&&(e.subjectTo+="x_"+n.name+"_"+t.name+" + x_"+t.name+"_"+n.name+" = 1\n")}}}for(let t=0;t<this.g.maxDepth+1;t++){let l=this.g.tableIndex[t].map(e=>e.attributes).flat();for(let t of l)for(let n of l)t.table!=n.table&&(e.subjectTo+="x_"+t.name+"_"+n.name+" - x_T"+t.table.name+"_T"+n.table.name+" = 0\n")}for(let t=0;t<this.g.maxDepth+1;t++){let l=this.g.tableIndex[t].map(e=>e.attributes).flat();for(let t=0;t<l.length;t++){let n=l[t];for(let i=0;i<l.length;i++){let a=l[i];if(t!=i)for(let o=0;o<l.length;o++){if(o==t||o==i)continue;let s=l[o];e.subjectTo+="x_"+s.name+"_"+n.name+" - x_"+s.name+"_"+a.name+" - x_"+a.name+"_"+n.name+" >= - 1\n"}}}}for(let t=0;t<this.g.maxDepth;t++){let l=this.g.edgeIndex[t];for(let t=0;t<l.length;t++){let n=l[t];for(let i=0;i<l.length;i++){if(t==i)continue;let a=l[i];if(n.leftTable.depth==n.rightTable.depth||a.leftTable.depth==a.rightTable.depth)continue;let o=n.leftAttribute.name,s=n.rightAttribute.name,u=a.leftAttribute.name,b=a.rightAttribute.name;e.subjectTo+="c_"+o+s+"_"+u+b+" + x_"+u+"_"+o+" + x_"+s+"_"+b+" >= 1\n",e.subjectTo+="c_"+o+s+"_"+u+b+" + x_"+o+"_"+u+" + x_"+b+"_"+s+" >= 1\n"}}}for(let t=0;t<this.g.maxDepth+1;t++){let l=this.g.edgeIndex[t];for(let t=0;t<l.length;t++){let n=l[t];for(let t=0;t<l.length;t++){let i=l[t];if(n!=i)if(n.leftTable.depth==n.rightTable.depth&&i.leftTable.depth==i.rightTable.depth){let t=n.leftAttribute.name,l=n.rightAttribute.name,a=i.leftAttribute.name,o=i.rightAttribute.name;e.subjectTo+="c_"+t+l+"_"+a+o+" + x_"+t+"_"+a+" + x_"+l+"_"+o+" + x_"+a+"_"+l+" >= 1\n",e.subjectTo+="c_"+t+l+"_"+a+o+" + x_"+t+"_"+a+" + x_"+l+"_"+o+" + x_"+o+"_"+t+" >= 1\n"}else if(this.isSameRankEdge(n)&&!this.isSameRankEdge(i)){let t=n.leftAttribute.name,l=n.rightAttribute.name,a=i.leftAttribute.name,o=i.rightAttribute.name;e.subjectTo+="c_"+t+l+"_"+a+o+" + x_"+a+"_"+t+" + x_"+l+"_"+a+" >= 1\n",e.subjectTo+="c_"+t+l+"_"+a+o+" + x_"+a+"_"+l+" + x_"+t+"_"+a+" >= 1\n"}}}}}isSameRankEdge(e){return e.leftTable.depth==e.rightTable.depth}modelToString(e){return e.minimize+e.subjectTo+e.bounds+"\nEnd\n"}apply_solution(e){for(let t=0;t<this.g.maxDepth+1;t++){let l=this.g.tableIndex[t];l.sort((t,l)=>0==e["x_T"+t.name+"_T"+l.name]?1:1==e["x_T"+t.name+"_T"+l.name]?-1:1==e["x_T"+l.name+"_T"+t.name]?1:0==e["x_T"+l.name+"_T"+t.name]?-1:void 0);for(let e in l)l[e].weight=e;for(let t of l){t.attributes.sort((t,l)=>0==e["x_"+t.name+"_"+l.name]?1:1==e["x_"+t.name+"_"+l.name]?-1:1==e["x_"+l.name+"_"+t.name]?1:0==e["x_"+l.name+"_"+t.name]?-1:void 0);for(let e=0;e<t.attributes.length;e++)t.attributes[e].weight=e}}}}
class Sweep{constructor(t){this.g=t,this.elapsedTime=0}arrange(){let t=(new Date).getTime();this.g.setExactWeights(),this.sweepRight(),this.sweepLeft(),this.elapsedTime=(new Date).getTime()-t}sweepRight(){for(let t=1;t<=this.g.maxDepth;t++){let e,s,g=this.g.tableIndex[t];do{e=this.g.getEdgeCrossingsAtDepth(t-1)+this.g.getEdgeCrossingsAtDepth(t),s=e;do{e=this.g.getEdgeCrossingsAtDepth(t-1)+this.g.getEdgeCrossingsAtDepth(t),s=e;for(let e=0;e<g.length-1;e++){let h=g[e],i=g[e+1];this.swap(h,i);let l=this.g.getEdgeCrossingsAtDepth(t-1)+this.g.getEdgeCrossingsAtDepth(t);s>l?(s=l,g[e]=i,g[e+1]=h):this.swap(h,i)}}while(e>s);do{e=this.g.getEdgeCrossingsAtDepth(t-1)+this.g.getEdgeCrossingsAtDepth(t),s=e;for(let e=0;e<g.length;e++){let h=g[e].attributes;for(let e=0;e<h.length-1;e++){let g=h[e],i=h[e+1];this.swap(g,i);let l=this.g.getEdgeCrossingsAtDepth(t-1)+this.g.getEdgeCrossingsAtDepth(t);s>l?(s=l,h[e]=i,h[e+1]=g):this.swap(g,i)}}}while(e>s)}while(e>s)}}sweepLeft(){for(let t=this.g.maxDepth;t>=2;t--){let e,s,g=this.g.tableIndex[t-1];do{e=this.g.getEdgeCrossingsAtDepth(t-1)+this.g.getEdgeCrossingsAtDepth(t-2),s=e;do{e=this.g.getEdgeCrossingsAtDepth(t-1)+this.g.getEdgeCrossingsAtDepth(t-2),s=e;for(let e=0;e<g.length-1;e++){let h=g[e],i=g[e+1];this.swap(h,i);let l=this.g.getEdgeCrossingsAtDepth(t-1)+this.g.getEdgeCrossingsAtDepth(t-2);s>l?(s=l,g[e]=i,g[e+1]=h):this.swap(h,i)}}while(e>s);do{e=this.g.getEdgeCrossingsAtDepth(t-1)+this.g.getEdgeCrossingsAtDepth(t-2),s=e;for(let e=0;e<g.length;e++){let h=g[e].attributes;for(let e=0;e<h.length-1;e++){let g=h[e],i=h[e+1];this.swap(g,i);let l=this.g.getEdgeCrossingsAtDepth(t-1)+this.g.getEdgeCrossingsAtDepth(t-2);s>l?(s=l,h[e]=i,h[e+1]=g):this.swap(g,i)}}}while(e>s)}while(e>s)}}swap(t,e){let s=t.weight;t.weight=e.weight,e.weight=s}}
class Table{constructor(t,i,h,s,e){this.name=t,this.header=i,this.main=h,this.depth=s,this.attributes=[],this.attrMaps=[],this.weight=0,this.group=void 0,this.groups=[],this.graph=void 0,this.visibility="visible",this.verticalAttrOffset=0,this.id=t,this.type=e}addAttribute(t){this.attributes.push(new Attribute(this,t))}compareTo(t){return this.depth>t.depth?-1:this.depth<t.depth||this.weight<t.weight?1:this.weight>t.weight?-1:0}}
let drawGraph=(t,e,a)=>{let r=d3.line().curve(d3.curveBasis),l=d3.line();table_vert_space=e.baseRowDistance*attr_height,visg=t.append("g").attr("transform","translate(20, 20)");for(let t in[...Array(10).keys()])visg.append("path").attr("stroke-width",1).attr("stroke","#ccc").attr("fill","none").style("stroke-dasharray","5, 3").attr("d",l([[0,attr_height*e.baseRowDistance*t],[1e3,attr_height*e.baseRowDistance*t]]));tablegroups=visg.selectAll(".tables").data(e.tables).enter().append("g").attr("class","tablegroup").attr("id",t=>"tablegroup_"+t.name).style("visibility",t=>t.visibility).attr("transform",t=>"translate("+t.depth*depth_distance+","+(e.tableIndex[t.depth].indexOf(t)*table_vert_space+t.verticalAttrOffset*attr_height)+")"),tablegroups.append("rect").attr("width",table_width).attr("height",t=>t.attributes.length*attr_height+header_height).attr("fill",t=>"groupheader"==t.type?"#eee":"black").attr("stroke","gray").on("click",t=>console.log(t)),tablegroups.append("text").attr("x",table_width/2).attr("y",attr_height/2+5).attr("text-anchor","middle").attr("fill",t=>"groupheader"==t.type?"black":"white").attr("font-size","0.7em").attr("font-family","Arial").text(t=>t.header+" w:"+t.weight),attrgroups=tablegroups.selectAll(".attrs").data(t=>t.attributes).enter().append("g").attr("transform",(t,e)=>"translate(0, "+(header_height+e*attr_height)+")"),attrgroups.append("rect").attr("width",table_width).attr("height",attr_height).attr("fill","#ccc").attr("stroke","white").attr("stroke-width",2).on("click",t=>console.log(t)),attrgroups.append("text").attr("x",table_width/2).attr("y",attr_height/2+3).attr("text-anchor","middle").attr("font-size","0.7em").attr("font-family","Arial").text(t=>t.attr+" w:"+t.weight);e.updateGroupCoords(),visg.selectAll(".grouprects").data(e.groups).enter().append("path").attr("class","grouplines").attr("stroke-width",3).attr("stroke","black").attr("fill","none").style("stroke-dasharray","5, 3").attr("d",t=>l(t.coords)),edges=visg.selectAll(".edges").data(e.edges).enter().append("path").attr("stroke","black").attr("fill","none").attr("d",t=>(first=(t=>[t.leftTable.depth*depth_distance+table_width,t.leftTable.attributes.indexOf(t.att1)*attr_height+header_height+attr_height/2+e.tableIndex[t.leftTable.depth].indexOf(t.leftTable)*table_vert_space+t.leftTable.verticalAttrOffset*attr_height])(t),second=(t=>t.leftTable.depth!=t.rightTable.depth?[t.rightTable.depth*depth_distance,t.rightTable.attributes.indexOf(t.att2)*attr_height+header_height+attr_height/2+e.tableIndex[t.rightTable.depth].indexOf(t.rightTable)*table_vert_space+t.rightTable.verticalAttrOffset*attr_height]:[t.leftTable.depth*depth_distance+table_width,t.rightTable.attributes.indexOf(t.att2)*attr_height+header_height+attr_height/2+e.tableIndex[t.rightTable.depth].indexOf(t.rightTable)*table_vert_space+t.rightTable.verticalAttrOffset*attr_height])(t),r([first,[first[0]+.2*depth_distance,first[1]],[second[0]+(t.leftTable.depth==t.rightTable.depth?1:-1)*depth_distance*.2,second[1]],second]))),d3.select(t.node().parentNode).append("div").append("text").text("crossings: "+e.getEdgeCrossings()+", tables: "+e.tables.length+", edges: "+e.edges.length+", bendiness: "+e.getGraphTotalEdgeBendiness()).style("font-family","Arial").attr("class","crossing_count"),null!=a&&null!=a.elapsedTime&&(d3.select(t.node().parentNode).append("div").append("text").text("time: "+a.elapsedTime+"ms").style("font-family","Arial").attr("class","crossing_count"),null!=a.iterations&&(d3.select(t.node().parentNode).append("text").text("⏹️"),d3.select(t.node().parentNode).append("text").text("⏪").on("click",()=>{a.cur_iteration--,a.apply_iteration(a.cur_iteration),t.selectAll(".tablegroup").transition().duration(750).attr("transform",t=>"translate("+t.depth*depth_distance+" ,  "+a.g.tableIndex[t.depth].indexOf(t)*table_vert_space+" )")}),d3.select(t.node().parentNode).append("text").text(a.cur_iteration),d3.select(t.node().parentNode).append("text").text("⏩").on("click",()=>{}),d3.select(t.node().parentNode).append("text").text("▶️")))};

/**
 * @license
 * Lodash <https://lodash.com/>
 * Copyright OpenJS Foundation and other contributors <https://openjsf.org/>
 * Released under MIT license <https://lodash.com/license>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 */
(function(){var n="Expected a function",t="__lodash_placeholder__",e=[["ary",128],["bind",1],["bindKey",2],["curry",8],["curryRight",16],["flip",512],["partial",32],["partialRight",64],["rearg",256]],r="[object Arguments]",u="[object Array]",i="[object Boolean]",f="[object Date]",o="[object Error]",a="[object Function]",c="[object GeneratorFunction]",l="[object Map]",s="[object Number]",d="[object Object]",h="[object RegExp]",p="[object Set]",v="[object String]",_="[object Symbol]",g="[object WeakMap]",y="[object ArrayBuffer]",b="[object DataView]",w="[object Float32Array]",m="[object Float64Array]",x="[object Int8Array]",j="[object Int16Array]",A="[object Int32Array]",I="[object Uint8Array]",k="[object Uint8ClampedArray]",O="[object Uint16Array]",R="[object Uint32Array]",E=/\b__p \+= '';/g,z=/\b(__p \+=) '' \+/g,S=/(__e\(.*?\)|\b__t\)) \+\n'';/g,L=/&(?:amp|lt|gt|quot|#39);/g,C=/[&<>"']/g,W=RegExp(L.source),U=RegExp(C.source),B=/<%-([\s\S]+?)%>/g,T=/<%([\s\S]+?)%>/g,$=/<%=([\s\S]+?)%>/g,D=/\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,N=/^\w*$/,M=/[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g,F=/[\\^$.*+?()[\]{}|]/g,P=RegExp(F.source),q=/^\s+|\s+$/g,Z=/^\s+/,K=/\s+$/,V=/\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/,G=/\{\n\/\* \[wrapped with (.+)\] \*/,H=/,? & /,J=/[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g,Y=/\\(\\)?/g,Q=/\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g,X=/\w*$/,nn=/^[-+]0x[0-9a-f]+$/i,tn=/^0b[01]+$/i,en=/^\[object .+?Constructor\]$/,rn=/^0o[0-7]+$/i,un=/^(?:0|[1-9]\d*)$/,fn=/[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g,on=/($^)/,an=/['\n\r\u2028\u2029\\]/g,cn="\\u0300-\\u036f\\ufe20-\\ufe2f\\u20d0-\\u20ff",ln="\\xac\\xb1\\xd7\\xf7\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf\\u2000-\\u206f \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000",sn="[\\ud800-\\udfff]",dn="["+ln+"]",hn="["+cn+"]",pn="\\d+",vn="[\\u2700-\\u27bf]",_n="[a-z\\xdf-\\xf6\\xf8-\\xff]",gn="[^\\ud800-\\udfff"+ln+pn+"\\u2700-\\u27bfa-z\\xdf-\\xf6\\xf8-\\xffA-Z\\xc0-\\xd6\\xd8-\\xde]",yn="\\ud83c[\\udffb-\\udfff]",bn="[^\\ud800-\\udfff]",wn="(?:\\ud83c[\\udde6-\\uddff]){2}",mn="[\\ud800-\\udbff][\\udc00-\\udfff]",xn="[A-Z\\xc0-\\xd6\\xd8-\\xde]",jn="(?:"+_n+"|"+gn+")",An="(?:"+xn+"|"+gn+")",In="(?:"+hn+"|"+yn+")"+"?",kn="[\\ufe0e\\ufe0f]?"+In+("(?:\\u200d(?:"+[bn,wn,mn].join("|")+")[\\ufe0e\\ufe0f]?"+In+")*"),On="(?:"+[vn,wn,mn].join("|")+")"+kn,Rn="(?:"+[bn+hn+"?",hn,wn,mn,sn].join("|")+")",En=RegExp("['’]","g"),zn=RegExp(hn,"g"),Sn=RegExp(yn+"(?="+yn+")|"+Rn+kn,"g"),Ln=RegExp([xn+"?"+_n+"+(?:['’](?:d|ll|m|re|s|t|ve))?(?="+[dn,xn,"$"].join("|")+")",An+"+(?:['’](?:D|LL|M|RE|S|T|VE))?(?="+[dn,xn+jn,"$"].join("|")+")",xn+"?"+jn+"+(?:['’](?:d|ll|m|re|s|t|ve))?",xn+"+(?:['’](?:D|LL|M|RE|S|T|VE))?","\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])","\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])",pn,On].join("|"),"g"),Cn=RegExp("[\\u200d\\ud800-\\udfff"+cn+"\\ufe0e\\ufe0f]"),Wn=/[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/,Un=["Array","Buffer","DataView","Date","Error","Float32Array","Float64Array","Function","Int8Array","Int16Array","Int32Array","Map","Math","Object","Promise","RegExp","Set","String","Symbol","TypeError","Uint8Array","Uint8ClampedArray","Uint16Array","Uint32Array","WeakMap","_","clearTimeout","isFinite","parseInt","setTimeout"],Bn=-1,Tn={};Tn[w]=Tn[m]=Tn[x]=Tn[j]=Tn[A]=Tn[I]=Tn["[object Uint8ClampedArray]"]=Tn[O]=Tn[R]=!0,Tn[r]=Tn[u]=Tn[y]=Tn[i]=Tn[b]=Tn[f]=Tn[o]=Tn[a]=Tn[l]=Tn[s]=Tn[d]=Tn[h]=Tn[p]=Tn[v]=Tn[g]=!1;var $n={};$n[r]=$n[u]=$n[y]=$n[b]=$n[i]=$n[f]=$n[w]=$n[m]=$n[x]=$n[j]=$n[A]=$n[l]=$n[s]=$n[d]=$n[h]=$n[p]=$n[v]=$n[_]=$n[I]=$n["[object Uint8ClampedArray]"]=$n[O]=$n[R]=!0,$n[o]=$n[a]=$n[g]=!1;var Dn={"\\":"\\","'":"'","\n":"n","\r":"r","\u2028":"u2028","\u2029":"u2029"},Nn=parseFloat,Mn=parseInt,Fn="object"==typeof global&&global&&global.Object===Object&&global,Pn="object"==typeof self&&self&&self.Object===Object&&self,qn=Fn||Pn||Function("return this")(),Zn="object"==typeof exports&&exports&&!exports.nodeType&&exports,Kn=Zn&&"object"==typeof module&&module&&!module.nodeType&&module,Vn=Kn&&Kn.exports===Zn,Gn=Vn&&Fn.process,Hn=function(){try{var n=Kn&&Kn.require&&Kn.require("util").types;return n||Gn&&Gn.binding&&Gn.binding("util")}catch(n){}}(),Jn=Hn&&Hn.isArrayBuffer,Yn=Hn&&Hn.isDate,Qn=Hn&&Hn.isMap,Xn=Hn&&Hn.isRegExp,nt=Hn&&Hn.isSet,tt=Hn&&Hn.isTypedArray;function et(n,t,e){switch(e.length){case 0:return n.call(t);case 1:return n.call(t,e[0]);case 2:return n.call(t,e[0],e[1]);case 3:return n.call(t,e[0],e[1],e[2])}return n.apply(t,e)}function rt(n,t,e,r){for(var u=-1,i=null==n?0:n.length;++u<i;){var f=n[u];t(r,f,e(f),n)}return r}function ut(n,t){for(var e=-1,r=null==n?0:n.length;++e<r&&!1!==t(n[e],e,n););return n}function it(n,t){for(var e=null==n?0:n.length;e--&&!1!==t(n[e],e,n););return n}function ft(n,t){for(var e=-1,r=null==n?0:n.length;++e<r;)if(!t(n[e],e,n))return!1;return!0}function ot(n,t){for(var e=-1,r=null==n?0:n.length,u=0,i=[];++e<r;){var f=n[e];t(f,e,n)&&(i[u++]=f)}return i}function at(n,t){return!!(null==n?0:n.length)&&yt(n,t,0)>-1}function ct(n,t,e){for(var r=-1,u=null==n?0:n.length;++r<u;)if(e(t,n[r]))return!0;return!1}function lt(n,t){for(var e=-1,r=null==n?0:n.length,u=Array(r);++e<r;)u[e]=t(n[e],e,n);return u}function st(n,t){for(var e=-1,r=t.length,u=n.length;++e<r;)n[u+e]=t[e];return n}function dt(n,t,e,r){var u=-1,i=null==n?0:n.length;for(r&&i&&(e=n[++u]);++u<i;)e=t(e,n[u],u,n);return e}function ht(n,t,e,r){var u=null==n?0:n.length;for(r&&u&&(e=n[--u]);u--;)e=t(e,n[u],u,n);return e}function pt(n,t){for(var e=-1,r=null==n?0:n.length;++e<r;)if(t(n[e],e,n))return!0;return!1}var vt=xt("length");function _t(n,t,e){var r;return e(n,(function(n,e,u){if(t(n,e,u))return r=e,!1})),r}function gt(n,t,e,r){for(var u=n.length,i=e+(r?1:-1);r?i--:++i<u;)if(t(n[i],i,n))return i;return-1}function yt(n,t,e){return t==t?function(n,t,e){var r=e-1,u=n.length;for(;++r<u;)if(n[r]===t)return r;return-1}(n,t,e):gt(n,wt,e)}function bt(n,t,e,r){for(var u=e-1,i=n.length;++u<i;)if(r(n[u],t))return u;return-1}function wt(n){return n!=n}function mt(n,t){var e=null==n?0:n.length;return e?It(n,t)/e:NaN}function xt(n){return function(t){return null==t?undefined:t[n]}}function jt(n){return function(t){return null==n?undefined:n[t]}}function At(n,t,e,r,u){return u(n,(function(n,u,i){e=r?(r=!1,n):t(e,n,u,i)})),e}function It(n,t){for(var e,r=-1,u=n.length;++r<u;){var i=t(n[r]);undefined!==i&&(e=undefined===e?i:e+i)}return e}function kt(n,t){for(var e=-1,r=Array(n);++e<n;)r[e]=t(e);return r}function Ot(n){return function(t){return n(t)}}function Rt(n,t){return lt(t,(function(t){return n[t]}))}function Et(n,t){return n.has(t)}function zt(n,t){for(var e=-1,r=n.length;++e<r&&yt(t,n[e],0)>-1;);return e}function St(n,t){for(var e=n.length;e--&&yt(t,n[e],0)>-1;);return e}function Lt(n,t){for(var e=n.length,r=0;e--;)n[e]===t&&++r;return r}var Ct=jt({"À":"A","Á":"A","Â":"A","Ã":"A","Ä":"A","Å":"A","à":"a","á":"a","â":"a","ã":"a","ä":"a","å":"a","Ç":"C","ç":"c","Ð":"D","ð":"d","È":"E","É":"E","Ê":"E","Ë":"E","è":"e","é":"e","ê":"e","ë":"e","Ì":"I","Í":"I","Î":"I","Ï":"I","ì":"i","í":"i","î":"i","ï":"i","Ñ":"N","ñ":"n","Ò":"O","Ó":"O","Ô":"O","Õ":"O","Ö":"O","Ø":"O","ò":"o","ó":"o","ô":"o","õ":"o","ö":"o","ø":"o","Ù":"U","Ú":"U","Û":"U","Ü":"U","ù":"u","ú":"u","û":"u","ü":"u","Ý":"Y","ý":"y","ÿ":"y","Æ":"Ae","æ":"ae","Þ":"Th","þ":"th","ß":"ss","Ā":"A","Ă":"A","Ą":"A","ā":"a","ă":"a","ą":"a","Ć":"C","Ĉ":"C","Ċ":"C","Č":"C","ć":"c","ĉ":"c","ċ":"c","č":"c","Ď":"D","Đ":"D","ď":"d","đ":"d","Ē":"E","Ĕ":"E","Ė":"E","Ę":"E","Ě":"E","ē":"e","ĕ":"e","ė":"e","ę":"e","ě":"e","Ĝ":"G","Ğ":"G","Ġ":"G","Ģ":"G","ĝ":"g","ğ":"g","ġ":"g","ģ":"g","Ĥ":"H","Ħ":"H","ĥ":"h","ħ":"h","Ĩ":"I","Ī":"I","Ĭ":"I","Į":"I","İ":"I","ĩ":"i","ī":"i","ĭ":"i","į":"i","ı":"i","Ĵ":"J","ĵ":"j","Ķ":"K","ķ":"k","ĸ":"k","Ĺ":"L","Ļ":"L","Ľ":"L","Ŀ":"L","Ł":"L","ĺ":"l","ļ":"l","ľ":"l","ŀ":"l","ł":"l","Ń":"N","Ņ":"N","Ň":"N","Ŋ":"N","ń":"n","ņ":"n","ň":"n","ŋ":"n","Ō":"O","Ŏ":"O","Ő":"O","ō":"o","ŏ":"o","ő":"o","Ŕ":"R","Ŗ":"R","Ř":"R","ŕ":"r","ŗ":"r","ř":"r","Ś":"S","Ŝ":"S","Ş":"S","Š":"S","ś":"s","ŝ":"s","ş":"s","š":"s","Ţ":"T","Ť":"T","Ŧ":"T","ţ":"t","ť":"t","ŧ":"t","Ũ":"U","Ū":"U","Ŭ":"U","Ů":"U","Ű":"U","Ų":"U","ũ":"u","ū":"u","ŭ":"u","ů":"u","ű":"u","ų":"u","Ŵ":"W","ŵ":"w","Ŷ":"Y","ŷ":"y","Ÿ":"Y","Ź":"Z","Ż":"Z","Ž":"Z","ź":"z","ż":"z","ž":"z","Ĳ":"IJ","ĳ":"ij","Œ":"Oe","œ":"oe","ŉ":"'n","ſ":"s"}),Wt=jt({"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#39;"});function Ut(n){return"\\"+Dn[n]}function Bt(n){return Cn.test(n)}function Tt(n){var t=-1,e=Array(n.size);return n.forEach((function(n,r){e[++t]=[r,n]})),e}function $t(n,t){return function(e){return n(t(e))}}function Dt(n,e){for(var r=-1,u=n.length,i=0,f=[];++r<u;){var o=n[r];o!==e&&o!==t||(n[r]=t,f[i++]=r)}return f}function Nt(n){var t=-1,e=Array(n.size);return n.forEach((function(n){e[++t]=n})),e}function Mt(n){var t=-1,e=Array(n.size);return n.forEach((function(n){e[++t]=[n,n]})),e}function Ft(n){return Bt(n)?function(n){var t=Sn.lastIndex=0;for(;Sn.test(n);)++t;return t}(n):vt(n)}function Pt(n){return Bt(n)?function(n){return n.match(Sn)||[]}(n):function(n){return n.split("")}(n)}var qt=jt({"&amp;":"&","&lt;":"<","&gt;":">","&quot;":'"',"&#39;":"'"});var Zt=function cn(ln){var sn,dn=(ln=null==ln?qn:Zt.defaults(qn.Object(),ln,Zt.pick(qn,Un))).Array,hn=ln.Date,pn=ln.Error,vn=ln.Function,_n=ln.Math,gn=ln.Object,yn=ln.RegExp,bn=ln.String,wn=ln.TypeError,mn=dn.prototype,xn=vn.prototype,jn=gn.prototype,An=ln["__core-js_shared__"],In=xn.toString,kn=jn.hasOwnProperty,On=0,Rn=(sn=/[^.]+$/.exec(An&&An.keys&&An.keys.IE_PROTO||""))?"Symbol(src)_1."+sn:"",Sn=jn.toString,Cn=In.call(gn),Dn=qn._,Fn=yn("^"+In.call(kn).replace(F,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$"),Pn=Vn?ln.Buffer:undefined,Zn=ln.Symbol,Kn=ln.Uint8Array,Gn=Pn?Pn.allocUnsafe:undefined,Hn=$t(gn.getPrototypeOf,gn),vt=gn.create,jt=jn.propertyIsEnumerable,Kt=mn.splice,Vt=Zn?Zn.isConcatSpreadable:undefined,Gt=Zn?Zn.iterator:undefined,Ht=Zn?Zn.toStringTag:undefined,Jt=function(){try{var n=ni(gn,"defineProperty");return n({},"",{}),n}catch(n){}}(),Yt=ln.clearTimeout!==qn.clearTimeout&&ln.clearTimeout,Qt=hn&&hn.now!==qn.Date.now&&hn.now,Xt=ln.setTimeout!==qn.setTimeout&&ln.setTimeout,ne=_n.ceil,te=_n.floor,ee=gn.getOwnPropertySymbols,re=Pn?Pn.isBuffer:undefined,ue=ln.isFinite,ie=mn.join,fe=$t(gn.keys,gn),oe=_n.max,ae=_n.min,ce=hn.now,le=ln.parseInt,se=_n.random,de=mn.reverse,he=ni(ln,"DataView"),pe=ni(ln,"Map"),ve=ni(ln,"Promise"),_e=ni(ln,"Set"),ge=ni(ln,"WeakMap"),ye=ni(gn,"create"),be=ge&&new ge,we={},me=Oi(he),xe=Oi(pe),je=Oi(ve),Ae=Oi(_e),Ie=Oi(ge),ke=Zn?Zn.prototype:undefined,Oe=ke?ke.valueOf:undefined,Re=ke?ke.toString:undefined;function Ee(n){if(Zf(n)&&!Wf(n)&&!(n instanceof Ce)){if(n instanceof Le)return n;if(kn.call(n,"__wrapped__"))return Ri(n)}return new Le(n)}var ze=function(){function n(){}return function(t){if(!qf(t))return{};if(vt)return vt(t);n.prototype=t;var e=new n;return n.prototype=undefined,e}}();function Se(){}function Le(n,t){this.__wrapped__=n,this.__actions__=[],this.__chain__=!!t,this.__index__=0,this.__values__=undefined}function Ce(n){this.__wrapped__=n,this.__actions__=[],this.__dir__=1,this.__filtered__=!1,this.__iteratees__=[],this.__takeCount__=4294967295,this.__views__=[]}function We(n){var t=-1,e=null==n?0:n.length;for(this.clear();++t<e;){var r=n[t];this.set(r[0],r[1])}}function Ue(n){var t=-1,e=null==n?0:n.length;for(this.clear();++t<e;){var r=n[t];this.set(r[0],r[1])}}function Be(n){var t=-1,e=null==n?0:n.length;for(this.clear();++t<e;){var r=n[t];this.set(r[0],r[1])}}function Te(n){var t=-1,e=null==n?0:n.length;for(this.__data__=new Be;++t<e;)this.add(n[t])}function $e(n){var t=this.__data__=new Ue(n);this.size=t.size}function De(n,t){var e=Wf(n),r=!e&&Cf(n),u=!e&&!r&&$f(n),i=!e&&!r&&!u&&Xf(n),f=e||r||u||i,o=f?kt(n.length,bn):[],a=o.length;for(var c in n)!t&&!kn.call(n,c)||f&&("length"==c||u&&("offset"==c||"parent"==c)||i&&("buffer"==c||"byteLength"==c||"byteOffset"==c)||oi(c,a))||o.push(c);return o}function Ne(n){var t=n.length;return t?n[Tr(0,t-1)]:undefined}function Me(n,t){return Ai(yu(n),Je(t,0,n.length))}function Fe(n){return Ai(yu(n))}function Pe(n,t,e){(undefined!==e&&!zf(n[t],e)||undefined===e&&!(t in n))&&Ge(n,t,e)}function qe(n,t,e){var r=n[t];kn.call(n,t)&&zf(r,e)&&(undefined!==e||t in n)||Ge(n,t,e)}function Ze(n,t){for(var e=n.length;e--;)if(zf(n[e][0],t))return e;return-1}function Ke(n,t,e,r){return tr(n,(function(n,u,i){t(r,n,e(n),i)})),r}function Ve(n,t){return n&&bu(t,xo(t),n)}function Ge(n,t,e){"__proto__"==t&&Jt?Jt(n,t,{configurable:!0,enumerable:!0,value:e,writable:!0}):n[t]=e}function He(n,t){for(var e=-1,r=t.length,u=dn(r),i=null==n;++e<r;)u[e]=i?undefined:go(n,t[e]);return u}function Je(n,t,e){return n==n&&(undefined!==e&&(n=n<=e?n:e),undefined!==t&&(n=n>=t?n:t)),n}function Ye(n,t,e,u,o,g){var E,z=1&t,S=2&t,L=4&t;if(e&&(E=o?e(n,u,o,g):e(n)),undefined!==E)return E;if(!qf(n))return n;var C=Wf(n);if(C){if(E=function(n){var t=n.length,e=new n.constructor(t);t&&"string"==typeof n[0]&&kn.call(n,"index")&&(e.index=n.index,e.input=n.input);return e}(n),!z)return yu(n,E)}else{var W=ri(n),U=W==a||W==c;if($f(n))return du(n,z);if(W==d||W==r||U&&!o){if(E=S||U?{}:ii(n),!z)return S?function(n,t){return bu(n,ei(n),t)}(n,function(n,t){return n&&bu(t,jo(t),n)}(E,n)):function(n,t){return bu(n,ti(n),t)}(n,Ve(E,n))}else{if(!$n[W])return o?n:{};E=function(n,t,e){var r=n.constructor;switch(t){case y:return hu(n);case i:case f:return new r(+n);case b:return function(n,t){var e=t?hu(n.buffer):n.buffer;return new n.constructor(e,n.byteOffset,n.byteLength)}(n,e);case w:case m:case x:case j:case A:case I:case k:case O:case R:return pu(n,e);case l:return new r;case s:case v:return new r(n);case h:return function(n){var t=new n.constructor(n.source,X.exec(n));return t.lastIndex=n.lastIndex,t}(n);case p:return new r;case _:return u=n,Oe?gn(Oe.call(u)):{}}var u}(n,W,z)}}g||(g=new $e);var B=g.get(n);if(B)return B;g.set(n,E),Jf(n)?n.forEach((function(r){E.add(Ye(r,t,e,r,n,g))})):Kf(n)&&n.forEach((function(r,u){E.set(u,Ye(r,t,e,u,n,g))}));var T=C?undefined:(L?S?Vu:Ku:S?jo:xo)(n);return ut(T||n,(function(r,u){T&&(r=n[u=r]),qe(E,u,Ye(r,t,e,u,n,g))})),E}function Qe(n,t,e){var r=e.length;if(null==n)return!r;for(n=gn(n);r--;){var u=e[r],i=t[u],f=n[u];if(undefined===f&&!(u in n)||!i(f))return!1}return!0}function Xe(t,e,r){if("function"!=typeof t)throw new wn(n);return wi((function(){t.apply(undefined,r)}),e)}function nr(n,t,e,r){var u=-1,i=at,f=!0,o=n.length,a=[],c=t.length;if(!o)return a;e&&(t=lt(t,Ot(e))),r?(i=ct,f=!1):t.length>=200&&(i=Et,f=!1,t=new Te(t));n:for(;++u<o;){var l=n[u],s=null==e?l:e(l);if(l=r||0!==l?l:0,f&&s==s){for(var d=c;d--;)if(t[d]===s)continue n;a.push(l)}else i(t,s,r)||a.push(l)}return a}Ee.templateSettings={escape:B,evaluate:T,interpolate:$,variable:"",imports:{_:Ee}},Ee.prototype=Se.prototype,Ee.prototype.constructor=Ee,Le.prototype=ze(Se.prototype),Le.prototype.constructor=Le,Ce.prototype=ze(Se.prototype),Ce.prototype.constructor=Ce,We.prototype.clear=function(){this.__data__=ye?ye(null):{},this.size=0},We.prototype.delete=function(n){var t=this.has(n)&&delete this.__data__[n];return this.size-=t?1:0,t},We.prototype.get=function(n){var t=this.__data__;if(ye){var e=t[n];return"__lodash_hash_undefined__"===e?undefined:e}return kn.call(t,n)?t[n]:undefined},We.prototype.has=function(n){var t=this.__data__;return ye?undefined!==t[n]:kn.call(t,n)},We.prototype.set=function(n,t){var e=this.__data__;return this.size+=this.has(n)?0:1,e[n]=ye&&undefined===t?"__lodash_hash_undefined__":t,this},Ue.prototype.clear=function(){this.__data__=[],this.size=0},Ue.prototype.delete=function(n){var t=this.__data__,e=Ze(t,n);return!(e<0)&&(e==t.length-1?t.pop():Kt.call(t,e,1),--this.size,!0)},Ue.prototype.get=function(n){var t=this.__data__,e=Ze(t,n);return e<0?undefined:t[e][1]},Ue.prototype.has=function(n){return Ze(this.__data__,n)>-1},Ue.prototype.set=function(n,t){var e=this.__data__,r=Ze(e,n);return r<0?(++this.size,e.push([n,t])):e[r][1]=t,this},Be.prototype.clear=function(){this.size=0,this.__data__={hash:new We,map:new(pe||Ue),string:new We}},Be.prototype.delete=function(n){var t=Qu(this,n).delete(n);return this.size-=t?1:0,t},Be.prototype.get=function(n){return Qu(this,n).get(n)},Be.prototype.has=function(n){return Qu(this,n).has(n)},Be.prototype.set=function(n,t){var e=Qu(this,n),r=e.size;return e.set(n,t),this.size+=e.size==r?0:1,this},Te.prototype.add=Te.prototype.push=function(n){return this.__data__.set(n,"__lodash_hash_undefined__"),this},Te.prototype.has=function(n){return this.__data__.has(n)},$e.prototype.clear=function(){this.__data__=new Ue,this.size=0},$e.prototype.delete=function(n){var t=this.__data__,e=t.delete(n);return this.size=t.size,e},$e.prototype.get=function(n){return this.__data__.get(n)},$e.prototype.has=function(n){return this.__data__.has(n)},$e.prototype.set=function(n,t){var e=this.__data__;if(e instanceof Ue){var r=e.__data__;if(!pe||r.length<199)return r.push([n,t]),this.size=++e.size,this;e=this.__data__=new Be(r)}return e.set(n,t),this.size=e.size,this};var tr=xu(cr),er=xu(lr,!0);function rr(n,t){var e=!0;return tr(n,(function(n,r,u){return e=!!t(n,r,u)})),e}function ur(n,t,e){for(var r=-1,u=n.length;++r<u;){var i=n[r],f=t(i);if(null!=f&&(undefined===o?f==f&&!Qf(f):e(f,o)))var o=f,a=i}return a}function ir(n,t){var e=[];return tr(n,(function(n,r,u){t(n,r,u)&&e.push(n)})),e}function fr(n,t,e,r,u){var i=-1,f=n.length;for(e||(e=fi),u||(u=[]);++i<f;){var o=n[i];t>0&&e(o)?t>1?fr(o,t-1,e,r,u):st(u,o):r||(u[u.length]=o)}return u}var or=ju(),ar=ju(!0);function cr(n,t){return n&&or(n,t,xo)}function lr(n,t){return n&&ar(n,t,xo)}function sr(n,t){return ot(t,(function(t){return Mf(n[t])}))}function dr(n,t){for(var e=0,r=(t=au(t,n)).length;null!=n&&e<r;)n=n[ki(t[e++])];return e&&e==r?n:undefined}function hr(n,t,e){var r=t(n);return Wf(n)?r:st(r,e(n))}function pr(n){return null==n?undefined===n?"[object Undefined]":"[object Null]":Ht&&Ht in gn(n)?function(n){var t=kn.call(n,Ht),e=n[Ht];try{n[Ht]=undefined;var r=!0}catch(n){}var u=Sn.call(n);r&&(t?n[Ht]=e:delete n[Ht]);return u}(n):function(n){return Sn.call(n)}(n)}function vr(n,t){return n>t}function _r(n,t){return null!=n&&kn.call(n,t)}function gr(n,t){return null!=n&&t in gn(n)}function yr(n,t,e){for(var r=e?ct:at,u=n[0].length,i=n.length,f=i,o=dn(i),a=1/0,c=[];f--;){var l=n[f];f&&t&&(l=lt(l,Ot(t))),a=ae(l.length,a),o[f]=!e&&(t||u>=120&&l.length>=120)?new Te(f&&l):undefined}l=n[0];var s=-1,d=o[0];n:for(;++s<u&&c.length<a;){var h=l[s],p=t?t(h):h;if(h=e||0!==h?h:0,!(d?Et(d,p):r(c,p,e))){for(f=i;--f;){var v=o[f];if(!(v?Et(v,p):r(n[f],p,e)))continue n}d&&d.push(p),c.push(h)}}return c}function br(n,t,e){var r=null==(n=_i(n,t=au(t,n)))?n:n[ki(Di(t))];return null==r?undefined:et(r,n,e)}function wr(n){return Zf(n)&&pr(n)==r}function mr(n,t,e,a,c){return n===t||(null==n||null==t||!Zf(n)&&!Zf(t)?n!=n&&t!=t:function(n,t,e,a,c,g){var w=Wf(n),m=Wf(t),x=w?u:ri(n),j=m?u:ri(t),A=(x=x==r?d:x)==d,I=(j=j==r?d:j)==d,k=x==j;if(k&&$f(n)){if(!$f(t))return!1;w=!0,A=!1}if(k&&!A)return g||(g=new $e),w||Xf(n)?qu(n,t,e,a,c,g):function(n,t,e,r,u,a,c){switch(e){case b:if(n.byteLength!=t.byteLength||n.byteOffset!=t.byteOffset)return!1;n=n.buffer,t=t.buffer;case y:return!(n.byteLength!=t.byteLength||!a(new Kn(n),new Kn(t)));case i:case f:case s:return zf(+n,+t);case o:return n.name==t.name&&n.message==t.message;case h:case v:return n==t+"";case l:var d=Tt;case p:var g=1&r;if(d||(d=Nt),n.size!=t.size&&!g)return!1;var w=c.get(n);if(w)return w==t;r|=2,c.set(n,t);var m=qu(d(n),d(t),r,u,a,c);return c.delete(n),m;case _:if(Oe)return Oe.call(n)==Oe.call(t)}return!1}(n,t,x,e,a,c,g);if(!(1&e)){var O=A&&kn.call(n,"__wrapped__"),R=I&&kn.call(t,"__wrapped__");if(O||R){var E=O?n.value():n,z=R?t.value():t;return g||(g=new $e),c(E,z,e,a,g)}}if(!k)return!1;return g||(g=new $e),function(n,t,e,r,u,i){var f=1&e,o=Ku(n),a=o.length,c=Ku(t).length;if(a!=c&&!f)return!1;var l=a;for(;l--;){var s=o[l];if(!(f?s in t:kn.call(t,s)))return!1}var d=i.get(n);if(d&&i.get(t))return d==t;var h=!0;i.set(n,t),i.set(t,n);var p=f;for(;++l<a;){var v=n[s=o[l]],_=t[s];if(r)var g=f?r(_,v,s,t,n,i):r(v,_,s,n,t,i);if(!(undefined===g?v===_||u(v,_,e,r,i):g)){h=!1;break}p||(p="constructor"==s)}if(h&&!p){var y=n.constructor,b=t.constructor;y==b||!("constructor"in n)||!("constructor"in t)||"function"==typeof y&&y instanceof y&&"function"==typeof b&&b instanceof b||(h=!1)}return i.delete(n),i.delete(t),h}(n,t,e,a,c,g)}(n,t,e,a,mr,c))}function xr(n,t,e,r){var u=e.length,i=u,f=!r;if(null==n)return!i;for(n=gn(n);u--;){var o=e[u];if(f&&o[2]?o[1]!==n[o[0]]:!(o[0]in n))return!1}for(;++u<i;){var a=(o=e[u])[0],c=n[a],l=o[1];if(f&&o[2]){if(undefined===c&&!(a in n))return!1}else{var s=new $e;if(r)var d=r(c,l,a,n,t,s);if(!(undefined===d?mr(l,c,3,r,s):d))return!1}}return!0}function jr(n){return!(!qf(n)||(t=n,Rn&&Rn in t))&&(Mf(n)?Fn:en).test(Oi(n));var t}function Ar(n){return"function"==typeof n?n:null==n?Go:"object"==typeof n?Wf(n)?zr(n[0],n[1]):Er(n):ra(n)}function Ir(n){if(!di(n))return fe(n);var t=[];for(var e in gn(n))kn.call(n,e)&&"constructor"!=e&&t.push(e);return t}function kr(n){if(!qf(n))return function(n){var t=[];if(null!=n)for(var e in gn(n))t.push(e);return t}(n);var t=di(n),e=[];for(var r in n)("constructor"!=r||!t&&kn.call(n,r))&&e.push(r);return e}function Or(n,t){return n<t}function Rr(n,t){var e=-1,r=Bf(n)?dn(n.length):[];return tr(n,(function(n,u,i){r[++e]=t(n,u,i)})),r}function Er(n){var t=Xu(n);return 1==t.length&&t[0][2]?pi(t[0][0],t[0][1]):function(e){return e===n||xr(e,n,t)}}function zr(n,t){return ci(n)&&hi(t)?pi(ki(n),t):function(e){var r=go(e,n);return undefined===r&&r===t?yo(e,n):mr(t,r,3)}}function Sr(n,t,e,r,u){n!==t&&or(t,(function(i,f){if(u||(u=new $e),qf(i))!function(n,t,e,r,u,i,f){var o=yi(n,e),a=yi(t,e),c=f.get(a);if(c)return void Pe(n,e,c);var l=i?i(o,a,e+"",n,t,f):undefined,s=undefined===l;if(s){var d=Wf(a),h=!d&&$f(a),p=!d&&!h&&Xf(a);l=a,d||h||p?Wf(o)?l=o:Tf(o)?l=yu(o):h?(s=!1,l=du(a,!0)):p?(s=!1,l=pu(a,!0)):l=[]:Gf(a)||Cf(a)?(l=o,Cf(o)?l=oo(o):qf(o)&&!Mf(o)||(l=ii(a))):s=!1}s&&(f.set(a,l),u(l,a,r,i,f),f.delete(a));Pe(n,e,l)}(n,t,f,e,Sr,r,u);else{var o=r?r(yi(n,f),i,f+"",n,t,u):undefined;undefined===o&&(o=i),Pe(n,f,o)}}),jo)}function Lr(n,t){var e=n.length;if(e)return oi(t+=t<0?e:0,e)?n[t]:undefined}function Cr(n,t,e){var r=-1;return t=lt(t.length?t:[Go],Ot(Yu())),function(n,t){var e=n.length;for(n.sort(t);e--;)n[e]=n[e].value;return n}(Rr(n,(function(n,e,u){return{criteria:lt(t,(function(t){return t(n)})),index:++r,value:n}})),(function(n,t){return function(n,t,e){var r=-1,u=n.criteria,i=t.criteria,f=u.length,o=e.length;for(;++r<f;){var a=vu(u[r],i[r]);if(a)return r>=o?a:a*("desc"==e[r]?-1:1)}return n.index-t.index}(n,t,e)}))}function Wr(n,t,e){for(var r=-1,u=t.length,i={};++r<u;){var f=t[r],o=dr(n,f);e(o,f)&&Fr(i,au(f,n),o)}return i}function Ur(n,t,e,r){var u=r?bt:yt,i=-1,f=t.length,o=n;for(n===t&&(t=yu(t)),e&&(o=lt(n,Ot(e)));++i<f;)for(var a=0,c=t[i],l=e?e(c):c;(a=u(o,l,a,r))>-1;)o!==n&&Kt.call(o,a,1),Kt.call(n,a,1);return n}function Br(n,t){for(var e=n?t.length:0,r=e-1;e--;){var u=t[e];if(e==r||u!==i){var i=u;oi(u)?Kt.call(n,u,1):nu(n,u)}}return n}function Tr(n,t){return n+te(se()*(t-n+1))}function $r(n,t){var e="";if(!n||t<1||t>9007199254740991)return e;do{t%2&&(e+=n),(t=te(t/2))&&(n+=n)}while(t);return e}function Dr(n,t){return mi(vi(n,t,Go),n+"")}function Nr(n){return Ne(So(n))}function Mr(n,t){var e=So(n);return Ai(e,Je(t,0,e.length))}function Fr(n,t,e,r){if(!qf(n))return n;for(var u=-1,i=(t=au(t,n)).length,f=i-1,o=n;null!=o&&++u<i;){var a=ki(t[u]),c=e;if(u!=f){var l=o[a];undefined===(c=r?r(l,a,o):undefined)&&(c=qf(l)?l:oi(t[u+1])?[]:{})}qe(o,a,c),o=o[a]}return n}var Pr=be?function(n,t){return be.set(n,t),n}:Go,qr=Jt?function(n,t){return Jt(n,"toString",{configurable:!0,enumerable:!1,value:Zo(t),writable:!0})}:Go;function Zr(n){return Ai(So(n))}function Kr(n,t,e){var r=-1,u=n.length;t<0&&(t=-t>u?0:u+t),(e=e>u?u:e)<0&&(e+=u),u=t>e?0:e-t>>>0,t>>>=0;for(var i=dn(u);++r<u;)i[r]=n[r+t];return i}function Vr(n,t){var e;return tr(n,(function(n,r,u){return!(e=t(n,r,u))})),!!e}function Gr(n,t,e){var r=0,u=null==n?r:n.length;if("number"==typeof t&&t==t&&u<=2147483647){for(;r<u;){var i=r+u>>>1,f=n[i];null!==f&&!Qf(f)&&(e?f<=t:f<t)?r=i+1:u=i}return u}return Hr(n,t,Go,e)}function Hr(n,t,e,r){t=e(t);for(var u=0,i=null==n?0:n.length,f=t!=t,o=null===t,a=Qf(t),c=undefined===t;u<i;){var l=te((u+i)/2),s=e(n[l]),d=undefined!==s,h=null===s,p=s==s,v=Qf(s);if(f)var _=r||p;else _=c?p&&(r||d):o?p&&d&&(r||!h):a?p&&d&&!h&&(r||!v):!h&&!v&&(r?s<=t:s<t);_?u=l+1:i=l}return ae(i,4294967294)}function Jr(n,t){for(var e=-1,r=n.length,u=0,i=[];++e<r;){var f=n[e],o=t?t(f):f;if(!e||!zf(o,a)){var a=o;i[u++]=0===f?0:f}}return i}function Yr(n){return"number"==typeof n?n:Qf(n)?NaN:+n}function Qr(n){if("string"==typeof n)return n;if(Wf(n))return lt(n,Qr)+"";if(Qf(n))return Re?Re.call(n):"";var t=n+"";return"0"==t&&1/n==-Infinity?"-0":t}function Xr(n,t,e){var r=-1,u=at,i=n.length,f=!0,o=[],a=o;if(e)f=!1,u=ct;else if(i>=200){var c=t?null:$u(n);if(c)return Nt(c);f=!1,u=Et,a=new Te}else a=t?[]:o;n:for(;++r<i;){var l=n[r],s=t?t(l):l;if(l=e||0!==l?l:0,f&&s==s){for(var d=a.length;d--;)if(a[d]===s)continue n;t&&a.push(s),o.push(l)}else u(a,s,e)||(a!==o&&a.push(s),o.push(l))}return o}function nu(n,t){return null==(n=_i(n,t=au(t,n)))||delete n[ki(Di(t))]}function tu(n,t,e,r){return Fr(n,t,e(dr(n,t)),r)}function eu(n,t,e,r){for(var u=n.length,i=r?u:-1;(r?i--:++i<u)&&t(n[i],i,n););return e?Kr(n,r?0:i,r?i+1:u):Kr(n,r?i+1:0,r?u:i)}function ru(n,t){var e=n;return e instanceof Ce&&(e=e.value()),dt(t,(function(n,t){return t.func.apply(t.thisArg,st([n],t.args))}),e)}function uu(n,t,e){var r=n.length;if(r<2)return r?Xr(n[0]):[];for(var u=-1,i=dn(r);++u<r;)for(var f=n[u],o=-1;++o<r;)o!=u&&(i[u]=nr(i[u]||f,n[o],t,e));return Xr(fr(i,1),t,e)}function iu(n,t,e){for(var r=-1,u=n.length,i=t.length,f={};++r<u;){var o=r<i?t[r]:undefined;e(f,n[r],o)}return f}function fu(n){return Tf(n)?n:[]}function ou(n){return"function"==typeof n?n:Go}function au(n,t){return Wf(n)?n:ci(n,t)?[n]:Ii(ao(n))}var cu=Dr;function lu(n,t,e){var r=n.length;return e=undefined===e?r:e,!t&&e>=r?n:Kr(n,t,e)}var su=Yt||function(n){return qn.clearTimeout(n)};function du(n,t){if(t)return n.slice();var e=n.length,r=Gn?Gn(e):new n.constructor(e);return n.copy(r),r}function hu(n){var t=new n.constructor(n.byteLength);return new Kn(t).set(new Kn(n)),t}function pu(n,t){var e=t?hu(n.buffer):n.buffer;return new n.constructor(e,n.byteOffset,n.length)}function vu(n,t){if(n!==t){var e=undefined!==n,r=null===n,u=n==n,i=Qf(n),f=undefined!==t,o=null===t,a=t==t,c=Qf(t);if(!o&&!c&&!i&&n>t||i&&f&&a&&!o&&!c||r&&f&&a||!e&&a||!u)return 1;if(!r&&!i&&!c&&n<t||c&&e&&u&&!r&&!i||o&&e&&u||!f&&u||!a)return-1}return 0}function _u(n,t,e,r){for(var u=-1,i=n.length,f=e.length,o=-1,a=t.length,c=oe(i-f,0),l=dn(a+c),s=!r;++o<a;)l[o]=t[o];for(;++u<f;)(s||u<i)&&(l[e[u]]=n[u]);for(;c--;)l[o++]=n[u++];return l}function gu(n,t,e,r){for(var u=-1,i=n.length,f=-1,o=e.length,a=-1,c=t.length,l=oe(i-o,0),s=dn(l+c),d=!r;++u<l;)s[u]=n[u];for(var h=u;++a<c;)s[h+a]=t[a];for(;++f<o;)(d||u<i)&&(s[h+e[f]]=n[u++]);return s}function yu(n,t){var e=-1,r=n.length;for(t||(t=dn(r));++e<r;)t[e]=n[e];return t}function bu(n,t,e,r){var u=!e;e||(e={});for(var i=-1,f=t.length;++i<f;){var o=t[i],a=r?r(e[o],n[o],o,e,n):undefined;undefined===a&&(a=n[o]),u?Ge(e,o,a):qe(e,o,a)}return e}function wu(n,t){return function(e,r){var u=Wf(e)?rt:Ke,i=t?t():{};return u(e,n,Yu(r,2),i)}}function mu(n){return Dr((function(t,e){var r=-1,u=e.length,i=u>1?e[u-1]:undefined,f=u>2?e[2]:undefined;for(i=n.length>3&&"function"==typeof i?(u--,i):undefined,f&&ai(e[0],e[1],f)&&(i=u<3?undefined:i,u=1),t=gn(t);++r<u;){var o=e[r];o&&n(t,o,r,i)}return t}))}function xu(n,t){return function(e,r){if(null==e)return e;if(!Bf(e))return n(e,r);for(var u=e.length,i=t?u:-1,f=gn(e);(t?i--:++i<u)&&!1!==r(f[i],i,f););return e}}function ju(n){return function(t,e,r){for(var u=-1,i=gn(t),f=r(t),o=f.length;o--;){var a=f[n?o:++u];if(!1===e(i[a],a,i))break}return t}}function Au(n){return function(t){var e=Bt(t=ao(t))?Pt(t):undefined,r=e?e[0]:t.charAt(0),u=e?lu(e,1).join(""):t.slice(1);return r[n]()+u}}function Iu(n){return function(t){return dt(Fo(Wo(t).replace(En,"")),n,"")}}function ku(n){return function(){var t=arguments;switch(t.length){case 0:return new n;case 1:return new n(t[0]);case 2:return new n(t[0],t[1]);case 3:return new n(t[0],t[1],t[2]);case 4:return new n(t[0],t[1],t[2],t[3]);case 5:return new n(t[0],t[1],t[2],t[3],t[4]);case 6:return new n(t[0],t[1],t[2],t[3],t[4],t[5]);case 7:return new n(t[0],t[1],t[2],t[3],t[4],t[5],t[6])}var e=ze(n.prototype),r=n.apply(e,t);return qf(r)?r:e}}function Ou(n){return function(t,e,r){var u=gn(t);if(!Bf(t)){var i=Yu(e,3);t=xo(t),e=function(n){return i(u[n],n,u)}}var f=n(t,e,r);return f>-1?u[i?t[f]:f]:undefined}}function Ru(t){return Zu((function(e){var r=e.length,u=r,i=Le.prototype.thru;for(t&&e.reverse();u--;){var f=e[u];if("function"!=typeof f)throw new wn(n);if(i&&!o&&"wrapper"==Hu(f))var o=new Le([],!0)}for(u=o?u:r;++u<r;){var a=Hu(f=e[u]),c="wrapper"==a?Gu(f):undefined;o=c&&li(c[0])&&424==c[1]&&!c[4].length&&1==c[9]?o[Hu(c[0])].apply(o,c[3]):1==f.length&&li(f)?o[a]():o.thru(f)}return function(){var n=arguments,t=n[0];if(o&&1==n.length&&Wf(t))return o.plant(t).value();for(var u=0,i=r?e[u].apply(this,n):t;++u<r;)i=e[u].call(this,i);return i}}))}function Eu(n,t,e,r,u,i,f,o,a,c){var l=128&t,s=1&t,d=2&t,h=24&t,p=512&t,v=d?undefined:ku(n);return function _(){for(var g=arguments.length,y=dn(g),b=g;b--;)y[b]=arguments[b];if(h)var w=Ju(_),m=Lt(y,w);if(r&&(y=_u(y,r,u,h)),i&&(y=gu(y,i,f,h)),g-=m,h&&g<c){var x=Dt(y,w);return Bu(n,t,Eu,_.placeholder,e,y,x,o,a,c-g)}var j=s?e:this,A=d?j[n]:n;return g=y.length,o?y=gi(y,o):p&&g>1&&y.reverse(),l&&a<g&&(y.length=a),this&&this!==qn&&this instanceof _&&(A=v||ku(A)),A.apply(j,y)}}function zu(n,t){return function(e,r){return function(n,t,e,r){return cr(n,(function(n,u,i){t(r,e(n),u,i)})),r}(e,n,t(r),{})}}function Su(n,t){return function(e,r){var u;if(undefined===e&&undefined===r)return t;if(undefined!==e&&(u=e),undefined!==r){if(undefined===u)return r;"string"==typeof e||"string"==typeof r?(e=Qr(e),r=Qr(r)):(e=Yr(e),r=Yr(r)),u=n(e,r)}return u}}function Lu(n){return Zu((function(t){return t=lt(t,Ot(Yu())),Dr((function(e){var r=this;return n(t,(function(n){return et(n,r,e)}))}))}))}function Cu(n,t){var e=(t=undefined===t?" ":Qr(t)).length;if(e<2)return e?$r(t,n):t;var r=$r(t,ne(n/Ft(t)));return Bt(t)?lu(Pt(r),0,n).join(""):r.slice(0,n)}function Wu(n){return function(t,e,r){return r&&"number"!=typeof r&&ai(t,e,r)&&(e=r=undefined),t=ro(t),undefined===e?(e=t,t=0):e=ro(e),function(n,t,e,r){for(var u=-1,i=oe(ne((t-n)/(e||1)),0),f=dn(i);i--;)f[r?i:++u]=n,n+=e;return f}(t,e,r=undefined===r?t<e?1:-1:ro(r),n)}}function Uu(n){return function(t,e){return"string"==typeof t&&"string"==typeof e||(t=fo(t),e=fo(e)),n(t,e)}}function Bu(n,t,e,r,u,i,f,o,a,c){var l=8&t;t|=l?32:64,4&(t&=~(l?64:32))||(t&=-4);var s=[n,t,u,l?i:undefined,l?f:undefined,l?undefined:i,l?undefined:f,o,a,c],d=e.apply(undefined,s);return li(n)&&bi(d,s),d.placeholder=r,xi(d,n,t)}function Tu(n){var t=_n[n];return function(n,e){if(n=fo(n),(e=null==e?0:ae(uo(e),292))&&ue(n)){var r=(ao(n)+"e").split("e");return+((r=(ao(t(r[0]+"e"+(+r[1]+e)))+"e").split("e"))[0]+"e"+(+r[1]-e))}return t(n)}}var $u=_e&&1/Nt(new _e([,-0]))[1]==Infinity?function(n){return new _e(n)}:Xo;function Du(n){return function(t){var e=ri(t);return e==l?Tt(t):e==p?Mt(t):function(n,t){return lt(t,(function(t){return[t,n[t]]}))}(t,n(t))}}function Nu(e,r,u,i,f,o,a,c){var l=2&r;if(!l&&"function"!=typeof e)throw new wn(n);var s=i?i.length:0;if(s||(r&=-97,i=f=undefined),a=undefined===a?a:oe(uo(a),0),c=undefined===c?c:uo(c),s-=f?f.length:0,64&r){var d=i,h=f;i=f=undefined}var p=l?undefined:Gu(e),v=[e,r,u,i,f,d,h,o,a,c];if(p&&function(n,e){var r=n[1],u=e[1],i=r|u,f=i<131,o=128==u&&8==r||128==u&&256==r&&n[7].length<=e[8]||384==u&&e[7].length<=e[8]&&8==r;if(!f&&!o)return n;1&u&&(n[2]=e[2],i|=1&r?0:4);var a=e[3];if(a){var c=n[3];n[3]=c?_u(c,a,e[4]):a,n[4]=c?Dt(n[3],t):e[4]}(a=e[5])&&(c=n[5],n[5]=c?gu(c,a,e[6]):a,n[6]=c?Dt(n[5],t):e[6]);(a=e[7])&&(n[7]=a);128&u&&(n[8]=null==n[8]?e[8]:ae(n[8],e[8]));null==n[9]&&(n[9]=e[9]);n[0]=e[0],n[1]=i}(v,p),e=v[0],r=v[1],u=v[2],i=v[3],f=v[4],!(c=v[9]=undefined===v[9]?l?0:e.length:oe(v[9]-s,0))&&24&r&&(r&=-25),r&&1!=r)_=8==r||16==r?function(n,t,e){var r=ku(n);return function u(){for(var i=arguments.length,f=dn(i),o=i,a=Ju(u);o--;)f[o]=arguments[o];var c=i<3&&f[0]!==a&&f[i-1]!==a?[]:Dt(f,a);return(i-=c.length)<e?Bu(n,t,Eu,u.placeholder,void 0,f,c,void 0,void 0,e-i):et(this&&this!==qn&&this instanceof u?r:n,this,f)}}(e,r,c):32!=r&&33!=r||f.length?Eu.apply(undefined,v):function(n,t,e,r){var u=1&t,i=ku(n);return function t(){for(var f=-1,o=arguments.length,a=-1,c=r.length,l=dn(c+o),s=this&&this!==qn&&this instanceof t?i:n;++a<c;)l[a]=r[a];for(;o--;)l[a++]=arguments[++f];return et(s,u?e:this,l)}}(e,r,u,i);else var _=function(n,t,e){var r=1&t,u=ku(n);return function t(){return(this&&this!==qn&&this instanceof t?u:n).apply(r?e:this,arguments)}}(e,r,u);return xi((p?Pr:bi)(_,v),e,r)}function Mu(n,t,e,r){return undefined===n||zf(n,jn[e])&&!kn.call(r,e)?t:n}function Fu(n,t,e,r,u,i){return qf(n)&&qf(t)&&(i.set(t,n),Sr(n,t,undefined,Fu,i),i.delete(t)),n}function Pu(n){return Gf(n)?undefined:n}function qu(n,t,e,r,u,i){var f=1&e,o=n.length,a=t.length;if(o!=a&&!(f&&a>o))return!1;var c=i.get(n);if(c&&i.get(t))return c==t;var l=-1,s=!0,d=2&e?new Te:undefined;for(i.set(n,t),i.set(t,n);++l<o;){var h=n[l],p=t[l];if(r)var v=f?r(p,h,l,t,n,i):r(h,p,l,n,t,i);if(undefined!==v){if(v)continue;s=!1;break}if(d){if(!pt(t,(function(n,t){if(!Et(d,t)&&(h===n||u(h,n,e,r,i)))return d.push(t)}))){s=!1;break}}else if(h!==p&&!u(h,p,e,r,i)){s=!1;break}}return i.delete(n),i.delete(t),s}function Zu(n){return mi(vi(n,undefined,Wi),n+"")}function Ku(n){return hr(n,xo,ti)}function Vu(n){return hr(n,jo,ei)}var Gu=be?function(n){return be.get(n)}:Xo;function Hu(n){for(var t=n.name+"",e=we[t],r=kn.call(we,t)?e.length:0;r--;){var u=e[r],i=u.func;if(null==i||i==n)return u.name}return t}function Ju(n){return(kn.call(Ee,"placeholder")?Ee:n).placeholder}function Yu(){var n=Ee.iteratee||Ho;return n=n===Ho?Ar:n,arguments.length?n(arguments[0],arguments[1]):n}function Qu(n,t){var e,r,u=n.__data__;return("string"==(r=typeof(e=t))||"number"==r||"symbol"==r||"boolean"==r?"__proto__"!==e:null===e)?u["string"==typeof t?"string":"hash"]:u.map}function Xu(n){for(var t=xo(n),e=t.length;e--;){var r=t[e],u=n[r];t[e]=[r,u,hi(u)]}return t}function ni(n,t){var e=function(n,t){return null==n?void 0:n[t]}(n,t);return jr(e)?e:undefined}var ti=ee?function(n){return null==n?[]:(n=gn(n),ot(ee(n),(function(t){return jt.call(n,t)})))}:fa,ei=ee?function(n){for(var t=[];n;)st(t,ti(n)),n=Hn(n);return t}:fa,ri=pr;function ui(n,t,e){for(var r=-1,u=(t=au(t,n)).length,i=!1;++r<u;){var f=ki(t[r]);if(!(i=null!=n&&e(n,f)))break;n=n[f]}return i||++r!=u?i:!!(u=null==n?0:n.length)&&Pf(u)&&oi(f,u)&&(Wf(n)||Cf(n))}function ii(n){return"function"!=typeof n.constructor||di(n)?{}:ze(Hn(n))}function fi(n){return Wf(n)||Cf(n)||!!(Vt&&n&&n[Vt])}function oi(n,t){var e=typeof n;return!!(t=null==t?9007199254740991:t)&&("number"==e||"symbol"!=e&&un.test(n))&&n>-1&&n%1==0&&n<t}function ai(n,t,e){if(!qf(e))return!1;var r=typeof t;return!!("number"==r?Bf(e)&&oi(t,e.length):"string"==r&&t in e)&&zf(e[t],n)}function ci(n,t){if(Wf(n))return!1;var e=typeof n;return!("number"!=e&&"symbol"!=e&&"boolean"!=e&&null!=n&&!Qf(n))||(N.test(n)||!D.test(n)||null!=t&&n in gn(t))}function li(n){var t=Hu(n),e=Ee[t];if("function"!=typeof e||!(t in Ce.prototype))return!1;if(n===e)return!0;var r=Gu(e);return!!r&&n===r[0]}(he&&ri(new he(new ArrayBuffer(1)))!=b||pe&&ri(new pe)!=l||ve&&"[object Promise]"!=ri(ve.resolve())||_e&&ri(new _e)!=p||ge&&ri(new ge)!=g)&&(ri=function(n){var t=pr(n),e=t==d?n.constructor:undefined,r=e?Oi(e):"";if(r)switch(r){case me:return b;case xe:return l;case je:return"[object Promise]";case Ae:return p;case Ie:return g}return t});var si=An?Mf:oa;function di(n){var t=n&&n.constructor;return n===("function"==typeof t&&t.prototype||jn)}function hi(n){return n==n&&!qf(n)}function pi(n,t){return function(e){return null!=e&&(e[n]===t&&(undefined!==t||n in gn(e)))}}function vi(n,t,e){return t=oe(undefined===t?n.length-1:t,0),function(){for(var r=arguments,u=-1,i=oe(r.length-t,0),f=dn(i);++u<i;)f[u]=r[t+u];u=-1;for(var o=dn(t+1);++u<t;)o[u]=r[u];return o[t]=e(f),et(n,this,o)}}function _i(n,t){return t.length<2?n:dr(n,Kr(t,0,-1))}function gi(n,t){for(var e=n.length,r=ae(t.length,e),u=yu(n);r--;){var i=t[r];n[r]=oi(i,e)?u[i]:undefined}return n}function yi(n,t){if(("constructor"!==t||"function"!=typeof n[t])&&"__proto__"!=t)return n[t]}var bi=ji(Pr),wi=Xt||function(n,t){return qn.setTimeout(n,t)},mi=ji(qr);function xi(n,t,r){var u=t+"";return mi(n,function(n,t){var e=t.length;if(!e)return n;var r=e-1;return t[r]=(e>1?"& ":"")+t[r],t=t.join(e>2?", ":" "),n.replace(V,"{\n/* [wrapped with "+t+"] */\n")}(u,function(n,t){return ut(e,(function(e){var r="_."+e[0];t&e[1]&&!at(n,r)&&n.push(r)})),n.sort()}(function(n){var t=n.match(G);return t?t[1].split(H):[]}(u),r)))}function ji(n){var t=0,e=0;return function(){var r=ce(),u=16-(r-e);if(e=r,u>0){if(++t>=800)return arguments[0]}else t=0;return n.apply(undefined,arguments)}}function Ai(n,t){var e=-1,r=n.length,u=r-1;for(t=undefined===t?r:t;++e<t;){var i=Tr(e,u),f=n[i];n[i]=n[e],n[e]=f}return n.length=t,n}var Ii=function(n){var t=Af(n,(function(n){return 500===e.size&&e.clear(),n})),e=t.cache;return t}((function(n){var t=[];return 46===n.charCodeAt(0)&&t.push(""),n.replace(M,(function(n,e,r,u){t.push(r?u.replace(Y,"$1"):e||n)})),t}));function ki(n){if("string"==typeof n||Qf(n))return n;var t=n+"";return"0"==t&&1/n==-Infinity?"-0":t}function Oi(n){if(null!=n){try{return In.call(n)}catch(n){}try{return n+""}catch(n){}}return""}function Ri(n){if(n instanceof Ce)return n.clone();var t=new Le(n.__wrapped__,n.__chain__);return t.__actions__=yu(n.__actions__),t.__index__=n.__index__,t.__values__=n.__values__,t}var Ei=Dr((function(n,t){return Tf(n)?nr(n,fr(t,1,Tf,!0)):[]})),zi=Dr((function(n,t){var e=Di(t);return Tf(e)&&(e=undefined),Tf(n)?nr(n,fr(t,1,Tf,!0),Yu(e,2)):[]})),Si=Dr((function(n,t){var e=Di(t);return Tf(e)&&(e=undefined),Tf(n)?nr(n,fr(t,1,Tf,!0),undefined,e):[]}));function Li(n,t,e){var r=null==n?0:n.length;if(!r)return-1;var u=null==e?0:uo(e);return u<0&&(u=oe(r+u,0)),gt(n,Yu(t,3),u)}function Ci(n,t,e){var r=null==n?0:n.length;if(!r)return-1;var u=r-1;return undefined!==e&&(u=uo(e),u=e<0?oe(r+u,0):ae(u,r-1)),gt(n,Yu(t,3),u,!0)}function Wi(n){return(null==n?0:n.length)?fr(n,1):[]}function Ui(n){return n&&n.length?n[0]:undefined}var Bi=Dr((function(n){var t=lt(n,fu);return t.length&&t[0]===n[0]?yr(t):[]})),Ti=Dr((function(n){var t=Di(n),e=lt(n,fu);return t===Di(e)?t=undefined:e.pop(),e.length&&e[0]===n[0]?yr(e,Yu(t,2)):[]})),$i=Dr((function(n){var t=Di(n),e=lt(n,fu);return(t="function"==typeof t?t:undefined)&&e.pop(),e.length&&e[0]===n[0]?yr(e,undefined,t):[]}));function Di(n){var t=null==n?0:n.length;return t?n[t-1]:undefined}var Ni=Dr(Mi);function Mi(n,t){return n&&n.length&&t&&t.length?Ur(n,t):n}var Fi=Zu((function(n,t){var e=null==n?0:n.length,r=He(n,t);return Br(n,lt(t,(function(n){return oi(n,e)?+n:n})).sort(vu)),r}));function Pi(n){return null==n?n:de.call(n)}var qi=Dr((function(n){return Xr(fr(n,1,Tf,!0))})),Zi=Dr((function(n){var t=Di(n);return Tf(t)&&(t=undefined),Xr(fr(n,1,Tf,!0),Yu(t,2))})),Ki=Dr((function(n){var t=Di(n);return t="function"==typeof t?t:undefined,Xr(fr(n,1,Tf,!0),undefined,t)}));function Vi(n){if(!n||!n.length)return[];var t=0;return n=ot(n,(function(n){if(Tf(n))return t=oe(n.length,t),!0})),kt(t,(function(t){return lt(n,xt(t))}))}function Gi(n,t){if(!n||!n.length)return[];var e=Vi(n);return null==t?e:lt(e,(function(n){return et(t,undefined,n)}))}var Hi=Dr((function(n,t){return Tf(n)?nr(n,t):[]})),Ji=Dr((function(n){return uu(ot(n,Tf))})),Yi=Dr((function(n){var t=Di(n);return Tf(t)&&(t=undefined),uu(ot(n,Tf),Yu(t,2))})),Qi=Dr((function(n){var t=Di(n);return t="function"==typeof t?t:undefined,uu(ot(n,Tf),undefined,t)})),Xi=Dr(Vi);var nf=Dr((function(n){var t=n.length,e=t>1?n[t-1]:undefined;return e="function"==typeof e?(n.pop(),e):undefined,Gi(n,e)}));function tf(n){var t=Ee(n);return t.__chain__=!0,t}function ef(n,t){return t(n)}var rf=Zu((function(n){var t=n.length,e=t?n[0]:0,r=this.__wrapped__,u=function(t){return He(t,n)};return!(t>1||this.__actions__.length)&&r instanceof Ce&&oi(e)?((r=r.slice(e,+e+(t?1:0))).__actions__.push({func:ef,args:[u],thisArg:undefined}),new Le(r,this.__chain__).thru((function(n){return t&&!n.length&&n.push(undefined),n}))):this.thru(u)}));var uf=wu((function(n,t,e){kn.call(n,e)?++n[e]:Ge(n,e,1)}));var ff=Ou(Li),of=Ou(Ci);function af(n,t){return(Wf(n)?ut:tr)(n,Yu(t,3))}function cf(n,t){return(Wf(n)?it:er)(n,Yu(t,3))}var lf=wu((function(n,t,e){kn.call(n,e)?n[e].push(t):Ge(n,e,[t])}));var sf=Dr((function(n,t,e){var r=-1,u="function"==typeof t,i=Bf(n)?dn(n.length):[];return tr(n,(function(n){i[++r]=u?et(t,n,e):br(n,t,e)})),i})),df=wu((function(n,t,e){Ge(n,e,t)}));function hf(n,t){return(Wf(n)?lt:Rr)(n,Yu(t,3))}var pf=wu((function(n,t,e){n[e?0:1].push(t)}),(function(){return[[],[]]}));var vf=Dr((function(n,t){if(null==n)return[];var e=t.length;return e>1&&ai(n,t[0],t[1])?t=[]:e>2&&ai(t[0],t[1],t[2])&&(t=[t[0]]),Cr(n,fr(t,1),[])})),_f=Qt||function(){return qn.Date.now()};function gf(n,t,e){return t=e?undefined:t,Nu(n,128,undefined,undefined,undefined,undefined,t=n&&null==t?n.length:t)}function yf(t,e){var r;if("function"!=typeof e)throw new wn(n);return t=uo(t),function(){return--t>0&&(r=e.apply(this,arguments)),t<=1&&(e=undefined),r}}var bf=Dr((function(n,t,e){var r=1;if(e.length){var u=Dt(e,Ju(bf));r|=32}return Nu(n,r,t,e,u)})),wf=Dr((function(n,t,e){var r=3;if(e.length){var u=Dt(e,Ju(wf));r|=32}return Nu(t,r,n,e,u)}));function mf(t,e,r){var u,i,f,o,a,c,l=0,s=!1,d=!1,h=!0;if("function"!=typeof t)throw new wn(n);function p(n){var e=u,r=i;return u=i=undefined,l=n,o=t.apply(r,e)}function v(n){return l=n,a=wi(g,e),s?p(n):o}function _(n){var t=n-c;return undefined===c||t>=e||t<0||d&&n-l>=f}function g(){var n=_f();if(_(n))return y(n);a=wi(g,function(n){var t=e-(n-c);return d?ae(t,f-(n-l)):t}(n))}function y(n){return a=undefined,h&&u?p(n):(u=i=undefined,o)}function b(){var n=_f(),t=_(n);if(u=arguments,i=this,c=n,t){if(undefined===a)return v(c);if(d)return su(a),a=wi(g,e),p(c)}return undefined===a&&(a=wi(g,e)),o}return e=fo(e)||0,qf(r)&&(s=!!r.leading,f=(d="maxWait"in r)?oe(fo(r.maxWait)||0,e):f,h="trailing"in r?!!r.trailing:h),b.cancel=function(){undefined!==a&&su(a),l=0,u=c=i=a=undefined},b.flush=function(){return undefined===a?o:y(_f())},b}var xf=Dr((function(n,t){return Xe(n,1,t)})),jf=Dr((function(n,t,e){return Xe(n,fo(t)||0,e)}));function Af(t,e){if("function"!=typeof t||null!=e&&"function"!=typeof e)throw new wn(n);var r=function(){var n=arguments,u=e?e.apply(this,n):n[0],i=r.cache;if(i.has(u))return i.get(u);var f=t.apply(this,n);return r.cache=i.set(u,f)||i,f};return r.cache=new(Af.Cache||Be),r}function If(t){if("function"!=typeof t)throw new wn(n);return function(){var n=arguments;switch(n.length){case 0:return!t.call(this);case 1:return!t.call(this,n[0]);case 2:return!t.call(this,n[0],n[1]);case 3:return!t.call(this,n[0],n[1],n[2])}return!t.apply(this,n)}}Af.Cache=Be;var kf=cu((function(n,t){var e=(t=1==t.length&&Wf(t[0])?lt(t[0],Ot(Yu())):lt(fr(t,1),Ot(Yu()))).length;return Dr((function(r){for(var u=-1,i=ae(r.length,e);++u<i;)r[u]=t[u].call(this,r[u]);return et(n,this,r)}))})),Of=Dr((function(n,t){return Nu(n,32,undefined,t,Dt(t,Ju(Of)))})),Rf=Dr((function(n,t){return Nu(n,64,undefined,t,Dt(t,Ju(Rf)))})),Ef=Zu((function(n,t){return Nu(n,256,undefined,undefined,undefined,t)}));function zf(n,t){return n===t||n!=n&&t!=t}var Sf=Uu(vr),Lf=Uu((function(n,t){return n>=t})),Cf=wr(function(){return arguments}())?wr:function(n){return Zf(n)&&kn.call(n,"callee")&&!jt.call(n,"callee")},Wf=dn.isArray,Uf=Jn?Ot(Jn):function(n){return Zf(n)&&pr(n)==y};function Bf(n){return null!=n&&Pf(n.length)&&!Mf(n)}function Tf(n){return Zf(n)&&Bf(n)}var $f=re||oa,Df=Yn?Ot(Yn):function(n){return Zf(n)&&pr(n)==f};function Nf(n){if(!Zf(n))return!1;var t=pr(n);return t==o||"[object DOMException]"==t||"string"==typeof n.message&&"string"==typeof n.name&&!Gf(n)}function Mf(n){if(!qf(n))return!1;var t=pr(n);return t==a||t==c||"[object AsyncFunction]"==t||"[object Proxy]"==t}function Ff(n){return"number"==typeof n&&n==uo(n)}function Pf(n){return"number"==typeof n&&n>-1&&n%1==0&&n<=9007199254740991}function qf(n){var t=typeof n;return null!=n&&("object"==t||"function"==t)}function Zf(n){return null!=n&&"object"==typeof n}var Kf=Qn?Ot(Qn):function(n){return Zf(n)&&ri(n)==l};function Vf(n){return"number"==typeof n||Zf(n)&&pr(n)==s}function Gf(n){if(!Zf(n)||pr(n)!=d)return!1;var t=Hn(n);if(null===t)return!0;var e=kn.call(t,"constructor")&&t.constructor;return"function"==typeof e&&e instanceof e&&In.call(e)==Cn}var Hf=Xn?Ot(Xn):function(n){return Zf(n)&&pr(n)==h};var Jf=nt?Ot(nt):function(n){return Zf(n)&&ri(n)==p};function Yf(n){return"string"==typeof n||!Wf(n)&&Zf(n)&&pr(n)==v}function Qf(n){return"symbol"==typeof n||Zf(n)&&pr(n)==_}var Xf=tt?Ot(tt):function(n){return Zf(n)&&Pf(n.length)&&!!Tn[pr(n)]};var no=Uu(Or),to=Uu((function(n,t){return n<=t}));function eo(n){if(!n)return[];if(Bf(n))return Yf(n)?Pt(n):yu(n);if(Gt&&n[Gt])return function(n){for(var t,e=[];!(t=n.next()).done;)e.push(t.value);return e}(n[Gt]());var t=ri(n);return(t==l?Tt:t==p?Nt:So)(n)}function ro(n){return n?Infinity===(n=fo(n))||-Infinity===n?17976931348623157e292*(n<0?-1:1):n==n?n:0:0===n?n:0}function uo(n){var t=ro(n),e=t%1;return t==t?e?t-e:t:0}function io(n){return n?Je(uo(n),0,4294967295):0}function fo(n){if("number"==typeof n)return n;if(Qf(n))return NaN;if(qf(n)){var t="function"==typeof n.valueOf?n.valueOf():n;n=qf(t)?t+"":t}if("string"!=typeof n)return 0===n?n:+n;n=n.replace(q,"");var e=tn.test(n);return e||rn.test(n)?Mn(n.slice(2),e?2:8):nn.test(n)?NaN:+n}function oo(n){return bu(n,jo(n))}function ao(n){return null==n?"":Qr(n)}var co=mu((function(n,t){if(di(t)||Bf(t))bu(t,xo(t),n);else for(var e in t)kn.call(t,e)&&qe(n,e,t[e])})),lo=mu((function(n,t){bu(t,jo(t),n)})),so=mu((function(n,t,e,r){bu(t,jo(t),n,r)})),ho=mu((function(n,t,e,r){bu(t,xo(t),n,r)})),po=Zu(He);var vo=Dr((function(n,t){n=gn(n);var e=-1,r=t.length,u=r>2?t[2]:undefined;for(u&&ai(t[0],t[1],u)&&(r=1);++e<r;)for(var i=t[e],f=jo(i),o=-1,a=f.length;++o<a;){var c=f[o],l=n[c];(undefined===l||zf(l,jn[c])&&!kn.call(n,c))&&(n[c]=i[c])}return n})),_o=Dr((function(n){return n.push(undefined,Fu),et(Io,undefined,n)}));function go(n,t,e){var r=null==n?undefined:dr(n,t);return undefined===r?e:r}function yo(n,t){return null!=n&&ui(n,t,gr)}var bo=zu((function(n,t,e){null!=t&&"function"!=typeof t.toString&&(t=Sn.call(t)),n[t]=e}),Zo(Go)),wo=zu((function(n,t,e){null!=t&&"function"!=typeof t.toString&&(t=Sn.call(t)),kn.call(n,t)?n[t].push(e):n[t]=[e]}),Yu),mo=Dr(br);function xo(n){return Bf(n)?De(n):Ir(n)}function jo(n){return Bf(n)?De(n,!0):kr(n)}var Ao=mu((function(n,t,e){Sr(n,t,e)})),Io=mu((function(n,t,e,r){Sr(n,t,e,r)})),ko=Zu((function(n,t){var e={};if(null==n)return e;var r=!1;t=lt(t,(function(t){return t=au(t,n),r||(r=t.length>1),t})),bu(n,Vu(n),e),r&&(e=Ye(e,7,Pu));for(var u=t.length;u--;)nu(e,t[u]);return e}));var Oo=Zu((function(n,t){return null==n?{}:function(n,t){return Wr(n,t,(function(t,e){return yo(n,e)}))}(n,t)}));function Ro(n,t){if(null==n)return{};var e=lt(Vu(n),(function(n){return[n]}));return t=Yu(t),Wr(n,e,(function(n,e){return t(n,e[0])}))}var Eo=Du(xo),zo=Du(jo);function So(n){return null==n?[]:Rt(n,xo(n))}var Lo=Iu((function(n,t,e){return t=t.toLowerCase(),n+(e?Co(t):t)}));function Co(n){return Mo(ao(n).toLowerCase())}function Wo(n){return(n=ao(n))&&n.replace(fn,Ct).replace(zn,"")}var Uo=Iu((function(n,t,e){return n+(e?"-":"")+t.toLowerCase()})),Bo=Iu((function(n,t,e){return n+(e?" ":"")+t.toLowerCase()})),To=Au("toLowerCase");var $o=Iu((function(n,t,e){return n+(e?"_":"")+t.toLowerCase()}));var Do=Iu((function(n,t,e){return n+(e?" ":"")+Mo(t)}));var No=Iu((function(n,t,e){return n+(e?" ":"")+t.toUpperCase()})),Mo=Au("toUpperCase");function Fo(n,t,e){return n=ao(n),undefined===(t=e?undefined:t)?function(n){return Wn.test(n)}(n)?function(n){return n.match(Ln)||[]}(n):function(n){return n.match(J)||[]}(n):n.match(t)||[]}var Po=Dr((function(n,t){try{return et(n,undefined,t)}catch(n){return Nf(n)?n:new pn(n)}})),qo=Zu((function(n,t){return ut(t,(function(t){t=ki(t),Ge(n,t,bf(n[t],n))})),n}));function Zo(n){return function(){return n}}var Ko=Ru(),Vo=Ru(!0);function Go(n){return n}function Ho(n){return Ar("function"==typeof n?n:Ye(n,1))}var Jo=Dr((function(n,t){return function(e){return br(e,n,t)}})),Yo=Dr((function(n,t){return function(e){return br(n,e,t)}}));function Qo(n,t,e){var r=xo(t),u=sr(t,r);null!=e||qf(t)&&(u.length||!r.length)||(e=t,t=n,n=this,u=sr(t,xo(t)));var i=!(qf(e)&&"chain"in e&&!e.chain),f=Mf(n);return ut(u,(function(e){var r=t[e];n[e]=r,f&&(n.prototype[e]=function(){var t=this.__chain__;if(i||t){var e=n(this.__wrapped__),u=e.__actions__=yu(this.__actions__);return u.push({func:r,args:arguments,thisArg:n}),e.__chain__=t,e}return r.apply(n,st([this.value()],arguments))})})),n}function Xo(){}var na=Lu(lt),ta=Lu(ft),ea=Lu(pt);function ra(n){return ci(n)?xt(ki(n)):function(n){return function(t){return dr(t,n)}}(n)}var ua=Wu(),ia=Wu(!0);function fa(){return[]}function oa(){return!1}var aa=Su((function(n,t){return n+t}),0),ca=Tu("ceil"),la=Su((function(n,t){return n/t}),1),sa=Tu("floor");var da,ha=Su((function(n,t){return n*t}),1),pa=Tu("round"),va=Su((function(n,t){return n-t}),0);return Ee.after=function(t,e){if("function"!=typeof e)throw new wn(n);return t=uo(t),function(){if(--t<1)return e.apply(this,arguments)}},Ee.ary=gf,Ee.assign=co,Ee.assignIn=lo,Ee.assignInWith=so,Ee.assignWith=ho,Ee.at=po,Ee.before=yf,Ee.bind=bf,Ee.bindAll=qo,Ee.bindKey=wf,Ee.castArray=function(){if(!arguments.length)return[];var n=arguments[0];return Wf(n)?n:[n]},Ee.chain=tf,Ee.chunk=function(n,t,e){t=(e?ai(n,t,e):undefined===t)?1:oe(uo(t),0);var r=null==n?0:n.length;if(!r||t<1)return[];for(var u=0,i=0,f=dn(ne(r/t));u<r;)f[i++]=Kr(n,u,u+=t);return f},Ee.compact=function(n){for(var t=-1,e=null==n?0:n.length,r=0,u=[];++t<e;){var i=n[t];i&&(u[r++]=i)}return u},Ee.concat=function(){var n=arguments.length;if(!n)return[];for(var t=dn(n-1),e=arguments[0],r=n;r--;)t[r-1]=arguments[r];return st(Wf(e)?yu(e):[e],fr(t,1))},Ee.cond=function(t){var e=null==t?0:t.length,r=Yu();return t=e?lt(t,(function(t){if("function"!=typeof t[1])throw new wn(n);return[r(t[0]),t[1]]})):[],Dr((function(n){for(var r=-1;++r<e;){var u=t[r];if(et(u[0],this,n))return et(u[1],this,n)}}))},Ee.conforms=function(n){return function(n){var t=xo(n);return function(e){return Qe(e,n,t)}}(Ye(n,1))},Ee.constant=Zo,Ee.countBy=uf,Ee.create=function(n,t){var e=ze(n);return null==t?e:Ve(e,t)},Ee.curry=function n(t,e,r){var u=Nu(t,8,undefined,undefined,undefined,undefined,undefined,e=r?undefined:e);return u.placeholder=n.placeholder,u},Ee.curryRight=function n(t,e,r){var u=Nu(t,16,undefined,undefined,undefined,undefined,undefined,e=r?undefined:e);return u.placeholder=n.placeholder,u},Ee.debounce=mf,Ee.defaults=vo,Ee.defaultsDeep=_o,Ee.defer=xf,Ee.delay=jf,Ee.difference=Ei,Ee.differenceBy=zi,Ee.differenceWith=Si,Ee.drop=function(n,t,e){var r=null==n?0:n.length;return r?Kr(n,(t=e||undefined===t?1:uo(t))<0?0:t,r):[]},Ee.dropRight=function(n,t,e){var r=null==n?0:n.length;return r?Kr(n,0,(t=r-(t=e||undefined===t?1:uo(t)))<0?0:t):[]},Ee.dropRightWhile=function(n,t){return n&&n.length?eu(n,Yu(t,3),!0,!0):[]},Ee.dropWhile=function(n,t){return n&&n.length?eu(n,Yu(t,3),!0):[]},Ee.fill=function(n,t,e,r){var u=null==n?0:n.length;return u?(e&&"number"!=typeof e&&ai(n,t,e)&&(e=0,r=u),function(n,t,e,r){var u=n.length;for((e=uo(e))<0&&(e=-e>u?0:u+e),(r=void 0===r||r>u?u:uo(r))<0&&(r+=u),r=e>r?0:io(r);e<r;)n[e++]=t;return n}(n,t,e,r)):[]},Ee.filter=function(n,t){return(Wf(n)?ot:ir)(n,Yu(t,3))},Ee.flatMap=function(n,t){return fr(hf(n,t),1)},Ee.flatMapDeep=function(n,t){return fr(hf(n,t),Infinity)},Ee.flatMapDepth=function(n,t,e){return e=undefined===e?1:uo(e),fr(hf(n,t),e)},Ee.flatten=Wi,Ee.flattenDeep=function(n){return(null==n?0:n.length)?fr(n,Infinity):[]},Ee.flattenDepth=function(n,t){return(null==n?0:n.length)?fr(n,t=undefined===t?1:uo(t)):[]},Ee.flip=function(n){return Nu(n,512)},Ee.flow=Ko,Ee.flowRight=Vo,Ee.fromPairs=function(n){for(var t=-1,e=null==n?0:n.length,r={};++t<e;){var u=n[t];r[u[0]]=u[1]}return r},Ee.functions=function(n){return null==n?[]:sr(n,xo(n))},Ee.functionsIn=function(n){return null==n?[]:sr(n,jo(n))},Ee.groupBy=lf,Ee.initial=function(n){return(null==n?0:n.length)?Kr(n,0,-1):[]},Ee.intersection=Bi,Ee.intersectionBy=Ti,Ee.intersectionWith=$i,Ee.invert=bo,Ee.invertBy=wo,Ee.invokeMap=sf,Ee.iteratee=Ho,Ee.keyBy=df,Ee.keys=xo,Ee.keysIn=jo,Ee.map=hf,Ee.mapKeys=function(n,t){var e={};return t=Yu(t,3),cr(n,(function(n,r,u){Ge(e,t(n,r,u),n)})),e},Ee.mapValues=function(n,t){var e={};return t=Yu(t,3),cr(n,(function(n,r,u){Ge(e,r,t(n,r,u))})),e},Ee.matches=function(n){return Er(Ye(n,1))},Ee.matchesProperty=function(n,t){return zr(n,Ye(t,1))},Ee.memoize=Af,Ee.merge=Ao,Ee.mergeWith=Io,Ee.method=Jo,Ee.methodOf=Yo,Ee.mixin=Qo,Ee.negate=If,Ee.nthArg=function(n){return n=uo(n),Dr((function(t){return Lr(t,n)}))},Ee.omit=ko,Ee.omitBy=function(n,t){return Ro(n,If(Yu(t)))},Ee.once=function(n){return yf(2,n)},Ee.orderBy=function(n,t,e,r){return null==n?[]:(Wf(t)||(t=null==t?[]:[t]),Wf(e=r?undefined:e)||(e=null==e?[]:[e]),Cr(n,t,e))},Ee.over=na,Ee.overArgs=kf,Ee.overEvery=ta,Ee.overSome=ea,Ee.partial=Of,Ee.partialRight=Rf,Ee.partition=pf,Ee.pick=Oo,Ee.pickBy=Ro,Ee.property=ra,Ee.propertyOf=function(n){return function(t){return null==n?undefined:dr(n,t)}},Ee.pull=Ni,Ee.pullAll=Mi,Ee.pullAllBy=function(n,t,e){return n&&n.length&&t&&t.length?Ur(n,t,Yu(e,2)):n},Ee.pullAllWith=function(n,t,e){return n&&n.length&&t&&t.length?Ur(n,t,undefined,e):n},Ee.pullAt=Fi,Ee.range=ua,Ee.rangeRight=ia,Ee.rearg=Ef,Ee.reject=function(n,t){return(Wf(n)?ot:ir)(n,If(Yu(t,3)))},Ee.remove=function(n,t){var e=[];if(!n||!n.length)return e;var r=-1,u=[],i=n.length;for(t=Yu(t,3);++r<i;){var f=n[r];t(f,r,n)&&(e.push(f),u.push(r))}return Br(n,u),e},Ee.rest=function(t,e){if("function"!=typeof t)throw new wn(n);return Dr(t,e=undefined===e?e:uo(e))},Ee.reverse=Pi,Ee.sampleSize=function(n,t,e){return t=(e?ai(n,t,e):undefined===t)?1:uo(t),(Wf(n)?Me:Mr)(n,t)},Ee.set=function(n,t,e){return null==n?n:Fr(n,t,e)},Ee.setWith=function(n,t,e,r){return r="function"==typeof r?r:undefined,null==n?n:Fr(n,t,e,r)},Ee.shuffle=function(n){return(Wf(n)?Fe:Zr)(n)},Ee.slice=function(n,t,e){var r=null==n?0:n.length;return r?(e&&"number"!=typeof e&&ai(n,t,e)?(t=0,e=r):(t=null==t?0:uo(t),e=undefined===e?r:uo(e)),Kr(n,t,e)):[]},Ee.sortBy=vf,Ee.sortedUniq=function(n){return n&&n.length?Jr(n):[]},Ee.sortedUniqBy=function(n,t){return n&&n.length?Jr(n,Yu(t,2)):[]},Ee.split=function(n,t,e){return e&&"number"!=typeof e&&ai(n,t,e)&&(t=e=undefined),(e=undefined===e?4294967295:e>>>0)?(n=ao(n))&&("string"==typeof t||null!=t&&!Hf(t))&&!(t=Qr(t))&&Bt(n)?lu(Pt(n),0,e):n.split(t,e):[]},Ee.spread=function(t,e){if("function"!=typeof t)throw new wn(n);return e=null==e?0:oe(uo(e),0),Dr((function(n){var r=n[e],u=lu(n,0,e);return r&&st(u,r),et(t,this,u)}))},Ee.tail=function(n){var t=null==n?0:n.length;return t?Kr(n,1,t):[]},Ee.take=function(n,t,e){return n&&n.length?Kr(n,0,(t=e||undefined===t?1:uo(t))<0?0:t):[]},Ee.takeRight=function(n,t,e){var r=null==n?0:n.length;return r?Kr(n,(t=r-(t=e||undefined===t?1:uo(t)))<0?0:t,r):[]},Ee.takeRightWhile=function(n,t){return n&&n.length?eu(n,Yu(t,3),!1,!0):[]},Ee.takeWhile=function(n,t){return n&&n.length?eu(n,Yu(t,3)):[]},Ee.tap=function(n,t){return t(n),n},Ee.throttle=function(t,e,r){var u=!0,i=!0;if("function"!=typeof t)throw new wn(n);return qf(r)&&(u="leading"in r?!!r.leading:u,i="trailing"in r?!!r.trailing:i),mf(t,e,{leading:u,maxWait:e,trailing:i})},Ee.thru=ef,Ee.toArray=eo,Ee.toPairs=Eo,Ee.toPairsIn=zo,Ee.toPath=function(n){return Wf(n)?lt(n,ki):Qf(n)?[n]:yu(Ii(ao(n)))},Ee.toPlainObject=oo,Ee.transform=function(n,t,e){var r=Wf(n),u=r||$f(n)||Xf(n);if(t=Yu(t,4),null==e){var i=n&&n.constructor;e=u?r?new i:[]:qf(n)&&Mf(i)?ze(Hn(n)):{}}return(u?ut:cr)(n,(function(n,r,u){return t(e,n,r,u)})),e},Ee.unary=function(n){return gf(n,1)},Ee.union=qi,Ee.unionBy=Zi,Ee.unionWith=Ki,Ee.uniq=function(n){return n&&n.length?Xr(n):[]},Ee.uniqBy=function(n,t){return n&&n.length?Xr(n,Yu(t,2)):[]},Ee.uniqWith=function(n,t){return t="function"==typeof t?t:undefined,n&&n.length?Xr(n,undefined,t):[]},Ee.unset=function(n,t){return null==n||nu(n,t)},Ee.unzip=Vi,Ee.unzipWith=Gi,Ee.update=function(n,t,e){return null==n?n:tu(n,t,ou(e))},Ee.updateWith=function(n,t,e,r){return r="function"==typeof r?r:undefined,null==n?n:tu(n,t,ou(e),r)},Ee.values=So,Ee.valuesIn=function(n){return null==n?[]:Rt(n,jo(n))},Ee.without=Hi,Ee.words=Fo,Ee.wrap=function(n,t){return Of(ou(t),n)},Ee.xor=Ji,Ee.xorBy=Yi,Ee.xorWith=Qi,Ee.zip=Xi,Ee.zipObject=function(n,t){return iu(n||[],t||[],qe)},Ee.zipObjectDeep=function(n,t){return iu(n||[],t||[],Fr)},Ee.zipWith=nf,Ee.entries=Eo,Ee.entriesIn=zo,Ee.extend=lo,Ee.extendWith=so,Qo(Ee,Ee),Ee.add=aa,Ee.attempt=Po,Ee.camelCase=Lo,Ee.capitalize=Co,Ee.ceil=ca,Ee.clamp=function(n,t,e){return undefined===e&&(e=t,t=undefined),undefined!==e&&(e=(e=fo(e))==e?e:0),undefined!==t&&(t=(t=fo(t))==t?t:0),Je(fo(n),t,e)},Ee.clone=function(n){return Ye(n,4)},Ee.cloneDeep=function(n){return Ye(n,5)},Ee.cloneDeepWith=function(n,t){return Ye(n,5,t="function"==typeof t?t:undefined)},Ee.cloneWith=function(n,t){return Ye(n,4,t="function"==typeof t?t:undefined)},Ee.conformsTo=function(n,t){return null==t||Qe(n,t,xo(t))},Ee.deburr=Wo,Ee.defaultTo=function(n,t){return null==n||n!=n?t:n},Ee.divide=la,Ee.endsWith=function(n,t,e){n=ao(n),t=Qr(t);var r=n.length,u=e=undefined===e?r:Je(uo(e),0,r);return(e-=t.length)>=0&&n.slice(e,u)==t},Ee.eq=zf,Ee.escape=function(n){return(n=ao(n))&&U.test(n)?n.replace(C,Wt):n},Ee.escapeRegExp=function(n){return(n=ao(n))&&P.test(n)?n.replace(F,"\\$&"):n},Ee.every=function(n,t,e){var r=Wf(n)?ft:rr;return e&&ai(n,t,e)&&(t=undefined),r(n,Yu(t,3))},Ee.find=ff,Ee.findIndex=Li,Ee.findKey=function(n,t){return _t(n,Yu(t,3),cr)},Ee.findLast=of,Ee.findLastIndex=Ci,Ee.findLastKey=function(n,t){return _t(n,Yu(t,3),lr)},Ee.floor=sa,Ee.forEach=af,Ee.forEachRight=cf,Ee.forIn=function(n,t){return null==n?n:or(n,Yu(t,3),jo)},Ee.forInRight=function(n,t){return null==n?n:ar(n,Yu(t,3),jo)},Ee.forOwn=function(n,t){return n&&cr(n,Yu(t,3))},Ee.forOwnRight=function(n,t){return n&&lr(n,Yu(t,3))},Ee.get=go,Ee.gt=Sf,Ee.gte=Lf,Ee.has=function(n,t){return null!=n&&ui(n,t,_r)},Ee.hasIn=yo,Ee.head=Ui,Ee.identity=Go,Ee.includes=function(n,t,e,r){n=Bf(n)?n:So(n),e=e&&!r?uo(e):0;var u=n.length;return e<0&&(e=oe(u+e,0)),Yf(n)?e<=u&&n.indexOf(t,e)>-1:!!u&&yt(n,t,e)>-1},Ee.indexOf=function(n,t,e){var r=null==n?0:n.length;if(!r)return-1;var u=null==e?0:uo(e);return u<0&&(u=oe(r+u,0)),yt(n,t,u)},Ee.inRange=function(n,t,e){return t=ro(t),undefined===e?(e=t,t=0):e=ro(e),function(n,t,e){return n>=ae(t,e)&&n<oe(t,e)}(n=fo(n),t,e)},Ee.invoke=mo,Ee.isArguments=Cf,Ee.isArray=Wf,Ee.isArrayBuffer=Uf,Ee.isArrayLike=Bf,Ee.isArrayLikeObject=Tf,Ee.isBoolean=function(n){return!0===n||!1===n||Zf(n)&&pr(n)==i},Ee.isBuffer=$f,Ee.isDate=Df,Ee.isElement=function(n){return Zf(n)&&1===n.nodeType&&!Gf(n)},Ee.isEmpty=function(n){if(null==n)return!0;if(Bf(n)&&(Wf(n)||"string"==typeof n||"function"==typeof n.splice||$f(n)||Xf(n)||Cf(n)))return!n.length;var t=ri(n);if(t==l||t==p)return!n.size;if(di(n))return!Ir(n).length;for(var e in n)if(kn.call(n,e))return!1;return!0},Ee.isEqual=function(n,t){return mr(n,t)},Ee.isEqualWith=function(n,t,e){var r=(e="function"==typeof e?e:undefined)?e(n,t):undefined;return undefined===r?mr(n,t,undefined,e):!!r},Ee.isError=Nf,Ee.isFinite=function(n){return"number"==typeof n&&ue(n)},Ee.isFunction=Mf,Ee.isInteger=Ff,Ee.isLength=Pf,Ee.isMap=Kf,Ee.isMatch=function(n,t){return n===t||xr(n,t,Xu(t))},Ee.isMatchWith=function(n,t,e){return e="function"==typeof e?e:undefined,xr(n,t,Xu(t),e)},Ee.isNaN=function(n){return Vf(n)&&n!=+n},Ee.isNative=function(n){if(si(n))throw new pn("Unsupported core-js use. Try https://npms.io/search?q=ponyfill.");return jr(n)},Ee.isNil=function(n){return null==n},Ee.isNull=function(n){return null===n},Ee.isNumber=Vf,Ee.isObject=qf,Ee.isObjectLike=Zf,Ee.isPlainObject=Gf,Ee.isRegExp=Hf,Ee.isSafeInteger=function(n){return Ff(n)&&n>=-9007199254740991&&n<=9007199254740991},Ee.isSet=Jf,Ee.isString=Yf,Ee.isSymbol=Qf,Ee.isTypedArray=Xf,Ee.isUndefined=function(n){return undefined===n},Ee.isWeakMap=function(n){return Zf(n)&&ri(n)==g},Ee.isWeakSet=function(n){return Zf(n)&&"[object WeakSet]"==pr(n)},Ee.join=function(n,t){return null==n?"":ie.call(n,t)},Ee.kebabCase=Uo,Ee.last=Di,Ee.lastIndexOf=function(n,t,e){var r=null==n?0:n.length;if(!r)return-1;var u=r;return undefined!==e&&(u=(u=uo(e))<0?oe(r+u,0):ae(u,r-1)),t==t?function(n,t,e){for(var r=e+1;r--;)if(n[r]===t)return r;return r}(n,t,u):gt(n,wt,u,!0)},Ee.lowerCase=Bo,Ee.lowerFirst=To,Ee.lt=no,Ee.lte=to,Ee.max=function(n){return n&&n.length?ur(n,Go,vr):undefined},Ee.maxBy=function(n,t){return n&&n.length?ur(n,Yu(t,2),vr):undefined},Ee.mean=function(n){return mt(n,Go)},Ee.meanBy=function(n,t){return mt(n,Yu(t,2))},Ee.min=function(n){return n&&n.length?ur(n,Go,Or):undefined},Ee.minBy=function(n,t){return n&&n.length?ur(n,Yu(t,2),Or):undefined},Ee.stubArray=fa,Ee.stubFalse=oa,Ee.stubObject=function(){return{}},Ee.stubString=function(){return""},Ee.stubTrue=function(){return!0},Ee.multiply=ha,Ee.nth=function(n,t){return n&&n.length?Lr(n,uo(t)):undefined},Ee.noConflict=function(){return qn._===this&&(qn._=Dn),this},Ee.noop=Xo,Ee.now=_f,Ee.pad=function(n,t,e){n=ao(n);var r=(t=uo(t))?Ft(n):0;if(!t||r>=t)return n;var u=(t-r)/2;return Cu(te(u),e)+n+Cu(ne(u),e)},Ee.padEnd=function(n,t,e){n=ao(n);var r=(t=uo(t))?Ft(n):0;return t&&r<t?n+Cu(t-r,e):n},Ee.padStart=function(n,t,e){n=ao(n);var r=(t=uo(t))?Ft(n):0;return t&&r<t?Cu(t-r,e)+n:n},Ee.parseInt=function(n,t,e){return e||null==t?t=0:t&&(t=+t),le(ao(n).replace(Z,""),t||0)},Ee.random=function(n,t,e){if(e&&"boolean"!=typeof e&&ai(n,t,e)&&(t=e=undefined),undefined===e&&("boolean"==typeof t?(e=t,t=undefined):"boolean"==typeof n&&(e=n,n=undefined)),undefined===n&&undefined===t?(n=0,t=1):(n=ro(n),undefined===t?(t=n,n=0):t=ro(t)),n>t){var r=n;n=t,t=r}if(e||n%1||t%1){var u=se();return ae(n+u*(t-n+Nn("1e-"+((u+"").length-1))),t)}return Tr(n,t)},Ee.reduce=function(n,t,e){var r=Wf(n)?dt:At,u=arguments.length<3;return r(n,Yu(t,4),e,u,tr)},Ee.reduceRight=function(n,t,e){var r=Wf(n)?ht:At,u=arguments.length<3;return r(n,Yu(t,4),e,u,er)},Ee.repeat=function(n,t,e){return t=(e?ai(n,t,e):undefined===t)?1:uo(t),$r(ao(n),t)},Ee.replace=function(){var n=arguments,t=ao(n[0]);return n.length<3?t:t.replace(n[1],n[2])},Ee.result=function(n,t,e){var r=-1,u=(t=au(t,n)).length;for(u||(u=1,n=undefined);++r<u;){var i=null==n?undefined:n[ki(t[r])];undefined===i&&(r=u,i=e),n=Mf(i)?i.call(n):i}return n},Ee.round=pa,Ee.runInContext=cn,Ee.sample=function(n){return(Wf(n)?Ne:Nr)(n)},Ee.size=function(n){if(null==n)return 0;if(Bf(n))return Yf(n)?Ft(n):n.length;var t=ri(n);return t==l||t==p?n.size:Ir(n).length},Ee.snakeCase=$o,Ee.some=function(n,t,e){var r=Wf(n)?pt:Vr;return e&&ai(n,t,e)&&(t=undefined),r(n,Yu(t,3))},Ee.sortedIndex=function(n,t){return Gr(n,t)},Ee.sortedIndexBy=function(n,t,e){return Hr(n,t,Yu(e,2))},Ee.sortedIndexOf=function(n,t){var e=null==n?0:n.length;if(e){var r=Gr(n,t);if(r<e&&zf(n[r],t))return r}return-1},Ee.sortedLastIndex=function(n,t){return Gr(n,t,!0)},Ee.sortedLastIndexBy=function(n,t,e){return Hr(n,t,Yu(e,2),!0)},Ee.sortedLastIndexOf=function(n,t){if(null==n?0:n.length){var e=Gr(n,t,!0)-1;if(zf(n[e],t))return e}return-1},Ee.startCase=Do,Ee.startsWith=function(n,t,e){return n=ao(n),e=null==e?0:Je(uo(e),0,n.length),t=Qr(t),n.slice(e,e+t.length)==t},Ee.subtract=va,Ee.sum=function(n){return n&&n.length?It(n,Go):0},Ee.sumBy=function(n,t){return n&&n.length?It(n,Yu(t,2)):0},Ee.template=function(n,t,e){var r=Ee.templateSettings;e&&ai(n,t,e)&&(t=undefined),n=ao(n),t=so({},t,r,Mu);var u,i,f=so({},t.imports,r.imports,Mu),o=xo(f),a=Rt(f,o),c=0,l=t.interpolate||on,s="__p += '",d=yn((t.escape||on).source+"|"+l.source+"|"+(l===$?Q:on).source+"|"+(t.evaluate||on).source+"|$","g"),h="//# sourceURL="+(kn.call(t,"sourceURL")?(t.sourceURL+"").replace(/[\r\n]/g," "):"lodash.templateSources["+ ++Bn+"]")+"\n";n.replace(d,(function(t,e,r,f,o,a){return r||(r=f),s+=n.slice(c,a).replace(an,Ut),e&&(u=!0,s+="' +\n__e("+e+") +\n'"),o&&(i=!0,s+="';\n"+o+";\n__p += '"),r&&(s+="' +\n((__t = ("+r+")) == null ? '' : __t) +\n'"),c=a+t.length,t})),s+="';\n";var p=kn.call(t,"variable")&&t.variable;p||(s="with (obj) {\n"+s+"\n}\n"),s=(i?s.replace(E,""):s).replace(z,"$1").replace(S,"$1;"),s="function("+(p||"obj")+") {\n"+(p?"":"obj || (obj = {});\n")+"var __t, __p = ''"+(u?", __e = _.escape":"")+(i?", __j = Array.prototype.join;\nfunction print() { __p += __j.call(arguments, '') }\n":";\n")+s+"return __p\n}";var v=Po((function(){return vn(o,h+"return "+s).apply(undefined,a)}));if(v.source=s,Nf(v))throw v;return v},Ee.times=function(n,t){if((n=uo(n))<1||n>9007199254740991)return[];var e=4294967295,r=ae(n,4294967295);n-=4294967295;for(var u=kt(r,t=Yu(t));++e<n;)t(e);return u},Ee.toFinite=ro,Ee.toInteger=uo,Ee.toLength=io,Ee.toLower=function(n){return ao(n).toLowerCase()},Ee.toNumber=fo,Ee.toSafeInteger=function(n){return n?Je(uo(n),-9007199254740991,9007199254740991):0===n?n:0},Ee.toString=ao,Ee.toUpper=function(n){return ao(n).toUpperCase()},Ee.trim=function(n,t,e){if((n=ao(n))&&(e||undefined===t))return n.replace(q,"");if(!n||!(t=Qr(t)))return n;var r=Pt(n),u=Pt(t);return lu(r,zt(r,u),St(r,u)+1).join("")},Ee.trimEnd=function(n,t,e){if((n=ao(n))&&(e||undefined===t))return n.replace(K,"");if(!n||!(t=Qr(t)))return n;var r=Pt(n);return lu(r,0,St(r,Pt(t))+1).join("")},Ee.trimStart=function(n,t,e){if((n=ao(n))&&(e||undefined===t))return n.replace(Z,"");if(!n||!(t=Qr(t)))return n;var r=Pt(n);return lu(r,zt(r,Pt(t))).join("")},Ee.truncate=function(n,t){var e=30,r="...";if(qf(t)){var u="separator"in t?t.separator:u;e="length"in t?uo(t.length):e,r="omission"in t?Qr(t.omission):r}var i=(n=ao(n)).length;if(Bt(n)){var f=Pt(n);i=f.length}if(e>=i)return n;var o=e-Ft(r);if(o<1)return r;var a=f?lu(f,0,o).join(""):n.slice(0,o);if(undefined===u)return a+r;if(f&&(o+=a.length-o),Hf(u)){if(n.slice(o).search(u)){var c,l=a;for(u.global||(u=yn(u.source,ao(X.exec(u))+"g")),u.lastIndex=0;c=u.exec(l);)var s=c.index;a=a.slice(0,undefined===s?o:s)}}else if(n.indexOf(Qr(u),o)!=o){var d=a.lastIndexOf(u);d>-1&&(a=a.slice(0,d))}return a+r},Ee.unescape=function(n){return(n=ao(n))&&W.test(n)?n.replace(L,qt):n},Ee.uniqueId=function(n){var t=++On;return ao(n)+t},Ee.upperCase=No,Ee.upperFirst=Mo,Ee.each=af,Ee.eachRight=cf,Ee.first=Ui,Qo(Ee,(da={},cr(Ee,(function(n,t){kn.call(Ee.prototype,t)||(da[t]=n)})),da),{chain:!1}),Ee.VERSION="4.17.15",ut(["bind","bindKey","curry","curryRight","partial","partialRight"],(function(n){Ee[n].placeholder=Ee})),ut(["drop","take"],(function(n,t){Ce.prototype[n]=function(e){e=undefined===e?1:oe(uo(e),0);var r=this.__filtered__&&!t?new Ce(this):this.clone();return r.__filtered__?r.__takeCount__=ae(e,r.__takeCount__):r.__views__.push({size:ae(e,4294967295),type:n+(r.__dir__<0?"Right":"")}),r},Ce.prototype[n+"Right"]=function(t){return this.reverse()[n](t).reverse()}})),ut(["filter","map","takeWhile"],(function(n,t){var e=t+1,r=1==e||3==e;Ce.prototype[n]=function(n){var t=this.clone();return t.__iteratees__.push({iteratee:Yu(n,3),type:e}),t.__filtered__=t.__filtered__||r,t}})),ut(["head","last"],(function(n,t){var e="take"+(t?"Right":"");Ce.prototype[n]=function(){return this[e](1).value()[0]}})),ut(["initial","tail"],(function(n,t){var e="drop"+(t?"":"Right");Ce.prototype[n]=function(){return this.__filtered__?new Ce(this):this[e](1)}})),Ce.prototype.compact=function(){return this.filter(Go)},Ce.prototype.find=function(n){return this.filter(n).head()},Ce.prototype.findLast=function(n){return this.reverse().find(n)},Ce.prototype.invokeMap=Dr((function(n,t){return"function"==typeof n?new Ce(this):this.map((function(e){return br(e,n,t)}))})),Ce.prototype.reject=function(n){return this.filter(If(Yu(n)))},Ce.prototype.slice=function(n,t){n=uo(n);var e=this;return e.__filtered__&&(n>0||t<0)?new Ce(e):(n<0?e=e.takeRight(-n):n&&(e=e.drop(n)),undefined!==t&&(e=(t=uo(t))<0?e.dropRight(-t):e.take(t-n)),e)},Ce.prototype.takeRightWhile=function(n){return this.reverse().takeWhile(n).reverse()},Ce.prototype.toArray=function(){return this.take(4294967295)},cr(Ce.prototype,(function(n,t){var e=/^(?:filter|find|map|reject)|While$/.test(t),r=/^(?:head|last)$/.test(t),u=Ee[r?"take"+("last"==t?"Right":""):t],i=r||/^find/.test(t);u&&(Ee.prototype[t]=function(){var t=this.__wrapped__,f=r?[1]:arguments,o=t instanceof Ce,a=f[0],c=o||Wf(t),l=function(n){var t=u.apply(Ee,st([n],f));return r&&s?t[0]:t};c&&e&&"function"==typeof a&&1!=a.length&&(o=c=!1);var s=this.__chain__,d=!!this.__actions__.length,h=i&&!s,p=o&&!d;if(!i&&c){t=p?t:new Ce(this);var v=n.apply(t,f);return v.__actions__.push({func:ef,args:[l],thisArg:undefined}),new Le(v,s)}return h&&p?n.apply(this,f):(v=this.thru(l),h?r?v.value()[0]:v.value():v)})})),ut(["pop","push","shift","sort","splice","unshift"],(function(n){var t=mn[n],e=/^(?:push|sort|unshift)$/.test(n)?"tap":"thru",r=/^(?:pop|shift)$/.test(n);Ee.prototype[n]=function(){var n=arguments;if(r&&!this.__chain__){var u=this.value();return t.apply(Wf(u)?u:[],n)}return this[e]((function(e){return t.apply(Wf(e)?e:[],n)}))}})),cr(Ce.prototype,(function(n,t){var e=Ee[t];if(e){var r=e.name+"";kn.call(we,r)||(we[r]=[]),we[r].push({name:t,func:e})}})),we[Eu(undefined,2).name]=[{name:"wrapper",func:undefined}],Ce.prototype.clone=function(){var n=new Ce(this.__wrapped__);return n.__actions__=yu(this.__actions__),n.__dir__=this.__dir__,n.__filtered__=this.__filtered__,n.__iteratees__=yu(this.__iteratees__),n.__takeCount__=this.__takeCount__,n.__views__=yu(this.__views__),n},Ce.prototype.reverse=function(){if(this.__filtered__){var n=new Ce(this);n.__dir__=-1,n.__filtered__=!0}else(n=this.clone()).__dir__*=-1;return n},Ce.prototype.value=function(){var n=this.__wrapped__.value(),t=this.__dir__,e=Wf(n),r=t<0,u=e?n.length:0,i=function(n,t,e){var r=-1,u=e.length;for(;++r<u;){var i=e[r],f=i.size;switch(i.type){case"drop":n+=f;break;case"dropRight":t-=f;break;case"take":t=ae(t,n+f);break;case"takeRight":n=oe(n,t-f)}}return{start:n,end:t}}(0,u,this.__views__),f=i.start,o=i.end,a=o-f,c=r?o:f-1,l=this.__iteratees__,s=l.length,d=0,h=ae(a,this.__takeCount__);if(!e||!r&&u==a&&h==a)return ru(n,this.__actions__);var p=[];n:for(;a--&&d<h;){for(var v=-1,_=n[c+=t];++v<s;){var g=l[v],y=g.iteratee,b=g.type,w=y(_);if(2==b)_=w;else if(!w){if(1==b)continue n;break n}}p[d++]=_}return p},Ee.prototype.at=rf,Ee.prototype.chain=function(){return tf(this)},Ee.prototype.commit=function(){return new Le(this.value(),this.__chain__)},Ee.prototype.next=function(){undefined===this.__values__&&(this.__values__=eo(this.value()));var n=this.__index__>=this.__values__.length;return{done:n,value:n?undefined:this.__values__[this.__index__++]}},Ee.prototype.plant=function(n){for(var t,e=this;e instanceof Se;){var r=Ri(e);r.__index__=0,r.__values__=undefined,t?u.__wrapped__=r:t=r;var u=r;e=e.__wrapped__}return u.__wrapped__=n,t},Ee.prototype.reverse=function(){var n=this.__wrapped__;if(n instanceof Ce){var t=n;return this.__actions__.length&&(t=new Ce(this)),(t=t.reverse()).__actions__.push({func:ef,args:[Pi],thisArg:undefined}),new Le(t,this.__chain__)}return this.thru(Pi)},Ee.prototype.toJSON=Ee.prototype.valueOf=Ee.prototype.value=function(){return ru(this.__wrapped__,this.__actions__)},Ee.prototype.first=Ee.prototype.head,Gt&&(Ee.prototype[Gt]=function(){return this}),Ee}();"function"==typeof define&&"object"==typeof define.amd&&define.amd?(qn._=Zt,define((function(){return Zt}))):Kn?((Kn.exports=Zt)._=Zt,Zn._=Zt):qn._=Zt}).call(this);
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkF0dHJpYnV0ZS5qcyIsIkR1bWJIZXVyaXN0aWMuanMiLCJFZGdlLmpzIiwiR2Fuc25lci5qcyIsIkdhbnNuZXJTYW1lUmFuay5qcyIsIkdyYXBoLmpzIiwiR3JhcGhHZW5lcmF0b3IuanMiLCJHcm91cC5qcyIsIkxQQmVuZGluZXNzLmpzIiwiTFBCZW5kaW5lc3NDb21iaW5lZC5qcyIsIkxQQmVuZGluZXNzQ29tYmluZWRQbHVzR3JvdXBzLmpzIiwiTFBGb3JtdWxhdGlvbi5qcyIsIlN3ZWVwLmpzIiwiVGFibGUuanMiLCJkcmF3R3JhcGguanMiLCJ0ZXN0LmpzIiwibG9kYXNoLmpzIl0sIm5hbWVzIjpbIkF0dHJpYnV0ZSIsIltvYmplY3QgT2JqZWN0XSIsInRhYmxlIiwibmFtZSIsInRoaXMiLCJhdHRyIiwid2VpZ2h0IiwiZGlmZkVkZ2VzIiwicmFuZG9tRWRnZXMiLCJzYW1lRWRnZXMiLCJtdXRhYmxlIiwiaWQiLCJhcmcwIiwiRHVtYkhldXJpc3RpYyIsImciLCJpIiwibWF4RGVwdGgiLCJlZGdlcyIsImVkZ2VJbmRleCIsInNvcnQiLCJhIiwiYiIsImNvbXBhcmVUbyIsImoiLCJsZW5ndGgiLCJlZGdlMSIsImVkZ2UyIiwibGVmdFRhYmxlIiwibGVmdEF0dHJpYnV0ZSIsInN3YXAiLCJyaWdodEF0dHJpYnV0ZSIsInJpZ2h0VGFibGUiLCJ3MSIsIncyIiwidG1wdyIsIkVkZ2UiLCJhdHQxIiwiYXR0MiIsIm90aGVyRWRnZSIsImRlcHRoIiwiY29tcGFyZVNlbGZFZGdlVG8iLCJ1bmRlZmluZWQiLCJjb21wYXJlQXR0cmlidXRlcyIsInQxIiwiYTEiLCJ0MiIsImEyIiwicmV0IiwicmVzIiwiZmFjdG9yIiwiZ3JhcGgiLCJiYXNlUm93RGlzdGFuY2UiLCJ2ZXJ0aWNhbEF0dHJPZmZzZXQiLCJNYXRoIiwicm91bmQiLCJhYnMiLCJHYW5zbmVyIiwibWF4X2l0ZXJhdGlvbnMiLCJlbGFwc2VkVGltZSIsImFycmF5IiwiY2xvbmVHcmFwaCIsInRhYmxlcyIsInRhYmxlMiIsImZpbmQiLCJ0IiwiYXR0cmlidXRlIiwiYXR0cmlidXRlcyIsInN0YXJ0VGltZSIsIkRhdGUiLCJnZXRUaW1lIiwiYmVzdF9jcm9zc2luZ3MiLCJnZXRFZGdlQ3Jvc3NpbmdzIiwiXyIsImNsb25lRGVlcCIsImFycmFuZ2VMZWZ0IiwiYXJyYW5nZVJpZ2h0IiwidHJhbnNwb3NlIiwiY3VyX2Nyb3NzaW5ncyIsImFwcGx5QXJyYW5nZW1lbnQiLCJsYXllclRhYmxlcyIsInRhYmxlSW5kZXgiLCJsYXllckVkZ2VzIiwid2VpZ2h0cyIsImZpbHRlciIsImUiLCJtYXAiLCJwYXJzZUZsb2F0IiwibWVkaWFuIiwidGFibGVXZWlnaHRzIiwiYXR0cmlidXRlV2VpZ2h0cyIsInNldEV4YWN0V2VpZ2h0cyIsImltcHJvdmVkIiwiaW5pdENyb3NzaW5ncyIsImdldEVkZ2VDcm9zc2luZ3NBdERlcHRoIiwidGFibGUxIiwiayIsImF0dHIxIiwiYXR0cjIiLCJHYW5zbmVyU2FtZVJhbmsiLCJpdGVyYXRpb25zIiwiY3VyX2l0ZXJhdGlvbiIsIml0ZXJfbnVtIiwicGl2b3QiLCJsZWZ0IiwicmlnaHQiLCJwdXNoIiwicXVpY2tzb3J0IiwiY29uY2F0IiwiYXNzaWduZWRXZWlnaHQiLCJhdHRyaWJ1dGUyIiwiY29uc29sZSIsImxvZyIsInRtcFdlaWdodHNUYWJsZXMiLCJ0bXBBdHRyaWJ1dGVXZWlnaHRzIiwiaXNTYW1lUmFua0VkZ2UiLCJ2YWwiLCJpc05hTiIsInJlb3JkZXIiLCJ0YWJsIiwiR3JhcGgiLCJvYmoiLCJncm91cHMiLCJuZXdMYXllciIsIk9iamVjdCIsImFzc2lnbiIsImdyb3VwIiwiaW5kZXhPZiIsImdyb3VwSGVhZGVyVGFibGUiLCJhZGRUYWJsZSIsInVwZGF0ZUNvb3JkcyIsImVkZ2UiLCJjb3VudCIsImQiLCJ2ZXJib3NlIiwiY3Jvc3NpbmdzIiwiY3VyckVkZ2UiLCJjcm9zc2VzIiwibWFpbiIsInRfaW5kIiwiYXR0cnMiLCJ1cGRhdGVHcm91cENvb3JkcyIsImdldE51bVN0cmFpZ2h0RWRnZXNBdERlcHRoIiwiYWRqdXN0QXR0ck9mZnNldCIsImVkZ2VzTGVmdCIsImdldEJlbmRpbmVzcyIsInJlZHVjZSIsImVkZ2VzUmlnaHQiLCJnZXRCZW5kUmlnaHQiLCJnZXRCZW5kTGVmdCIsImdldFRhYmxlQmVuZGluZXNzIiwiY3ljbGVJbmRleCIsImdldFVwcGVyQm91bmQiLCJ0YWJsZUNvbCIsInVwcGVyQm91bmQiLCJnZXRMb3dlckJvdW5kIiwibG93ZXJCb3VuZCIsInN3aXBlUmlnaHQiLCJjdXJyQmVuZGluZXNzU3VtIiwiY3VyckJlc3RPZmZzZXQiLCJ0ZW1wQmVuZGluZXNzU3VtIiwic3dpcGVMZWZ0IiwiR3JhcGhHZW5lcmF0b3IiLCJzZWVkIiwidGFibGVEaXN0cmlidXRpb24iLCJhdHRyaWJ1dGVEaXN0cmlidXRpb24iLCJzYW1lRWRnZURpc3RyaWJ1dGlvbiIsInJhbmRvbUVkZ2VEaXN0cmlidXRpb24iLCJzIiwiamQiLCJ2IiwianMiLCJhdHRyaWJ1dGVDb3VudGVyIiwicm5nIiwic2VlZHJhbmRvbSIsInRhYmxlRGlzdCIsImF0dHJEaXN0IiwiZ2VuZXJhdGVUYWJsZSIsImdlbmVyYXRlUHJvamVjdGlvbnMiLCJnZW5lcmF0ZUpvaW5zIiwiZW5zdXJlVW5pcXVlRWRnZXMiLCJpbmRleCIsIm5ld1RhYmxlIiwiVGFibGUiLCJhZGRBdHRyaWJ1dGUiLCJsYXllcjEiLCJsYXllcjFhdHRycyIsInNlbGVjdFRhYmxlIiwicHJvamVjdGVkQXR0cnMiLCJwcm9qZWN0ZWQiLCJwcm9qZWN0ZWRDb3VudCIsInN0cmljdCIsImZsb29yIiwiY291bnRQcm9qZWN0aW9ucyIsImF0dHJJbmRleCIsInNwbGljZSIsIm5ld0F0dHIiLCJhZGRFZGdlIiwibGVmdExheWVyIiwicmlnaHRMYXllciIsImxlZnRMYXllckF0dHJzIiwicmlnaHRMYXllckF0dHJzIiwibGVmdEluZGV4IiwicmlnaHRJbmRleCIsImxheWVyIiwiYXR0cnMxIiwiYXR0cnMyIiwiYXR0cjJpbmRleCIsImxlZnRBdHRycyIsImN1cnJBdHRycyIsImZsYXQiLCJyaWdodEF0dHJzIiwidGEiLCJyYXRpbyIsInRtcEluZGV4Iiwib3RoZXIiLCJnZW5lcmF0ZUludGVyTGF5ZXJKb2lucyIsImdlbmVyYXRlSW5MYXllckpvaW5zIiwiZ2VuZXJhdGVSYW5kb21Kb2lucyIsIkdyb3VwIiwiY29vcmRzIiwieF9jb29yZCIsInlfY29vcmQiLCJ3aWR0aF9jb29yZCIsImhlaWdodF9jb29yZCIsIm1hcmdpbiIsImdyb3VwSGVhZGVyIiwibGVmdE1heERlcHRoIiwibWluIiwiYXBwbHkiLCJ0b3BNYXgiLCJ0b3BUYWJsZSIsInJpZ2h0TWF4IiwibWF4IiwiYm90dG9tTWF4IiwiYm90dG9tVGFibGUiLCJkZXB0aHJhbmdlIiwiY3VyX2QiLCJudW10aGlzRGVwdGgiLCJkZXB0aF9kaXN0YW5jZSIsInRhYmxlX3ZlcnRfc3BhY2UiLCJhdHRyX2hlaWdodCIsInRhYmxlX3dpZHRoIiwiTFBCZW5kaW5lc3MiLCJtaXAiLCJtb2RlbCIsImZpbGxNb2RlbCIsIm9iamVjdGl2ZSIsInByb2IiLCJtb2RlbFRvU3RyaW5nIiwicmVzdWx0IiwiZ2xwX3NldF9wcmludF9mdW5jIiwibHAiLCJnbHBfY3JlYXRlX3Byb2IiLCJnbHBfcmVhZF9scF9mcm9tX3N0cmluZyIsImdscF9zY2FsZV9wcm9iIiwiR0xQX1NGX0FVVE8iLCJzbWNwIiwiU01DUCIsInByZXNvbHZlIiwiR0xQX09OIiwiZ2xwX3NpbXBsZXgiLCJnbHBfaW50b3B0IiwiZ2xwX21pcF9vYmpfdmFsIiwiZ2xwX2dldF9udW1fY29scyIsImdscF9nZXRfY29sX25hbWUiLCJnbHBfbWlwX2NvbF92YWwiLCJnbHBfZ2V0X29ial92YWwiLCJnbHBfZ2V0X2NvbF9wcmltIiwiYXBwbHlfc29sdXRpb24iLCJtaW5pbWl6ZSIsInN1YmplY3RUbyIsImJvdW5kcyIsInN1YnN0cmluZyIsInNvbHV0aW9uIiwiTFBCZW5kaW5lc3NDb21iaW5lZCIsImRlZmluaXRpb25zIiwiY3Jvc3NpbmdfdmFycyIsIm1rYyIsInUxIiwidjEiLCJ1MiIsInYyIiwibWt4QmFzZSIsInByZSIsImxheWVyQXR0cmlidXRlcyIsIm0iLCJ0MyIsInUxdjEiLCJ1MnYyIiwicDEiLCJmaW5hbHN1bSIsInAyIiwicDMiLCJwNCIsInpjb3VudCIsInAiLCJhY2N1bXVsYXRvciIsInRtcHN0ciIsImVsZW0iLCJMUEJlbmRpbmVzc0NvbWJpbmVkUGx1c0dyb3VwcyIsImJ1ZmZlciIsIm1reERpY3QiLCJzaWduIiwib3Bwc2lnbiIsIndhcm4iLCJhZGRTaW1wbGVCZW5kaW5lc3MiLCJzcGxpdCIsIkxQRm9ybXVsYXRpb24iLCJjcm9zc3ZhciIsIlN3ZWVwIiwic3dlZXBSaWdodCIsInN3ZWVwTGVmdCIsImN1ckNyb3NzZXMiLCJuZXdDcm9zc2VzIiwiaGVhZGVyIiwidHlwZSIsImF0dHJNYXBzIiwidmlzaWJpbGl0eSIsIm90aGVyVGFibGUiLCJkcmF3R3JhcGgiLCJzdmciLCJhbGdvcml0aG0iLCJsaW5lIiwiZDMiLCJjdXJ2ZSIsImN1cnZlQmFzaXMiLCJzdHJhaWdodGxpbmUiLCJ2aXNnIiwiYXBwZW5kIiwiQXJyYXkiLCJrZXlzIiwic3R5bGUiLCJ0YWJsZWdyb3VwcyIsInNlbGVjdEFsbCIsImRhdGEiLCJlbnRlciIsImhlYWRlcl9oZWlnaHQiLCJvbiIsInRleHQiLCJhdHRyZ3JvdXBzIiwiZmlyc3QiLCJnZXRfMXN0X2Nvb3JkIiwic2Vjb25kIiwiZ2V0XzJuZF9jb29yZCIsInNlbGVjdCIsIm5vZGUiLCJwYXJlbnROb2RlIiwiZ2V0R3JhcGhUb3RhbEVkZ2VCZW5kaW5lc3MiLCJhcHBseV9pdGVyYXRpb24iLCJ0cmFuc2l0aW9uIiwiZHVyYXRpb24iLCJGVU5DX0VSUk9SX1RFWFQiLCJQTEFDRUhPTERFUiIsIndyYXBGbGFncyIsImFyZ3NUYWciLCJhcnJheVRhZyIsImJvb2xUYWciLCJkYXRlVGFnIiwiZXJyb3JUYWciLCJmdW5jVGFnIiwiZ2VuVGFnIiwibWFwVGFnIiwibnVtYmVyVGFnIiwib2JqZWN0VGFnIiwicmVnZXhwVGFnIiwic2V0VGFnIiwic3RyaW5nVGFnIiwic3ltYm9sVGFnIiwid2Vha01hcFRhZyIsImFycmF5QnVmZmVyVGFnIiwiZGF0YVZpZXdUYWciLCJmbG9hdDMyVGFnIiwiZmxvYXQ2NFRhZyIsImludDhUYWciLCJpbnQxNlRhZyIsImludDMyVGFnIiwidWludDhUYWciLCJ1aW50OENsYW1wZWRUYWciLCJ1aW50MTZUYWciLCJ1aW50MzJUYWciLCJyZUVtcHR5U3RyaW5nTGVhZGluZyIsInJlRW1wdHlTdHJpbmdNaWRkbGUiLCJyZUVtcHR5U3RyaW5nVHJhaWxpbmciLCJyZUVzY2FwZWRIdG1sIiwicmVVbmVzY2FwZWRIdG1sIiwicmVIYXNFc2NhcGVkSHRtbCIsIlJlZ0V4cCIsInNvdXJjZSIsInJlSGFzVW5lc2NhcGVkSHRtbCIsInJlRXNjYXBlIiwicmVFdmFsdWF0ZSIsInJlSW50ZXJwb2xhdGUiLCJyZUlzRGVlcFByb3AiLCJyZUlzUGxhaW5Qcm9wIiwicmVQcm9wTmFtZSIsInJlUmVnRXhwQ2hhciIsInJlSGFzUmVnRXhwQ2hhciIsInJlVHJpbSIsInJlVHJpbVN0YXJ0IiwicmVUcmltRW5kIiwicmVXcmFwQ29tbWVudCIsInJlV3JhcERldGFpbHMiLCJyZVNwbGl0RGV0YWlscyIsInJlQXNjaWlXb3JkIiwicmVFc2NhcGVDaGFyIiwicmVFc1RlbXBsYXRlIiwicmVGbGFncyIsInJlSXNCYWRIZXgiLCJyZUlzQmluYXJ5IiwicmVJc0hvc3RDdG9yIiwicmVJc09jdGFsIiwicmVJc1VpbnQiLCJyZUxhdGluIiwicmVOb01hdGNoIiwicmVVbmVzY2FwZWRTdHJpbmciLCJyc0NvbWJvUmFuZ2UiLCJyc0NvbWJvTWFya3NSYW5nZSIsInJzQnJlYWtSYW5nZSIsInJzTWF0aE9wUmFuZ2UiLCJyc0FzdHJhbCIsInJzQnJlYWsiLCJyc0NvbWJvIiwicnNEaWdpdHMiLCJyc0RpbmdiYXQiLCJyc0xvd2VyIiwicnNNaXNjIiwicnNGaXR6IiwicnNOb25Bc3RyYWwiLCJyc1JlZ2lvbmFsIiwicnNTdXJyUGFpciIsInJzVXBwZXIiLCJyc01pc2NMb3dlciIsInJzTWlzY1VwcGVyIiwicmVPcHRNb2QiLCJyc1NlcSIsImpvaW4iLCJyc0Vtb2ppIiwicnNTeW1ib2wiLCJyZUFwb3MiLCJyZUNvbWJvTWFyayIsInJlVW5pY29kZSIsInJlVW5pY29kZVdvcmQiLCJyZUhhc1VuaWNvZGUiLCJyZUhhc1VuaWNvZGVXb3JkIiwiY29udGV4dFByb3BzIiwidGVtcGxhdGVDb3VudGVyIiwidHlwZWRBcnJheVRhZ3MiLCJjbG9uZWFibGVUYWdzIiwic3RyaW5nRXNjYXBlcyIsIlxcIiwiJyIsIlxuIiwiXHIiLCLigKgiLCLigKkiLCJmcmVlUGFyc2VGbG9hdCIsImZyZWVQYXJzZUludCIsInBhcnNlSW50IiwiZnJlZUdsb2JhbCIsImdsb2JhbCIsImZyZWVTZWxmIiwic2VsZiIsInJvb3QiLCJGdW5jdGlvbiIsImZyZWVFeHBvcnRzIiwiZXhwb3J0cyIsIm5vZGVUeXBlIiwiZnJlZU1vZHVsZSIsIm1vZHVsZSIsIm1vZHVsZUV4cG9ydHMiLCJmcmVlUHJvY2VzcyIsInByb2Nlc3MiLCJub2RlVXRpbCIsInR5cGVzIiwicmVxdWlyZSIsImJpbmRpbmciLCJub2RlSXNBcnJheUJ1ZmZlciIsImlzQXJyYXlCdWZmZXIiLCJub2RlSXNEYXRlIiwiaXNEYXRlIiwibm9kZUlzTWFwIiwiaXNNYXAiLCJub2RlSXNSZWdFeHAiLCJpc1JlZ0V4cCIsIm5vZGVJc1NldCIsImlzU2V0Iiwibm9kZUlzVHlwZWRBcnJheSIsImlzVHlwZWRBcnJheSIsImZ1bmMiLCJ0aGlzQXJnIiwiYXJncyIsImNhbGwiLCJhcnJheUFnZ3JlZ2F0b3IiLCJzZXR0ZXIiLCJpdGVyYXRlZSIsInZhbHVlIiwiYXJyYXlFYWNoIiwiYXJyYXlFYWNoUmlnaHQiLCJhcnJheUV2ZXJ5IiwicHJlZGljYXRlIiwiYXJyYXlGaWx0ZXIiLCJyZXNJbmRleCIsImFycmF5SW5jbHVkZXMiLCJiYXNlSW5kZXhPZiIsImFycmF5SW5jbHVkZXNXaXRoIiwiY29tcGFyYXRvciIsImFycmF5TWFwIiwiYXJyYXlQdXNoIiwidmFsdWVzIiwib2Zmc2V0IiwiYXJyYXlSZWR1Y2UiLCJpbml0QWNjdW0iLCJhcnJheVJlZHVjZVJpZ2h0IiwiYXJyYXlTb21lIiwiYXNjaWlTaXplIiwiYmFzZVByb3BlcnR5IiwiYmFzZUZpbmRLZXkiLCJjb2xsZWN0aW9uIiwiZWFjaEZ1bmMiLCJrZXkiLCJiYXNlRmluZEluZGV4IiwiZnJvbUluZGV4IiwiZnJvbVJpZ2h0Iiwic3RyaWN0SW5kZXhPZiIsImJhc2VJc05hTiIsImJhc2VJbmRleE9mV2l0aCIsImJhc2VNZWFuIiwiYmFzZVN1bSIsIm9iamVjdCIsImJhc2VQcm9wZXJ0eU9mIiwiYmFzZVJlZHVjZSIsImN1cnJlbnQiLCJiYXNlVGltZXMiLCJuIiwiYmFzZVVuYXJ5IiwiYmFzZVZhbHVlcyIsInByb3BzIiwiY2FjaGVIYXMiLCJjYWNoZSIsImhhcyIsImNoYXJzU3RhcnRJbmRleCIsInN0clN5bWJvbHMiLCJjaHJTeW1ib2xzIiwiY2hhcnNFbmRJbmRleCIsImNvdW50SG9sZGVycyIsInBsYWNlaG9sZGVyIiwiZGVidXJyTGV0dGVyIiwiw4AiLCLDgSIsIsOCIiwiw4MiLCLDhCIsIsOFIiwiw6AiLCLDoSIsIsOiIiwiw6MiLCLDpCIsIsOlIiwiw4ciLCLDpyIsIsOQIiwiw7AiLCLDiCIsIsOJIiwiw4oiLCLDiyIsIsOoIiwiw6kiLCLDqiIsIsOrIiwiw4wiLCLDjSIsIsOOIiwiw48iLCLDrCIsIsOtIiwiw64iLCLDryIsIsORIiwiw7EiLCLDkiIsIsOTIiwiw5QiLCLDlSIsIsOWIiwiw5giLCLDsiIsIsOzIiwiw7QiLCLDtSIsIsO2Iiwiw7giLCLDmSIsIsOaIiwiw5siLCLDnCIsIsO5Iiwiw7oiLCLDuyIsIsO8Iiwiw50iLCLDvSIsIsO/Iiwiw4YiLCLDpiIsIsOeIiwiw74iLCLDnyIsIsSAIiwixIIiLCLEhCIsIsSBIiwixIMiLCLEhSIsIsSGIiwixIgiLCLEiiIsIsSMIiwixIciLCLEiSIsIsSLIiwixI0iLCLEjiIsIsSQIiwixI8iLCLEkSIsIsSSIiwixJQiLCLEliIsIsSYIiwixJoiLCLEkyIsIsSVIiwixJciLCLEmSIsIsSbIiwixJwiLCLEniIsIsSgIiwixKIiLCLEnSIsIsSfIiwixKEiLCLEoyIsIsSkIiwixKYiLCLEpSIsIsSnIiwixKgiLCLEqiIsIsSsIiwixK4iLCLEsCIsIsSpIiwixKsiLCLErSIsIsSvIiwixLEiLCLEtCIsIsS1IiwixLYiLCLEtyIsIsS4IiwixLkiLCLEuyIsIsS9IiwixL8iLCLFgSIsIsS6IiwixLwiLCLEviIsIsWAIiwixYIiLCLFgyIsIsWFIiwixYciLCLFiiIsIsWEIiwixYYiLCLFiCIsIsWLIiwixYwiLCLFjiIsIsWQIiwixY0iLCLFjyIsIsWRIiwixZQiLCLFliIsIsWYIiwixZUiLCLFlyIsIsWZIiwixZoiLCLFnCIsIsWeIiwixaAiLCLFmyIsIsWdIiwixZ8iLCLFoSIsIsWiIiwixaQiLCLFpiIsIsWjIiwixaUiLCLFpyIsIsWoIiwixaoiLCLFrCIsIsWuIiwixbAiLCLFsiIsIsWpIiwixasiLCLFrSIsIsWvIiwixbEiLCLFsyIsIsW0IiwixbUiLCLFtiIsIsW3IiwixbgiLCLFuSIsIsW7Iiwixb0iLCLFuiIsIsW8Iiwixb4iLCLEsiIsIsSzIiwixZIiLCLFkyIsIsWJIiwixb8iLCJlc2NhcGVIdG1sQ2hhciIsIiYiLCI8IiwiPiIsIlwiIiwiZXNjYXBlU3RyaW5nQ2hhciIsImNociIsImhhc1VuaWNvZGUiLCJzdHJpbmciLCJ0ZXN0IiwibWFwVG9BcnJheSIsInNpemUiLCJmb3JFYWNoIiwib3ZlckFyZyIsInRyYW5zZm9ybSIsImFyZyIsInJlcGxhY2VIb2xkZXJzIiwic2V0VG9BcnJheSIsInNldCIsInNldFRvUGFpcnMiLCJzdHJpbmdTaXplIiwibGFzdEluZGV4IiwidW5pY29kZVNpemUiLCJzdHJpbmdUb0FycmF5IiwibWF0Y2giLCJ1bmljb2RlVG9BcnJheSIsImFzY2lpVG9BcnJheSIsInVuZXNjYXBlSHRtbENoYXIiLCImYW1wOyIsIiZsdDsiLCImZ3Q7IiwiJnF1b3Q7IiwiJiMzOTsiLCJydW5JbkNvbnRleHQiLCJjb250ZXh0IiwidWlkIiwiZGVmYXVsdHMiLCJwaWNrIiwiRXJyb3IiLCJTdHJpbmciLCJUeXBlRXJyb3IiLCJhcnJheVByb3RvIiwicHJvdG90eXBlIiwiZnVuY1Byb3RvIiwib2JqZWN0UHJvdG8iLCJjb3JlSnNEYXRhIiwiZnVuY1RvU3RyaW5nIiwidG9TdHJpbmciLCJoYXNPd25Qcm9wZXJ0eSIsImlkQ291bnRlciIsIm1hc2tTcmNLZXkiLCJleGVjIiwiSUVfUFJPVE8iLCJuYXRpdmVPYmplY3RUb1N0cmluZyIsIm9iamVjdEN0b3JTdHJpbmciLCJvbGREYXNoIiwicmVJc05hdGl2ZSIsInJlcGxhY2UiLCJCdWZmZXIiLCJTeW1ib2wiLCJVaW50OEFycmF5IiwiYWxsb2NVbnNhZmUiLCJnZXRQcm90b3R5cGUiLCJnZXRQcm90b3R5cGVPZiIsIm9iamVjdENyZWF0ZSIsImNyZWF0ZSIsInByb3BlcnR5SXNFbnVtZXJhYmxlIiwic3ByZWFkYWJsZVN5bWJvbCIsImlzQ29uY2F0U3ByZWFkYWJsZSIsInN5bUl0ZXJhdG9yIiwiaXRlcmF0b3IiLCJzeW1Ub1N0cmluZ1RhZyIsInRvU3RyaW5nVGFnIiwiZGVmaW5lUHJvcGVydHkiLCJnZXROYXRpdmUiLCJjdHhDbGVhclRpbWVvdXQiLCJjbGVhclRpbWVvdXQiLCJjdHhOb3ciLCJub3ciLCJjdHhTZXRUaW1lb3V0Iiwic2V0VGltZW91dCIsIm5hdGl2ZUNlaWwiLCJjZWlsIiwibmF0aXZlRmxvb3IiLCJuYXRpdmVHZXRTeW1ib2xzIiwiZ2V0T3duUHJvcGVydHlTeW1ib2xzIiwibmF0aXZlSXNCdWZmZXIiLCJpc0J1ZmZlciIsIm5hdGl2ZUlzRmluaXRlIiwiaXNGaW5pdGUiLCJuYXRpdmVKb2luIiwibmF0aXZlS2V5cyIsIm5hdGl2ZU1heCIsIm5hdGl2ZU1pbiIsIm5hdGl2ZU5vdyIsIm5hdGl2ZVBhcnNlSW50IiwibmF0aXZlUmFuZG9tIiwicmFuZG9tIiwibmF0aXZlUmV2ZXJzZSIsInJldmVyc2UiLCJEYXRhVmlldyIsIk1hcCIsIlByb21pc2UiLCJTZXQiLCJXZWFrTWFwIiwibmF0aXZlQ3JlYXRlIiwibWV0YU1hcCIsInJlYWxOYW1lcyIsImRhdGFWaWV3Q3RvclN0cmluZyIsInRvU291cmNlIiwibWFwQ3RvclN0cmluZyIsInByb21pc2VDdG9yU3RyaW5nIiwic2V0Q3RvclN0cmluZyIsIndlYWtNYXBDdG9yU3RyaW5nIiwic3ltYm9sUHJvdG8iLCJzeW1ib2xWYWx1ZU9mIiwidmFsdWVPZiIsInN5bWJvbFRvU3RyaW5nIiwibG9kYXNoIiwiaXNPYmplY3RMaWtlIiwiaXNBcnJheSIsIkxhenlXcmFwcGVyIiwiTG9kYXNoV3JhcHBlciIsIndyYXBwZXJDbG9uZSIsImJhc2VDcmVhdGUiLCJwcm90byIsImlzT2JqZWN0IiwiYmFzZUxvZGFzaCIsImNoYWluQWxsIiwiX193cmFwcGVkX18iLCJfX2FjdGlvbnNfXyIsIl9fY2hhaW5fXyIsIl9faW5kZXhfXyIsIl9fdmFsdWVzX18iLCJfX2Rpcl9fIiwiX19maWx0ZXJlZF9fIiwiX19pdGVyYXRlZXNfXyIsIl9fdGFrZUNvdW50X18iLCJfX3ZpZXdzX18iLCJIYXNoIiwiZW50cmllcyIsImNsZWFyIiwiZW50cnkiLCJMaXN0Q2FjaGUiLCJNYXBDYWNoZSIsIlNldENhY2hlIiwiX19kYXRhX18iLCJhZGQiLCJTdGFjayIsImFycmF5TGlrZUtleXMiLCJpbmhlcml0ZWQiLCJpc0FyciIsImlzQXJnIiwiaXNBcmd1bWVudHMiLCJpc0J1ZmYiLCJpc1R5cGUiLCJza2lwSW5kZXhlcyIsImlzSW5kZXgiLCJhcnJheVNhbXBsZSIsImJhc2VSYW5kb20iLCJhcnJheVNhbXBsZVNpemUiLCJzaHVmZmxlU2VsZiIsImNvcHlBcnJheSIsImJhc2VDbGFtcCIsImFycmF5U2h1ZmZsZSIsImFzc2lnbk1lcmdlVmFsdWUiLCJlcSIsImJhc2VBc3NpZ25WYWx1ZSIsImFzc2lnblZhbHVlIiwib2JqVmFsdWUiLCJhc3NvY0luZGV4T2YiLCJiYXNlQWdncmVnYXRvciIsImJhc2VFYWNoIiwiYmFzZUFzc2lnbiIsImNvcHlPYmplY3QiLCJjb25maWd1cmFibGUiLCJlbnVtZXJhYmxlIiwid3JpdGFibGUiLCJiYXNlQXQiLCJwYXRocyIsInNraXAiLCJnZXQiLCJudW1iZXIiLCJsb3dlciIsInVwcGVyIiwiYmFzZUNsb25lIiwiYml0bWFzayIsImN1c3RvbWl6ZXIiLCJzdGFjayIsImlzRGVlcCIsImlzRmxhdCIsImlzRnVsbCIsImNvbnN0cnVjdG9yIiwiaW5wdXQiLCJpbml0Q2xvbmVBcnJheSIsInRhZyIsImdldFRhZyIsImlzRnVuYyIsImNsb25lQnVmZmVyIiwiaW5pdENsb25lT2JqZWN0IiwiZ2V0U3ltYm9sc0luIiwiY29weVN5bWJvbHNJbiIsImtleXNJbiIsImJhc2VBc3NpZ25JbiIsImdldFN5bWJvbHMiLCJjb3B5U3ltYm9scyIsIkN0b3IiLCJjbG9uZUFycmF5QnVmZmVyIiwiZGF0YVZpZXciLCJieXRlT2Zmc2V0IiwiYnl0ZUxlbmd0aCIsImNsb25lRGF0YVZpZXciLCJjbG9uZVR5cGVkQXJyYXkiLCJyZWdleHAiLCJjbG9uZVJlZ0V4cCIsInN5bWJvbCIsImluaXRDbG9uZUJ5VGFnIiwic3RhY2tlZCIsInN1YlZhbHVlIiwiZ2V0QWxsS2V5c0luIiwiZ2V0QWxsS2V5cyIsImJhc2VDb25mb3Jtc1RvIiwiYmFzZURlbGF5Iiwid2FpdCIsImJhc2VEaWZmZXJlbmNlIiwiaW5jbHVkZXMiLCJpc0NvbW1vbiIsInZhbHVlc0xlbmd0aCIsIm91dGVyIiwiY29tcHV0ZWQiLCJ2YWx1ZXNJbmRleCIsInRlbXBsYXRlU2V0dGluZ3MiLCJlc2NhcGUiLCJldmFsdWF0ZSIsImludGVycG9sYXRlIiwidmFyaWFibGUiLCJpbXBvcnRzIiwicG9wIiwiaGFzaCIsImdldE1hcERhdGEiLCJwYWlycyIsIkxBUkdFX0FSUkFZX1NJWkUiLCJjcmVhdGVCYXNlRWFjaCIsImJhc2VGb3JPd24iLCJiYXNlRWFjaFJpZ2h0IiwiYmFzZUZvck93blJpZ2h0IiwiYmFzZUV2ZXJ5IiwiYmFzZUV4dHJlbXVtIiwiaXNTeW1ib2wiLCJiYXNlRmlsdGVyIiwiYmFzZUZsYXR0ZW4iLCJpc1N0cmljdCIsImlzRmxhdHRlbmFibGUiLCJiYXNlRm9yIiwiY3JlYXRlQmFzZUZvciIsImJhc2VGb3JSaWdodCIsImJhc2VGdW5jdGlvbnMiLCJpc0Z1bmN0aW9uIiwiYmFzZUdldCIsInBhdGgiLCJjYXN0UGF0aCIsInRvS2V5IiwiYmFzZUdldEFsbEtleXMiLCJrZXlzRnVuYyIsInN5bWJvbHNGdW5jIiwiYmFzZUdldFRhZyIsImlzT3duIiwidW5tYXNrZWQiLCJnZXRSYXdUYWciLCJvYmplY3RUb1N0cmluZyIsImJhc2VHdCIsImJhc2VIYXMiLCJiYXNlSGFzSW4iLCJiYXNlSW50ZXJzZWN0aW9uIiwiYXJyYXlzIiwib3RoTGVuZ3RoIiwib3RoSW5kZXgiLCJjYWNoZXMiLCJtYXhMZW5ndGgiLCJJbmZpbml0eSIsInNlZW4iLCJiYXNlSW52b2tlIiwicGFyZW50IiwibGFzdCIsImJhc2VJc0FyZ3VtZW50cyIsImJhc2VJc0VxdWFsIiwiZXF1YWxGdW5jIiwib2JqSXNBcnIiLCJvdGhJc0FyciIsIm9ialRhZyIsIm90aFRhZyIsIm9iaklzT2JqIiwib3RoSXNPYmoiLCJpc1NhbWVUYWciLCJlcXVhbEFycmF5cyIsIm1lc3NhZ2UiLCJjb252ZXJ0IiwiaXNQYXJ0aWFsIiwiZXF1YWxCeVRhZyIsIm9iaklzV3JhcHBlZCIsIm90aElzV3JhcHBlZCIsIm9ialVud3JhcHBlZCIsIm90aFVud3JhcHBlZCIsIm9ialByb3BzIiwib2JqTGVuZ3RoIiwic2tpcEN0b3IiLCJvdGhWYWx1ZSIsImNvbXBhcmVkIiwib2JqQ3RvciIsIm90aEN0b3IiLCJlcXVhbE9iamVjdHMiLCJiYXNlSXNFcXVhbERlZXAiLCJiYXNlSXNNYXRjaCIsIm1hdGNoRGF0YSIsIm5vQ3VzdG9taXplciIsInNyY1ZhbHVlIiwiQ09NUEFSRV9QQVJUSUFMX0ZMQUciLCJiYXNlSXNOYXRpdmUiLCJiYXNlSXRlcmF0ZWUiLCJpZGVudGl0eSIsImJhc2VNYXRjaGVzUHJvcGVydHkiLCJiYXNlTWF0Y2hlcyIsInByb3BlcnR5IiwiYmFzZUtleXMiLCJpc1Byb3RvdHlwZSIsImJhc2VLZXlzSW4iLCJuYXRpdmVLZXlzSW4iLCJpc1Byb3RvIiwiYmFzZUx0IiwiYmFzZU1hcCIsImlzQXJyYXlMaWtlIiwiZ2V0TWF0Y2hEYXRhIiwibWF0Y2hlc1N0cmljdENvbXBhcmFibGUiLCJpc0tleSIsImlzU3RyaWN0Q29tcGFyYWJsZSIsImhhc0luIiwiYmFzZU1lcmdlIiwic3JjSW5kZXgiLCJtZXJnZUZ1bmMiLCJzYWZlR2V0IiwibmV3VmFsdWUiLCJpc1R5cGVkIiwiaXNBcnJheUxpa2VPYmplY3QiLCJpc1BsYWluT2JqZWN0IiwidG9QbGFpbk9iamVjdCIsImJhc2VNZXJnZURlZXAiLCJiYXNlTnRoIiwiYmFzZU9yZGVyQnkiLCJpdGVyYXRlZXMiLCJvcmRlcnMiLCJnZXRJdGVyYXRlZSIsImNvbXBhcmVyIiwiYmFzZVNvcnRCeSIsImNyaXRlcmlhIiwib2JqQ3JpdGVyaWEiLCJvdGhDcml0ZXJpYSIsIm9yZGVyc0xlbmd0aCIsImNvbXBhcmVBc2NlbmRpbmciLCJjb21wYXJlTXVsdGlwbGUiLCJiYXNlUGlja0J5IiwiYmFzZVNldCIsImJhc2VQdWxsQWxsIiwiYmFzZVB1bGxBdCIsImluZGV4ZXMiLCJwcmV2aW91cyIsImJhc2VVbnNldCIsImJhc2VSZXBlYXQiLCJiYXNlUmVzdCIsInN0YXJ0Iiwic2V0VG9TdHJpbmciLCJvdmVyUmVzdCIsImJhc2VTYW1wbGUiLCJiYXNlU2FtcGxlU2l6ZSIsIm5lc3RlZCIsImJhc2VTZXREYXRhIiwiYmFzZVNldFRvU3RyaW5nIiwiY29uc3RhbnQiLCJiYXNlU2h1ZmZsZSIsImJhc2VTbGljZSIsImVuZCIsImJhc2VTb21lIiwiYmFzZVNvcnRlZEluZGV4IiwicmV0SGlnaGVzdCIsImxvdyIsImhpZ2giLCJNQVhfQVJSQVlfTEVOR1RIIiwibWlkIiwiYmFzZVNvcnRlZEluZGV4QnkiLCJ2YWxJc05hTiIsInZhbElzTnVsbCIsInZhbElzU3ltYm9sIiwidmFsSXNVbmRlZmluZWQiLCJvdGhJc0RlZmluZWQiLCJvdGhJc051bGwiLCJvdGhJc1JlZmxleGl2ZSIsIm90aElzU3ltYm9sIiwic2V0TG93IiwiYmFzZVNvcnRlZFVuaXEiLCJiYXNlVG9OdW1iZXIiLCJiYXNlVG9TdHJpbmciLCJiYXNlVW5pcSIsImNyZWF0ZVNldCIsInNlZW5JbmRleCIsImJhc2VVcGRhdGUiLCJ1cGRhdGVyIiwiYmFzZVdoaWxlIiwiaXNEcm9wIiwiYmFzZVdyYXBwZXJWYWx1ZSIsImFjdGlvbnMiLCJhY3Rpb24iLCJiYXNlWG9yIiwiYmFzZVppcE9iamVjdCIsImFzc2lnbkZ1bmMiLCJ2YWxzTGVuZ3RoIiwiY2FzdEFycmF5TGlrZU9iamVjdCIsImNhc3RGdW5jdGlvbiIsInN0cmluZ1RvUGF0aCIsImNhc3RSZXN0IiwiY2FzdFNsaWNlIiwic2xpY2UiLCJjb3B5IiwiYXJyYXlCdWZmZXIiLCJ0eXBlZEFycmF5IiwidmFsSXNEZWZpbmVkIiwidmFsSXNSZWZsZXhpdmUiLCJjb21wb3NlQXJncyIsInBhcnRpYWxzIiwiaG9sZGVycyIsImlzQ3VycmllZCIsImFyZ3NJbmRleCIsImFyZ3NMZW5ndGgiLCJob2xkZXJzTGVuZ3RoIiwibGVmdExlbmd0aCIsInJhbmdlTGVuZ3RoIiwiaXNVbmN1cnJpZWQiLCJjb21wb3NlQXJnc1JpZ2h0IiwiaG9sZGVyc0luZGV4IiwicmlnaHRMZW5ndGgiLCJpc05ldyIsImNyZWF0ZUFnZ3JlZ2F0b3IiLCJpbml0aWFsaXplciIsImNyZWF0ZUFzc2lnbmVyIiwiYXNzaWduZXIiLCJzb3VyY2VzIiwiZ3VhcmQiLCJpc0l0ZXJhdGVlQ2FsbCIsIml0ZXJhYmxlIiwiY3JlYXRlQ2FzZUZpcnN0IiwibWV0aG9kTmFtZSIsImNoYXJBdCIsInRyYWlsaW5nIiwiY3JlYXRlQ29tcG91bmRlciIsImNhbGxiYWNrIiwid29yZHMiLCJkZWJ1cnIiLCJjcmVhdGVDdG9yIiwiYXJndW1lbnRzIiwidGhpc0JpbmRpbmciLCJjcmVhdGVGaW5kIiwiZmluZEluZGV4RnVuYyIsImNyZWF0ZUZsb3ciLCJmbGF0UmVzdCIsImZ1bmNzIiwicHJlcmVxIiwidGhydSIsIndyYXBwZXIiLCJnZXRGdW5jTmFtZSIsImZ1bmNOYW1lIiwiZ2V0RGF0YSIsImlzTGF6aWFibGUiLCJwbGFudCIsImNyZWF0ZUh5YnJpZCIsInBhcnRpYWxzUmlnaHQiLCJob2xkZXJzUmlnaHQiLCJhcmdQb3MiLCJhcnkiLCJhcml0eSIsImlzQXJ5IiwiaXNCaW5kIiwiaXNCaW5kS2V5IiwiaXNGbGlwIiwiZ2V0SG9sZGVyIiwiaG9sZGVyc0NvdW50IiwibmV3SG9sZGVycyIsImNyZWF0ZVJlY3VycnkiLCJmbiIsImNyZWF0ZUludmVydGVyIiwidG9JdGVyYXRlZSIsImJhc2VJbnZlcnRlciIsImNyZWF0ZU1hdGhPcGVyYXRpb24iLCJvcGVyYXRvciIsImRlZmF1bHRWYWx1ZSIsImNyZWF0ZU92ZXIiLCJhcnJheUZ1bmMiLCJjcmVhdGVQYWRkaW5nIiwiY2hhcnMiLCJjaGFyc0xlbmd0aCIsImNyZWF0ZVJhbmdlIiwic3RlcCIsInRvRmluaXRlIiwiYmFzZVJhbmdlIiwiY3JlYXRlUmVsYXRpb25hbE9wZXJhdGlvbiIsInRvTnVtYmVyIiwid3JhcEZ1bmMiLCJpc0N1cnJ5IiwibmV3RGF0YSIsInNldERhdGEiLCJzZXRXcmFwVG9TdHJpbmciLCJjcmVhdGVSb3VuZCIsInByZWNpc2lvbiIsInRvSW50ZWdlciIsInBhaXIiLCJub29wIiwiY3JlYXRlVG9QYWlycyIsImJhc2VUb1BhaXJzIiwiY3JlYXRlV3JhcCIsInNyY0JpdG1hc2siLCJuZXdCaXRtYXNrIiwiaXNDb21ibyIsIm1lcmdlRGF0YSIsImNyZWF0ZUN1cnJ5IiwiY3JlYXRlUGFydGlhbCIsImNyZWF0ZUJpbmQiLCJjdXN0b21EZWZhdWx0c0Fzc2lnbkluIiwiY3VzdG9tRGVmYXVsdHNNZXJnZSIsImN1c3RvbU9taXRDbG9uZSIsImFyckxlbmd0aCIsImFyclZhbHVlIiwiZmxhdHRlbiIsIm90aGVyRnVuYyIsImdldFZhbHVlIiwic3R1YkFycmF5IiwiaGFzUGF0aCIsImhhc0Z1bmMiLCJpc0xlbmd0aCIsIkFycmF5QnVmZmVyIiwicmVzb2x2ZSIsImN0b3JTdHJpbmciLCJpc01hc2thYmxlIiwic3R1YkZhbHNlIiwib3RoZXJBcmdzIiwib2xkQXJyYXkiLCJzaG9ydE91dCIsInJlZmVyZW5jZSIsImRldGFpbHMiLCJpbnNlcnRXcmFwRGV0YWlscyIsInVwZGF0ZVdyYXBEZXRhaWxzIiwiZ2V0V3JhcERldGFpbHMiLCJsYXN0Q2FsbGVkIiwic3RhbXAiLCJyZW1haW5pbmciLCJyYW5kIiwibWVtb2l6ZSIsIm1lbW9pemVDYXBwZWQiLCJjaGFyQ29kZUF0IiwicXVvdGUiLCJzdWJTdHJpbmciLCJjbG9uZSIsImRpZmZlcmVuY2UiLCJkaWZmZXJlbmNlQnkiLCJkaWZmZXJlbmNlV2l0aCIsImZpbmRJbmRleCIsImZpbmRMYXN0SW5kZXgiLCJoZWFkIiwiaW50ZXJzZWN0aW9uIiwibWFwcGVkIiwiaW50ZXJzZWN0aW9uQnkiLCJpbnRlcnNlY3Rpb25XaXRoIiwicHVsbCIsInB1bGxBbGwiLCJwdWxsQXQiLCJ1bmlvbiIsInVuaW9uQnkiLCJ1bmlvbldpdGgiLCJ1bnppcCIsInVuemlwV2l0aCIsIndpdGhvdXQiLCJ4b3IiLCJ4b3JCeSIsInhvcldpdGgiLCJ6aXAiLCJ6aXBXaXRoIiwiY2hhaW4iLCJpbnRlcmNlcHRvciIsIndyYXBwZXJBdCIsImNvdW50QnkiLCJmaW5kTGFzdCIsImZvckVhY2hSaWdodCIsImdyb3VwQnkiLCJpbnZva2VNYXAiLCJrZXlCeSIsInBhcnRpdGlvbiIsInNvcnRCeSIsImJlZm9yZSIsImJpbmQiLCJiaW5kS2V5IiwiV1JBUF9CSU5EX0ZMQUciLCJkZWJvdW5jZSIsIm9wdGlvbnMiLCJsYXN0QXJncyIsImxhc3RUaGlzIiwibWF4V2FpdCIsInRpbWVySWQiLCJsYXN0Q2FsbFRpbWUiLCJsYXN0SW52b2tlVGltZSIsImxlYWRpbmciLCJtYXhpbmciLCJpbnZva2VGdW5jIiwidGltZSIsImxlYWRpbmdFZGdlIiwidGltZXJFeHBpcmVkIiwic2hvdWxkSW52b2tlIiwidGltZVNpbmNlTGFzdENhbGwiLCJ0cmFpbGluZ0VkZ2UiLCJ0aW1lV2FpdGluZyIsInJlbWFpbmluZ1dhaXQiLCJkZWJvdW5jZWQiLCJpc0ludm9raW5nIiwiY2FuY2VsIiwiZmx1c2giLCJkZWZlciIsImRlbGF5IiwicmVzb2x2ZXIiLCJtZW1vaXplZCIsIkNhY2hlIiwibmVnYXRlIiwib3ZlckFyZ3MiLCJ0cmFuc2Zvcm1zIiwiZnVuY3NMZW5ndGgiLCJwYXJ0aWFsIiwicGFydGlhbFJpZ2h0IiwicmVhcmciLCJndCIsImd0ZSIsImlzRXJyb3IiLCJpc0ludGVnZXIiLCJpc051bWJlciIsImlzU3RyaW5nIiwibHQiLCJsdGUiLCJ0b0FycmF5IiwibmV4dCIsImRvbmUiLCJpdGVyYXRvclRvQXJyYXkiLCJyZW1haW5kZXIiLCJ0b0xlbmd0aCIsImlzQmluYXJ5IiwiYXNzaWduSW4iLCJhc3NpZ25JbldpdGgiLCJhc3NpZ25XaXRoIiwiYXQiLCJwcm9wc0luZGV4IiwicHJvcHNMZW5ndGgiLCJkZWZhdWx0c0RlZXAiLCJtZXJnZVdpdGgiLCJpbnZlcnQiLCJpbnZlcnRCeSIsImludm9rZSIsIm1lcmdlIiwib21pdCIsIkNMT05FX0RFRVBfRkxBRyIsImJhc2VQaWNrIiwicGlja0J5IiwicHJvcCIsInRvUGFpcnMiLCJ0b1BhaXJzSW4iLCJjYW1lbENhc2UiLCJ3b3JkIiwidG9Mb3dlckNhc2UiLCJjYXBpdGFsaXplIiwidXBwZXJGaXJzdCIsImtlYmFiQ2FzZSIsImxvd2VyQ2FzZSIsImxvd2VyRmlyc3QiLCJzbmFrZUNhc2UiLCJzdGFydENhc2UiLCJ1cHBlckNhc2UiLCJ0b1VwcGVyQ2FzZSIsInBhdHRlcm4iLCJoYXNVbmljb2RlV29yZCIsInVuaWNvZGVXb3JkcyIsImFzY2lpV29yZHMiLCJhdHRlbXB0IiwiYmluZEFsbCIsIm1ldGhvZE5hbWVzIiwiZmxvdyIsImZsb3dSaWdodCIsIm1ldGhvZCIsIm1ldGhvZE9mIiwibWl4aW4iLCJvdmVyIiwib3ZlckV2ZXJ5Iiwib3ZlclNvbWUiLCJiYXNlUHJvcGVydHlEZWVwIiwicmFuZ2UiLCJyYW5nZVJpZ2h0IiwiYXVnZW5kIiwiYWRkZW5kIiwiZGl2aWRlIiwiZGl2aWRlbmQiLCJkaXZpc29yIiwibXVsdGlwbHkiLCJtdWx0aXBsaWVyIiwibXVsdGlwbGljYW5kIiwic3VidHJhY3QiLCJtaW51ZW5kIiwic3VidHJhaGVuZCIsImFmdGVyIiwiY2FzdEFycmF5IiwiY2h1bmsiLCJjb21wYWN0IiwiY29uZCIsImNvbmZvcm1zIiwiYmFzZUNvbmZvcm1zIiwicHJvcGVydGllcyIsImN1cnJ5IiwiY3VycnlSaWdodCIsImRyb3AiLCJkcm9wUmlnaHQiLCJkcm9wUmlnaHRXaGlsZSIsImRyb3BXaGlsZSIsImZpbGwiLCJiYXNlRmlsbCIsImZsYXRNYXAiLCJmbGF0TWFwRGVlcCIsImZsYXRNYXBEZXB0aCIsImZsYXR0ZW5EZWVwIiwiZmxhdHRlbkRlcHRoIiwiZmxpcCIsImZyb21QYWlycyIsImZ1bmN0aW9ucyIsImZ1bmN0aW9uc0luIiwiaW5pdGlhbCIsIm1hcEtleXMiLCJtYXBWYWx1ZXMiLCJtYXRjaGVzIiwibWF0Y2hlc1Byb3BlcnR5IiwibnRoQXJnIiwib21pdEJ5Iiwib25jZSIsIm9yZGVyQnkiLCJwcm9wZXJ0eU9mIiwicHVsbEFsbEJ5IiwicHVsbEFsbFdpdGgiLCJyZWplY3QiLCJyZW1vdmUiLCJyZXN0Iiwic2FtcGxlU2l6ZSIsInNldFdpdGgiLCJzaHVmZmxlIiwic29ydGVkVW5pcSIsInNvcnRlZFVuaXFCeSIsInNlcGFyYXRvciIsImxpbWl0Iiwic3ByZWFkIiwidGFpbCIsInRha2UiLCJ0YWtlUmlnaHQiLCJ0YWtlUmlnaHRXaGlsZSIsInRha2VXaGlsZSIsInRhcCIsInRocm90dGxlIiwidG9QYXRoIiwiaXNBcnJMaWtlIiwidW5hcnkiLCJ1bmlxIiwidW5pcUJ5IiwidW5pcVdpdGgiLCJ1bnNldCIsInVwZGF0ZSIsInVwZGF0ZVdpdGgiLCJ2YWx1ZXNJbiIsIndyYXAiLCJ6aXBPYmplY3QiLCJ6aXBPYmplY3REZWVwIiwiZW50cmllc0luIiwiZXh0ZW5kIiwiZXh0ZW5kV2l0aCIsImNsYW1wIiwiY2xvbmVEZWVwV2l0aCIsImNsb25lV2l0aCIsImNvbmZvcm1zVG8iLCJkZWZhdWx0VG8iLCJlbmRzV2l0aCIsInRhcmdldCIsInBvc2l0aW9uIiwiZXNjYXBlUmVnRXhwIiwiZXZlcnkiLCJmaW5kS2V5IiwiZmluZExhc3RLZXkiLCJmb3JJbiIsImZvckluUmlnaHQiLCJmb3JPd24iLCJmb3JPd25SaWdodCIsImluUmFuZ2UiLCJiYXNlSW5SYW5nZSIsImlzQm9vbGVhbiIsImlzRWxlbWVudCIsImlzRW1wdHkiLCJpc0VxdWFsIiwiaXNFcXVhbFdpdGgiLCJpc01hdGNoIiwiaXNNYXRjaFdpdGgiLCJpc05hdGl2ZSIsImlzTmlsIiwiaXNOdWxsIiwiaXNTYWZlSW50ZWdlciIsImlzVW5kZWZpbmVkIiwiaXNXZWFrTWFwIiwiaXNXZWFrU2V0IiwibGFzdEluZGV4T2YiLCJzdHJpY3RMYXN0SW5kZXhPZiIsIm1heEJ5IiwibWVhbiIsIm1lYW5CeSIsIm1pbkJ5Iiwic3R1Yk9iamVjdCIsInN0dWJTdHJpbmciLCJzdHViVHJ1ZSIsIm50aCIsIm5vQ29uZmxpY3QiLCJwYWQiLCJzdHJMZW5ndGgiLCJwYWRFbmQiLCJwYWRTdGFydCIsInJhZGl4IiwiZmxvYXRpbmciLCJ0ZW1wIiwicmVkdWNlUmlnaHQiLCJyZXBlYXQiLCJzYW1wbGUiLCJzb21lIiwic29ydGVkSW5kZXgiLCJzb3J0ZWRJbmRleEJ5Iiwic29ydGVkSW5kZXhPZiIsInNvcnRlZExhc3RJbmRleCIsInNvcnRlZExhc3RJbmRleEJ5Iiwic29ydGVkTGFzdEluZGV4T2YiLCJzdGFydHNXaXRoIiwic3VtIiwic3VtQnkiLCJ0ZW1wbGF0ZSIsInNldHRpbmdzIiwiaXNFc2NhcGluZyIsImlzRXZhbHVhdGluZyIsImltcG9ydHNLZXlzIiwiaW1wb3J0c1ZhbHVlcyIsInJlRGVsaW1pdGVycyIsInNvdXJjZVVSTCIsImVzY2FwZVZhbHVlIiwiaW50ZXJwb2xhdGVWYWx1ZSIsImVzVGVtcGxhdGVWYWx1ZSIsImV2YWx1YXRlVmFsdWUiLCJ0aW1lcyIsInRvTG93ZXIiLCJ0b1NhZmVJbnRlZ2VyIiwidG9VcHBlciIsInRyaW0iLCJ0cmltRW5kIiwidHJpbVN0YXJ0IiwidHJ1bmNhdGUiLCJvbWlzc2lvbiIsInNlYXJjaCIsIm5ld0VuZCIsInVuZXNjYXBlIiwidW5pcXVlSWQiLCJwcmVmaXgiLCJlYWNoIiwiZWFjaFJpZ2h0IiwiVkVSU0lPTiIsImlzRmlsdGVyIiwidGFrZU5hbWUiLCJkcm9wTmFtZSIsImNoZWNrSXRlcmF0ZWUiLCJpc1Rha2VyIiwibG9kYXNoRnVuYyIsInJldFVud3JhcHBlZCIsImlzTGF6eSIsInVzZUxhenkiLCJpc0h5YnJpZCIsImlzVW53cmFwcGVkIiwib25seUxhenkiLCJjaGFpbk5hbWUiLCJkaXIiLCJpc1JpZ2h0IiwidmlldyIsImdldFZpZXciLCJpdGVyTGVuZ3RoIiwidGFrZUNvdW50IiwiaXRlckluZGV4IiwiY29tbWl0Iiwid3JhcHBlZCIsInRvSlNPTiIsImRlZmluZSIsImFtZCJdLCJtYXBwaW5ncyI6IkFBQUEsTUFBTUEsVUFDRkMsWUFBWUMsRUFBT0MsR0FDZkMsS0FBS0YsTUFBUUEsRUFDYkUsS0FBS0QsS0FBT0EsRUFDWkMsS0FBS0MsS0FBT0YsRUFDWkMsS0FBS0UsT0FBUyxFQUNkRixLQUFLRyxVQUFZLEVBQ2pCSCxLQUFLSSxZQUFjLEVBQ25CSixLQUFLSyxVQUFZLEVBQ2pCTCxLQUFLTSxTQUFVLEVBQ2ZOLEtBQUtPLEdBQUtSLEVBR2RGLFVBQVVXLEdBQ04sT0FBSVIsS0FBS0UsT0FBU00sRUFBS04sUUFBZ0IsRUFDOUJGLEtBQUtFLE9BQVNNLEVBQUtOLE9BQWUsRUFDL0I7QUNoQnBCLE1BQU1PLGNBQ0ZaLFlBQVlhLEdBQ1JWLEtBQUtVLEVBQUlBLEVBR2JiLFVBQ0ksSUFBSyxJQUFJYyxFQUFFLEVBQUdBLEVBQUVYLEtBQUtVLEVBQUVFLFNBQVVE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QyxJQUFRLElBQ3RCQyxJQUFRLElBQU1DLElBQVEsSUFBS0MsSUFBUSxJQUFLQyxJQUFRLElBQUtDLElBQVEsSUFBS0MsSUFBUSxJQUMxRUMsSUFBUSxJQUFNQyxJQUFRLElBQUtDLElBQVEsSUFBS0MsSUFBUSxJQUFLQyxJQUFRLElBQUtDLElBQVEsSUFDMUVDLElBQVEsSUFBTUMsSUFBUSxJQUFLQyxJQUFRLElBQUtDLElBQVEsSUFDaERDLElBQVEsSUFBTUMsSUFBUSxJQUFLQyxJQUFRLElBQUtDLElBQVEsSUFDaERDLElBQVEsSUFBTUMsSUFBUSxJQUFLQyxJQUFRLElBQ25DQyxJQUFRLEtBQU1DLElBQVEsS0FDdEJDLElBQVEsS0FBTUMsSUFBUSxLQUN0QkMsSUFBUSxLQUVSQyxJQUFVLElBQU1DLElBQVUsSUFBS0MsSUFBVSxJQUN6Q0MsSUFBVSxJQUFNQyxJQUFVLElBQUtDLElBQVUsSUFDekNDLElBQVUsSUFBTUMsSUFBVSxJQUFLQyxJQUFVLElBQUtDLElBQVUsSUFDeERDLElBQVUsSUFBTUMsSUFBVSxJQUFLQyxJQUFVLElBQUtDLElBQVUsSUFDeERDLElBQVUsSUFBTUMsSUFBVSxJQUFLQyxJQUFVLElBQUtDLElBQVUsSUFDeERDLElBQVUsSUFBTUMsSUFBVSxJQUFLQyxJQUFVLElBQUtDLElBQVUsSUFBS0MsSUFBVSxJQUN2RUMsSUFBVSxJQUFNQyxJQUFVLElBQUtDLElBQVUsSUFBS0MsSUFBVSxJQUFLQyxJQUFVLElBQ3ZFQyxJQUFVLElBQU1DLElBQVUsSUFBS0MsSUFBVSxJQUFLQyxJQUFVLElBQ3hEQyxJQUFVLElBQU1DLElBQVUsSUFBS0MsSUFBVSxJQUFLQyxJQUFVLElBQ3hEQyxJQUFVLElBQU1DLElBQVUsSUFBS0MsSUFBVSxJQUFLQyxJQUFVLElBQ3hEQyxJQUFVLElBQU1DLElBQVUsSUFBS0MsSUFBVSxJQUFLQyxJQUFVLElBQUtDLElBQVUsSUFDdkVDLElBQVUsSUFBTUMsSUFBVSxJQUFLQyxJQUFVLElBQUtDLElBQVUsSUFBS0MsSUFBVSxJQUN2RUMsSUFBVSxJQUFNQyxJQUFVLElBQzFCQyxJQUFVLElBQU1DLElBQVUsSUFBS0MsSUFBVSxJQUN6Q0MsSUFBVSxJQUFNQyxJQUFVLElBQUtDLElBQVUsSUFBS0MsSUFBVSxJQUFLQyxJQUFVLElBQ3ZFQyxJQUFVLElBQU1DLElBQVUsSUFBS0MsSUFBVSxJQUFLQyxJQUFVLElBQUtDLElBQVUsSUFDdkVDLElBQVUsSUFBTUMsSUFBVSxJQUFLQyxJQUFVLElBQUtDLElBQVUsSUFDeERDLElBQVUsSUFBTUMsSUFBVSxJQUFLQyxJQUFVLElBQUtDLElBQVUsSUFDeERDLElBQVUsSUFBTUMsSUFBVSxJQUFLQyxJQUFVLElBQ3pDQyxJQUFVLElBQU1DLElBQVUsSUFBS0MsSUFBVSxJQUN6Q0MsSUFBVSxJQUFNQyxJQUFVLElBQUtDLElBQVUsSUFDekNDLElBQVUsSUFBTUMsSUFBVSxJQUFLQyxJQUFVLElBQ3pDQyxJQUFVLElBQU1DLElBQVUsSUFBS0MsSUFBVSxJQUFLQyxJQUFVLElBQ3hEQyxJQUFVLElBQU1DLElBQVUsSUFBS0MsSUFBVSxJQUFLQyxJQUFVLElBQ3hEQyxJQUFVLElBQU1DLElBQVUsSUFBS0MsSUFBVSxJQUN6Q0MsSUFBVSxJQUFNQyxJQUFVLElBQUtDLElBQVUsSUFDekNDLElBQVUsSUFBTUMsSUFBVSxJQUFLQyxJQUFVLElBQUtDLElBQVUsSUFBS0MsSUFBVSxJQUFLQyxJQUFVLElBQ3RGQyxJQUFVLElBQU1DLElBQVUsSUFBS0MsSUFBVSxJQUFLQyxJQUFVLElBQUtDLElBQVUsSUFBS0MsSUFBVSxJQUN0RkMsSUFBVSxJQUFNQyxJQUFVLElBQzFCQyxJQUFVLElBQU1DLElBQVUsSUFBS0MsSUFBVSxJQUN6Q0MsSUFBVSxJQUFNQyxJQUFVLElBQUtDLElBQVUsSUFDekNDLElBQVUsSUFBTUMsSUFBVSxJQUFLQyxJQUFVLElBQ3pDQyxJQUFVLEtBQU1DLElBQVUsS0FDMUJDLElBQVUsS0FBTUMsSUFBVSxLQUMxQkMsSUFBVSxLQUFNQyxJQUFVLE1BdXRCeEJDLEdBQWlCaE4sR0FudEJILENBQ2hCaU4sSUFB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RTVCd2xELEVBQVVBLEVBQVF4eEIsV0FDVitCLFlBQVkxdkIsS0FBSyxDQUN2QitYLEtBQVF5c0IsR0FDUnZzQixLQUFRLENBQUMwVixJQUNUM1YsUUF4elJKaGMsWUEwelJTLElBQUlrekIsR0FBY2l3QixFQUFTeGxELEtBQUtnMkIsV0FFekMsT0FBT2gyQixLQUFLNnFDLEtBQUs3VyxLQXUyUG5CbUIsR0FBTzVFLFVBQVVrMUIsT0FBU3R3QixHQUFPNUUsVUFBVTBFLFFBQVVFLEdBQU81RSxVQUFVNVIsTUF0MVB0RSxXQUNFLE9BQU95b0IsR0FBaUJwbkMsS0FBSzgxQixZQUFhOTFCLEtBQUsrMUIsY0F3MVBqRFosR0FBTzVFLFVBQVV2YixNQUFRbWdCLEdBQU81RSxVQUFVeWdCLEtBRXRDOWUsS0FDRmlELEdBQU81RSxVQUFVMkIsSUFoOFBuQixXQUNFLE9BQU9seUIsT0FpOFBGbTFCLEdBTURyRixHQUdhLG1CQUFWNDFCLFFBQTZDLGlCQUFkQSxPQUFPQyxLQUFtQkQsT0FBT0MsS0FLekVqcEMsR0FBS3RZLEVBQUlBLEdBSVRzaEQsUUFBTyxXQUNMLE9BQU90aEQsT0FJRjJZLEtBRU5BLEdBQVdGLFFBQVV6WSxJQUFHQSxFQUFJQSxHQUU3QndZLEdBQVl4WSxFQUFJQSxJQUloQnNZLEdBQUt0WSxFQUFJQSxLQUVYbWEsS0FBS3ZlIiwiZmlsZSI6ImRpc3QuanMiLCJzb3VyY2VzQ29udGVudCI6WyJjbGFzcyBBdHRyaWJ1dGUge1xyXG4gICAgY29uc3RydWN0b3IodGFibGUsIG5hbWUpe1xyXG4gICAgICAgIHRoaXMudGFibGUgPSB0YWJsZTtcclxuICAgICAgICB0aGlzLm5hbWUgPSBuYW1lO1xyXG4gICAgICAgIHRoaXMuYXR0ciA9IG5hbWU7XHJcbiAgICAgICAgdGhpcy53ZWlnaHQgPSAwO1xyXG4gICAgICAgIHRoaXMuZGlmZkVkZ2VzID0gMDtcclxuICAgICAgICB0aGlzLnJhbmRvbUVkZ2VzID0gMDtcclxuICAgICAgICB0aGlzLnNhbWVFZGdlcyA9IDA7XHJcbiAgICAgICAgdGhpcy5tdXRhYmxlID0gdHJ1ZTtcclxuICAgICAgICB0aGlzLmlkID0gbmFtZTtcclxuICAgIH1cclxuXHJcbiAgICBjb21wYXJlVG8oYXJnMCl7XHJcbiAgICAgICAgaWYgKHRoaXMud2VpZ2h0ID4gYXJnMC53ZWlnaHQpIHJldHVybiAtMTtcclxuICAgICAgICBlbHNlIGlmICh0aGlzLndlaWdodCA8IGFyZzAud2VpZ2h0KSByZXR1cm4gMTtcclxuICAgICAgICBlbHNlIHJldHVybiAwO1xyXG4gICAgfVxyXG59IiwiY2xhc3MgRHVtYkhldXJpc3RpYyB7XHJcbiAgICBjb25zdHJ1Y3RvcihnKXtcclxuICAgICAgICB0aGlzLmcgPSBnO1xyXG4gICAgfVxyXG5cclxuICAgIGFycmFuZ2UoKXtcclxuICAgICAgICBmb3IgKGxldCBpPTA7IGk8dGhpcy5nLm1heERlcHRoOyBpKyspe1xyXG4gICAgICAgICAgICBsZXQgZWRnZXMgPSBnLmVkZ2VJbmRleFtpXTtcclxuICAgICAgICAgICAgZWRnZXMgPSBlZGdlcy5zb3J0KChhLCBiKSA9PiBhLmNvbXBhcmVUbyhiKSlcclxuXHJcbiAgICAgICAgICAgIGZvciAobGV0IGo9MDsgajxlZGdlcy5sZW5ndGgtMTsgaisrKXtcclxuICAgICAgICAgICAgICAgIGxldCBlZGdlMSA9IGVkZ2VzW2pdO1xyXG4gICAgICAgICAgICAgICAgbGV0IGVkZ2UyID0gZWRnZXNbaisxXTtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoZWRnZTEubGVmdFRhYmxlID09IGVkZ2UyLmxlZnRUYWJsZSBcclxuICAgICAgICAgICAgICAgICAgICAmJiAoZWRnZTEubGVmdEF0dHJpYnV0ZS5tdXRhYmxlIHx8IGVkZ2UyLmxlZnRBdHRyaWJ1dGUubXV0YWJsZSkpe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnN3YXAoZWRnZTEubGVmdEF0dHJpYnV0ZSwgZWRnZTIubGVmdEF0dHJpYnV0ZSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGVkZ2UxLnJpZ2h0QXR0cmlidXRlLm11dGFibGUgfHwgZWRnZTIucmlnaHRBdHRyaWJ1dGUubXV0YWJsZSl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZWRnZTEucmlnaHRUYWJsZSA9PSBlZGdlMi5yaWdodFRhYmxlKSBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnN3YXAoZWRnZTEucmlnaHRBdHRyaWJ1dGUsIGVkZ2UyLnJpZ2h0QXR0cmlidXRlKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB0aGlzLnN3YXAoZWRnZTEucmlnaHRUYWJsZSwgZWRnZTIucmlnaHRUYWJsZSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBzd2FwKHcxLCB3Mil7XHJcbiAgICAgICAgbGV0IHRtcHcgPSB3MS53ZWlnaHQ7XHJcbiAgICAgICAgdzEud2VpZ2h0ID0gdzIud2VpZ2h0O1xyXG4gICAgICAgIHcyLndlaWdodCA9IHRtcHc7XHJcbiAgICB9XHJcbn0iLCJjbGFzcyBFZGdlIHtcclxuICAgIGNvbnN0cnVjdG9yKGxlZnRUYWJsZSwgYXR0MSwgcmlnaHRUYWJsZSwgYXR0Mil7XHJcbiAgICAgICAgdGhpcy5sZWZ0VGFibGUgPSBsZWZ0VGFibGU7XHJcbiAgICAgICAgdGhpcy5hdHQxID0gYXR0MTtcclxuICAgICAgICB0aGlzLmxlZnRBdHRyaWJ1dGUgPSBhdHQxO1xyXG4gICAgICAgIHRoaXMucmlnaHRUYWJsZSA9IHJpZ2h0VGFibGU7XHJcbiAgICAgICAgdGhpcy5hdHQyID0gYXR0MjtcclxuICAgICAgICB0aGlzLnJpZ2h0QXR0cmlidXRlID0gYXR0MjtcclxuICAgIH1cclxuXHJcbiAgICBjb21wYXJlVG8ob3RoZXJFZGdlKXtcclxuICAgICAgICBpZiAodGhpcy5sZWZ0VGFibGUgPT0gb3RoZXJFZGdlLmxlZnRUYWJsZSl7XHJcbiAgICAgICAgICAgIC8vIGVkZ2VzIGhhdmUgdGhlIHNhbWUgbGVmdCB0YWJsZVxyXG4gICAgICAgICAgICBpZiAodGhpcy5yaWdodFRhYmxlID09IG90aGVyRWRnZS5yaWdodFRhYmxlKXtcclxuICAgICAgICAgICAgICAgIC8vIGFuZCB0aGUgc2FtZSByaWdodCB0YWJsZVxyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMubGVmdEF0dHJpYnV0ZS53ZWlnaHQgPiBvdGhlckVkZ2UubGVmdEF0dHJpYnV0ZS53ZWlnaHQgJiYgdGhpcy5yaWdodEF0dHJpYnV0ZS53ZWlnaHQgPCBvdGhlckVkZ2UucmlnaHRBdHRyaWJ1dGUud2VpZ2h0KVxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgICAgICAgICAgZWxzZSBpZiAodGhpcy5sZWZ0QXR0cmlidXRlLndlaWdodCA8IG90aGVyRWRnZS5sZWZ0QXR0cmlidXRlLndlaWdodCAmJiB0aGlzLnJpZ2h0QXR0cmlidXRlLndlaWdodCA+IG90aGVyRWRnZS5yaWdodEF0dHJpYnV0ZS53ZWlnaHQpXHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy5yaWdodFRhYmxlLndlaWdodCA8IG90aGVyRWRnZS5yaWdodFRhYmxlLndlaWdodCAmJiB0aGlzLmxlZnRBdHRyaWJ1dGUud2VpZ2h0ID4gb3RoZXJFZGdlLmxlZnRBdHRyaWJ1dGUud2VpZ2h0KVxyXG4gICAgICAgICAgICAgICAgLy8gcmlnaHQgdGFibGUgaXMgdW5kZXIgYnV0IGxlZnQgYXR0cmlidXRlIGlzIG92ZXJcclxuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgICAgICBlbHNlIGlmICh0aGlzLnJpZ2h0VGFibGUud2VpZ2h0ID4gb3RoZXJFZGdlLnJpZ2h0VGFibGUud2VpZ2h0ICYmIHRoaXMubGVmdEF0dHJpYnV0ZS53ZWlnaHQgPCBvdGhlckVkZ2UubGVmdEF0dHJpYnV0ZS53ZWlnaHQpXHJcbiAgICAgICAgICAgICAgICAvLyByaWdodCB0YWJsZSBpcyBvdmVyIGJ1dCBsZWZ0IGF0dHJpYnV0ZSBpcyB1bmRlclxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLnJpZ2h0VGFibGUgPT0gb3RoZXJFZGdlLnJpZ2h0VGFibGUpe1xyXG4gICAgICAgICAgICAvLyBlZGdlcyBoYXZlIHRoZSBzYW1lIHJpZ2h0IHRhYmxlXHJcbiAgICAgICAgICAgIGlmICh0aGlzLmxlZnRUYWJsZSA9PSBvdGhlckVkZ2UubGVmdFRhYmxlKXtcclxuICAgICAgICAgICAgICAgIC8vIGFuZCB0aGUgc2FtZSBsZWZ0IHRhYmxlXHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5sZWZ0QXR0cmlidXRlLndlaWdodCA+IG90aGVyRWRnZS5sZWZ0QXR0cmlidXRlLndlaWdodCAmJiB0aGlzLnJpZ2h0QXR0cmlidXRlLndlaWdodCA8IG90aGVyRWRnZS5yaWdodEF0dHJpYnV0ZS53ZWlnaHQpXHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgICAgICAgICBlbHNlIGlmICh0aGlzLmxlZnRBdHRyaWJ1dGUud2VpZ2h0IDwgb3RoZXJFZGdlLmxlZnRBdHRyaWJ1dGUud2VpZ2h0ICYmIHRoaXMucmlnaHRBdHRyaWJ1dGUud2VpZ2h0ID4gb3RoZXJFZGdlLnJpZ2h0QXR0cmlidXRlLndlaWdodClcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICAgICAgfSBlbHNlIGlmICh0aGlzLmxlZnRUYWJsZS53ZWlnaHQgPCBvdGhlckVkZ2UubGVmdFRhYmxlLndlaWdodCAmJiB0aGlzLnJpZ2h0QXR0cmlidXRlLndlaWdodCA+IG90aGVyRWRnZS5yaWdodEF0dHJpYnV0ZS53ZWlnaHQpXHJcbiAgICAgICAgICAgICAgICAvLyBsZWZ0IHRhYmxlIGlzIHVuZGVyIGJ1dCByaWdodCBhdHRyaWJ1dGUgaXMgb3ZlclxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKHRoaXMubGVmdFRhYmxlLndlaWdodCA+IG90aGVyRWRnZS5sZWZ0VGFibGUud2VpZ2h0ICYmIHRoaXMucmlnaHRBdHRyaWJ1dGUud2VpZ2h0IDwgb3RoZXJFZGdlLnJpZ2h0QXR0cmlidXRlLndlaWdodClcclxuICAgICAgICAgICAgICAgIC8vIGxlZnQgdGFibGUgaXMgb3ZlciBidXQgcmlnaHQgYXR0cmlidXRlIGlzIHVuZGVyXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAvLyBlZGdlcyBoYXZlIGRpZmZlcmVudCB0YWJsZXMgYm90aCBvbiB0aGUgbGVmdCBhbmQgb24gdGhlIHJpZ2h0XHJcbiAgICAgICAgICAgIGlmICh0aGlzLmxlZnRUYWJsZS53ZWlnaHQgPCBvdGhlckVkZ2UubGVmdFRhYmxlLndlaWdodCAmJiB0aGlzLnJpZ2h0VGFibGUud2VpZ2h0ID4gb3RoZXJFZGdlLnJpZ2h0VGFibGUud2VpZ2h0KVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWVcclxuICAgICAgICAgICAgZWxzZSBpZiAodGhpcy5sZWZ0VGFibGUud2VpZ2h0ID4gb3RoZXJFZGdlLmxlZnRUYWJsZS53ZWlnaHQgJiYgdGhpcy5yaWdodFRhYmxlLndlaWdodCA8IG90aGVyRWRnZS5yaWdodFRhYmxlLndlaWdodCl7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcblxyXG4gICAgY29tcGFyZVNlbGZFZGdlVG8ob3RoZXJFZGdlKXtcclxuICAgICAgICBpZiAodGhpcy5sZWZ0VGFibGUuZGVwdGggPT0gdGhpcy5yaWdodFRhYmxlLmRlcHRoICYmIG90aGVyRWRnZS5sZWZ0VGFibGUuZGVwdGggPT0gb3RoZXJFZGdlLnJpZ2h0VGFibGUuZGVwdGgpe1xyXG4gICAgICAgICAgICAvLyB0aGV5IGFyZSBib3RoIHNlbGYgZWRnZXNcclxuICAgICAgICAgICAgaWYgKHRoaXMubGVmdFRhYmxlID09IG90aGVyRWRnZS5sZWZ0VGFibGUpe1xyXG4gICAgICAgICAgICAgICAgLy8gdGhleSBoYXZlIHRoZSBzYW1lIGxlZnQgdGFibGVcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLnJpZ2h0VGFibGUgPT0gb3RoZXJFZGdlLnJpZ2h0VGFibGUpe1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIGFuZCB0aGUgc2FtZSByaWdodCB0YWJsZVxyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmxlZnRBdHRyaWJ1dGUud2VpZ2h0IDwgb3RoZXJFZGdlLmxlZnRBdHRyaWJ1dGUud2VpZ2h0ICYmIHRoaXMucmlnaHRBdHRyaWJ1dGUud2VpZ2h0IDwgb3RoZXJFZGdlLnJpZ2h0QXR0cmlidXRlLndlaWdodClcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWVcclxuICAgICAgICAgICAgICAgICAgICBlbHNlIGlmICh0aGlzLmxlZnRBdHRyaWJ1dGUud2VpZ2h0ID4gb3RoZXJFZGdlLmxlZnRBdHRyaWJ1dGUud2VpZ2h0ICYmIHRoaXMucmlnaHRBdHRyaWJ1dGUud2VpZ2h0ID4gb3RoZXJFZGdlLnJpZ2h0QXR0cmlidXRlLndlaWdodClcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWVcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMubGVmdEF0dHJpYnV0ZS53ZWlnaHQgPCBvdGhlckVkZ2UubGVmdEF0dHJpYnV0ZS53ZWlnaHQgJiYgdGhpcy5yaWdodFRhYmxlLndlaWdodCA8IG90aGVyRWRnZS5yaWdodFRhYmxlLndlaWdodClcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWVcclxuICAgICAgICAgICAgICAgICAgICBlbHNlIGlmICh0aGlzLmxlZnRBdHRyaWJ1dGUud2VpZ2h0ID4gb3RoZXJFZGdlLmxlZnRBdHRyaWJ1dGUud2VpZ2h0ICYmIHRoaXMucmlnaHRUYWJsZS53ZWlnaHQgPiBvdGhlckVkZ2UucmlnaHRUYWJsZS53ZWlnaHQpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy5sZWZ0VGFibGUgPT0gb3RoZXJFZGdlLnJpZ2h0VGFibGUpe1xyXG4gICAgICAgICAgICAgICAgLy8gdGhlIGxlZnQgdGFibGUgb2YgdGhlIGZpcnN0IGlzIHRoZSByaWdodCB0YWJsZSBvZiB0aGUgb3RoZXJcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLnJpZ2h0VGFibGUgPT0gb3RoZXJFZGdlLmxlZnRUYWJsZSl7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gdGhlIGxlZnQgdGFibGUgaXMgdGhlIHNhbWUgYXMgdGhlIHJpZ2h0IHRhYmxlXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMucmlnaHRBdHRyaWJ1dGUud2VpZ2h0IDwgb3RoZXJFZGdlLmxlZnRBdHRyaWJ1dGUud2VpZ2h0ICYmIHRoaXMubGVmdEF0dHJpYnV0ZS53ZWlnaHQgPCBvdGhlckVkZ2UucmlnaHRBdHRyaWJ1dGUud2VpZ2h0KVxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICBlbHNlIGlmICh0aGlzLnJpZ2h0QXR0cmlidXRlLndlaWdodCA+IG90aGVyRWRnZS5sZWZ0QXR0cmlidXRlLndlaWdodCAmJiB0aGlzLmxlZnRBdHRyaWJ1dGUud2VpZ2h0ID4gb3RoZXJFZGdlLnJpZ2h0QXR0cmlidXRlLndlaWdodClcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmxlZnRBdHRyaWJ1dGUud2VpZ2h0IDwgb3RoZXJFZGdlLnJpZ2h0QXR0cmlidXRlLndlaWdodCAmJiB0aGlzLnJpZ2h0VGFibGUud2VpZ2h0IDwgb3RoZXJFZGdlLmxlZnRUYWJsZS53ZWlnaHQpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKHRoaXMubGVmdEF0dHJpYnV0ZS53ZWlnaHQgPiBvdGhlckVkZ2UucmlnaHRBdHRyaWJ1dGUud2VpZ2h0ICYmIHRoaXMucmlnaHRUYWJsZS53ZWlnaHQgPiBvdGhlckVkZ2UubGVmdFRhYmxlLndlaWdodClcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy5yaWdodFRhYmxlID09IG90aGVyRWRnZS5sZWZ0VGFibGUpe1xyXG4gICAgICAgICAgICAgICAgLy8gdGhlIHJpZ2h0IHRhYmxlIG9mIHRoZSBmaXJzdCBpcyB0aGUgbGVmdCB0YWJsZSBvZiB0aGUgc2Vjb25kXHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5sZWZ0VGFibGUgPT0gb3RoZXJFZGdlLnJpZ2h0VGFibGUpe1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLnJpZ2h0QXR0cmlidXRlLndlaWdodCA8IG90aGVyRWRnZS5sZWZ0QXR0cmlidXRlLndlaWdodCAmJiB0aGlzLmxlZnRBdHRyaWJ1dGUud2VpZ2h0IDwgb3RoZXJFZGdlLnJpZ2h0QXR0cmlidXRlLndlaWdodClcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAodGhpcy5yaWdodEF0dHJpYnV0ZS53ZWlnaHQgPiBvdGhlckVkZ2UubGVmdEF0dHJpYnV0ZS53ZWlnaHQgJiYgdGhpcy5sZWZ0QXR0cmlidXRlLndlaWdodCA+IG90aGVyRWRnZS5yaWdodEF0dHJpYnV0ZS53ZWlnaHQpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5yaWdodEF0dHJpYnV0ZS53ZWlnaHQgPCBvdGhlckVkZ2UubGVmdEF0dHJpYnV0ZS53ZWlnaHQgJiYgdGhpcy5sZWZ0VGFibGUud2VpZ2h0IDwgb3RoZXJFZGdlLnJpZ2h0VGFibGUud2VpZ2h0KVxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICBlbHNlIGlmICh0aGlzLnJpZ2h0QXR0cmlidXRlLndlaWdodCA+IG90aGVyRWRnZS5sZWZ0QXR0cmlidXRlLndlaWdodCAmJiB0aGlzLmxlZnRUYWJsZS53ZWlnaHQgPiBvdGhlckVkZ2UucmlnaHRUYWJsZS53ZWlnaHQpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMucmlnaHRUYWJsZSA9PSBvdGhlckVkZ2UucmlnaHRUYWJsZSl7XHJcbiAgICAgICAgICAgICAgICAvLyB0aGV5IGhhdmUgdGhlIHNhbWUgcmlnaHQgdGFibGVcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLmxlZnRUYWJsZSA9PSBvdGhlckVkZ2UubGVmdFRhYmxlKXtcclxuICAgICAgICAgICAgICAgICAgICAvLyBhbmQgdGhlIHNhbWUgcmlnaHQgdGFibGVcclxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5sZWZ0QXR0cmlidXRlLndlaWdodCA8IG90aGVyRWRnZS5sZWZ0QXR0cmlidXRlLndlaWdodCAmJiB0aGlzLnJpZ2h0QXR0cmlidXRlLndlaWdodCA8IG90aGVyRWRnZS5yaWdodEF0dHJpYnV0ZS53ZWlnaHQpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlXHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAodGhpcy5sZWZ0QXR0cmlidXRlLndlaWdodCA+IG90aGVyRWRnZS5sZWZ0QXR0cmlidXRlLndlaWdodCAmJiB0aGlzLnJpZ2h0QXR0cmlidXRlLndlaWdodCA+IG90aGVyRWRnZS5yaWdodEF0dHJpYnV0ZS53ZWlnaHQpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlXHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLnJpZ2h0QXR0cmlidXRlLndlaWdodCA8IG90aGVyRWRnZS5yaWdodEF0dHJpYnV0ZS53ZWlnaHQgJiYgdGhpcy5sZWZ0VGFibGUud2VpZ2h0IDwgb3RoZXJFZGdlLmxlZnRUYWJsZS53ZWlnaHQpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlXHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAodGhpcy5yaWdodEF0dHJpYnV0ZS53ZWlnaHQgPiBvdGhlckVkZ2UucmlnaHRBdHRyaWJ1dGUud2VpZ2h0ICYmIHRoaXMubGVmdFRhYmxlLndlaWdodCA+IG90aGVyRWRnZS5sZWZ0VGFibGUud2VpZ2h0KVxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgLy8gb25lIGlzIGEgc2VsZiBlZGdlIGJ1dCB0aGUgb3RoZXIgaXMgbm90XHJcbiAgICAgICAgICAgIGlmICh0aGlzLmxlZnRUYWJsZS5kZXB0aCA9PSB0aGlzLnJpZ2h0VGFibGUuZGVwdGgpe1xyXG4gICAgICAgICAgICAgICAgLy8gdGhlIGZpcnN0IGlzIGEgc2VsZiBlZGdlXHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5sZWZ0VGFibGUgPT0gb3RoZXJFZGdlLmxlZnRUYWJsZSl7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gdGhlIGZpcnN0J3MgbGVmdCB0YWJsZSBpcyB0aGUgc2FtZSBhcyB0aGUgb3RoZXJcclxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5sZWZ0QXR0cmlidXRlLndlaWdodCA8IG90aGVyRWRnZS5sZWZ0QXR0cmlidXRlLndlaWdodCAmJiB0aGlzLnJpZ2h0VGFibGUud2VpZ2h0ID4gb3RoZXJFZGdlLmxlZnRUYWJsZS53ZWlnaHQpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlXHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAodGhpcy5sZWZ0QXR0cmlidXRlLndlaWdodCA+IG90aGVyRWRnZS5sZWZ0QXR0cmlidXRlLndlaWdodCAmJiB0aGlzLnJpZ2h0VGFibGUud2VpZ2h0IDwgb3RoZXJFZGdlLmxlZnRUYWJsZS53ZWlnaHQpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlXHJcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMucmlnaHRUYWJsZSA9PSBvdGhlckVkZ2UucmlnaHRUYWJsZSl7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gdGhlIGZpcnN0J3MgcmlnaHQgdGFibGUgaXMgdGhlIHNhbWUgYXMgdGhlIG90aGVyXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMucmlnaHRBdHRyaWJ1dGUud2VpZ2h0IDwgb3RoZXJFZGdlLmxlZnRBdHRyaWJ1dGUud2VpZ2h0ICYmIHRoaXMubGVmdFRhYmxlLndlaWdodCA+IG90aGVyRWRnZS5sZWZ0VGFibGUud2VpZ2h0KVxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKHRoaXMucmlnaHRBdHRyaWJ1dGUud2VpZ2h0ID4gb3RoZXJFZGdlLmxlZnRBdHRyaWJ1dGUud2VpZ2h0ICYmIHRoaXMubGVmdFRhYmxlLndlaWdodCA8IG90aGVyRWRnZS5sZWZ0VGFibGUud2VpZ2h0KVxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZVxyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAvLyB0aGV5IGRvbid0IHNoYXJlIGFueSB0YWJsZVxyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmxlZnRUYWJsZS53ZWlnaHQgPiBvdGhlckVkZ2UubGVmdFRhYmxlLndlaWdodCAmJiB0aGlzLnJpZ2h0VGFibGUud2VpZ2h0IDwgb3RoZXJFZGdlLmxlZnRUYWJsZS53ZWlnaHQpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKHRoaXMubGVmdFRhYmxlLndlaWdodCA8IG90aGVyRWRnZS5sZWZ0VGFibGUud2VpZ2h0ICYmIHRoaXMucmlnaHRUYWJsZS53ZWlnaHQgPiBvdGhlckVkZ2UubGVmdFRhYmxlLndlaWdodClcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAvLyB0aGUgc2Vjb25kIGlzIGEgc2VsZiBlZGdlXHJcbiAgICAgICAgICAgICAgICBpZiAob3RoZXJFZGdlLmxlZnRUYWJsZSA9PSB0aGlzLmxlZnRUYWJsZSl7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gdGhlIG90aGVyJ3MgbGVmdCB0YWJsZSBpcyB0aGUgc2FtZSBhcyB0aGUgZmlyc3Qnc1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChvdGhlckVkZ2UubGVmdEF0dHJpYnV0ZS53ZWlnaHQgPCB0aGlzLmxlZnRBdHRyaWJ1dGUud2VpZ2h0ICYmIG90aGVyRWRnZS5yaWdodFRhYmxlLndlaWdodCA+IHRoaXMubGVmdFRhYmxlLndlaWdodClcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWVcclxuICAgICAgICAgICAgICAgICAgICBlbHNlIGlmIChvdGhlckVkZ2UubGVmdEF0dHJpYnV0ZS53ZWlnaHQgPiB0aGlzLmxlZnRBdHRyaWJ1dGUud2VpZ2h0ICYmIG90aGVyRWRnZS5yaWdodFRhYmxlLndlaWdodCA8IHRoaXMubGVmdFRhYmxlLndlaWdodClcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWVcclxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAob3RoZXJFZGdlLnJpZ2h0VGFibGUgPT0gdGhpcy5sZWZ0VGFibGUpe1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIHRoZSBvdGhlcidzIHJpZ2h0IHRhYmxlIGlzIHRoZSBzYW1lIGFzIHRoZSBmaXJzdCdzIHJpZ2h0XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG90aGVyRWRnZS5yaWdodEF0dHJpYnV0ZS53ZWlnaHQgPCB0aGlzLmxlZnRBdHRyaWJ1dGUud2VpZ2h0ICYmIG90aGVyRWRnZS5sZWZ0VGFibGUud2VpZ2h0ID4gdGhpcy5sZWZ0VGFibGUud2VpZ2h0KVxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKG90aGVyRWRnZS5yaWdodEF0dHJpYnV0ZS53ZWlnaHQgPiB0aGlzLmxlZnRBdHRyaWJ1dGUud2VpZ2h0ICYmIG90aGVyRWRnZS5sZWZ0VGFibGUud2VpZ2h0IDwgdGhpcy5sZWZ0VGFibGUud2VpZ2h0KVxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZVxyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAvLyB0aGV5IGRvbid0IHNoYXJlIGFueSB0YWJsZVxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChvdGhlckVkZ2UubGVmdFRhYmxlLndlaWdodCA8IHRoaXMubGVmdEF0dHJpYnV0ZS53ZWlnaHQgJiYgb3RoZXJFZGdlLnJpZ2h0VGFibGUud2VpZ2h0ID4gdGhpcy5sZWZ0QXR0cmlidXRlLndlaWdodClcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAob3RoZXJFZGdlLmxlZnRUYWJsZS53ZWlnaHQgPiB0aGlzLmxlZnRBdHRyaWJ1dGUud2VpZ2h0ICYmIG90aGVyRWRnZS5yaWdodFRhYmxlLndlaWdodCA8IHRoaXMubGVmdEF0dHJpYnV0ZS53ZWlnaHQpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGNyb3NzZXMob3RoZXJFZGdlKXtcclxuICAgICAgICBpZiAodGhpcy5sZWZ0VGFibGUuZGVwdGggPT0gdGhpcy5yaWdodFRhYmxlLmRlcHRoIHx8IG90aGVyRWRnZS5sZWZ0VGFibGUuZGVwdGggPT0gb3RoZXJFZGdlLnJpZ2h0VGFibGUuZGVwdGgpIFxyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5jb21wYXJlU2VsZkVkZ2VUbyhvdGhlckVkZ2UpXHJcblxyXG4gICAgICAgIGlmICh0aGlzLmNvbXBhcmVUbyhvdGhlckVkZ2UpKXtcclxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcblxyXG4gICAgY29tcGFyZShhcmcwKXtcclxuICAgICAgICBpZiAoYXJnMCA9PSB1bmRlZmluZWQpIHJldHVybiAxO1xyXG4gICAgICAgIGxldCByZXQgPSB0aGlzLmNvbXBhcmVBdHRyaWJ1dGVzKHRoaXMubGVmdFRhYmxlLCB0aGlzLmxlZnRBdHRyaWJ1dGUsIGFyZzAubGVmdFRhYmxlLCBhcmcwLmxlZnRBdHRyaWJ1dGUpXHJcbiAgICB9XHJcblxyXG4gICAgY29tcGFyZUF0dHJpYnV0ZXModDEsIGExLCB0MiwgYTIpe1xyXG4gICAgICAgIGxldCByZXQgPSB0MS5jb21wYXJlVG8odDIpXHJcbiAgICAgICAgaWYgKHJldCA9PSAwKSByZXQgPSBhMS5jb21wYXJlVG8oYTIpO1xyXG4gICAgICAgIHJldHVybiByZXQ7XHJcbiAgICB9XHJcblxyXG4gICAgaXNTYW1lUmFua0VkZ2UoKXtcclxuICAgICAgICByZXR1cm4gdGhpcy5sZWZ0VGFibGUuZGVwdGggPT0gdGhpcy5yaWdodFRhYmxlLmRlcHRoXHJcbiAgICB9XHJcblxyXG4gICAgZ2V0QmVuZGluZXNzKCl7XHJcbiAgICAgICAgbGV0IHJlcyA9IDA7XHJcbiAgICAgICAgbGV0IGZhY3RvciA9IDEwLyh0aGlzLmxlZnRUYWJsZS5ncmFwaC5iYXNlUm93RGlzdGFuY2UqMTApO1xyXG4gICAgICAgIC8vaWYgKHRoaXMubGVmdFRhYmxlLm5hbWUgPT0gXCJzZWxlY3RcIikgY29uc29sZS5sb2codGhpcy5yaWdodFRhYmxlLm5hbWUsICdzZWxlY3Rwb3MnLCB0aGlzLmxlZnRUYWJsZS53ZWlnaHQgKyB0aGlzLmxlZnRBdHRyaWJ1dGUud2VpZ2h0ICogZmFjdG9yICsgdGhpcy5sZWZ0VGFibGUudmVydGljYWxBdHRyT2Zmc2V0ICogZmFjdG9yLCAndGhpc3BvcycsIHRoaXMucmlnaHRUYWJsZS53ZWlnaHQgKyB0aGlzLnJpZ2h0QXR0cmlidXRlLndlaWdodCAqIGZhY3RvciArIHRoaXMucmlnaHRUYWJsZS52ZXJ0aWNhbEF0dHJPZmZzZXQgKiBmYWN0b3IpXHJcbiAgICAgICAgcmVzID0gKHRoaXMucmlnaHRUYWJsZS53ZWlnaHQgKyB0aGlzLnJpZ2h0QXR0cmlidXRlLndlaWdodCAqIGZhY3RvciArIHRoaXMucmlnaHRUYWJsZS52ZXJ0aWNhbEF0dHJPZmZzZXQgKiBmYWN0b3IpIC0gKHRoaXMubGVmdFRhYmxlLndlaWdodCArIHRoaXMubGVmdEF0dHJpYnV0ZS53ZWlnaHQgKiBmYWN0b3IgKyB0aGlzLmxlZnRUYWJsZS52ZXJ0aWNhbEF0dHJPZmZzZXQgKiBmYWN0b3IpO1xyXG4gICAgICAgIC8vaWYgKHRoaXMubGVmdFRhYmxlLm5hbWUgPT0gXCJzZWxlY3RcIikgY29uc29sZS5sb2cocmVzKVxyXG4gICAgICAgIHJlcyA9IE1hdGgucm91bmQocmVzKjEwMDApLzEwMDBcclxuICAgICAgICAvL2lmICh0aGlzLmxlZnRUYWJsZS5uYW1lID09IFwic2VsZWN0XCIpIGNvbnNvbGUubG9nKHJlcylcclxuICAgICAgICByZXR1cm4gTWF0aC5hYnMocmVzKTtcclxuICAgIH1cclxufSIsImNsYXNzIEdhbnNuZXIge1xyXG4gICAgY29uc3RydWN0b3IoZ3JhcGgpe1xyXG4gICAgICAgIHRoaXMuZyA9IGdyYXBoO1xyXG4gICAgICAgIHRoaXMubWF4X2l0ZXJhdGlvbnMgPSAxMTtcclxuICAgICAgICB0aGlzLmVsYXBzZWRUaW1lID0gMDtcclxuICAgIH1cclxuXHJcbiAgICBtZWRpYW4oYXJyYXkpIHtcclxuICAgICAgICBhcnJheSA9IGFycmF5LnNvcnQoKTtcclxuICAgICAgICBpZiAoYXJyYXkubGVuZ3RoICUgMiA9PT0gMCkge1xyXG4gICAgICAgICAgcmV0dXJuIChhcnJheVthcnJheS5sZW5ndGgvMl0gKyBhcnJheVsoYXJyYXkubGVuZ3RoIC8gMikgLSAxXSkgLyAyO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHJldHVybiBhcnJheVsoYXJyYXkubGVuZ3RoIC0gMSkgLyAyXTsgXHJcbiAgICAgIH1cclxuXHJcbiAgICBhcHBseUFycmFuZ2VtZW50KGNsb25lR3JhcGgpe1xyXG4gICAgICAgIGZvciAobGV0IHRhYmxlIG9mIGNsb25lR3JhcGgudGFibGVzKXtcclxuICAgICAgICAgICAgbGV0IHRhYmxlMiA9IHRoaXMuZy50YWJsZXMuZmluZCh0ID0+IHQubmFtZSA9PSB0YWJsZS5uYW1lKVxyXG4gICAgICAgICAgICB0YWJsZTIud2VpZ2h0ID0gdGFibGUud2VpZ2h0O1xyXG5cclxuICAgICAgICAgICAgZm9yIChsZXQgYXR0cmlidXRlIG9mIHRhYmxlLmF0dHJpYnV0ZXMpe1xyXG4gICAgICAgICAgICAgICAgbGV0IGF0dHJpYnV0ZTIgPSB0YWJsZTIuYXR0cmlidXRlcy5maW5kKGEgPT4gYS5uYW1lID09IGF0dHJpYnV0ZS5uYW1lKVxyXG4gICAgICAgICAgICAgICAgYXR0cmlidXRlMi53ZWlnaHQgPSBhdHRyaWJ1dGUud2VpZ2h0XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgYXJyYW5nZSgpe1xyXG4gICAgICAgIGxldCBzdGFydFRpbWUgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKVxyXG5cclxuICAgICAgICBsZXQgYmVzdF9jcm9zc2luZ3MgPSB0aGlzLmcuZ2V0RWRnZUNyb3NzaW5ncygpXHJcblxyXG4gICAgICAgIGZvciAobGV0IGk9MDsgaTx0aGlzLm1heF9pdGVyYXRpb25zOyBpKyspe1xyXG4gICAgICAgICAgICBsZXQgY2xvbmVHcmFwaCA9IF8uY2xvbmVEZWVwKHRoaXMuZylcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIGlmIChpJTIgPT0gMCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5hcnJhbmdlTGVmdChjbG9uZUdyYXBoKVxyXG4gICAgICAgICAgICB9IGVsc2UgdGhpcy5hcnJhbmdlUmlnaHQoY2xvbmVHcmFwaClcclxuXHJcbiAgICAgICAgICAgIHRoaXMudHJhbnNwb3NlKGNsb25lR3JhcGgpO1xyXG5cclxuICAgICAgICAgICAgbGV0IGN1cl9jcm9zc2luZ3MgPSBjbG9uZUdyYXBoLmdldEVkZ2VDcm9zc2luZ3MoKVxyXG4gICAgICAgICAgICAvL2NvbnNvbGUubG9nKCdjdXIgY3Jvc3NpbmdzOiAnLCBjdXJfY3Jvc3NpbmdzKVxyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgaWYgKGN1cl9jcm9zc2luZ3MgPD0gYmVzdF9jcm9zc2luZ3MpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuYXBwbHlBcnJhbmdlbWVudChjbG9uZUdyYXBoKVxyXG4gICAgICAgICAgICAgICAgYmVzdF9jcm9zc2luZ3MgPSBjdXJfY3Jvc3NpbmdzXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuZWxhcHNlZFRpbWUgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKSAtIHN0YXJ0VGltZTtcclxuICAgIH1cclxuXHJcbiAgICBhcnJhbmdlTGVmdChnKXtcclxuICAgICAgICBmb3IgKGxldCBpPTE7IGk8PWcubWF4RGVwdGg7IGkrKyl7XHJcbiAgICAgICAgICAgIGxldCBsYXllclRhYmxlcyA9IGcudGFibGVJbmRleFtpXTtcclxuICAgICAgICAgICAgbGV0IGxheWVyRWRnZXMgPSBnLmVkZ2VJbmRleFtpLTFdO1xyXG5cclxuICAgICAgICAgICAgZm9yIChsZXQgdGFibGUgb2YgbGF5ZXJUYWJsZXMpe1xyXG4gICAgICAgICAgICAgICAgbGV0IHdlaWdodHMgPSBsYXllckVkZ2VzXHJcbiAgICAgICAgICAgICAgICAgICAgLmZpbHRlcihlID0+IGUucmlnaHRUYWJsZSA9PSB0YWJsZSAmJiBlLmxlZnRUYWJsZS5kZXB0aCAhPSBlLnJpZ2h0VGFibGUuZGVwdGgpXHJcbiAgICAgICAgICAgICAgICAgICAgLm1hcChlID0+IHBhcnNlRmxvYXQoZS5sZWZ0VGFibGUud2VpZ2h0KSlcclxuICAgICAgICAgICAgICAgIHRhYmxlLndlaWdodCA9IHRoaXMubWVkaWFuKHdlaWdodHMpXHJcblxyXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgYXR0cmlidXRlIG9mIHRhYmxlLmF0dHJpYnV0ZXMpe1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCB0YWJsZVdlaWdodHMgPSBsYXllckVkZ2VzXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC5maWx0ZXIoZSA9PiBlLnJpZ2h0QXR0cmlidXRlID09IGF0dHJpYnV0ZSAgJiYgZS5sZWZ0VGFibGUuZGVwdGggIT0gZS5yaWdodFRhYmxlLmRlcHRoKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAubWFwKGUgPT4gcGFyc2VGbG9hdChlLmxlZnRUYWJsZS53ZWlnaHQpKVxyXG5cclxuICAgICAgICAgICAgICAgICAgICBsZXQgYXR0cmlidXRlV2VpZ2h0cyA9IGxheWVyRWRnZXNcclxuICAgICAgICAgICAgICAgICAgICAgICAgLmZpbHRlcihlID0+IGUucmlnaHRBdHRyaWJ1dGUgPT0gYXR0cmlidXRlICAmJiBlLmxlZnRUYWJsZS5kZXB0aCAhPSBlLnJpZ2h0VGFibGUuZGVwdGgpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC5tYXAoZSA9PiBwYXJzZUZsb2F0KGUubGVmdEF0dHJpYnV0ZS53ZWlnaHQpKVxyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAodGFibGVXZWlnaHRzLmxlbmd0aCAhPSAwKSBcclxuICAgICAgICAgICAgICAgICAgICAgICAgYXR0cmlidXRlLndlaWdodCA9IHRoaXMubWVkaWFuKHRhYmxlV2VpZ2h0cykgKyB0aGlzLm1lZGlhbihhdHRyaWJ1dGVXZWlnaHRzKS90YWJsZS5hdHRyaWJ1dGVzLmxlbmd0aFxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBnLnNldEV4YWN0V2VpZ2h0cygpXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGFycmFuZ2VSaWdodChnKXtcclxuICAgICAgICBmb3IgKGxldCBpPWcubWF4RGVwdGgtMTsgaT4wOyBpLS0pe1xyXG4gICAgICAgICAgICBsZXQgbGF5ZXJUYWJsZXMgPSBnLnRhYmxlSW5kZXhbaV07XHJcbiAgICAgICAgICAgIGxldCBsYXllckVkZ2VzID0gZy5lZGdlSW5kZXhbaV07XHJcblxyXG4gICAgICAgICAgICBmb3IgKGxldCB0YWJsZSBvZiBsYXllclRhYmxlcyl7XHJcbiAgICAgICAgICAgICAgICBsZXQgd2VpZ2h0cyA9IGxheWVyRWRnZXNcclxuICAgICAgICAgICAgICAgICAgICAuZmlsdGVyKGUgPT4gZS5sZWZ0VGFibGUgPT0gdGFibGUgJiYgZS5sZWZ0VGFibGUuZGVwdGggIT0gZS5yaWdodFRhYmxlLmRlcHRoKVxyXG4gICAgICAgICAgICAgICAgICAgIC5tYXAoZSA9PiBwYXJzZUZsb2F0KGUucmlnaHRUYWJsZS53ZWlnaHQpKVxyXG5cclxuICAgICAgICAgICAgICAgIHRhYmxlLndlaWdodCA9IHRoaXMubWVkaWFuKHdlaWdodHMpXHJcblxyXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgYXR0cmlidXRlIG9mIHRhYmxlLmF0dHJpYnV0ZXMpe1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCB0YWJsZVdlaWdodHMgPSBsYXllckVkZ2VzXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC5maWx0ZXIoZSA9PiBlLmxlZnRBdHRyaWJ1dGUgPT0gYXR0cmlidXRlICAmJiBlLmxlZnRUYWJsZS5kZXB0aCAhPSBlLnJpZ2h0VGFibGUuZGVwdGgpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC5tYXAoZSA9PiBwYXJzZUZsb2F0KGUucmlnaHRUYWJsZS53ZWlnaHQpKVxyXG5cclxuICAgICAgICAgICAgICAgICAgICBsZXQgYXR0cmlidXRlV2VpZ2h0cyA9IGxheWVyRWRnZXNcclxuICAgICAgICAgICAgICAgICAgICAgICAgLmZpbHRlcihlID0+IGUubGVmdEF0dHJpYnV0ZSA9PSBhdHRyaWJ1dGUgICYmIGUubGVmdFRhYmxlLmRlcHRoICE9IGUucmlnaHRUYWJsZS5kZXB0aClcclxuICAgICAgICAgICAgICAgICAgICAgICAgLm1hcChlID0+IHBhcnNlRmxvYXQoZS5yaWdodEF0dHJpYnV0ZS53ZWlnaHQpKVxyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAodGFibGVXZWlnaHRzLmxlbmd0aCAhPSAwKSBcclxuICAgICAgICAgICAgICAgICAgICAgICAgYXR0cmlidXRlLndlaWdodCA9IHRoaXMubWVkaWFuKHRhYmxlV2VpZ2h0cykgKyB0aGlzLm1lZGlhbihhdHRyaWJ1dGVXZWlnaHRzKS90YWJsZS5hdHRyaWJ1dGVzLmxlbmd0aFxyXG4gICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGcuc2V0RXhhY3RXZWlnaHRzKClcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgdHJhbnNwb3NlKGcpe1xyXG4gICAgICAgIGxldCBpbXByb3ZlZCA9IHRydWU7XHJcbiAgICAgICAgd2hpbGUgKGltcHJvdmVkKXtcclxuICAgICAgICAgICAgaW1wcm92ZWQgPSBmYWxzZTtcclxuICAgICAgICAgICAgZm9yIChsZXQgaT0wOyBpPD1nLm1heERlcHRoOyBpKyspe1xyXG5cclxuICAgICAgICAgICAgICAgIGxldCBpbml0Q3Jvc3NpbmdzID0gZy5nZXRFZGdlQ3Jvc3NpbmdzQXREZXB0aChpKTtcclxuXHJcbiAgICAgICAgICAgICAgICBsZXQgbGF5ZXJUYWJsZXMgPSBnLnRhYmxlSW5kZXhbaV07XHJcbiAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgbGF5ZXJUYWJsZXMubGVuZ3RoIC0gMTsgaisrKXtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgdGFibGUxID0gbGF5ZXJUYWJsZXNbal07XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IHRhYmxlMiA9IGxheWVyVGFibGVzW2orMV07XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc3dhcCh0YWJsZTEsIHRhYmxlMik7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGxldCBjdXJDcm9zc2luZ3MgPSBnLmdldEVkZ2VDcm9zc2luZ3NBdERlcHRoKGkpICsgZy5nZXRFZGdlQ3Jvc3NpbmdzQXREZXB0aChpKzEpXHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChjdXJDcm9zc2luZ3MgPCBpbml0Q3Jvc3NpbmdzKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaW1wcm92ZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB0aGlzLnN3YXAodGFibGUxLCB0YWJsZTIpXHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgdGFibGUgb2YgbGF5ZXJUYWJsZXMpe1xyXG4gICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgIGZvciAobGV0IGs9MDsgayA8IHRhYmxlLmF0dHJpYnV0ZXMubGVuZ3RoIC0gMTsgaysrKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGF0dHIxID0gdGFibGUuYXR0cmlidXRlc1trXVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgYXR0cjIgPSB0YWJsZS5hdHRyaWJ1dGVzW2srMV1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc3dhcChhdHRyMSwgYXR0cjIpXHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgY3VyQ3Jvc3NpbmdzMiA9IGcuZ2V0RWRnZUNyb3NzaW5nc0F0RGVwdGgoaSkgKyBnLmdldEVkZ2VDcm9zc2luZ3NBdERlcHRoKGkrMSlcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjdXJDcm9zc2luZ3MyIDwgaW5pdENyb3NzaW5ncyl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbXByb3ZlZCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB0aGlzLnN3YXAoYXR0cjEsIGF0dHIyKVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBzd2FwKHcxLCB3Mil7XHJcbiAgICAgICAgbGV0IHRtcHcgPSB3MS53ZWlnaHQ7XHJcbiAgICAgICAgdzEud2VpZ2h0ID0gdzIud2VpZ2h0O1xyXG4gICAgICAgIHcyLndlaWdodCA9IHRtcHc7XHJcbiAgICB9XHJcbn0iLCJjbGFzcyBHYW5zbmVyU2FtZVJhbmsge1xyXG4gICAgY29uc3RydWN0b3IoZ3JhcGgpe1xyXG4gICAgICAgIHRoaXMuZyA9IGdyYXBoO1xyXG4gICAgICAgIHRoaXMubWF4X2l0ZXJhdGlvbnMgPSA2O1xyXG4gICAgICAgIHRoaXMuZWxhcHNlZFRpbWUgPSAwO1xyXG5cclxuICAgICAgICB0aGlzLml0ZXJhdGlvbnMgPSBbXTtcclxuICAgICAgICB0aGlzLmN1cl9pdGVyYXRpb24gPSAwO1xyXG4gICAgfVxyXG5cclxuICAgIGFwcGx5X2l0ZXJhdGlvbihpdGVyX251bSl7XHJcbiAgICAgICAgdGhpcy5hcHBseUFycmFuZ2VtZW50KHRoaXMuaXRlcmF0aW9uc1tpdGVyX251bV0pO1xyXG4gICAgfVxyXG5cclxuICAgIHF1aWNrc29ydChhcnJheSkge1xyXG4gICAgICAgIGlmIChhcnJheS5sZW5ndGggPD0gMSkge1xyXG4gICAgICAgICAgcmV0dXJuIGFycmF5O1xyXG4gICAgICAgIH1cclxuICAgICAgXHJcbiAgICAgICAgdmFyIHBpdm90ID0gYXJyYXlbMF07XHJcbiAgICAgICAgXHJcbiAgICAgICAgdmFyIGxlZnQgPSBbXTsgXHJcbiAgICAgICAgdmFyIHJpZ2h0ID0gW107XHJcbiAgICAgIFxyXG4gICAgICAgIGZvciAodmFyIGkgPSAxOyBpIDwgYXJyYXkubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgIGFycmF5W2ldIDwgcGl2b3QgPyBsZWZ0LnB1c2goYXJyYXlbaV0pIDogcmlnaHQucHVzaChhcnJheVtpXSk7XHJcbiAgICAgICAgfVxyXG4gICAgICBcclxuICAgICAgICByZXR1cm4gcXVpY2tzb3J0KGxlZnQpLmNvbmNhdChwaXZvdCwgcXVpY2tzb3J0KHJpZ2h0KSk7XHJcbiAgICAgIH07XHJcblxyXG4gICAgbWVkaWFuKGFycmF5KSB7XHJcbiAgICAgICAgYXJyYXkgPSBhcnJheS5zb3J0KCk7XHJcbiAgICAgICAgaWYgKGFycmF5Lmxlbmd0aCAlIDIgPT09IDApIHtcclxuICAgICAgICAgIHJldHVybiAoYXJyYXlbYXJyYXkubGVuZ3RoLzJdICsgYXJyYXlbKGFycmF5Lmxlbmd0aCAvIDIpIC0gMV0pIC8gMjtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSByZXR1cm4gYXJyYXlbKGFycmF5Lmxlbmd0aCAtIDEpIC8gMl07IFxyXG4gICAgICB9XHJcblxyXG4gICAgYXBwbHlBcnJhbmdlbWVudChjbG9uZUdyYXBoKXtcclxuICAgICAgICAvL2NvbnNvbGUubG9nKGNsb25lR3JhcGgpO1xyXG4gICAgICAgIGZvciAobGV0IHRhYmxlIG9mIGNsb25lR3JhcGgudGFibGVzKXtcclxuICAgICAgICAgICAgbGV0IHRhYmxlMiA9IHRoaXMuZy50YWJsZXMuZmluZCh0ID0+IHQubmFtZSA9PSB0YWJsZS5uYW1lKVxyXG4gICAgICAgICAgICB0YWJsZTIud2VpZ2h0ID0gdGFibGUud2VpZ2h0O1xyXG4gICAgICAgICAgICB0YWJsZTIuYXNzaWduZWRXZWlnaHQgPSB0YWJsZS5hc3NpZ25lZFdlaWdodDtcclxuXHJcbiAgICAgICAgICAgIGZvciAobGV0IGF0dHJpYnV0ZSBvZiB0YWJsZS5hdHRyaWJ1dGVzKXtcclxuICAgICAgICAgICAgICAgIGxldCBhdHRyaWJ1dGUyID0gdGFibGUyLmF0dHJpYnV0ZXMuZmluZChhID0+IGEubmFtZSA9PSBhdHRyaWJ1dGUubmFtZSlcclxuICAgICAgICAgICAgICAgIGF0dHJpYnV0ZTIud2VpZ2h0ID0gYXR0cmlidXRlLndlaWdodFxyXG4gICAgICAgICAgICAgICAgYXR0cmlidXRlMi5hc3NpZ25lZFdlaWdodCA9IGF0dHJpYnV0ZS5hc3NpZ25lZFdlaWdodFxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGFycmFuZ2UoKXtcclxuICAgICAgICBsZXQgc3RhcnRUaW1lID0gbmV3IERhdGUoKS5nZXRUaW1lKClcclxuXHJcbiAgICAgICAgdGhpcy5nLnNldEV4YWN0V2VpZ2h0cygpO1xyXG5cclxuICAgICAgICBsZXQgYmVzdF9jcm9zc2luZ3MgPSB0aGlzLmcuZ2V0RWRnZUNyb3NzaW5ncygpXHJcblxyXG4gICAgICAgIGZvciAobGV0IGk9MDsgaTx0aGlzLm1heF9pdGVyYXRpb25zOyBpKyspe1xyXG4gICAgICAgICAgICB0aGlzLmN1cl9pdGVyYXRpb24gPSBpO1xyXG4gICAgICAgICAgICBsZXQgY2xvbmVHcmFwaCA9IF8uY2xvbmVEZWVwKHRoaXMuZylcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIGlmIChpJTIgPT0gMCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5hcnJhbmdlTGVmdChjbG9uZUdyYXBoKVxyXG4gICAgICAgICAgICB9IGVsc2UgdGhpcy5hcnJhbmdlUmlnaHQoY2xvbmVHcmFwaClcclxuXHJcbiAgICAgICAgICAgIHRoaXMudHJhbnNwb3NlKGNsb25lR3JhcGgpO1xyXG5cclxuICAgICAgICAgICAgbGV0IGN1cl9jcm9zc2luZ3MgPSBjbG9uZUdyYXBoLmdldEVkZ2VDcm9zc2luZ3MoKVxyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgaWYgKGN1cl9jcm9zc2luZ3MgPD0gYmVzdF9jcm9zc2luZ3MpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuYXBwbHlBcnJhbmdlbWVudChjbG9uZUdyYXBoKVxyXG4gICAgICAgICAgICAgICAgYmVzdF9jcm9zc2luZ3MgPSBjdXJfY3Jvc3NpbmdzXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHRoaXMuaXRlcmF0aW9uc1t0aGlzLmN1cl9pdGVyYXRpb25dID0gXy5jbG9uZURlZXAoY2xvbmVHcmFwaCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLmVsYXBzZWRUaW1lID0gbmV3IERhdGUoKS5nZXRUaW1lKCkgLSBzdGFydFRpbWU7XHJcbiAgICB9XHJcblxyXG4gICAgYXJyYW5nZUxlZnQoZyl7XHJcbiAgICAgICAgY29uc29sZS5sb2coJ0xlZnQnKVxyXG4gICAgICAgIGxldCB0bXBXZWlnaHRzVGFibGVzID0ge307XHJcbiAgICAgICAgbGV0IHRtcEF0dHJpYnV0ZVdlaWdodHMgPSB7fTtcclxuXHJcbiAgICAgICAgZm9yIChsZXQgaT0xOyBpPD1nLm1heERlcHRoICsgMTsgaSsrKXtcclxuICAgICAgICAgICAgbGV0IGxheWVyVGFibGVzID0gZy50YWJsZUluZGV4W2ldO1xyXG4gICAgICAgICAgICBsZXQgbGF5ZXJFZGdlcyA9IGcuZWRnZUluZGV4W2ktMV07XHJcblxyXG4gICAgICAgICAgICBmb3IgKGxldCB0IGluIGxheWVyVGFibGVzKXtcclxuICAgICAgICAgICAgICAgIGxldCB0YWJsZSA9IGxheWVyVGFibGVzW3RdO1xyXG5cclxuICAgICAgICAgICAgICAgIGxldCB3ZWlnaHRzID0gbGF5ZXJFZGdlc1xyXG4gICAgICAgICAgICAgICAgICAgIC5maWx0ZXIoZSA9PiBlLnJpZ2h0VGFibGUgPT0gdGFibGUgJiYgIXRoaXMuaXNTYW1lUmFua0VkZ2UoZSkpXHJcbiAgICAgICAgICAgICAgICAgICAgLm1hcChlID0+IHBhcnNlRmxvYXQoZS5sZWZ0VGFibGUud2VpZ2h0KSlcclxuICAgICAgIFxyXG4gICAgICAgICAgICAgICAgbGV0IHZhbCA9IHRoaXMubWVkaWFuKHdlaWdodHMpO1xyXG4gICAgICAgICAgICAgICAgaWYgKCFpc05hTih2YWwpKSB0bXBXZWlnaHRzVGFibGVzW3RhYmxlLm5hbWVdID0gdmFsO1xyXG4gICAgICAgICAgICAgICAgdG1wQXR0cmlidXRlV2VpZ2h0c1t0YWJsZS5uYW1lXSA9IHt9O1xyXG5cclxuICAgICAgICAgICAgICAgIGZvciAobGV0IGF0dHJpYnV0ZSBvZiB0YWJsZS5hdHRyaWJ1dGVzKXtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgdGFibGVXZWlnaHRzID0gbGF5ZXJFZGdlc1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAuZmlsdGVyKGUgPT4gZS5yaWdodEF0dHJpYnV0ZSA9PSBhdHRyaWJ1dGUgICYmICF0aGlzLmlzU2FtZVJhbmtFZGdlKGUpKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAubWFwKGUgPT4gcGFyc2VGbG9hdChlLmxlZnRUYWJsZS53ZWlnaHQpKVxyXG5cclxuICAgICAgICAgICAgICAgICAgICBsZXQgYXR0cmlidXRlV2VpZ2h0cyA9IGxheWVyRWRnZXNcclxuICAgICAgICAgICAgICAgICAgICAgICAgLmZpbHRlcihlID0+IGUucmlnaHRBdHRyaWJ1dGUgPT0gYXR0cmlidXRlICAmJiAhdGhpcy5pc1NhbWVSYW5rRWRnZShlKSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgLm1hcChlID0+IHBhcnNlRmxvYXQoZS5sZWZ0QXR0cmlidXRlLndlaWdodCkpXHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGxldCB2YWwgPSBwYXJzZUZsb2F0KHRoaXMubWVkaWFuKHRhYmxlV2VpZ2h0cykpICsgcGFyc2VGbG9hdCh0aGlzLm1lZGlhbihhdHRyaWJ1dGVXZWlnaHRzKS90YWJsZS5hdHRyaWJ1dGVzLmxlbmd0aCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmICghaXNOYU4odmFsKSkgdG1wQXR0cmlidXRlV2VpZ2h0c1t0YWJsZS5uYW1lXVthdHRyaWJ1dGUubmFtZV0gPSB2YWw7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMucmVvcmRlcihnLCB0bXBXZWlnaHRzVGFibGVzLCB0bXBBdHRyaWJ1dGVXZWlnaHRzKTtcclxuICAgIH1cclxuXHJcbiAgICBhcnJhbmdlUmlnaHQoZyl7XHJcbiAgICAgICAgY29uc29sZS5sb2coJ1JpZ2h0JylcclxuICAgICAgICBsZXQgdG1wV2VpZ2h0c1RhYmxlcyA9IHt9O1xyXG4gICAgICAgIGxldCB0bXBBdHRyaWJ1dGVXZWlnaHRzID0ge307XHJcblxyXG4gICAgICAgIGZvciAobGV0IGkgPSBnLm1heERlcHRoIC0gMTsgaT4wOyBpLS0pe1xyXG4gICAgICAgICAgICBsZXQgbGF5ZXJUYWJsZXMgPSBnLnRhYmxlSW5kZXhbaV07XHJcbiAgICAgICAgICAgIGxldCBsYXllckVkZ2VzID0gZy5lZGdlSW5kZXhbaV07XHJcblxyXG4gICAgICAgICAgICBmb3IgKGxldCB0YWJsZSBvZiBsYXllclRhYmxlcyl7XHJcbiAgICAgICAgICAgICAgICBsZXQgd2VpZ2h0cyA9IGxheWVyRWRnZXNcclxuICAgICAgICAgICAgICAgICAgICAuZmlsdGVyKGUgPT4gZS5sZWZ0VGFibGUgPT0gdGFibGUpXHJcbiAgICAgICAgICAgICAgICAgICAgLm1hcChlID0+IHBhcnNlRmxvYXQoZS5yaWdodFRhYmxlLndlaWdodCkpXHJcblxyXG4gICAgICAgICAgICAgICAgbGV0IHZhbCA9IHBhcnNlRmxvYXQodGhpcy5tZWRpYW4od2VpZ2h0cykpO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmICghaXNOYU4odmFsKSkgdG1wV2VpZ2h0c1RhYmxlc1t0YWJsZS5uYW1lXSA9IHZhbDtcclxuICAgICAgICAgICAgICAgIHRtcEF0dHJpYnV0ZVdlaWdodHNbdGFibGUubmFtZV0gPSB7fTtcclxuXHJcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBhdHRyaWJ1dGUgb2YgdGFibGUuYXR0cmlidXRlcyl7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IHRhYmxlV2VpZ2h0cyA9IGxheWVyRWRnZXNcclxuICAgICAgICAgICAgICAgICAgICAgICAgLmZpbHRlcihlID0+IGUubGVmdEF0dHJpYnV0ZSA9PSBhdHRyaWJ1dGUpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC5tYXAoZSA9PiBwYXJzZUZsb2F0KGUucmlnaHRUYWJsZS53ZWlnaHQpKVxyXG5cclxuICAgICAgICAgICAgICAgICAgICBsZXQgYXR0cmlidXRlV2VpZ2h0cyA9IGxheWVyRWRnZXNcclxuICAgICAgICAgICAgICAgICAgICAgICAgLmZpbHRlcihlID0+IGUubGVmdEF0dHJpYnV0ZSA9PSBhdHRyaWJ1dGUpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC5tYXAoZSA9PiBwYXJzZUZsb2F0KGUucmlnaHRBdHRyaWJ1dGUud2VpZ2h0KSlcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IHZhbCA9IHBhcnNlRmxvYXQodGhpcy5tZWRpYW4odGFibGVXZWlnaHRzKSkgKyBwYXJzZUZsb2F0KHRoaXMubWVkaWFuKGF0dHJpYnV0ZVdlaWdodHMpL3RhYmxlLmF0dHJpYnV0ZXMubGVuZ3RoKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFpc05hTih2YWwpKSB0bXBBdHRyaWJ1dGVXZWlnaHRzW3RhYmxlLm5hbWVdW2F0dHJpYnV0ZS5uYW1lXSA9IHZhbDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5yZW9yZGVyKGcsIHRtcFdlaWdodHNUYWJsZXMsIHRtcEF0dHJpYnV0ZVdlaWdodHMpXHJcbiAgICB9XHJcblxyXG4gICAgaXNTYW1lUmFua0VkZ2UoZSl7XHJcbiAgICAgICAgcmV0dXJuIGUubGVmdFRhYmxlLmRlcHRoID09IGUucmlnaHRUYWJsZS5kZXB0aDtcclxuICAgIH1cclxuXHJcbiAgICByZW9yZGVyKGcsIHRtcFdlaWdodHNUYWJsZXMsIHRtcEF0dHJpYnV0ZVdlaWdodHMpe1xyXG4gICAgICAgIGZvciAobGV0IGkgaW4gZy50YWJsZUluZGV4KXtcclxuXHJcbiAgICAgICAgICAgIC8vIGlzIHRoaXMgY29ycmVjdD9cclxuICAgICAgICAgICAgaWYgKGkgPT0gMCkgY29udGludWU7XHJcblxyXG4gICAgICAgICAgICBmb3IgKGxldCBqIGluIGcudGFibGVJbmRleFtpXSl7XHJcbiAgICAgICAgICAgICAgICBsZXQgdGFibCA9IGcudGFibGVJbmRleFtpXVtqXTtcclxuXHJcbiAgICAgICAgICAgICAgICAvLyBpcyB0aGlzIGNvcnJlY3Q/XHJcbiAgICAgICAgICAgICAgICBpZiAodG1wV2VpZ2h0c1RhYmxlc1t0YWJsLm5hbWVdID09IHVuZGVmaW5lZCkgY29udGludWU7XHJcblxyXG4gICAgICAgICAgICAgICAgdGFibC53ZWlnaHQgPSB0bXBXZWlnaHRzVGFibGVzW3RhYmwubmFtZV07XHJcbiAgICAgICAgICAgICAgICB0YWJsLmFzc2lnbmVkV2VpZ2h0ID0gdG1wV2VpZ2h0c1RhYmxlc1t0YWJsLm5hbWVdO1xyXG5cclxuICAgICAgICAgICAgICAgIGZvciAobGV0IGsgaW4gdGFibC5hdHRyaWJ1dGVzKXtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgYXR0ciA9IHRhYmwuYXR0cmlidXRlc1trXVxyXG4gICAgICAgICAgICAgICAgICAgIGF0dHIud2VpZ2h0ID0gdG1wQXR0cmlidXRlV2VpZ2h0c1t0YWJsLm5hbWVdW2F0dHIubmFtZV1cclxuICAgICAgICAgICAgICAgICAgICBhdHRyLmFzc2lnbmVkV2VpZ2h0ID0gdG1wQXR0cmlidXRlV2VpZ2h0c1t0YWJsLm5hbWVdW2F0dHIubmFtZV1cclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICB0YWJsLmF0dHJpYnV0ZXMuc29ydCgoYSwgYikgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChpc05hTihhLndlaWdodCkgfHwgaXNOYU4oYi53ZWlnaHQpKSByZXR1cm4gMDtcclxuICAgICAgICAgICAgICAgICAgICBlbHNlIHJldHVybiBhLndlaWdodCA+IGIud2VpZ2h0ID8gMSA6IC0xO1xyXG4gICAgICAgICAgICAgICAgfSlcclxuXHJcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBrIGluIHRhYmwuYXR0cmlidXRlcyl7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IGF0dHIgPSB0YWJsLmF0dHJpYnV0ZXNba11cclxuICAgICAgICAgICAgICAgICAgICBhdHRyLndlaWdodCA9IGs7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGcudGFibGVJbmRleFtpXS5zb3J0KChhLCBiKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBpZiAoaXNOYU4oYS53ZWlnaHQpIHx8IGlzTmFOKGIud2VpZ2h0KSkgcmV0dXJuIDA7XHJcbiAgICAgICAgICAgICAgICBlbHNlIHJldHVybiBhLndlaWdodCA+IGIud2VpZ2h0ID8gMSA6IC0xO1xyXG4gICAgICAgICAgICB9KVxyXG5cclxuICAgICAgICAgICAgZm9yIChsZXQgaiBpbiBnLnRhYmxlSW5kZXhbaV0pe1xyXG4gICAgICAgICAgICAgICAgbGV0IHRhYmwgPSBnLnRhYmxlSW5kZXhbaV1bal07XHJcbiAgICAgICAgICAgICAgICB0YWJsLndlaWdodCA9IGo7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgdHJhbnNwb3NlKGcpe1xyXG4gICAgICAgIGxldCBpbXByb3ZlZCA9IHRydWU7XHJcbiAgICAgICAgd2hpbGUgKGltcHJvdmVkKXtcclxuICAgICAgICAgICAgaW1wcm92ZWQgPSBmYWxzZTtcclxuICAgICAgICAgICAgZm9yIChsZXQgaT0wOyBpPD1nLm1heERlcHRoOyBpKyspe1xyXG5cclxuICAgICAgICAgICAgICAgIGxldCBpbml0Q3Jvc3NpbmdzID0gZy5nZXRFZGdlQ3Jvc3NpbmdzQXREZXB0aChpKTtcclxuXHJcbiAgICAgICAgICAgICAgICBsZXQgbGF5ZXJUYWJsZXMgPSBnLnRhYmxlSW5kZXhbaV07XHJcbiAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgbGF5ZXJUYWJsZXMubGVuZ3RoIC0gMTsgaisrKXtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgdGFibGUxID0gbGF5ZXJUYWJsZXNbal07XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IHRhYmxlMiA9IGxheWVyVGFibGVzW2orMV07XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc3dhcCh0YWJsZTEsIHRhYmxlMik7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGxldCBjdXJDcm9zc2luZ3MgPSBnLmdldEVkZ2VDcm9zc2luZ3NBdERlcHRoKGkpICsgZy5nZXRFZGdlQ3Jvc3NpbmdzQXREZXB0aChpKzEpXHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChjdXJDcm9zc2luZ3MgPCBpbml0Q3Jvc3NpbmdzKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaW1wcm92ZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB0aGlzLnN3YXAodGFibGUxLCB0YWJsZTIpXHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgdGFibGUgb2YgbGF5ZXJUYWJsZXMpe1xyXG4gICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgIGZvciAobGV0IGs9MDsgayA8IHRhYmxlLmF0dHJpYnV0ZXMubGVuZ3RoIC0gMTsgaysrKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGF0dHIxID0gdGFibGUuYXR0cmlidXRlc1trXVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgYXR0cjIgPSB0YWJsZS5hdHRyaWJ1dGVzW2srMV1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc3dhcChhdHRyMSwgYXR0cjIpXHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgY3VyQ3Jvc3NpbmdzMiA9IGcuZ2V0RWRnZUNyb3NzaW5nc0F0RGVwdGgoaSkgKyBnLmdldEVkZ2VDcm9zc2luZ3NBdERlcHRoKGkrMSlcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjdXJDcm9zc2luZ3MyIDwgaW5pdENyb3NzaW5ncyl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbXByb3ZlZCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB0aGlzLnN3YXAoYXR0cjEsIGF0dHIyKVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBzd2FwKHcxLCB3Mil7XHJcbiAgICAgICAgbGV0IHRtcHcgPSB3MS53ZWlnaHQ7XHJcbiAgICAgICAgdzEud2VpZ2h0ID0gdzIud2VpZ2h0O1xyXG4gICAgICAgIHcyLndlaWdodCA9IHRtcHc7XHJcbiAgICB9XHJcbn0iLCJjbGFzcyBHcmFwaCB7XHJcbiAgICBjb25zdHJ1Y3RvcihvYmope1xyXG4gICAgICAgIGlmIChvYmogPT0gdW5kZWZpbmVkKXtcclxuICAgICAgICAgICAgdGhpcy5lZGdlcyA9IFtdOyBcclxuICAgICAgICAgICAgdGhpcy50YWJsZXMgPSBbXTsgXHJcbiAgICAgICAgICAgIHRoaXMudGFibGVJbmRleCA9IFtdOyBcclxuICAgICAgICAgICAgdGhpcy5lZGdlSW5kZXggPSBbXTtcclxuICAgICAgICAgICAgdGhpcy5tYXhEZXB0aCA9IDA7XHJcbiAgICAgICAgICAgIHRoaXMuZ3JvdXBzID0gW107XHJcbiAgICAgICAgICAgIHRoaXMuYmFzZVJvd0Rpc3RhbmNlID0gNjtcclxuICAgICAgICAgICAgdGhpcy5uZXdMYXllcigpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIG9iaiAmJiBPYmplY3QuYXNzaWduKHRoaXMsIG9iaik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIFxyXG4gICAgfVxyXG5cclxuICAgIGFkZEdyb3VwKGdyb3VwKXtcclxuICAgICAgICB0aGlzLmdyb3Vwcy5wdXNoKGdyb3VwKTtcclxuICAgICAgICBncm91cC5pZCA9IFwiZ1wiICsgdGhpcy5ncm91cHMuaW5kZXhPZihncm91cCk7XHJcbiAgICAgICAgbGV0IGdyb3VwSGVhZGVyVGFibGUgPSBncm91cC5ncm91cEhlYWRlclRhYmxlO1xyXG4gICAgICAgIHRoaXMuYWRkVGFibGUoZ3JvdXBIZWFkZXJUYWJsZSk7XHJcbiAgICB9XHJcblxyXG4gICAgdXBkYXRlR3JvdXBDb29yZHMoKXtcclxuICAgICAgICBmb3IgKGxldCBncm91cCBvZiB0aGlzLmdyb3Vwcyl7XHJcbiAgICAgICAgICAgIGdyb3VwLnVwZGF0ZUNvb3JkcygpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBuZXdMYXllcigpe1xyXG4gICAgICAgIHRoaXMudGFibGVJbmRleC5wdXNoKFtdKVxyXG4gICAgICAgIHRoaXMuZWRnZUluZGV4LnB1c2goW10pXHJcbiAgICB9XHJcblxyXG4gICAgYWRkVGFibGUodGFibGUpe1xyXG4gICAgICAgIHdoaWxlKHRoaXMubWF4RGVwdGggPCB0YWJsZS5kZXB0aCl7XHJcbiAgICAgICAgICAgIHRoaXMubWF4RGVwdGgrPTE7XHJcbiAgICAgICAgICAgIHRoaXMubmV3TGF5ZXIoKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRhYmxlLmdyYXBoID0gdGhpcztcclxuXHJcbiAgICAgICAgdGhpcy50YWJsZXMucHVzaCh0YWJsZSk7XHJcbiAgICAgICAgdGhpcy50YWJsZUluZGV4W3RhYmxlLmRlcHRoXS5wdXNoKHRhYmxlKTtcclxuICAgIH1cclxuXHJcbiAgICBhZGRFZGdlKGVkZ2Upe1xyXG4gICAgICAgIHRoaXMuZWRnZXMucHVzaChlZGdlKVxyXG4gICAgICAgIHRoaXMuZWRnZUluZGV4W2VkZ2UubGVmdFRhYmxlLmRlcHRoXS5wdXNoKGVkZ2UpXHJcbiAgICB9XHJcblxyXG4gICAgZW5zdXJlVW5pcXVlRWRnZXMoKXtcclxuICAgICAgICAvLyBmaW5pc2hcclxuICAgIH1cclxuXHJcbiAgICBnZXRFZGdlQ3Jvc3NpbmdzKCl7XHJcbiAgICAgICAgbGV0IGNvdW50ID0gMDtcclxuICAgICAgICBmb3IgKGxldCBkIGluIHRoaXMuZWRnZUluZGV4KSBjb3VudCArPSB0aGlzLmdldEVkZ2VDcm9zc2luZ3NBdERlcHRoKGQpO1xyXG4gICAgICAgIHJldHVybiBjb3VudDtcclxuICAgIH1cclxuXHJcbiAgICBnZXRFZGdlQ3Jvc3NpbmdzQXREZXB0aChkLCB2ZXJib3NlPWZhbHNlKXtcclxuICAgICAgICBsZXQgY3Jvc3NpbmdzID0gMDtcclxuICAgICAgICBsZXQgbGF5ZXJFZGdlcyA9IHRoaXMuZWRnZUluZGV4W2RdO1xyXG5cclxuICAgICAgICBmb3IgKGxldCBpIGluIGxheWVyRWRnZXMpe1xyXG4gICAgICAgICAgICBsZXQgY3VyckVkZ2UgPSBsYXllckVkZ2VzW2ldO1xyXG4gICAgICAgICAgICBmb3IgKGxldCBqID0gcGFyc2VGbG9hdChpKSsxOyBqIDwgbGF5ZXJFZGdlcy5sZW5ndGg7IGorKyl7XHJcbiAgICAgICAgICAgICAgICBsZXQgb3RoZXJFZGdlID0gbGF5ZXJFZGdlc1tqXTtcclxuICAgICAgICAgICAgICAgIGlmIChjdXJyRWRnZS5jcm9zc2VzKG90aGVyRWRnZSkpe1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh2ZXJib3NlKSBjb25zb2xlLmxvZyhcIkVkZ2UgXCIgKyBjdXJyRWRnZS5sZWZ0QXR0cmlidXRlLm5hbWUgKyBjdXJyRWRnZS5yaWdodEF0dHJpYnV0ZS5uYW1lICsgXCIgY3Jvc3NlcyBcIiArIG90aGVyRWRnZS5sZWZ0QXR0cmlidXRlLm5hbWUgKyBvdGhlckVkZ2UucmlnaHRBdHRyaWJ1dGUubmFtZSlcclxuICAgICAgICAgICAgICAgICAgICBjcm9zc2luZ3MrPTE7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgXHJcbiAgICAgICAgcmV0dXJuIGNyb3NzaW5nc1xyXG4gICAgfVxyXG5cclxuICAgIHNvcnRHcmFwaCgpe1xyXG4gICAgICAgIGZvciAobGV0IHQgb2YgdGhpcy50YWJsZXMpe1xyXG4gICAgICAgICAgICBpZiAoIXQubWFpbikge1xyXG4gICAgICAgICAgICAgICAgdC5hdHRyaWJ1dGVzID0gdC5hdHRyaWJ1dGVzLnNvcnQoKGEsIGIpID0+IGEud2VpZ2h0ID4gYi53ZWlnaHQ/IDEgOiAtMSlcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy50YWJsZXMgPSB0aGlzLnRhYmxlcy5zb3J0KChhLCBiKSA9PiBhLndlaWdodCA+IGIud2VpZ2h0PyAxIDogLTEpXHJcblxyXG4gICAgICAgIGZvciAobGV0IHRfaW5kIG9mIHRoaXMudGFibGVJbmRleCl7XHJcbiAgICAgICAgICAgIHRfaW5kLnNvcnQoKGEsIGIpID0+IGEud2VpZ2h0ID4gYi53ZWlnaHQ/IDEgOiAtMSlcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgc2V0RXhhY3RXZWlnaHRzKCl7XHJcbiAgICAgICAgZm9yIChsZXQgaSBpbiB0aGlzLnRhYmxlSW5kZXgpe1xyXG4gICAgICAgICAgICBsZXQgbGF5ZXJUYWJsZXMgPSB0aGlzLnRhYmxlSW5kZXhbaV07XHJcbiAgICAgICAgICAgIGxheWVyVGFibGVzID0gbGF5ZXJUYWJsZXMuc29ydCgoYSwgYikgPT4ge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGEud2VpZ2h0ID4gYi53ZWlnaHQ/IDEgOiAtMVxyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgZm9yIChsZXQgaiBpbiBsYXllclRhYmxlcyl7XHJcbiAgICAgICAgICAgICAgICBsZXQgdGFibGUgPSBsYXllclRhYmxlc1tqXVxyXG4gICAgICAgICAgICAgICAgdGFibGUud2VpZ2h0ID0gcGFyc2VGbG9hdChqKVxyXG5cclxuICAgICAgICAgICAgICAgIGxldCBhdHRycyA9IHRhYmxlLmF0dHJpYnV0ZXM7XHJcbiAgICAgICAgICAgICAgICBhdHRycyA9IGF0dHJzLnNvcnQoKGEsIGIpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gYS53ZWlnaHQgPiBiLndlaWdodD8gMSA6IC0xXHJcbiAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBrIGluIGF0dHJzKXtcclxuICAgICAgICAgICAgICAgICAgICBhdHRyc1trXS53ZWlnaHQgPSBwYXJzZUZsb2F0KGspXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICBcclxuICAgICAgICB0aGlzLnVwZGF0ZUdyb3VwQ29vcmRzKClcclxuXHJcbiAgICB9XHJcblxyXG4gICAgZ2V0TnVtU3RyYWlnaHRFZGdlcygpe1xyXG4gICAgICAgIGxldCByZXMgPSAwO1xyXG4gICAgICAgIGZvciAobGV0IGkgaW4gdGhpcy5lZGdlSW5kZXgpe1xyXG4gICAgICAgICAgICByZXMgKz0gdGhpcy5nZXROdW1TdHJhaWdodEVkZ2VzQXREZXB0aChpKVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gcmVzO1xyXG4gICAgfVxyXG5cclxuICAgIGdldE51bVN0cmFpZ2h0RWRnZXNBdERlcHRoKGkpe1xyXG4gICAgICAgIGxldCByZXMgPSAwXHJcbiAgICAgICAgZm9yIChsZXQgZSBvZiB0aGlzLmVkZ2VJbmRleFtpXSl7XHJcbiAgICAgICAgICAgIGlmIChlLmxlZnRUYWJsZS53ZWlnaHQgPT0gZS5yaWdodFRhYmxlLndlaWdodCkgcmVzICs9IDFcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHJlcztcclxuICAgIH1cclxuXHJcbiAgICBhZGp1c3RUYWJsZVlQb3NpdGlvbigpe1xyXG4gICAgICAgIGxldCBpbXByb3ZlZCA9IHRydWU7XHJcbiAgICAgICAgXHJcbiAgICAgICAgLy8gd2hpbGUgKGltcHJvdmVkKXtcclxuICAgICAgICAvLyAgICAgaW1wcm92ZWQgPSBmYWxzZTsgICAgIFxyXG5cclxuICAgICAgICAvLyAgICAgZm9yIChsZXQgaT0xOyBpPHRoaXMudGFibGVJbmRleC5sZW5ndGg7IGkrKyl7XHJcbiAgICAgICAgLy8gICAgICAgICBsZXQgdGFibGVDb2wgPSB0aGlzLnRhYmxlSW5kZXhbaV07XHJcbiAgICAgICAgLy8gICAgICAgICBsZXQgaW5pdENvbExlbmd0aCA9IHRhYmxlQ29sLmxlbmd0aDtcclxuXHJcbiAgICAgICAgLy8gICAgICAgICBsZXQgYmVzdFBvc2l0aW9uID0gdW5kZWZpbmVkO1xyXG4gICAgICAgIC8vICAgICAgICAgbGV0IGJlc3ROdW1PZlN0cmFpZ2h0RWRnZXMgPSB0aGlzLmdldE51bVN0cmFpZ2h0RWRnZXMoKTtcclxuICAgIFxyXG4gICAgICAgIC8vICAgICAgICAgbGV0IGN1clN0cmFpZ2h0RWRnZXMgPSB0aGlzLmdldE51bVN0cmFpZ2h0RWRnZXMoKTtcclxuICAgICAgICAgICAgICAgIFxyXG4gICAgICAgIC8vICAgICAgICAgZm9yIChsZXQgaj0wOyBqPGluaXRDb2xMZW5ndGg7IGorKyl7XHJcbiAgICAgICAgLy8gICAgICAgICAgICAgbGV0IHRlbXB0YWJsZSA9IG5ldyBUYWJsZSgnYmxhbmtfJyArIGkgKyBcIl9cIiArIGosICdibGFua18nICsgaSArIFwiX1wiICsgaiwgZmFsc2UsIGkpO1xyXG4gICAgICAgIC8vICAgICAgICAgICAgIHRlbXB0YWJsZS53ZWlnaHQgPSBqIC0gMC41O1xyXG4gICAgXHJcbiAgICAgICAgLy8gICAgICAgICAgICAgdGhpcy5hZGRUYWJsZSh0ZW1wdGFibGUpO1xyXG4gICAgICAgIC8vICAgICAgICAgICAgIHRoaXMuc2V0RXhhY3RXZWlnaHRzKCk7XHJcblxyXG4gICAgICAgIC8vICAgICAgICAgICAgIGlmICh0aGlzLmdldE51bVN0cmFpZ2h0RWRnZXMoKSA+IGJlc3ROdW1PZlN0cmFpZ2h0RWRnZXMpe1xyXG4gICAgICAgIC8vICAgICAgICAgICAgICAgICBiZXN0UG9zaXRpb24gPSBqO1xyXG4gICAgICAgIC8vICAgICAgICAgICAgICAgICBiZXN0TnVtT2ZTdHJhaWdodEVkZ2VzID0gdGhpcy5nZXROdW1TdHJhaWdodEVkZ2VzKCk7XHJcbiAgICAgICAgLy8gICAgICAgICAgICAgICAgIGltcHJvdmVkID0gdHJ1ZTtcclxuICAgICAgICAvLyAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vICAgICAgICAgICAgIHRoaXMudGFibGVzLnNwbGljZSh0aGlzLnRhYmxlcy5pbmRleE9mKHRlbXB0YWJsZSksIDEpO1xyXG4gICAgICAgIC8vICAgICAgICAgICAgIHRhYmxlQ29sLnNwbGljZSh0YWJsZUNvbC5pbmRleE9mKHRlbXB0YWJsZSksIDEpO1xyXG4gICAgICAgIC8vICAgICAgICAgICAgIHRoaXMuc2V0RXhhY3RXZWlnaHRzKCk7XHJcbiAgICAgICAgLy8gICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vICAgICAgICAgaWYgKGJlc3RQb3NpdGlvbiAhPSB1bmRlZmluZWQpe1xyXG4gICAgICAgIC8vICAgICAgICAgICAgIGxldCB0ZW1wdGFibGUgPSBuZXcgVGFibGUoJ2JsYW5rXycgKyBpICsgXCJfXCIgKyBiZXN0UG9zaXRpb24sICdibGFua18nICsgaSArIFwiX1wiICsgYmVzdFBvc2l0aW9uLCBmYWxzZSwgaSk7XHJcbiAgICAgICAgLy8gICAgICAgICAgICAgdGVtcHRhYmxlLndlaWdodCA9IGJlc3RQb3NpdGlvbiAtIDAuNTtcclxuICAgICAgICAvLyAgICAgICAgICAgICB0ZW1wdGFibGUudmlzaWJpbGl0eSA9ICdoaWRkZW4nO1xyXG5cclxuICAgICAgICAvLyAgICAgICAgICAgICB0aGlzLmFkZFRhYmxlKHRlbXB0YWJsZSk7XHJcbiAgICAgICAgLy8gICAgICAgICAgICAgdGhpcy5zZXRFeGFjdFdlaWdodHMoKTtcclxuICAgICAgICAvLyAgICAgICAgICAgICB0aGlzLnVwZGF0ZUdyb3VwQ29vcmRzKCk7XHJcbiAgICAgICAgLy8gICAgICAgICB9ICBcclxuICAgICAgICAvLyAgICAgfVxyXG4gICAgICAgIC8vIH1cclxuXHJcbiAgICAgICAgdGhpcy5hZGp1c3RBdHRyT2Zmc2V0KClcclxuICAgIH1cclxuXHJcbiAgICBnZXRCZW5kTGVmdCh0YWJsZSl7XHJcbiAgICAgICAgbGV0IGRlcHRoID0gdGFibGUuZGVwdGg7XHJcblxyXG4gICAgICAgIGxldCBlZGdlQ29sTGVmdCA9IHRoaXMuZWRnZUluZGV4W2RlcHRoLTFdO1xyXG4gICAgICAgIGxldCBlZGdlc0xlZnQgPSBlZGdlQ29sTGVmdC5maWx0ZXIoZSA9PiBlLnJpZ2h0VGFibGUgPT0gdGFibGUgJiYgIWUuaXNTYW1lUmFua0VkZ2UoKSk7XHJcblxyXG4gICAgICAgIGlmIChlZGdlc0xlZnQubGVuZ3RoID09IDApIHJldHVybiAwXHJcbiAgICAgICAgZWxzZSByZXR1cm4gTWF0aC5hYnMoZWRnZXNMZWZ0Lm1hcChlID0+IGUuZ2V0QmVuZGluZXNzKCkpLnJlZHVjZSgoYSwgYikgPT4ge1xyXG4gICAgICAgICAgICByZXR1cm4gTWF0aC5yb3VuZChhKjEwMDAgKyBiKjEwMDApLzEwMDA7XHJcbiAgICAgICAgfSkpO1xyXG4gICAgfVxyXG5cclxuICAgIGdldEJlbmRSaWdodCh0YWJsZSl7XHJcbiAgICAgICAgbGV0IGRlcHRoID0gdGFibGUuZGVwdGg7XHJcbiAgICAgICAgbGV0IGVkZ2VDb2xSaWdodCA9IHRoaXMuZWRnZUluZGV4W2RlcHRoXTtcclxuICAgICAgICBsZXQgZWRnZXNSaWdodCA9IGVkZ2VDb2xSaWdodC5maWx0ZXIoZSA9PiBlLmxlZnRUYWJsZSA9PSB0YWJsZSAmJiAhZS5pc1NhbWVSYW5rRWRnZSgpKTtcclxuXHJcbiAgICAgICAgaWYgKGVkZ2VzUmlnaHQubGVuZ3RoID09IDApIHJldHVybiAwO1xyXG4gICAgICAgIGVsc2UgcmV0dXJuIE1hdGguYWJzKGVkZ2VzUmlnaHQubWFwKGUgPT4gZS5nZXRCZW5kaW5lc3MoKSkucmVkdWNlKChhLCBiKSA9PiB7XHJcbiAgICAgICAgICAgIHJldHVybiBNYXRoLnJvdW5kKGEqMTAwMCArIGIqMTAwMCkvMTAwMDtcclxuICAgICAgICB9KSk7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0VGFibGVCZW5kaW5lc3ModGFibGUpe1xyXG4gICAgICAgIGxldCBkZXB0aCA9IHRhYmxlLmRlcHRoO1xyXG5cclxuICAgICAgICBpZiAoZGVwdGggPT0gMCkgcmV0dXJuIE1hdGgucm91bmQodGhpcy5nZXRCZW5kUmlnaHQodGFibGUpKjEwMDApLzEwMDA7XHJcbiAgICAgICAgZWxzZSByZXR1cm4gTWF0aC5yb3VuZCh0aGlzLmdldEJlbmRMZWZ0KHRhYmxlKSoxMDAwICsgdGhpcy5nZXRCZW5kUmlnaHQodGFibGUpKjEwMDApLzEwMDA7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0R3JhcGhUb3RhbEVkZ2VCZW5kaW5lc3MoKXtcclxuICAgICAgICByZXR1cm4gTWF0aC5yb3VuZCgxMDAwKnRoaXMudGFibGVzLm1hcCh0ID0+IHRoaXMuZ2V0VGFibGVCZW5kaW5lc3ModCkpLnJlZHVjZSgoYSwgYikgPT4gYSArIGIpKS8xMDAwO1xyXG4gICAgfVxyXG5cclxuICAgIGFkanVzdEF0dHJPZmZzZXQoKXtcclxuICAgICAgICBsZXQgaW1wcm92ZWQgPSB0cnVlO1xyXG4gICAgICAgIGxldCBjeWNsZUluZGV4ID0gMDtcclxuXHJcbiAgICAgICAgbGV0IGdldFVwcGVyQm91bmQgPSAodGFibGVDb2wsIGspID0+IHtcclxuICAgICAgICAgICAgbGV0IHVwcGVyQm91bmQgPSAtMjtcclxuICAgICAgICAgICAgaWYgKGsgPT0gMCkgdXBwZXJCb3VuZCA9IDA7XHJcbiAgICAgICAgICAgIGVsc2UgdXBwZXJCb3VuZCA9IHRhYmxlQ29sW2stMV0udmVydGljYWxBdHRyT2Zmc2V0IC0gdGhpcy5iYXNlUm93RGlzdGFuY2UgKyB0YWJsZUNvbFtrLTFdLmF0dHJpYnV0ZXMubGVuZ3RoICsgMjsgXHJcbiAgICAgICAgICAgIHJldHVybiB1cHBlckJvdW5kO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgbGV0IGdldExvd2VyQm91bmQgPSAodGFibGVDb2wsIGspID0+IHtcclxuICAgICAgICAgICAgbGV0IGxvd2VyQm91bmQgPSAyO1xyXG4gICAgICAgICAgICBpZiAodGFibGVDb2wubGVuZ3RoID09IDEgfHwgdGFibGVDb2xbaysxXSA9PSB1bmRlZmluZWQpIGxvd2VyQm91bmQgPSAyMDsgLy8gcmFuZG9tIGJpZyBudW1iZXJcclxuICAgICAgICAgICAgZWxzZSBsb3dlckJvdW5kID0gdGFibGVDb2xbaysxXS52ZXJ0aWNhbEF0dHJPZmZzZXQgKyB0aGlzLmJhc2VSb3dEaXN0YW5jZSAtIHRhYmxlQ29sW2tdLmF0dHJpYnV0ZXMubGVuZ3RoIC0gMjsgXHJcbiAgICAgICAgICAgIC8vaWYgKHRhYmxlQ29sW2srMV0gIT0gdW5kZWZpbmVkKSBjb25zb2xlLmxvZyh0YWJsZUNvbFtrKzFdLCB0YWJsZUNvbFtrKzFdLnZlcnRpY2FsQXR0ck9mZnNldCwgdGhpcy5iYXNlUm93RGlzdGFuY2UsIHRhYmxlLmF0dHJpYnV0ZXMubGVuZ3RoKVxyXG4gICAgICAgICAgICByZXR1cm4gbG93ZXJCb3VuZFxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgbGV0IHN3aXBlUmlnaHQgPSAoKSA9PiB7XHJcbiAgICAgICAgICAgIGZvciAobGV0IGk9MDsgaTx0aGlzLnRhYmxlSW5kZXgubGVuZ3RoOyBpKyspe1xyXG4gICAgICAgICAgICAgICAgbGV0IHRhYmxlQ29sID0gdGhpcy50YWJsZUluZGV4W2ldO1xyXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgaz0wOyBrPHRhYmxlQ29sLmxlbmd0aDsgaysrKXtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgdGFibGUgPSB0YWJsZUNvbFtrXTtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgY3VyckJlbmRpbmVzc1N1bSA9IHRoaXMuZ2V0VGFibGVCZW5kaW5lc3ModGFibGUpO1xyXG4gICAgICAgICAgICAgICAgICAgIC8vbGV0IGN1cnJCZW5kaW5lc3NTdW0gPSB0aGlzLmdldEJlbmRSaWdodCh0YWJsZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IGN1cnJCZXN0T2Zmc2V0ID0gdGFibGUudmVydGljYWxBdHRyT2Zmc2V0O1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBsZXQgdXBwZXJCb3VuZCA9IGdldFVwcGVyQm91bmQodGFibGVDb2wsIGspO1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCBsb3dlckJvdW5kID0gZ2V0TG93ZXJCb3VuZCh0YWJsZUNvbCwgayk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIC8vIGlmIChpID09IDMgJiYgdGFibGVDb2xbaysxXSAhPSB1bmRlZmluZWQpIGNvbnNvbGUubG9nKHRhYmxlLm5hbWUsICdsb3dlciBib3VuZCcsIGxvd2VyQm91bmQsXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gICAgICduZXh0IG9mZnNldCcsIHRhYmxlQ29sW2srMV0udmVydGljYWxBdHRyT2Zmc2V0LCAnYXR0cmlidXRlcycsIHRhYmxlQ29sW2tdLmF0dHJpYnV0ZXMubGVuZ3RoKVxyXG5cclxuICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBqID0gdXBwZXJCb3VuZDsgaiA8PSBsb3dlckJvdW5kOyBqKyspe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0YWJsZS52ZXJ0aWNhbEF0dHJPZmZzZXQgPSBqO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgdGVtcEJlbmRpbmVzc1N1bSA9IHRoaXMuZ2V0VGFibGVCZW5kaW5lc3ModGFibGUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvL2xldCB0ZW1wQmVuZGluZXNzU3VtID0gdGhpcy5nZXRCZW5kUmlnaHQodGFibGUpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gaWYgKGkgPT0gMykgY29uc29sZS5sb2codGFibGUubmFtZSwgJ2NoYW5nZSBwcm9wb3NhbCcsIGosICdiZW5kcycgLHRlbXBCZW5kaW5lc3NTdW0pXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGVtcEJlbmRpbmVzc1N1bSA8PSBjdXJyQmVuZGluZXNzU3VtKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJCZXN0T2Zmc2V0ID0gajtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJCZW5kaW5lc3NTdW0gPSB0ZW1wQmVuZGluZXNzU3VtO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaW1wcm92ZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gaWYgKGkgPT0gMykgY29uc29sZS5sb2codGFibGUubmFtZSwgJ2NoYW5nZSBhY2NlcHRlZCcpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICBcclxuICAgICAgICAgICAgICAgICAgICB0YWJsZS52ZXJ0aWNhbEF0dHJPZmZzZXQgPSBjdXJyQmVzdE9mZnNldDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgbGV0IHN3aXBlTGVmdCA9ICgpID0+IHtcclxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IHRoaXMudGFibGVJbmRleC5sZW5ndGggLSAxOyBpPjA7IGktLSl7XHJcbiAgICAgICAgICAgICAgICBsZXQgdGFibGVDb2wgPSB0aGlzLnRhYmxlSW5kZXhbaV07XHJcblxyXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgaz10YWJsZUNvbC5sZW5ndGggLSAxOyBrID49IDA7IGstLSl7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IHRhYmxlID0gdGFibGVDb2xba107XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IGN1cnJCZW5kaW5lc3NTdW0gPSB0aGlzLmdldFRhYmxlQmVuZGluZXNzKHRhYmxlKTtcclxuICAgICAgICAgICAgICAgICAgICAvL2xldCBjdXJyQmVuZGluZXNzU3VtID0gdGhpcy5nZXRCZW5kTGVmdCh0YWJsZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IGN1cnJCZXN0T2Zmc2V0ID0gdGFibGUudmVydGljYWxBdHRyT2Zmc2V0O1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBsZXQgdXBwZXJCb3VuZCA9IGdldFVwcGVyQm91bmQodGFibGVDb2wsIGspO1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCBsb3dlckJvdW5kID0gZ2V0TG93ZXJCb3VuZCh0YWJsZUNvbCwgayk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIFxyXG5cclxuICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBqID0gdXBwZXJCb3VuZDsgaiA8PSBsb3dlckJvdW5kOyBqKyspe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0YWJsZS52ZXJ0aWNhbEF0dHJPZmZzZXQgPSBqO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgdGVtcEJlbmRpbmVzc1N1bSA9IHRoaXMuZ2V0VGFibGVCZW5kaW5lc3ModGFibGUpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgLy9pZiAodGFibGUubmFtZSA9PSBcIlQxeTBcIikgY29uc29sZS5sb2coJ3Byb3Bvc2FsJywgaiwgJ3Byb3Bvc2FsIGJlbmQnLCB0ZW1wQmVuZGluZXNzU3VtLCB0aGlzLmJhc2VSb3dEaXN0YW5jZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGVtcEJlbmRpbmVzc1N1bSA8IGN1cnJCZW5kaW5lc3NTdW0pe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY3VyckJlc3RPZmZzZXQgPSBqO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY3VyckJlbmRpbmVzc1N1bSA9IHRlbXBCZW5kaW5lc3NTdW07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICBcclxuICAgICAgICAgICAgICAgICAgICB0YWJsZS52ZXJ0aWNhbEF0dHJPZmZzZXQgPSBjdXJyQmVzdE9mZnNldDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgd2hpbGUgKGN5Y2xlSW5kZXggPCAxMCl7XHJcbiAgICAgICAgICAgIC8vY29uc29sZS5sb2coY3ljbGVJbmRleCwgKGN5Y2xlSW5kZXggJSAyID09IDA/ICdyaWdodCcgOiAnbGVmdCcpLCB0aGlzLmdldEdyYXBoVG90YWxFZGdlQmVuZGluZXNzKCkpO1xyXG4gICAgICAgICAgICBjeWNsZUluZGV4Kys7XHJcblxyXG4gICAgICAgICAgICBpZiAoY3ljbGVJbmRleCAlIDIgPT0gMCkgc3dpcGVSaWdodCgpXHJcbiAgICAgICAgICAgIGVsc2Ugc3dpcGVMZWZ0KClcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMudXBkYXRlR3JvdXBDb29yZHMoKTtcclxuICAgIH1cclxufVxyXG5cclxuIiwiY2xhc3MgR3JhcGhHZW5lcmF0b3Ige1xyXG4gICAgY29uc3RydWN0b3IoZGVwdGg9Mywgc2VlZD1cImhlbGxvXCIsIHRhYmxlRGlzdHJpYnV0aW9uID0gWzIsM10sIGF0dHJpYnV0ZURpc3RyaWJ1dGlvbj1bMSwgNV0sIHNhbWVFZGdlRGlzdHJpYnV0aW9uPTAuMDUsIHJhbmRvbUVkZ2VEaXN0cmlidXRpb249MC4wNSl7XHJcbiAgICAgICAgdGhpcy5kID0gZGVwdGg7XHJcbiAgICAgICAgdGhpcy5zID0gMztcclxuICAgICAgICB0aGlzLmpkID0gMC4xO1xyXG4gICAgICAgIHRoaXMudiA9IHJhbmRvbUVkZ2VEaXN0cmlidXRpb247XHJcbiAgICAgICAgdGhpcy5qcyA9IHNhbWVFZGdlRGlzdHJpYnV0aW9uO1xyXG4gICAgICAgIHRoaXMuYXR0cmlidXRlQ291bnRlciA9IDA7XHJcbiAgICAgICAgdGhpcy5zZWVkID0gc2VlZDtcclxuXHJcbiAgICAgICAgdGhpcy50YWJsZURpc3RyaWJ1dGlvbiA9IHRhYmxlRGlzdHJpYnV0aW9uO1xyXG4gICAgICAgIHRoaXMuYXR0cmlidXRlRGlzdHJpYnV0aW9uID0gYXR0cmlidXRlRGlzdHJpYnV0aW9uO1xyXG5cclxuICAgICAgICAvLyByYW5kb20gbnVtYmVyIGdlbmVyYXRvcnNcclxuICAgICAgICB0aGlzLnJuZyA9IG5ldyBNYXRoLnNlZWRyYW5kb20odGhpcy5zZWVkKTtcclxuICAgICAgICB0aGlzLnRhYmxlRGlzdCA9ICgpID0+IHRhYmxlRGlzdHJpYnV0aW9uWzBdICsgTWF0aC5yb3VuZCh0aGlzLnJuZygpICogKHRhYmxlRGlzdHJpYnV0aW9uWzFdIC0gdGFibGVEaXN0cmlidXRpb25bMF0pKVxyXG4gICAgICAgIHRoaXMuYXR0ckRpc3QgPSAoKSA9PiBhdHRyaWJ1dGVEaXN0cmlidXRpb25bMF0gKyBNYXRoLnJvdW5kKHRoaXMucm5nKCkgKiAoYXR0cmlidXRlRGlzdHJpYnV0aW9uWzFdIC0gYXR0cmlidXRlRGlzdHJpYnV0aW9uWzBdKSlcclxuICAgIH1cclxuXHJcbiAgICBnZW5lcmF0ZSgpe1xyXG4gICAgICAgIGcgPSBuZXcgR3JhcGgoKVxyXG4gICAgICAgIGcuYmFzZVJvd0Rpc3RhbmNlID0gdGhpcy5hdHRyaWJ1dGVEaXN0cmlidXRpb25bMV0gKyAyO1xyXG5cclxuICAgICAgICBmb3IgKHZhciBpPTE7IGk8dGhpcy5kOyBpKyspe1xyXG4gICAgICAgICAgICBnLm5ld0xheWVyKClcclxuICAgICAgICAgICAgZm9yICh2YXIgaj0wOyBqPHRoaXMudGFibGVEaXN0KCk7IGorKyl7XHJcbiAgICAgICAgICAgICAgICBnLmFkZFRhYmxlKHRoaXMuZ2VuZXJhdGVUYWJsZShpLCBqKSlcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5nZW5lcmF0ZVByb2plY3Rpb25zKGcpO1xyXG4gICAgICAgIHRoaXMuZ2VuZXJhdGVKb2lucyhnKTtcclxuICAgICAgICBcclxuICAgICAgICBnLmVuc3VyZVVuaXF1ZUVkZ2VzKCk7XHJcblxyXG4gICAgICAgIHJldHVybiBnO1xyXG4gICAgfVxyXG5cclxuICAgIGdlbmVyYXRlVGFibGUoZGVwdGgsIGluZGV4KXtcclxuICAgICAgICBuYW1lID0gXCJUXCIgKyBkZXB0aCArIFwieVwiICsgaW5kZXhcclxuICAgICAgICB2YXIgbmV3VGFibGUgPSBuZXcgVGFibGUobmFtZSwgbmFtZSwgZmFsc2UsIGRlcHRoKTtcclxuXHJcbiAgICAgICAgZm9yICh2YXIgaT0wOyBpPHRoaXMuYXR0ckRpc3QoKTsgaSsrKXtcclxuICAgICAgICAgICAgbmV3VGFibGUuYWRkQXR0cmlidXRlKFwiYVwiICsgdGhpcy5hdHRyaWJ1dGVDb3VudGVyKTtcclxuICAgICAgICAgICAgdGhpcy5hdHRyaWJ1dGVDb3VudGVyICs9IDE7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gbmV3VGFibGVcclxuICAgIH1cclxuXHJcbiAgICBnZW5lcmF0ZVByb2plY3Rpb25zKGcpe1xyXG4gICAgICAgIGxldCBsYXllcjEgPSBnLnRhYmxlSW5kZXhbMV07XHJcbiAgICAgICAgbGV0IGxheWVyMWF0dHJzID0gW107XHJcbiAgICAgICAgbGV0IHNlbGVjdFRhYmxlID0gbmV3IFRhYmxlKFwic2VsZWN0XCIsIFwiU0VMRUNUXCIsIHRydWUsIDApXHJcbiAgICAgICAgbGV0IHByb2plY3RlZEF0dHJzID0gW107XHJcbiAgICAgICAgbGV0IHByb2plY3RlZCA9IFtdO1xyXG4gICAgICAgIGxldCBwcm9qZWN0ZWRDb3VudCA9IDA7XHJcblxyXG4gICAgICAgIGZvciAobGV0IHQgb2YgbGF5ZXIxKXtcclxuICAgICAgICAgICAgbGV0IGF0dHJzID0gdC5hdHRyaWJ1dGVzO1xyXG4gICAgICAgICAgICBsZXQgc3RyaWN0SW5kZXggPSBNYXRoLmZsb29yKHRoaXMucm5nKCkqYXR0cnMubGVuZ3RoKVxyXG4gICAgICAgICAgICBsZXQgc3RyaWN0ID0gYXR0cnNbc3RyaWN0SW5kZXhdXHJcbiAgICAgICAgICAgIHByb2plY3RlZEF0dHJzLnB1c2goc3RyaWN0KVxyXG4gICAgICAgICAgICBwcm9qZWN0ZWQucHVzaChzdHJpY3QpXHJcblxyXG4gICAgICAgICAgICBmb3IgKGxldCBhdHRyIG9mIGF0dHJzKXtcclxuICAgICAgICAgICAgICAgIGlmIChhdHRyICE9IHN0cmljdCl7XHJcbiAgICAgICAgICAgICAgICAgICAgbGF5ZXIxYXR0cnMucHVzaChuZXcgQXR0cmlidXRlKHQsIGF0dHIpKVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHByb2plY3RlZENvdW50Kys7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBsZXQgY291bnRQcm9qZWN0aW9ucyA9IHRoaXMucyAqIChsYXllcjFhdHRycy5sZW5ndGggKyBwcm9qZWN0ZWRDb3VudClcclxuXHJcbiAgICAgICAgZy5hZGRUYWJsZShzZWxlY3RUYWJsZSlcclxuXHJcbiAgICAgICAgZm9yICg7IHByb2plY3RlZENvdW50PGNvdW50UHJvamVjdGlvbnM7IHByb2plY3RlZENvdW50Kyspe1xyXG4gICAgICAgICAgICBsZXQgYXR0ckluZGV4ID0gTWF0aC5mbG9vcih0aGlzLnJuZygpKmxheWVyMWF0dHJzLmxlbmd0aClcclxuICAgICAgICAgICAgbGV0IGF0dHIgPSBsYXllcjFhdHRyc1thdHRySW5kZXhdXHJcbiAgICAgICAgICAgIGxheWVyMWF0dHJzLnNwbGljZShhdHRySW5kZXgsIDEpXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmb3IgKGxldCBhdHRyIG9mIHByb2plY3RlZEF0dHJzKXtcclxuICAgICAgICAgICAgbGV0IG5ld0F0dHIgPSBuZXcgQXR0cmlidXRlKHNlbGVjdFRhYmxlLCBcImFcIiArIHRoaXMuYXR0cmlidXRlQ291bnRlcisrKVxyXG4gICAgICAgICAgICBuZXdBdHRyLm11dGFibGUgPSBmYWxzZTtcclxuICAgICAgICAgICAgc2VsZWN0VGFibGUuYXR0cmlidXRlcy5wdXNoKG5ld0F0dHIpXHJcbiAgICAgICAgICAgIGcuYWRkRWRnZShuZXcgRWRnZShzZWxlY3RUYWJsZSwgbmV3QXR0ciwgYXR0ci50YWJsZSwgYXR0cikpXHJcbiAgICAgICAgfVxyXG4gICAgXHJcbiAgICAgICAgLy8gd2VpcmQuIG5vdCBmaW5pc2hlZC5cclxuICAgIH1cclxuXHJcbiAgICBnZW5lcmF0ZUludGVyTGF5ZXJKb2lucyhnKXtcclxuICAgICAgICBmb3IgKHZhciBpID0gMTsgaSA8IHRoaXMuZDsgaSsrKXtcclxuICAgICAgICAgICAgbGV0IGxlZnRMYXllciA9IGcudGFibGVJbmRleFtpXTtcclxuICAgICAgICAgICAgbGV0IHJpZ2h0TGF5ZXIgPSBnLnRhYmxlSW5kZXhbaSArIDFdO1xyXG5cclxuICAgICAgICAgICAgbGV0IGxlZnRMYXllckF0dHJzID0gW107XHJcbiAgICAgICAgICAgIGxldCByaWdodExheWVyQXR0cnMgPSBbXTtcclxuXHJcbiAgICAgICAgICAgIGZvciAobGV0IHRhYmxlIG9mIGxlZnRMYXllcil7XHJcbiAgICAgICAgICAgICAgICBsZXQgYXR0cnMgPSB0YWJsZS5hdHRyaWJ1dGVzO1xyXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgYXR0ciBvZiBhdHRycyl7XHJcbiAgICAgICAgICAgICAgICAgICAgbGVmdExheWVyQXR0cnMucHVzaChuZXcgQXR0cmlidXRlKHRhYmxlLCBhdHRyKSlcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgZm9yIChsZXQgdGFibGUgb2YgcmlnaHRMYXllcil7XHJcbiAgICAgICAgICAgICAgICBpZiAobGVmdExheWVyQXR0cnMubGVuZ3RoID09IDApIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgbGV0IGF0dHJzID0gdGFibGUuYXR0cmlidXRlcztcclxuXHJcbiAgICAgICAgICAgICAgICBsZXQgc3RyaWN0ID0gYXR0cnNbTWF0aC5mbG9vcih0aGlzLnJuZygpKmF0dHJzLmxlbmd0aCldXHJcbiAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgIGxldCBsZWZ0SW5kZXggPSBNYXRoLmZsb29yKHRoaXMucm5nKCkqbGVmdExheWVyQXR0cnMubGVuZ3RoKVxyXG4gICAgICAgICAgICAgICAgbGV0IGxlZnQgPSBsZWZ0TGF5ZXJBdHRyc1tsZWZ0SW5kZXhdXHJcbiAgICAgICAgICAgICAgICBsZWZ0TGF5ZXJBdHRycy5zcGxpY2UobGVmdEluZGV4LCAxKVxyXG5cclxuICAgICAgICAgICAgICAgIGcuYWRkRWRnZShuZXcgRWRnZShsZWZ0LnRhYmxlLCBsZWZ0LmF0dHIsIHRhYmxlLCBzdHJpY3QpKVxyXG5cclxuICAgICAgICAgICAgICAgIGxlZnQuZGlmZkVkZ2VzKys7XHJcbiAgICAgICAgICAgICAgICBzdHJpY3QuZGlmZkVkZ2VzKys7XHJcblxyXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgYXR0ciBvZiBhdHRycyl7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGF0dHIgIT0gc3RyaWN0KVxyXG4gICAgICAgICAgICAgICAgICAgICAgICByaWdodExheWVyQXR0cnMucHVzaChuZXcgQXR0cmlidXRlKHRhYmxlLCBhdHRyKSlcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgZm9yIChsZXQgbGVmdCBvZiBsZWZ0TGF5ZXJBdHRycyl7XHJcbiAgICAgICAgICAgICAgICBpZiAocmlnaHRMYXllckF0dHJzLmxlbmd0aCA9PSAwKSBicmVhaztcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLnJuZygpIDwgdGhpcy5qZCl7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IHJpZ2h0SW5kZXggPSBNYXRoLmZsb29yKHRoaXMucm5nKCkqcmlnaHRMYXllckF0dHJzLmxlbmd0aClcclxuICAgICAgICAgICAgICAgICAgICBsZXQgcmlnaHQgPSByaWdodExheWVyQXR0cnNbcmlnaHRJbmRleF1cclxuICAgICAgICAgICAgICAgICAgICByaWdodExheWVyQXR0cnMuc3BsaWNlKHJpZ2h0SW5kZXgsIDEpXHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGcuYWRkRWRnZShuZXcgRWRnZShsZWZ0LnRhYmxlLCBsZWZ0LmF0dHIsIHJpZ2h0LnRhYmxlLCByaWdodC5hdHRyKSlcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgbGVmdC5kaWZmRWRnZXMrKztcclxuICAgICAgICAgICAgICAgICAgICByaWdodC5kaWZmRWRnZXMrKztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBnZW5lcmF0ZUluTGF5ZXJKb2lucygpe1xyXG4gICAgICAgIGZvciAodmFyIGk9MTsgaTx0aGlzLmQ7IGkrKyl7XHJcbiAgICAgICAgICAgIGxldCBsYXllciA9IGcudGFibGVJbmRleFtpXTtcclxuXHJcbiAgICAgICAgICAgIGZvciAobGV0IHQxIG9mIGxheWVyKXtcclxuICAgICAgICAgICAgICAgIGxldCBhdHRyczEgPSBbXTtcclxuICAgICAgICAgICAgICAgIGxldCBhdHRyczIgPSBbXTtcclxuXHJcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBhdHRyIG9mIHQxLmF0dHJpYnV0ZXMpe1xyXG4gICAgICAgICAgICAgICAgICAgIGF0dHJzMS5wdXNoKG5ldyBBdHRyaWJ1dGUodDEsIGF0dHIpKVxyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGZvciAobGV0IHQyIG9mIGxheWVyKXtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodDEgPT0gdDIpIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIGZvciAobGV0IGF0dHIgb2YgdDIuYXR0cmlidXRlcyl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhdHRyLnNhbWVFZGdlcyA9PSAwKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYXR0cnMyLnB1c2gobmV3IEF0dHJpYnV0ZSh0MiwgYXR0cikpXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGZvciAobGV0IGF0dHIxIG9mIGF0dHJzMSl7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGF0dHJzMi5sZW5ndGggPT0gMCkgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMucm5nKCkgPCB0aGlzLmpzKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGF0dHIyaW5kZXggPSBNYXRoLmZsb29yKHRoaXMucm5nKCkqYXR0cnMyLmxlbmd0aClcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGF0dHIyID0gYXR0cnMyW2F0dHIyaW5kZXhdXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJzMi5zcGxpY2UoYXR0cjJpbmRleCwgMSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGcuYWRkRWRnZShuZXcgRWRnZShhdHRyMS50YWJsZSwgYXR0cjEuYXR0ciwgYXR0cjIudGFibGUsIGF0dHIyLmF0dHIpKVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgYXR0cjEuc2FtZUVkZ2VzKys7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGF0dHIyLnNhbWVFZGdlcysrO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBnZW5lcmF0ZVJhbmRvbUpvaW5zKGcpe1xyXG4gICAgICAgIGxldCBsZWZ0QXR0cnMgPSBbXTtcclxuXHJcbiAgICAgICAgZm9yIChsZXQgaT0xOyBpPHRoaXMuZDsgaSsrKXtcclxuICAgICAgICAgICAgbGV0IGN1cnJBdHRycyA9IGcudGFibGVJbmRleFtpXS5tYXAodCA9PiB0LmF0dHJpYnV0ZXMpLmZsYXQoKS5maWx0ZXIoYSA9PiBnLmVkZ2VzLmZpbmQoZSA9PiBlLnJpZ2h0QXR0cmlidXRlID09IGEpID09IHVuZGVmaW5lZClcclxuICAgICAgICAgICAgbGV0IHJpZ2h0QXR0cnMgPSBnLnRhYmxlSW5kZXhbaSArIDFdLm1hcCh0ID0+IHQuYXR0cmlidXRlcykuZmxhdCgpXHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICBmb3IgKGxldCB0YSBvZiBjdXJyQXR0cnMpe1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMucm5nKCkgPCB0aGlzLnYpe1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCByYXRpbyA9IGxlZnRBdHRycy5sZW5ndGggLyAobGVmdEF0dHJzLmxlbmd0aCArIHJpZ2h0QXR0cnMubGVuZ3RoKVxyXG4gICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLnJuZygpIDwgcmF0aW8pe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgdG1wSW5kZXggPSBNYXRoLmZsb29yKHRoaXMucm5nKCkqbGVmdEF0dHJzLmxlbmd0aClcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IG90aGVyID0gbGVmdEF0dHJzW3RtcEluZGV4XVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZWZ0QXR0cnMuc3BsaWNlKHRtcEluZGV4LCAxKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBnLmFkZEVkZ2UobmV3IEVkZ2Uob3RoZXIudGFibGUsIG90aGVyLCB0YS50YWJsZSwgdGEpKVxyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgbGVmdEF0dHJzID0gY3VyckF0dHJzLmZpbHRlcihhID0+IGcuZWRnZXMuZmluZChlID0+IGUubGVmdEF0dHJpYnV0ZSA9PSBhKSA9PSB1bmRlZmluZWQpO1xyXG4gICAgICAgICAgICBjdXJyQXR0cnMgPSBbXTtcclxuICAgICAgICAgICAgcmlnaHRBdHRycyA9IFtdO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBnZW5lcmF0ZUpvaW5zKGcpe1xyXG4gICAgICAgIHRoaXMuZ2VuZXJhdGVJbnRlckxheWVySm9pbnMoZyk7XHJcbiAgICAgICAgdGhpcy5nZW5lcmF0ZUluTGF5ZXJKb2lucyhnKTtcclxuICAgICAgICB0aGlzLmdlbmVyYXRlUmFuZG9tSm9pbnMoZyk7XHJcbiAgICB9XHJcbn0iLCJjbGFzcyBHcm91cCB7XG4gICAgY29uc3RydWN0b3IoKXtcbiAgICAgICAgdGhpcy50YWJsZXMgPSBbXTtcbiAgICAgICAgdGhpcy5jb29yZHMgPSBbXTtcbiAgICAgICAgdGhpcy54X2Nvb3JkID0gMDtcbiAgICAgICAgdGhpcy55X2Nvb3JkID0gMDtcbiAgICAgICAgdGhpcy53aWR0aF9jb29yZCA9IDA7XG4gICAgICAgIHRoaXMuaGVpZ2h0X2Nvb3JkID0gMDtcbiAgICAgICAgdGhpcy5pZCA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5tYXJnaW4gPSA3O1xuICAgICAgICB0aGlzLmdyb3VwSGVhZGVyID0gXCJjb3VudFwiO1xuICAgICAgICB0aGlzLmdyb3VwSGVhZGVyVGFibGUgPSBuZXcgVGFibGUodGhpcy5ncm91cEhlYWRlciwgdGhpcy5ncm91cEhlYWRlciwgdHJ1ZSwgMjAsIFwiZ3JvdXBoZWFkZXJcIik7XG4gICAgICAgIHRoaXMuYWRkVGFibGUodGhpcy5ncm91cEhlYWRlclRhYmxlKTtcblxuICAgICAgICB0aGlzLmNvb3JkcyA9IFtdO1xuICAgIH1cblxuICAgIGFkZFRhYmxlKHRhYmxlKXtcbiAgICAgICAgdGFibGUuZ3JvdXAgPSB0aGlzO1xuICAgICAgICB0YWJsZS5ncm91cHMucHVzaCh0aGlzKTtcbiAgICAgICAgdGhpcy50YWJsZXMucHVzaCh0YWJsZSk7XG4gICAgICAgIHRoaXMudXBkYXRlQ29vcmRzKCk7XG4gICAgfVxuXG4gICAgdXBkYXRlQ29vcmRzUHJlY2lzZSgpe1xuICAgICAgICB0aGlzLmNvb3JkcyA9IFtdO1xuICAgICAgICAvLyB0aGlzIHdpbGwgbmVlZCB0byBiZSBjaGFuZ2VkIGluIGNhc2Ugd2UgZGVjaWRlIHRvIHVzZSBhIHZlcnRpY2FsIHBvc2l0aW9uaW5nIHRoYXQgaXMgbm90IGZpeGVkXG5cbiAgICAgICAgbGV0IGxlZnRNYXhEZXB0aCA9IE1hdGgubWluLmFwcGx5KDAsIHRoaXMudGFibGVzLm1hcCh0ID0+IHQuZGVwdGgpKTtcbiAgICAgICAgbGV0IGxlZnRUYWJsZSA9IHRoaXMudGFibGVzLmZpbmQodCA9PiB0LmRlcHRoID09IGxlZnRNYXhEZXB0aCk7XG4gICAgICAgIHRoaXMueF9jb29yZCA9IGxlZnRUYWJsZS5kZXB0aDtcblxuICAgICAgICBsZXQgdG9wTWF4ID0gTWF0aC5taW4uYXBwbHkoMCwgdGhpcy50YWJsZXMubWFwKHQgPT4gdC53ZWlnaHQpKTtcbiAgICAgICAgbGV0IHRvcFRhYmxlID0gdGhpcy50YWJsZXMuZmluZCh0ID0+IHQud2VpZ2h0ID09IHRvcE1heCk7XG4gICAgICAgIHRoaXMueV9jb29yZCA9IHRvcFRhYmxlLndlaWdodDtcblxuICAgICAgICBsZXQgcmlnaHRNYXggPSBNYXRoLm1heC5hcHBseSgwLCB0aGlzLnRhYmxlcy5tYXAodCA9PiB0LmRlcHRoKSk7XG4gICAgICAgIGxldCByaWdodFRhYmxlID0gdGhpcy50YWJsZXMuZmluZCh0ID0+IHQuZGVwdGggPT0gcmlnaHRNYXgpO1xuICAgICAgICB0aGlzLndpZHRoX2Nvb3JkID0gcmlnaHRUYWJsZS5kZXB0aCAtIGxlZnRUYWJsZS5kZXB0aDtcbiAgICAgICAgXG4gICAgICAgIGxldCBib3R0b21NYXggPSBNYXRoLm1heC5hcHBseSgwLCB0aGlzLnRhYmxlcy5tYXAodCA9PiB0LndlaWdodCkpO1xuICAgICAgICBsZXQgYm90dG9tVGFibGUgPSB0aGlzLnRhYmxlcy5maW5kKHQgPT4gdC53ZWlnaHQgPT0gYm90dG9tTWF4KTtcbiAgICAgICAgdGhpcy5oZWlnaHRfY29vcmQgPSBib3R0b21UYWJsZS53ZWlnaHQgLSB0b3BUYWJsZS53ZWlnaHQ7XG5cbiAgICAgICAgbGV0IGRlcHRocmFuZ2UgPSBbbGVmdFRhYmxlLmRlcHRoLCByaWdodFRhYmxlLmRlcHRoXTtcbiAgICAgICAgXG4gICAgICAgIGZvciAobGV0IGk9MDsgaTxkZXB0aHJhbmdlLmxlbmd0aDsgaSsrKXtcbiAgICAgICAgICAgIGxldCBjdXJfZCA9IGRlcHRocmFuZ2VbaV07XG4gICAgICAgICAgICBsZXQgbnVtdGhpc0RlcHRoID0gTWF0aC5taW4uYXBwbHkoMCwgdGhpcy50YWJsZXMuZmlsdGVyKHQgPT4gdC5kZXB0aCA9PSBjdXJfZCkubWFwKGQgPT4gZC53ZWlnaHQpKTtcbiAgICAgICAgICAgIGxldCB0b3BUYWJsZSA9IHRoaXMudGFibGVzLmZpbmQodCA9PiB0LmRlcHRoID09IGN1cl9kICYmIHQud2VpZ2h0ID09IG51bXRoaXNEZXB0aCk7XG5cbiAgICAgICAgICAgIHRoaXMuY29vcmRzLnB1c2goW3RvcFRhYmxlLmRlcHRoKmRlcHRoX2Rpc3RhbmNlIC0gdGhpcy5tYXJnaW4sIHRvcFRhYmxlLndlaWdodCp0YWJsZV92ZXJ0X3NwYWNlICsgdG9wVGFibGUudmVydGljYWxBdHRyT2Zmc2V0KmF0dHJfaGVpZ2h0IC0gdGhpcy5tYXJnaW5dKVxuICAgICAgICAgICAgdGhpcy5jb29yZHMucHVzaChbdG9wVGFibGUuZGVwdGgqZGVwdGhfZGlzdGFuY2UgKyB0YWJsZV93aWR0aCArIHRoaXMubWFyZ2luLCB0b3BUYWJsZS53ZWlnaHQqdGFibGVfdmVydF9zcGFjZSArIHRvcFRhYmxlLnZlcnRpY2FsQXR0ck9mZnNldCphdHRyX2hlaWdodCAtIHRoaXMubWFyZ2luXSlcbiAgICAgICAgfVxuXG4gICAgICAgIGZvciAobGV0IGk9ZGVwdGhyYW5nZS5sZW5ndGggLSAxOyBpPj0wOyBpLS0pe1xuICAgICAgICAgICAgbGV0IGN1cl9kID0gZGVwdGhyYW5nZVtpXTtcbiAgICAgICAgICAgIGxldCBudW10aGlzRGVwdGggPSBNYXRoLm1heC5hcHBseSgwLCB0aGlzLnRhYmxlcy5maWx0ZXIodCA9PiB0LmRlcHRoID09IGN1cl9kKS5tYXAoZCA9PiBkLndlaWdodCkpO1xuICAgICAgICAgICAgbGV0IGJvdHRvbVRhYmxlID0gdGhpcy50YWJsZXMuZmluZCh0ID0+IHQuZGVwdGggPT0gY3VyX2QgJiYgdC53ZWlnaHQgPT0gbnVtdGhpc0RlcHRoKTtcblxuICAgICAgICAgICAgdGhpcy5jb29yZHMucHVzaChbYm90dG9tVGFibGUuZGVwdGgqZGVwdGhfZGlzdGFuY2UgKyB0YWJsZV93aWR0aCArIHRoaXMubWFyZ2luLCBib3R0b21UYWJsZS53ZWlnaHQqdGFibGVfdmVydF9zcGFjZSArICgxICsgYm90dG9tVGFibGUuYXR0cmlidXRlcy5sZW5ndGgpKmF0dHJfaGVpZ2h0ICsgYm90dG9tVGFibGUudmVydGljYWxBdHRyT2Zmc2V0KmF0dHJfaGVpZ2h0ICsgdGhpcy5tYXJnaW5dKVxuICAgICAgICAgICAgdGhpcy5jb29yZHMucHVzaChbYm90dG9tVGFibGUuZGVwdGgqZGVwdGhfZGlzdGFuY2UgLSB0aGlzLm1hcmdpbiwgYm90dG9tVGFibGUud2VpZ2h0KnRhYmxlX3ZlcnRfc3BhY2UgKyAoMSArIGJvdHRvbVRhYmxlLmF0dHJpYnV0ZXMubGVuZ3RoKSphdHRyX2hlaWdodCArIGJvdHRvbVRhYmxlLnZlcnRpY2FsQXR0ck9mZnNldCphdHRyX2hlaWdodCArIHRoaXMubWFyZ2luXSlcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuY29vcmRzLnB1c2godGhpcy5jb29yZHNbMF0pO1xuICAgIH1cblxuICAgIHVwZGF0ZUNvb3Jkcygpe1xuICAgICAgICB0aGlzLmNvb3JkcyA9IFtdO1xuXG4gICAgICAgIGxldCBsZWZ0TWF4RGVwdGggPSBNYXRoLm1pbi5hcHBseSgwLCB0aGlzLnRhYmxlcy5tYXAodCA9PiB0LmRlcHRoKSk7XG4gICAgICAgIGxldCBsZWZ0VGFibGUgPSB0aGlzLnRhYmxlcy5maW5kKHQgPT4gdC5kZXB0aCA9PSBsZWZ0TWF4RGVwdGgpO1xuICAgICAgICB0aGlzLnhfY29vcmQgPSBsZWZ0VGFibGUuZGVwdGg7XG5cbiAgICAgICAgbGV0IHRvcE1heCA9IE1hdGgubWluLmFwcGx5KDAsIHRoaXMudGFibGVzLm1hcCh0ID0+IHQud2VpZ2h0KSk7XG4gICAgICAgIGxldCB0b3BUYWJsZSA9IHRoaXMudGFibGVzLmZpbmQodCA9PiB0LndlaWdodCA9PSB0b3BNYXgpO1xuICAgICAgICB0aGlzLnlfY29vcmQgPSB0b3BUYWJsZS53ZWlnaHQ7XG5cbiAgICAgICAgbGV0IHJpZ2h0TWF4ID0gTWF0aC5tYXguYXBwbHkoMCwgdGhpcy50YWJsZXMubWFwKHQgPT4gdC5kZXB0aCkpO1xuICAgICAgICBsZXQgcmlnaHRUYWJsZSA9IHRoaXMudGFibGVzLmZpbmQodCA9PiB0LmRlcHRoID09IHJpZ2h0TWF4KTtcbiAgICAgICAgdGhpcy53aWR0aF9jb29yZCA9IHJpZ2h0VGFibGUuZGVwdGggLSBsZWZ0VGFibGUuZGVwdGg7XG4gICAgICAgIFxuICAgICAgICBsZXQgYm90dG9tTWF4ID0gTWF0aC5tYXguYXBwbHkoMCwgdGhpcy50YWJsZXMubWFwKHQgPT4gdC53ZWlnaHQpKTtcbiAgICAgICAgbGV0IGJvdHRvbVRhYmxlID0gdGhpcy50YWJsZXMuZmluZCh0ID0+IHQud2VpZ2h0ID09IGJvdHRvbU1heCk7XG4gICAgICAgIHRoaXMuaGVpZ2h0X2Nvb3JkID0gYm90dG9tVGFibGUud2VpZ2h0IC0gdG9wVGFibGUud2VpZ2h0O1xuICAgICAgICBcbiAgICAgICAgdGhpcy5jb29yZHMucHVzaChbbGVmdFRhYmxlLmRlcHRoKmRlcHRoX2Rpc3RhbmNlIC0gdGhpcy5tYXJnaW4sIHRvcFRhYmxlLndlaWdodCp0YWJsZV92ZXJ0X3NwYWNlICsgdG9wVGFibGUudmVydGljYWxBdHRyT2Zmc2V0KmF0dHJfaGVpZ2h0IC0gdGhpcy5tYXJnaW5dKVxuICAgICAgICB0aGlzLmNvb3Jkcy5wdXNoKFtsZWZ0VGFibGUuZGVwdGgqZGVwdGhfZGlzdGFuY2UgKyB0aGlzLm1hcmdpbiArIHRoaXMud2lkdGhfY29vcmQqZGVwdGhfZGlzdGFuY2UgKyB0YWJsZV93aWR0aCwgdG9wVGFibGUud2VpZ2h0KnRhYmxlX3ZlcnRfc3BhY2UgKyB0b3BUYWJsZS52ZXJ0aWNhbEF0dHJPZmZzZXQqYXR0cl9oZWlnaHQgLSB0aGlzLm1hcmdpbl0pXG4gICAgICAgIHRoaXMuY29vcmRzLnB1c2goW2xlZnRUYWJsZS5kZXB0aCpkZXB0aF9kaXN0YW5jZSArIHRoaXMubWFyZ2luICsgdGhpcy53aWR0aF9jb29yZCpkZXB0aF9kaXN0YW5jZSArIHRhYmxlX3dpZHRoLCBib3R0b21UYWJsZS53ZWlnaHQqdGFibGVfdmVydF9zcGFjZSArICgxICsgYm90dG9tVGFibGUuYXR0cmlidXRlcy5sZW5ndGgpKmF0dHJfaGVpZ2h0ICsgYm90dG9tVGFibGUudmVydGljYWxBdHRyT2Zmc2V0KmF0dHJfaGVpZ2h0ICsgdGhpcy5tYXJnaW5dKVxuICAgICAgICB0aGlzLmNvb3Jkcy5wdXNoKFtsZWZ0VGFibGUuZGVwdGgqZGVwdGhfZGlzdGFuY2UgLSB0aGlzLm1hcmdpbiwgYm90dG9tVGFibGUud2VpZ2h0KnRhYmxlX3ZlcnRfc3BhY2UgKyAoMSArIGJvdHRvbVRhYmxlLmF0dHJpYnV0ZXMubGVuZ3RoKSphdHRyX2hlaWdodCArIGJvdHRvbVRhYmxlLnZlcnRpY2FsQXR0ck9mZnNldCphdHRyX2hlaWdodCArIHRoaXMubWFyZ2luXSlcbiAgICAgICAgXG4gICAgICAgIHRoaXMuY29vcmRzLnB1c2godGhpcy5jb29yZHNbMF0pO1xuXG4gICAgICAgIHRoaXMuZ3JvdXBIZWFkZXJUYWJsZS5kZXB0aCA9IGxlZnRNYXhEZXB0aDtcbiAgICB9XG59IiwiY2xhc3MgTFBCZW5kaW5lc3Mge1xuICAgIGNvbnN0cnVjdG9yIChnKSB7XG4gICAgICAgIHRoaXMuZyA9IGc7XG4gICAgICAgIHRoaXMubWlwID0gdHJ1ZTtcbiAgICAgICAgdGhpcy52ZXJib3NlID0gZmFsc2U7XG4gICAgICAgIHRoaXMuZWxhcHNlZFRpbWUgPSAwXG4gICAgfVxuXG4gICAgLy8gaXNNaXAgKGxwKSB7XG4gICAgLy8gICAgIHJldHVybiBnbHBfZ2V0X251bV9pbnQobHApICsgZ2xwX2dldF9udW1fYmluKGxwKSA+IDA7XG4gICAgLy8gICB9O1xuXG4gICAgLy8gYXN5bmMgYXJyYW5nZSgpe1xuXG4gICAgLy8gICAgIGdscF9zZXRfcHJpbnRfZnVuYyhjb25zb2xlLmxvZylcblxuICAgIC8vICAgICBsZXQgY29kZSA9IFwidmFyIHgxID49IDA7IFxcbiBcXFxuICAgIC8vICAgICAgICAgdmFyIHgyID49IDA7IFxcbiBcXFxuICAgIC8vICAgICAgICAgXFxuIFxcXG4gICAgLy8gICAgICAgICBtYXhpbWl6ZSB6OiAgICAgMyp4MSArIDIqeDI7IFxcbiBcXFxuICAgIC8vICAgICAgICAgXFxuIFxcXG4gICAgLy8gICAgICAgICBzdWJqZWN0IHRvIGMxMTogICB4MSArICAgeDIgPD0gIDk7IFxcbiBcXFxuICAgIC8vICAgICAgICAgc3ViamVjdCB0byBjMTI6IDMqeDEgKyAgIHgyIDw9IDE4OyBcXG4gXFxcbiAgICAvLyAgICAgICAgIHN1YmplY3QgdG8gYzEzOiAgIHgxICAgICAgICA8PSAgNzsgXFxuIFxcXG4gICAgLy8gICAgICAgICBzdWJqZWN0IHRvIGMxNDogICAgICAgICAgeDIgPD0gIDY7IFxcbiBcXFxuICAgIC8vICAgICAgICAgXFxuIFxcXG4gICAgLy8gICAgICAgICBlbmQ7XCJcblxuICAgIC8vICAgICB2YXIgd29ya3NwYWNlID0gZ2xwX21wbF9hbGxvY193a3NwKCk7XG4gICAgLy8gICAgIHZhciBscCA9IGdscF9jcmVhdGVfcHJvYigpO1xuICAgIC8vICAgICB2YXIgbW9kZWxuYW1lID0gXCJ0ZXN0bW9kZWxcIlxuICAgIC8vICAgICB2YXIgaXNNaXAgPSB0aGlzLmlzTWlwKGxwKTtcblxuICAgIC8vICAgICBnbHBfbXBsX3JlYWRfbW9kZWxfZnJvbV9zdHJpbmcod29ya3NwYWNlLCBtb2RlbG5hbWUsIGNvZGUpO1xuICAgIC8vICAgICBnbHBfbXBsX2dlbmVyYXRlKHdvcmtzcGFjZSwgbW9kZWxuYW1lLCBjb25zb2xlLmxvZywgdW5kZWZpbmVkKTtcbiAgICAvLyAgICAgZ2xwX21wbF9idWlsZF9wcm9iKHdvcmtzcGFjZSwgbHApO1xuICAgIC8vICAgICBnbHBfc2NhbGVfcHJvYihscCwgR0xQX1NGX0FVVE8pO1xuXG4gICAgLy8gICAgIGlmICghaXNNaXApIHtcbiAgICAvLyAgICAgICAgIGNvbnNvbGUubG9nKFwiU29sdmluZyB0aGUgbW9kZWwgdXNpbmcgdGhlIHNpbXBsZXggb3B0aW1pemVyXCIpO1xuICAgIC8vICAgICAgICAgdmFyIHNtY3AgPSBuZXcgU01DUCh7cHJlc29sdmU6IEdMUF9PTn0pO1xuICAgIC8vICAgICAgICAgdmFyIGdscGtTdGF0dXMgPSBnbHBfc2ltcGxleChscCwgc21jcCk7XG4gICAgLy8gICAgICAgICAvL3ZhciBzdGF0dXMgPSBnZXRMcFN0YXR1cyhnbHBrU3RhdHVzLCBscCk7XG4gICAgLy8gICAgICAgfSBlbHNlIHtcbiAgICAvLyAgICAgICAgIGNvbnNvbGUubG9nKFwiVGhlIG1vZGVsIGhhcyBpbnRlZ2VyIHZhcmlhYmxlczogc29sdmluZyB0aGUgbW9kZWwgdXNpbmcgdGhlIG1peGVkLWludGVnZXIgb3B0aW1pemVyXCIpO1xuICAgIC8vICAgICAgICAgdmFyIGlvY3AgPSBuZXcgSU9DUCh7cHJlc29sdmU6IEdMUF9PTn0pO1xuICAgIC8vICAgICAgICAgdmFyIGdscGtTdGF0dXMgPSBnbHBfaW50b3B0KGxwLCBpb2NwKTtcbiAgICAvLyAgICAgICAgIC8vdmFyIHN0YXR1cyA9IGdldE1pcFN0YXR1cyhnbHBrU3RhdHVzLCBscCk7XG4gICAgLy8gICAgICAgfVxuXG4gICAgLy8gICAgIGdscF9tcGxfcG9zdHNvbHZlKHdvcmtzcGFjZSwgbHAsIHRoaXMuaXNNaXAobHApID8gR0xQX01JUCA6IEdMUF9TT0wpO1xuXG4gICAgLy8gICAgIGNvbnNvbGUubG9nKCdpc21pcCcsIGlzTWlwKVxuICAgIC8vICAgICBmb3IgKHZhciBjID0gMTsgYyA8PSBnbHBfZ2V0X251bV9jb2xzKGxwKTsgYysrKSB7XG4gICAgLy8gICAgICAgICBjb25zb2xlLmxvZyhnbHBfZ2V0X2NvbF9uYW1lKGxwLCBjKSlcbiAgICAvLyAgICAgICAgIGNvbnNvbGUubG9nKGlzTWlwID8gZ2xwX21pcF9jb2xfdmFsKGxwLCBjKSA6IGdscF9nZXRfY29sX3ByaW0obHAsIGMpKVxuICAgIC8vICAgICB9XG4gICAgLy8gfVxuXG4gICAgYXN5bmMgYXJyYW5nZSgpe1xuXG4gICAgICAgIGxldCBzdGFydFRpbWUgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKVxuXG4gICAgICAgIC8vIGJ1aWxkIG1vZGVsIGZyb20gZ3JhcGhcbiAgICAgICAgbGV0IG1vZGVsID0ge31cblxuICAgICAgICB0aGlzLmZpbGxNb2RlbChtb2RlbClcbiAgICAgICAgbGV0IHByb2IgPSB0aGlzLm1vZGVsVG9TdHJpbmcobW9kZWwpXG5cbiAgICAgICAgLy8gc29sdmVcbiAgICAgICAgbGV0IHJlc3VsdCA9IHt9LCBvYmplY3RpdmUsIGk7XG5cbiAgICAgICAgaWYgKHRoaXMudmVyYm9zZSkgZ2xwX3NldF9wcmludF9mdW5jKGNvbnNvbGUubG9nKTtcblxuICAgICAgICBsZXQgbHAgPSBnbHBfY3JlYXRlX3Byb2IoKTtcbiAgICAgICAgZ2xwX3JlYWRfbHBfZnJvbV9zdHJpbmcobHAsIG51bGwsIHByb2IpO1xuXG4gICAgICAgIGdscF9zY2FsZV9wcm9iKGxwLCBHTFBfU0ZfQVVUTyk7XG4gICAgICAgICAgICBcbiAgICAgICAgbGV0IHNtY3AgPSBuZXcgU01DUCh7cHJlc29sdmU6IEdMUF9PTn0pO1xuICAgICAgICBnbHBfc2ltcGxleChscCwgc21jcCk7XG5cbiAgICAgICAgaWYgKHRoaXMubWlwKXtcbiAgICAgICAgICAgIGdscF9pbnRvcHQobHApO1xuICAgICAgICAgICAgb2JqZWN0aXZlID0gZ2xwX21pcF9vYmpfdmFsKGxwKTtcblxuICAgICAgICAgICAgZm9yKGkgPSAxOyBpIDw9IGdscF9nZXRfbnVtX2NvbHMobHApOyBpKyspe1xuICAgICAgICAgICAgICAgIHJlc3VsdFtnbHBfZ2V0X2NvbF9uYW1lKGxwLCBpKV0gPSBnbHBfbWlwX2NvbF92YWwobHAsIGkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgb2JqZWN0aXZlID0gZ2xwX2dldF9vYmpfdmFsKGxwKTtcbiAgICAgICAgICAgIGZvcihpID0gMTsgaSA8PSBnbHBfZ2V0X251bV9jb2xzKGxwKTsgaSsrKXtcbiAgICAgICAgICAgICAgICByZXN1bHRbZ2xwX2dldF9jb2xfbmFtZShscCwgaSldID0gZ2xwX2dldF9jb2xfcHJpbSAobHAsIGkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5hcHBseV9zb2x1dGlvbihyZXN1bHQpXG5cbiAgICAgICAgdGhpcy5lbGFwc2VkVGltZSA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpIC0gc3RhcnRUaW1lXG4gICAgICAgIFxuICAgIH1cblxuICAgIGZpbGxNb2RlbChtb2RlbCl7XG4gICAgICAgIG1vZGVsLm1pbmltaXplID0gXCJNaW5pbWl6ZSBcXG5cIlxuICAgICAgICBtb2RlbC5zdWJqZWN0VG8gPSBcIlN1YmplY3QgVG8gXFxuXCJcbiAgICAgICAgbW9kZWwuYm91bmRzID0gXCJcXG5Cb3VuZHMgXFxuXCJcbiAgICAgICAgLy9tb2RlbC5ib3VuZHMgPSBcIlwiXG5cbiAgICAgICAgZm9yIChsZXQgZSBvZiB0aGlzLmcuZWRnZXMpe1xuICAgICAgICAgICAgaWYgKHRoaXMuaXNTYW1lUmFua0VkZ2UoZSkpIGNvbnRpbnVlXG5cbiAgICAgICAgICAgIG1vZGVsLm1pbmltaXplICs9IFwiYmVuZF9cIiArIGUubGVmdEF0dHJpYnV0ZS5uYW1lICsgXCJfXCIgKyBlLnJpZ2h0QXR0cmlidXRlLm5hbWUgKyBcIiArIFwiXG5cbiAgICAgICAgICAgIG1vZGVsLnN1YmplY3RUbyArPSBcbiAgICAgICAgICAgICAgICBcInlfXCIgKyBlLmxlZnRBdHRyaWJ1dGUubmFtZSArIFwiIC0gXCIgKyBcbiAgICAgICAgICAgICAgICBcInlfXCIgKyBlLnJpZ2h0QXR0cmlidXRlLm5hbWUgKyBcIiAtIFwiICsgXG4gICAgICAgICAgICAgICAgXCJiZW5kX1wiICsgZS5sZWZ0QXR0cmlidXRlLm5hbWUgKyBcIl9cIiArIGUucmlnaHRBdHRyaWJ1dGUubmFtZSArXG4gICAgICAgICAgICAgICAgXCIgPD0gMFxcblwiXG5cbiAgICAgICAgICAgIG1vZGVsLnN1YmplY3RUbyArPSBcbiAgICAgICAgICAgICAgICBcInlfXCIgKyBlLnJpZ2h0QXR0cmlidXRlLm5hbWUgKyBcIiAtIFwiICsgXG4gICAgICAgICAgICAgICAgXCJ5X1wiICsgZS5sZWZ0QXR0cmlidXRlLm5hbWUgKyBcIiAtIFwiICsgXG4gICAgICAgICAgICAgICAgXCJiZW5kX1wiICsgZS5sZWZ0QXR0cmlidXRlLm5hbWUgKyBcIl9cIiArIGUucmlnaHRBdHRyaWJ1dGUubmFtZSArXG4gICAgICAgICAgICAgICAgXCIgPD0gMFxcblwiXG4gICAgICAgIH1cblxuICAgICAgICBmb3IgKGxldCBpPTA7IGk8dGhpcy5nLnRhYmxlSW5kZXgubGVuZ3RoOyBpKyspe1xuICAgICAgICAgICAgbGV0IHRhYmxlQ29sID0gdGhpcy5nLnRhYmxlSW5kZXhbaV07XG4gICAgICAgICAgICBmb3IgKGxldCBqPTA7IGo8dGFibGVDb2wubGVuZ3RoIC0gMTsgaisrKXtcbiAgICAgICAgICAgICAgICBsZXQgdCA9IHRhYmxlQ29sW2pdO1xuICAgICAgICAgICAgICAgIGxldCB0MiA9IHRhYmxlQ29sW2orMV07XG4gICAgICAgICAgICAgICAgbW9kZWwuc3ViamVjdFRvICs9IFwieV9cIiArIHQyLm5hbWUgKyBcIiAtIHlfXCIgKyB0Lm5hbWUgKyBcIiA+IFwiICsgKDIgKyB0LmF0dHJpYnV0ZXMubGVuZ3RoKSArIFwiXFxuXCJcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGZvciAobGV0IHQgb2YgdGhpcy5nLnRhYmxlcyl7XG4gICAgICAgICAgICBmb3IgKGxldCBpPTA7IGk8dC5hdHRyaWJ1dGVzLmxlbmd0aDsgaSsrKXtcbiAgICAgICAgICAgICAgICBsZXQgYXR0ciA9IHQuYXR0cmlidXRlc1tpXTtcbiAgICAgICAgICAgICAgICBtb2RlbC5zdWJqZWN0VG8gKz0gXCJ5X1wiICsgYXR0ci5uYW1lICsgXCIgLSB5X1wiICsgdC5uYW1lICsgXCIgPSBcIiArIChpICsgMSkgKyBcIlxcblwiXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvL21vZGVsLnN1YmplY3RUbyArPSBcInlfc2VsZWN0ID0gNFxcblwiXG5cbiAgICAgICAgbW9kZWwubWluaW1pemUgPSBtb2RlbC5taW5pbWl6ZS5zdWJzdHJpbmcoMCwgbW9kZWwubWluaW1pemUubGVuZ3RoIC0gMikgKyBcIlxcblxcblwiXG5cbiAgICB9XG5cbiAgICBpc1NhbWVSYW5rRWRnZShlZGdlKXtcbiAgICAgICAgcmV0dXJuIGVkZ2UubGVmdFRhYmxlLmRlcHRoID09IGVkZ2UucmlnaHRUYWJsZS5kZXB0aFxuICAgIH1cblxuICAgIG1vZGVsVG9TdHJpbmcobW9kZWwpe1xuICAgICAgICByZXR1cm4gbW9kZWwubWluaW1pemUgKyBtb2RlbC5zdWJqZWN0VG8gKyBtb2RlbC5ib3VuZHMgKyAnXFxuRW5kXFxuJ1xuICAgIH1cblxuICAgIGFwcGx5X3NvbHV0aW9uKHNvbHV0aW9uKXtcbiAgICAgICAgZm9yIChsZXQgaT0wOyBpPHRoaXMuZy50YWJsZUluZGV4Lmxlbmd0aDsgaSsrKXtcbiAgICAgICAgICAgIGxldCB0YWJsZUNvbCA9IHRoaXMuZy50YWJsZUluZGV4W2ldO1xuICAgICAgICAgICAgZm9yIChsZXQgaj0wOyBqPHRhYmxlQ29sLmxlbmd0aDsgaisrKXtcbiAgICAgICAgICAgICAgICBsZXQgdCA9IHRhYmxlQ29sW2pdO1xuXG4gICAgICAgICAgICAgICAgbGV0IHZhbCA9IHNvbHV0aW9uW1wieV9cIiArIHQubmFtZV1cbiAgICAgICAgICAgICAgICB0LnZlcnRpY2FsQXR0ck9mZnNldCA9IHZhbCAtIHQud2VpZ2h0ICogdGhpcy5nLmJhc2VSb3dEaXN0YW5jZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbn0iLCJjbGFzcyBMUEJlbmRpbmVzc0NvbWJpbmVkIHtcclxuICAgIGNvbnN0cnVjdG9yIChnKSB7XHJcbiAgICAgICAgdGhpcy5nID0gZztcclxuICAgICAgICB0aGlzLm1pcCA9IHRydWU7XHJcbiAgICAgICAgdGhpcy52ZXJib3NlID0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy5lbGFwc2VkVGltZSA9IDBcclxuICAgIH1cclxuXHJcbiAgICBhc3luYyBhcnJhbmdlKCl7XHJcblxyXG4gICAgICAgIGxldCBzdGFydFRpbWUgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKVxyXG5cclxuICAgICAgICAvLyBidWlsZCBtb2RlbCBmcm9tIGdyYXBoXHJcbiAgICAgICAgbGV0IG1vZGVsID0ge31cclxuXHJcbiAgICAgICAgdGhpcy5maWxsTW9kZWwobW9kZWwpXHJcbiAgICAgICAgbGV0IHByb2IgPSB0aGlzLm1vZGVsVG9TdHJpbmcobW9kZWwpXHJcbiAgICAgICAgLy9jb25zb2xlLmxvZyhwcm9iKVxyXG5cclxuICAgICAgICAvLyBzb2x2ZVxyXG4gICAgICAgIGxldCByZXN1bHQgPSB7fSwgb2JqZWN0aXZlLCBpO1xyXG5cclxuICAgICAgICBpZiAodGhpcy52ZXJib3NlKSBnbHBfc2V0X3ByaW50X2Z1bmMoY29uc29sZS5sb2cpO1xyXG5cclxuICAgICAgICBsZXQgbHAgPSBnbHBfY3JlYXRlX3Byb2IoKTtcclxuICAgICAgICBnbHBfcmVhZF9scF9mcm9tX3N0cmluZyhscCwgbnVsbCwgcHJvYik7XHJcblxyXG4gICAgICAgIGdscF9zY2FsZV9wcm9iKGxwLCBHTFBfU0ZfQVVUTyk7XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgIGxldCBzbWNwID0gbmV3IFNNQ1Aoe3ByZXNvbHZlOiBHTFBfT059KTtcclxuICAgICAgICBnbHBfc2ltcGxleChscCwgc21jcCk7XHJcblxyXG4gICAgICAgIGlmICh0aGlzLm1pcCl7XHJcbiAgICAgICAgICAgIGdscF9pbnRvcHQobHApO1xyXG4gICAgICAgICAgICBvYmplY3RpdmUgPSBnbHBfbWlwX29ial92YWwobHApO1xyXG5cclxuICAgICAgICAgICAgZm9yKGkgPSAxOyBpIDw9IGdscF9nZXRfbnVtX2NvbHMobHApOyBpKyspe1xyXG4gICAgICAgICAgICAgICAgcmVzdWx0W2dscF9nZXRfY29sX25hbWUobHAsIGkpXSA9IGdscF9taXBfY29sX3ZhbChscCwgaSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBvYmplY3RpdmUgPSBnbHBfZ2V0X29ial92YWwobHApO1xyXG4gICAgICAgICAgICBmb3IoaSA9IDE7IGkgPD0gZ2xwX2dldF9udW1fY29scyhscCk7IGkrKyl7XHJcbiAgICAgICAgICAgICAgICByZXN1bHRbZ2xwX2dldF9jb2xfbmFtZShscCwgaSldID0gZ2xwX2dldF9jb2xfcHJpbSAobHAsIGkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLmFwcGx5X3NvbHV0aW9uKHJlc3VsdClcclxuXHJcbiAgICAgICAgdGhpcy5lbGFwc2VkVGltZSA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpIC0gc3RhcnRUaW1lXHJcbiAgICAgICAgXHJcbiAgICB9XHJcblxyXG4gICAgZmlsbE1vZGVsKG1vZGVsKXtcclxuICAgICAgICBtb2RlbC5taW5pbWl6ZSA9IFwiTWluaW1pemUgXFxuXCJcclxuICAgICAgICBtb2RlbC5zdWJqZWN0VG8gPSBcIlN1YmplY3QgVG8gXFxuXCJcclxuICAgICAgICBtb2RlbC5ib3VuZHMgPSBcIlxcbkJvdW5kcyBcXG5cIlxyXG5cclxuICAgICAgICBsZXQgZGVmaW5pdGlvbnMgPSB7fVxyXG4gICAgICAgIGxldCBjcm9zc2luZ192YXJzID0ge31cclxuXHJcbiAgICAgICAgbGV0IG1rYyA9ICh1MSwgdjEsIHUyLCB2MikgPT4ge1xyXG4gICAgICAgICAgICBsZXQgcmVzID0gXCJjX1wiICsgdTEgKyB2MSArIFwiX1wiICsgdTIgKyB2MjtcclxuICAgICAgICAgICAgY3Jvc3NpbmdfdmFyc1tyZXNdID0gXCJcIlxyXG4gICAgICAgICAgICByZXR1cm4gcmVzXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBsZXQgbWt4ID0gKHUxLCB1MiwgcHJlPVwiXCIpID0+IHtcclxuICAgICAgICAgICAgbGV0IHJlcyA9IFwieF9cIiArIHByZSArIHUxICsgXCJfXCIgKyBwcmUgKyB1MlxyXG4gICAgICAgICAgICBsZXQgb3Bwb3NpdGVyZXMgPSBcInhfXCIgKyBwcmUgKyB1MiArIFwiX1wiICsgcHJlICsgdTFcclxuICAgICAgICAgICAgbGV0IG9mZnNldCA9IDBcclxuXHJcbiAgICAgICAgICAgIGlmIChkZWZpbml0aW9uc1tvcHBvc2l0ZXJlc10gIT0gdW5kZWZpbmVkKXtcclxuICAgICAgICAgICAgICAgIG9mZnNldCAtPSAxXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gW1wiIC0gXCIgKyBvcHBvc2l0ZXJlcywgb2Zmc2V0XVxyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKGRlZmluaXRpb25zW3Jlc10gPT0gdW5kZWZpbmVkKXtcclxuICAgICAgICAgICAgICAgIC8vZGVmaW5pdGlvbnNbcmVzXSA9ICcnXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIFtcIiArIFwiICsgcmVzLCBvZmZzZXRdXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBsZXQgbWt4QmFzZSA9ICh1MSwgdTIsIHByZT1cIlwiKSA9PiB7XHJcbiAgICAgICAgICAgIHJldHVybiBcInhfXCIgKyBwcmUgKyB1MSArIFwiX1wiICsgcHJlICsgdTJcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIHN0b3JlIGFsbCB2YXJpYWJsZSBuYW1lcyBpbiBvcmRlclxyXG4gICAgICAgIGZvciAobGV0IGs9MDsgayA8IHRoaXMuZy5tYXhEZXB0aCArIDE7IGsrKyl7XHJcbiAgICAgICAgICAgIGxldCBsYXllclRhYmxlcyA9IHRoaXMuZy50YWJsZUluZGV4W2tdO1xyXG4gICAgICAgICAgICBsZXQgbGF5ZXJBdHRyaWJ1dGVzID0gbGF5ZXJUYWJsZXMubWFwKHQgPT4gdC5hdHRyaWJ1dGVzKS5mbGF0KCk7XHJcblxyXG4gICAgICAgICAgICAvLyBzdG9yZSB0YWJsZXNcclxuICAgICAgICAgICAgZm9yIChsZXQgaT0wOyBpPGxheWVyVGFibGVzLmxlbmd0aDsgaSsrKXtcclxuICAgICAgICAgICAgICAgIGxldCB0MSA9IGxheWVyVGFibGVzW2ldLm5hbWU7XHJcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBqPWkrMTsgajxsYXllclRhYmxlcy5sZW5ndGg7IGorKyl7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IHQyID0gbGF5ZXJUYWJsZXNbal0ubmFtZTtcclxuICAgICAgICAgICAgICAgICAgICBkZWZpbml0aW9uc1tta3hCYXNlKHQxLCB0MiwgJ1QnKV0gPSAnJ1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAvLyBzdG9yZSBhdHRyaWJ1dGVzXHJcbiAgICAgICAgICAgIGZvciAobGV0IGk9MDsgaTxsYXllckF0dHJpYnV0ZXMubGVuZ3RoOyBpKyspe1xyXG4gICAgICAgICAgICAgICAgbGV0IGExID0gbGF5ZXJBdHRyaWJ1dGVzW2ldLm5hbWU7XHJcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBqPWkrMTsgajxsYXllckF0dHJpYnV0ZXMubGVuZ3RoOyBqKyspe1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCBhMiA9IGxheWVyQXR0cmlidXRlc1tqXS5uYW1lO1xyXG4gICAgICAgICAgICAgICAgICAgIGRlZmluaXRpb25zW21reEJhc2UoYTEsIGEyKV0gPSAnJ1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBcclxuICAgICAgICBmb3IgKGxldCBrPTA7IGsgPCB0aGlzLmcubWF4RGVwdGggKyAxOyBrKyspe1xyXG4gICAgICAgICAgICBsZXQgbGF5ZXJUYWJsZXMgPSB0aGlzLmcudGFibGVJbmRleFtrXTtcclxuICAgICAgICAgICAgbGV0IGxheWVyQXR0cmlidXRlcyA9IGxheWVyVGFibGVzLm1hcCh0ID0+IHQuYXR0cmlidXRlcykuZmxhdCgpXHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAvLyBnbG9iYWwgb3JkZXJpbmcgb2YgdGFibGVzIFxyXG4gICAgICAgICAgICBmb3IgKGxldCBpPTA7IGk8bGF5ZXJUYWJsZXMubGVuZ3RoOyBpKyspe1xyXG4gICAgICAgICAgICAgICAgbGV0IHQxID0gbGF5ZXJUYWJsZXNbaV0ubmFtZTtcclxuXHJcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBqID0gaSsxOyBqIDwgbGF5ZXJUYWJsZXMubGVuZ3RoOyBqKyspe1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCB0MiA9IGxheWVyVGFibGVzW2pdLm5hbWU7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGZvciAobGV0IG0gPSBqICsgMTsgbSA8IGxheWVyVGFibGVzLmxlbmd0aDsgbSsrKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHQzID0gbGF5ZXJUYWJsZXNbbV0ubmFtZTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1vZGVsLnN1YmplY3RUbyArPSBcIlwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICArIG1reEJhc2UodDEsIHQyLCAnVCcpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICArIFwiICsgXCIgKyBta3hCYXNlKHQyLCB0MywgJ1QnKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKyBcIiAtIFwiICsgbWt4QmFzZSh0MSwgdDMsICdUJylcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICsgXCIgPj0gMFxcblwiXHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBtb2RlbC5zdWJqZWN0VG8gKz0gXCJcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKyBcIi0gXCIgKyBta3hCYXNlKHQxLCB0MiwgJ1QnKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKyBcIiAtIFwiICsgbWt4QmFzZSh0MiwgdDMsICdUJylcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICsgXCIgKyBcIiArIG1reEJhc2UodDEsIHQzLCAnVCcpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICArIFwiID49IC0xXFxuXCJcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8vIGdsb2JhbCBvcmRlcmluZyBvZiBhdHRyaWJ1dGVzXHJcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGF5ZXJBdHRyaWJ1dGVzLmxlbmd0aDsgaSsrKXtcclxuICAgICAgICAgICAgICAgIGxldCB0MSA9IGxheWVyQXR0cmlidXRlc1tpXS5uYW1lO1xyXG4gICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBqID0gaSsxOyBqIDwgbGF5ZXJBdHRyaWJ1dGVzLmxlbmd0aDsgaisrKXtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgdDIgPSBsYXllckF0dHJpYnV0ZXNbal0ubmFtZTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoaSA9PSBqKSBjb250aW51ZTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGxheWVyQXR0cmlidXRlc1tpXS50YWJsZS5uYW1lICE9IGxheWVyQXR0cmlidXRlc1tqXS50YWJsZS5uYW1lKSBjb250aW51ZVxyXG5cclxuICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBtID0gaisxOyBtIDwgbGF5ZXJBdHRyaWJ1dGVzLmxlbmd0aDsgbSsrKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG0gPT0gaiB8fCBtID09IGkpIGNvbnRpbnVlXHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobGF5ZXJBdHRyaWJ1dGVzW21dLnRhYmxlLm5hbWUgIT0gbGF5ZXJBdHRyaWJ1dGVzW2ldLnRhYmxlLm5hbWUpIGNvbnRpbnVlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChsYXllckF0dHJpYnV0ZXNbbV0udGFibGUubmFtZSAhPSBsYXllckF0dHJpYnV0ZXNbal0udGFibGUubmFtZSkgY29udGludWVcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCB0MyA9IGxheWVyQXR0cmlidXRlc1ttXS5uYW1lO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgbW9kZWwuc3ViamVjdFRvICs9IFwiXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICsgbWt4QmFzZSh0MSwgdDIpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICArIFwiICsgXCIgKyBta3hCYXNlKHQyLCB0MylcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICsgXCIgLSBcIiArIG1reEJhc2UodDEsIHQzKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKyBcIiA+PSAwXFxuXCJcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1vZGVsLnN1YmplY3RUbyArPSBcIlwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICArIFwiLSBcIiArIG1reEJhc2UodDEsIHQyKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKyBcIiAtIFwiICsgbWt4QmFzZSh0MiwgdDMpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICArIFwiICsgXCIgKyBta3hCYXNlKHQxLCB0MylcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICsgXCIgPj0gLTFcXG5cIlxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gZGV0ZXJtaW5pbmcgY3Jvc3NpbmdzXHJcbiAgICAgICAgZm9yIChsZXQgaz0wOyBrIDwgdGhpcy5nLm1heERlcHRoICsgMTsgaysrKXtcclxuICAgICAgICAgICAgbGV0IGxheWVyRWRnZXMgPSB0aGlzLmcuZWRnZUluZGV4W2tdXHJcblxyXG4gICAgICAgICAgICBmb3IgKGxldCBpPTA7IGk8bGF5ZXJFZGdlcy5sZW5ndGg7IGkrKyl7XHJcbiAgICAgICAgICAgICAgICBsZXQgdTF2MSA9IGxheWVyRWRnZXNbaV07XHJcblxyXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgaj1pKzE7IGo8bGF5ZXJFZGdlcy5sZW5ndGg7IGorKyl7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IHUydjIgPSBsYXllckVkZ2VzW2pdO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAvLyBuZXc6IG1hbmFnaW5nIGdyb3Vwc1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIGVkZ2VzIHRoYXQgYXJlIG91dHNpZGUgb2YgZ3JvdXBzIHNob3VsZCBuZXZlciBjcm9zcyB3aXRoIGVkZ2VzIHRoYXQgYXJlIGluc2lkZSBvZiBncm91cHNcclxuICAgICAgICAgICAgICAgICAgICBpZiAodTF2MS5sZWZ0VGFibGUuZ3JvdXAgIT0gdW5kZWZpbmVkICYmIHUxdjEucmlnaHRUYWJsZS5ncm91cCAhPSB1bmRlZmluZWQpe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodTJ2Mi5sZWZ0VGFibGUuZ3JvdXAgIT0gdTJ2Mi5sZWZ0VGFibGUuZ3JvdXApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1vZGVsLnN1YmplY3RUbyArPSBta2ModTEsIHYxLCB1MiwgdjIpICsgXCIgPSAwXFxuXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmICghdGhpcy5pc1NhbWVSYW5rRWRnZSh1MXYxKSAmJiAhdGhpcy5pc1NhbWVSYW5rRWRnZSh1MnYyKSl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCB1MSA9IHUxdjEubGVmdEF0dHJpYnV0ZS5uYW1lXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCB2MSA9IHUxdjEucmlnaHRBdHRyaWJ1dGUubmFtZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgdTIgPSB1MnYyLmxlZnRBdHRyaWJ1dGUubmFtZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgdjIgPSB1MnYyLnJpZ2h0QXR0cmlidXRlLm5hbWVcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh1MSA9PSB1MiB8fCB2MSA9PSB2MikgY29udGludWVcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBwMSA9IG1rYyh1MSwgdjEsIHUyLCB2MilcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGZpbmFsc3VtID0gMVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBtb2RlbC5zdWJqZWN0VG8gKz0gcDEgKyBcIlwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBwMiA9IG1reEJhc2UodTIsIHUxKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZGVmaW5pdGlvbnNbcDJdICE9IHVuZGVmaW5lZCl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtb2RlbC5zdWJqZWN0VG8gKz0gXCIgKyBcIiArIHAyXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwMiA9IG1reEJhc2UodTEsIHUyKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZmluYWxzdW0gLT0gMVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbW9kZWwuc3ViamVjdFRvICs9IFwiIC0gXCIgKyBwMlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgcDMgPSBta3hCYXNlKHYxLCB2MilcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGRlZmluaXRpb25zW3AzXSAhPSB1bmRlZmluZWQpe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbW9kZWwuc3ViamVjdFRvICs9IFwiICsgXCIgKyBwM1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcDMgPSBta3hCYXNlKHYyLCB2MSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpbmFsc3VtIC09IDFcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1vZGVsLnN1YmplY3RUbyArPSBcIiAtIFwiICsgcDNcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBtb2RlbC5zdWJqZWN0VG8gKz0gXCIgPj0gXCIgKyBmaW5hbHN1bSArIFwiXFxuXCJcclxuXHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBwMSA9IG1rYyh1MSwgdjEsIHUyLCB2MilcclxuICAgICAgICAgICAgICAgICAgICAgICAgZmluYWxzdW0gPSAxXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1vZGVsLnN1YmplY3RUbyArPSBwMSArIFwiXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgcDIgPSBta3hCYXNlKHUxLCB1MilcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGRlZmluaXRpb25zW3AyXSAhPSB1bmRlZmluZWQpe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbW9kZWwuc3ViamVjdFRvICs9IFwiICsgXCIgKyBwMlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcDIgPSBta3hCYXNlKHUyLCB1MSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpbmFsc3VtIC09IDFcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1vZGVsLnN1YmplY3RUbyArPSBcIiAtIFwiICsgcDJcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICAgICAgcDMgPSBta3hCYXNlKHYyLCB2MSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGRlZmluaXRpb25zW3AzXSAhPSB1bmRlZmluZWQpe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbW9kZWwuc3ViamVjdFRvICs9IFwiICsgXCIgKyBwM1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcDMgPSBta3hCYXNlKHYxLCB2MilcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpbmFsc3VtIC09IDFcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1vZGVsLnN1YmplY3RUbyArPSBcIiAtIFwiICsgcDNcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBtb2RlbC5zdWJqZWN0VG8gKz0gXCIgPj0gXCIgKyBmaW5hbHN1bSArIFwiXFxuXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gaWYgdGhleSBhcmUgYm90aCBzYW1lIHJhbmsgZWRnZXNcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMuaXNTYW1lUmFua0VkZ2UodTF2MSkgJiYgdGhpcy5pc1NhbWVSYW5rRWRnZSh1MnYyKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgdTEgPSB1MXYxLmxlZnRBdHRyaWJ1dGUubmFtZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgdjEgPSB1MXYxLnJpZ2h0QXR0cmlidXRlLm5hbWVcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHUyID0gdTJ2Mi5sZWZ0QXR0cmlidXRlLm5hbWVcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHYyID0gdTJ2Mi5yaWdodEF0dHJpYnV0ZS5uYW1lXHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgcDEgPSBta2ModTEsIHYxLCB1MiwgdjIpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBmaW5hbHN1bSA9IDFcclxuICAgICAgICAgICAgICAgICAgICAgICAgbW9kZWwuc3ViamVjdFRvICs9IHAxICsgXCJcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgcDIgPSBta3hCYXNlKHUxLCB1MilcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGRlZmluaXRpb25zW3AyXSAhPSB1bmRlZmluZWQpe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbW9kZWwuc3ViamVjdFRvICs9IFwiICsgXCIgKyBwMlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcDIgPSBta3hCYXNlKHUyLCB1MSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpbmFsc3VtIC09IDFcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1vZGVsLnN1YmplY3RUbyArPSBcIiAtIFwiICsgcDJcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHAzID0gbWt4QmFzZSh2MSwgdjIpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkZWZpbml0aW9uc1twM10gIT0gdW5kZWZpbmVkKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1vZGVsLnN1YmplY3RUbyArPSBcIiArIFwiICsgcDNcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpbmFsc3VtIC09IDFcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHAzID0gbWt4QmFzZSh2MiwgdjEpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtb2RlbC5zdWJqZWN0VG8gKz0gXCIgLSBcIiArIHAzXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBwNCA9IG1reEJhc2UodTIsIHYxKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZGVmaW5pdGlvbnNbcDRdICE9IHVuZGVmaW5lZCl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtb2RlbC5zdWJqZWN0VG8gKz0gcDRcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpbmFsc3VtIC09IDFcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHA0ID0gbWt4QmFzZSh2MSwgdTIpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtb2RlbC5zdWJqZWN0VG8gKz0gXCIgKyBcIiArIHA0XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgbW9kZWwuc3ViamVjdFRvICs9IFwiID49IFwiICsgZmluYWxzdW0gKyBcIlxcblwiXHJcblxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgcDEgPSBta2ModTEsIHYxLCB1MiwgdjIpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZpbmFsc3VtID0gMVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBtb2RlbC5zdWJqZWN0VG8gKz0gcDEgKyBcIlwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHAyID0gbWt4QmFzZSh1MSwgdTIpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkZWZpbml0aW9uc1twMl0gIT0gdW5kZWZpbmVkKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1vZGVsLnN1YmplY3RUbyArPSBcIiArIFwiICsgcDJcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHAyID0gbWt4QmFzZSh1MiwgdTEpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaW5hbHN1bSAtPSAxXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtb2RlbC5zdWJqZWN0VG8gKz0gXCIgLSBcIiArIHAyXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHAzID0gbWt4QmFzZSh2MSwgdjIpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkZWZpbml0aW9uc1twM10gIT0gdW5kZWZpbmVkKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1vZGVsLnN1YmplY3RUbyArPSBcIiArIFwiICsgcDNcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpbmFsc3VtIC09IDFcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHAzID0gbWt4QmFzZSh2MiwgdjEpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtb2RlbC5zdWJqZWN0VG8gKz0gXCIgLSBcIiArIHAzXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHA0ID0gbWt4QmFzZSh2MiwgdTEpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkZWZpbml0aW9uc1twNF0gIT0gdW5kZWZpbmVkKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1vZGVsLnN1YmplY3RUbyArPSBwNFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZmluYWxzdW0gLT0gMVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcDQgPSBta3hCYXNlKHUxLCB2MilcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1vZGVsLnN1YmplY3RUbyArPSBcIiArIFwiICsgcDRcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBtb2RlbC5zdWJqZWN0VG8gKz0gXCIgPj0gXCIgKyBmaW5hbHN1bSArIFwiXFxuXCJcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICh0aGlzLmlzU2FtZVJhbmtFZGdlKHUxdjEpICYmICF0aGlzLmlzU2FtZVJhbmtFZGdlKHUydjIpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCB1MSA9IHUxdjEubGVmdEF0dHJpYnV0ZS5uYW1lXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCB2MSA9IHUxdjEucmlnaHRBdHRyaWJ1dGUubmFtZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgdTIgPSB1MnYyLmxlZnRBdHRyaWJ1dGUubmFtZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgdjIgPSB1MnYyLnJpZ2h0QXR0cmlidXRlLm5hbWVcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBwMSA9IG1rYyh1MSwgdjEsIHUyLCB2MilcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGZpbmFsc3VtID0gMVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBtb2RlbC5zdWJqZWN0VG8gKz0gcDEgKyBcIlwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBwMiA9IG1reEJhc2UodTIsIHUxKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZGVmaW5pdGlvbnNbcDJdICE9IHVuZGVmaW5lZCl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtb2RlbC5zdWJqZWN0VG8gKz0gXCIgKyBcIiArIHAyXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwMiA9IG1reEJhc2UodTEsIHUyKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZmluYWxzdW0gLT0gMVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbW9kZWwuc3ViamVjdFRvICs9IFwiIC0gXCIgKyBwMlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgcDMgPSBta3hCYXNlKHYxLCB1MilcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGRlZmluaXRpb25zW3AzXSAhPSB1bmRlZmluZWQpe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbW9kZWwuc3ViamVjdFRvICs9IFwiICsgXCIgKyBwM1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZmluYWxzdW0gLT0gMVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcDMgPSBta3hCYXNlKHUyLCB2MSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1vZGVsLnN1YmplY3RUbyArPSBcIiAtIFwiICsgcDNcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBtb2RlbC5zdWJqZWN0VG8gKz0gXCIgPj0gXCIgKyBmaW5hbHN1bSArIFwiXFxuXCJcclxuXHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBwMSA9IG1rYyh1MSwgdjEsIHUyLCB2MilcclxuICAgICAgICAgICAgICAgICAgICAgICAgZmluYWxzdW0gPSAxXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1vZGVsLnN1YmplY3RUbyArPSBwMSArIFwiXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgcDIgPSBta3hCYXNlKHUyLCB2MSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGRlZmluaXRpb25zW3AyXSAhPSB1bmRlZmluZWQpe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbW9kZWwuc3ViamVjdFRvICs9IFwiICsgXCIgKyBwMlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcDIgPSBta3hCYXNlKHYxLCB1MilcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpbmFsc3VtIC09IDFcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1vZGVsLnN1YmplY3RUbyArPSBcIiAtIFwiICsgcDJcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgcDMgPSBta3hCYXNlKHUxLCB1MilcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGRlZmluaXRpb25zW3AzXSAhPSB1bmRlZmluZWQpe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbW9kZWwuc3ViamVjdFRvICs9IFwiICsgXCIgKyBwM1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZmluYWxzdW0gLT0gMVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcDMgPSBta3hCYXNlKHUyLCB1MSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1vZGVsLnN1YmplY3RUbyArPSBcIiAtIFwiICsgcDNcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBtb2RlbC5zdWJqZWN0VG8gKz0gXCIgPj0gXCIgKyBmaW5hbHN1bSArIFwiXFxuXCJcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICghdGhpcy5pc1NhbWVSYW5rRWRnZSh1MXYxKSAmJiB0aGlzLmlzU2FtZVJhbmtFZGdlKHUydjIpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCB1MSA9IHUxdjEubGVmdEF0dHJpYnV0ZS5uYW1lXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCB2MSA9IHUxdjEucmlnaHRBdHRyaWJ1dGUubmFtZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgdTIgPSB1MnYyLmxlZnRBdHRyaWJ1dGUubmFtZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgdjIgPSB1MnYyLnJpZ2h0QXR0cmlidXRlLm5hbWVcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBwMSA9IG1rYyh1MSwgdjEsIHUyLCB2MilcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGZpbmFsc3VtID0gMVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBtb2RlbC5zdWJqZWN0VG8gKz0gcDEgKyBcIlwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBwMiA9IG1reEJhc2UodTEsIHUyKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZGVmaW5pdGlvbnNbcDJdICE9IHVuZGVmaW5lZCl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtb2RlbC5zdWJqZWN0VG8gKz0gXCIgKyBcIiArIHAyXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwMiA9IG1reEJhc2UodTIsIHUxKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZmluYWxzdW0gLT0gMVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbW9kZWwuc3ViamVjdFRvICs9IFwiIC0gXCIgKyBwMlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgcDMgPSBta3hCYXNlKHYyLCB1MSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGRlZmluaXRpb25zW3AzXSAhPSB1bmRlZmluZWQpe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbW9kZWwuc3ViamVjdFRvICs9IFwiICsgXCIgKyBwM1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZmluYWxzdW0gLT0gMVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcDMgPSBta3hCYXNlKHUxLCB2MilcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1vZGVsLnN1YmplY3RUbyArPSBcIiAtIFwiICsgcDNcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBtb2RlbC5zdWJqZWN0VG8gKz0gXCIgPj0gXCIgKyBmaW5hbHN1bSArIFwiXFxuXCJcclxuXHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBwMSA9IG1rYyh1MSwgdjEsIHUyLCB2MilcclxuICAgICAgICAgICAgICAgICAgICAgICAgZmluYWxzdW0gPSAxXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1vZGVsLnN1YmplY3RUbyArPSBwMSArIFwiXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgcDIgPSBta3hCYXNlKHUxLCB2MilcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGRlZmluaXRpb25zW3AyXSAhPSB1bmRlZmluZWQpe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbW9kZWwuc3ViamVjdFRvICs9IFwiICsgXCIgKyBwMlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcDIgPSBta3hCYXNlKHYyLCB1MSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpbmFsc3VtIC09IDFcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1vZGVsLnN1YmplY3RUbyArPSBcIiAtIFwiICsgcDJcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgcDMgPSBta3hCYXNlKHUyLCB1MSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGRlZmluaXRpb25zW3AzXSAhPSB1bmRlZmluZWQpe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbW9kZWwuc3ViamVjdFRvICs9IFwiICsgXCIgKyBwM1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZmluYWxzdW0gLT0gMVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcDMgPSBta3hCYXNlKHUxLCB1MilcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1vZGVsLnN1YmplY3RUbyArPSBcIiAtIFwiICsgcDNcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBtb2RlbC5zdWJqZWN0VG8gKz0gXCIgPj0gXCIgKyBmaW5hbHN1bSArIFwiXFxuXCJcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG5cclxuICAgICAgIC8vIGdyb3VwaW5nIGNvbnN0cmFpbnQgb2YgYXR0cmlidXRlcyB3aXRoaW4gdGFibGVzXHJcbiAgICAgICBmb3IgKGxldCBrPTA7IGs8dGhpcy5nLm1heERlcHRoICsgMTsgaysrKXtcclxuICAgICAgICAgICAgbGV0IGxheWVyVGFibGVzID0gdGhpcy5nLnRhYmxlSW5kZXhba107XHJcbiAgICAgICAgICAgIGxldCBsYXllckF0dHJpYnV0ZXMgPSBsYXllclRhYmxlcy5tYXAodCA9PiB0LmF0dHJpYnV0ZXMpLmZsYXQoKVxyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgZm9yIChsZXQgaT0wOyBpPGxheWVyQXR0cmlidXRlcy5sZW5ndGg7IGkrKyl7XHJcbiAgICAgICAgICAgICAgICBsZXQgYXR0cjEgPSBsYXllckF0dHJpYnV0ZXNbaV0ubmFtZTtcclxuICAgICAgICAgICAgICAgIGxldCB0MSA9IGxheWVyQXR0cmlidXRlc1tpXS50YWJsZS5uYW1lO1xyXG5cclxuICAgICAgICAgICAgICAgIGZvciAobGV0IGo9aSsxOyBqPGxheWVyQXR0cmlidXRlcy5sZW5ndGg7IGorKyl7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IGF0dHIyID0gbGF5ZXJBdHRyaWJ1dGVzW2pdLm5hbWU7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IHQyID0gbGF5ZXJBdHRyaWJ1dGVzW2pdLnRhYmxlLm5hbWVcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHQxICE9IHQyKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gbW9kZWwuc3ViamVjdFRvICs9IFwieF9cIiArIGF0dHIxLm5hbWUgKyBcIl9cIiArIGF0dHIyLm5hbWUgKyBcIiAtIFwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vICAgICArIFwieF9UXCIgKyBhdHRyMS50YWJsZS5uYW1lICsgXCJfVFwiICsgYXR0cjIudGFibGUubmFtZSArIFwiID0gMFxcblwiXHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBtb2RlbC5zdWJqZWN0VG8gKz0gbWt4QmFzZShhdHRyMSwgYXR0cjIpICsgXCJcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKyBcIiAtIFwiICsgbWt4QmFzZSh0MSwgdDIsICdUJykgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICArIFwiID0gMFxcblwiXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyAqKioqKioqKioqKipcclxuICAgICAgICAvLyBiZW5kaW5lc3NcclxuICAgICAgICAvLyAqKioqKioqKioqKipcclxuICAgICAgICBmb3IgKGxldCBlIG9mIHRoaXMuZy5lZGdlcyl7XHJcbiAgICAgICAgICAgIG1vZGVsLnN1YmplY3RUbyArPSBcclxuICAgICAgICAgICAgICAgIFwieV9cIiArIGUubGVmdEF0dHJpYnV0ZS5uYW1lICsgXCIgLSBcIiArIFxyXG4gICAgICAgICAgICAgICAgXCJ5X1wiICsgZS5yaWdodEF0dHJpYnV0ZS5uYW1lICsgXCIgLSBcIiArIFxyXG4gICAgICAgICAgICAgICAgXCJiZW5kX1wiICsgZS5sZWZ0QXR0cmlidXRlLm5hbWUgKyBcIl9cIiArIGUucmlnaHRBdHRyaWJ1dGUubmFtZSArXHJcbiAgICAgICAgICAgICAgICBcIiA8PSAwXFxuXCJcclxuXHJcbiAgICAgICAgICAgIG1vZGVsLnN1YmplY3RUbyArPSBcclxuICAgICAgICAgICAgICAgIFwieV9cIiArIGUucmlnaHRBdHRyaWJ1dGUubmFtZSArIFwiIC0gXCIgKyBcclxuICAgICAgICAgICAgICAgIFwieV9cIiArIGUubGVmdEF0dHJpYnV0ZS5uYW1lICsgXCIgLSBcIiArIFxyXG4gICAgICAgICAgICAgICAgXCJiZW5kX1wiICsgZS5sZWZ0QXR0cmlidXRlLm5hbWUgKyBcIl9cIiArIGUucmlnaHRBdHRyaWJ1dGUubmFtZSArXHJcbiAgICAgICAgICAgICAgICBcIiA8PSAwXFxuXCJcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIGZvciAobGV0IGkgaW4gdGhpcy5nLnRhYmxlSW5kZXgpe1xyXG4gICAgICAgIC8vICAgICBsZXQgdGFibGVDb2wgPSB0aGlzLmcudGFibGVJbmRleFtpXTtcclxuICAgICAgICAvLyAgICAgZm9yIChsZXQgaiBpbiB0YWJsZUNvbCl7XHJcbiAgICAgICAgLy8gICAgICAgICBsZXQgdDEgPSB0YWJsZUNvbFtqXTtcclxuICAgICAgICAvLyAgICAgICAgIGxldCB0bXBzdHIgPSBcInlfXCIgKyB0MS5uYW1lIFxyXG4gICAgICAgIC8vICAgICAgICAgbGV0IGFjY3VtdWxhdG9yID0gMFxyXG4gICAgICAgIC8vICAgICAgICAgZm9yIChsZXQgayBpbiB0YWJsZUNvbCl7XHJcbiAgICAgICAgLy8gICAgICAgICAgICAgaWYgKGogPT0gaykgY29udGludWU7XHJcbiAgICAgICAgLy8gICAgICAgICAgICAgbGV0IHQyID0gdGFibGVDb2xba107XHJcbiAgICAgICAgLy8gICAgICAgICAgICAgbGV0IHAgPSBta3hCYXNlKHQyLm5hbWUsIHQxLm5hbWUsICdUJylcclxuICAgICAgICAvLyAgICAgICAgICAgICBpZiAoZGVmaW5pdGlvbnNbcF0gIT0gdW5kZWZpbmVkKXtcclxuICAgICAgICAvLyAgICAgICAgICAgICAgICAgLy9jb25zb2xlLmxvZyhwKVxyXG4gICAgICAgIC8vICAgICAgICAgICAgICAgICB0bXBzdHIgKz0gXCIgLSBcIiArICh0Mi5hdHRyaWJ1dGVzLmxlbmd0aCArIDIpICsgXCIgXCIgKyBwIFxyXG4gICAgICAgIC8vICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgLy8gICAgICAgICAgICAgICAgIHAgPSBta3hCYXNlKHQxLm5hbWUsIHQyLm5hbWUsICdUJylcclxuICAgICAgICAvLyAgICAgICAgICAgICAgICAgdG1wc3RyICs9IFwiICsgXCIgKyAodDIuYXR0cmlidXRlcy5sZW5ndGggKyAyKSArIFwiIFwiICsgcFxyXG4gICAgICAgIC8vICAgICAgICAgICAgICAgICBhY2N1bXVsYXRvciArPSAodDIuYXR0cmlidXRlcy5sZW5ndGggKyAyKVxyXG4gICAgICAgIC8vICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgLy8gICAgICAgICB9XHJcbiAgICAgICAgLy8gICAgICAgICB0bXBzdHIgKz0gXCIgPj0gXCIgKyBhY2N1bXVsYXRvciArIFwiXFxuXCJcclxuICAgICAgICAvLyAgICAgICAgIG1vZGVsLnN1YmplY3RUbyArPSB0bXBzdHJcclxuICAgICAgICAvLyAgICAgfVxyXG4gICAgICAgIC8vIH1cclxuICAgICAgICBsZXQgbSA9IDIwO1xyXG4gICAgICAgIC8vIGxldCBiY291bnQgPSAwO1xyXG4gICAgICAgIC8vIGZvciAobGV0IHRhYmxlQ29sIG9mIHRoaXMuZy50YWJsZUluZGV4KXtcclxuICAgICAgICAvLyAgICAgZm9yIChsZXQgaSBpbiB0YWJsZUNvbCl7XHJcbiAgICAgICAgLy8gICAgICAgICBpZiAodGFibGVDb2wubGVuZ3RoID09IDEpIGNvbnRpbnVlXHJcbiAgICAgICAgLy8gICAgICAgICBsZXQgcCA9IFwiXCJcclxuICAgICAgICAvLyAgICAgICAgIGxldCB0MSA9IHRhYmxlQ29sW2ldO1xyXG4gICAgICAgIC8vICAgICAgICAgZm9yIChsZXQgaiBpbiB0YWJsZUNvbCl7XHJcbiAgICAgICAgLy8gICAgICAgICAgICAgaWYgKGogPT0gaSkgY29udGludWU7XHJcbiAgICAgICAgLy8gICAgICAgICAgICAgbGV0IHQyID0gdGFibGVDb2xbal07XHJcbiAgICAgICAgLy8gICAgICAgICAgICAgbGV0IHRtcHN0ciA9IFwiXCJcclxuICAgICAgICAvLyAgICAgICAgICAgICBsZXQgYWNjdW11bGF0b3IgPSAyXHJcbiAgICAgICAgLy8gICAgICAgICAgICAgdG1wc3RyICs9IFwieV9cIiArIHQxLm5hbWUgKyBcIiAtIHlfXCIgKyB0Mi5uYW1lICsgXCIgKyBcIiArIG0gKyBcIiBiX1wiICsgYmNvdW50XHJcbiAgICAgICAgLy8gICAgICAgICAgICAgbW9kZWwuc3ViamVjdFRvICs9IHRtcHN0ciArIFwiID49IFwiICsgKGFjY3VtdWxhdG9yKSArIFwiXFxuXCJcclxuXHJcbiAgICAgICAgLy8gICAgICAgICAgICAgdG1wc3RyID0gXCJcIlxyXG4gICAgICAgIC8vICAgICAgICAgICAgIHRtcHN0ciArPSBcInlfXCIgKyB0MS5uYW1lICsgXCIgLSB5X1wiICsgdDIubmFtZSArIFwiICsgXCIgKyBtICsgXCIgYl9cIiArIGJjb3VudFxyXG4gICAgICAgIC8vICAgICAgICAgICAgIG1vZGVsLnN1YmplY3RUbyArPSB0bXBzdHIgKyBcIiA8PSBcIiArIChtIC0gMikgKyBcIlxcblwiXHJcbiAgICAgICAgLy8gICAgICAgICAgICAgZGVmaW5pdGlvbnNbXCJiX1wiICsgYmNvdW50XSA9IFtdXHJcbiAgICAgICAgLy8gICAgICAgICAgICAgYmNvdW50ICs9IDEgXHJcbiAgICAgICAgLy8gICAgICAgICB9XHJcbiAgICAgICAgLy8gICAgIH1cclxuICAgICAgICAvLyB9XHJcblxyXG4gICAgICAgIGxldCB6Y291bnQgPSAwO1xyXG4gICAgICAgIGZvciAobGV0IHRhYmxlQ29sIG9mIHRoaXMuZy50YWJsZUluZGV4KXtcclxuICAgICAgICAgICAgZm9yIChsZXQgaSBpbiB0YWJsZUNvbCl7XHJcbiAgICAgICAgICAgICAgICBsZXQgdDEgPSB0YWJsZUNvbFtpXTtcclxuICAgICAgICAgICAgICAgIGZvciAobGV0IGogaW4gdGFibGVDb2wpe1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChpID09IGopIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCB0MiA9IHRhYmxlQ29sW2pdO1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCBwID0gbWt4QmFzZSh0Mi5uYW1lLCB0MS5uYW1lLCAnVCcpXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGRlZmluaXRpb25zW3BdICE9IHVuZGVmaW5lZCl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1vZGVsLnN1YmplY3RUbyArPSBcInpfXCIgKyB6Y291bnQgKyBcIiAtIFwiICsgbSArIFwiIFwiICsgcCArIFwiIDw9IDBcXG5cIiBcclxuICAgICAgICAgICAgICAgICAgICAgICAgbW9kZWwuc3ViamVjdFRvICs9IFwiel9cIiArIHpjb3VudCArIFwiIC0gXCIgKyBcInlfXCIgKyB0Mi5uYW1lICsgXCIgPD0gMFxcblwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1vZGVsLnN1YmplY3RUbyArPSBcInpfXCIgKyB6Y291bnQgKyBcIiAtIFwiICsgXCJ5X1wiICsgdDIubmFtZSArIFwiIC0gXCIgKyBtICsgXCIgXCIgKyBwICsgXCIgPj0gLSBcIiArIG0gKyBcIlxcblwiICBcclxuICAgICAgICAgICAgICAgICAgICAgICAgbW9kZWwuc3ViamVjdFRvICs9IFwiel9cIiArIHpjb3VudCArIFwiID49IDBcXG5cIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBtb2RlbC5zdWJqZWN0VG8gKz0gXCJ5X1wiICsgdDEubmFtZSArIFwiIC0gXCIgKyBcInpfXCIgKyB6Y291bnQgKyBcIiAtIFwiICsgKDIgKyB0Mi5hdHRyaWJ1dGVzLmxlbmd0aCkgKyBcIiBcIiArIHAgKyBcIiA+PSAwXFxuXCJcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBwID0gbWt4QmFzZSh0MS5uYW1lLCB0Mi5uYW1lLCAnVCcpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1vZGVsLnN1YmplY3RUbyArPSBcInpfXCIgKyB6Y291bnQgKyBcIiArIFwiICsgbSArIFwiIFwiICsgcCArIFwiIDw9IFwiICsgbSArIFwiXFxuXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgbW9kZWwuc3ViamVjdFRvICs9IFwiel9cIiArIHpjb3VudCArIFwiIC0gXCIgKyBcInlfXCIgKyB0Mi5uYW1lICsgXCIgPD0gMFxcblwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1vZGVsLnN1YmplY3RUbyArPSBcInpfXCIgKyB6Y291bnQgKyBcIiAtIFwiICsgXCJ5X1wiICsgdDIubmFtZSArIFwiICsgXCIgKyBtICsgXCIgXCIgKyBwICsgXCIgPj0gMFxcblwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1vZGVsLnN1YmplY3RUbyArPSBcInpfXCIgKyB6Y291bnQgKyBcIiA+PSAwXFxuXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgbW9kZWwuc3ViamVjdFRvICs9IFwieV9cIiArIHQxLm5hbWUgKyBcIiAtIFwiICsgXCJ6X1wiICsgemNvdW50ICsgXCIgKyBcIiArICgyICsgdDIuYXR0cmlidXRlcy5sZW5ndGgpICsgXCIgXCIgKyBwICsgXCIgPj0gXCIgKyAoMiArIHQyLmF0dHJpYnV0ZXMubGVuZ3RoKSArIFwiXFxuXCJcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgemNvdW50ICs9IDFcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZm9yIChsZXQgdCBvZiB0aGlzLmcudGFibGVzKXtcclxuICAgICAgICAgICAgZm9yIChsZXQgaSBpbiB0LmF0dHJpYnV0ZXMpe1xyXG4gICAgICAgICAgICAgICAgbGV0IGExID0gdC5hdHRyaWJ1dGVzW2ldXHJcbiAgICAgICAgICAgICAgICBsZXQgYWNjdW11bGF0b3IgPSAxXHJcbiAgICAgICAgICAgICAgICBsZXQgdG1wc3RyID0gXCJ5X1wiICsgYTEubmFtZSArIFwiIC0gXCIgKyBcInlfXCIgKyB0Lm5hbWVcclxuICAgICAgICAgICAgICAgIGZvciAobGV0IGogaW4gdC5hdHRyaWJ1dGVzKXtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoaSA9PSBqKSBjb250aW51ZVxyXG4gICAgICAgICAgICAgICAgICAgIGxldCBhMiA9IHQuYXR0cmlidXRlc1tqXVxyXG4gICAgICAgICAgICAgICAgICAgIGxldCBwID0gbWt4QmFzZShhMi5uYW1lLCBhMS5uYW1lKVxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChkZWZpbml0aW9uc1twXSAhPSB1bmRlZmluZWQpe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0bXBzdHIgKz0gXCIgLSBcIiArIHBcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgcCA9IG1reEJhc2UoYTEubmFtZSwgYTIubmFtZSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgdG1wc3RyICs9IFwiICsgXCIgKyBwXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGFjY3VtdWxhdG9yICs9IDFcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgdG1wc3RyICs9IFwiID0gXCIgKyBhY2N1bXVsYXRvciArIFwiXFxuXCJcclxuICAgICAgICAgICAgICAgIG1vZGVsLnN1YmplY3RUbyArPSB0bXBzdHJcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gZmlsbCBmdW5jdGlvbiB0byBtaW5pbWl6ZVxyXG4gICAgICAgIGZvciAobGV0IGVsZW0gaW4gY3Jvc3NpbmdfdmFycyl7XHJcbiAgICAgICAgICAgIG1vZGVsLm1pbmltaXplICs9IGVsZW0gKyBcIiArIFwiXHJcbiAgICAgICAgfVxyXG4gICAgICAgIGZvciAobGV0IGUgb2YgdGhpcy5nLmVkZ2VzKXtcclxuICAgICAgICAgICAgbW9kZWwubWluaW1pemUgKz0gXCIwLjEgYmVuZF9cIiArIGUubGVmdEF0dHJpYnV0ZS5uYW1lICsgXCJfXCIgKyBlLnJpZ2h0QXR0cmlidXRlLm5hbWUgKyBcIiArIFwiXHJcbiAgICAgICAgfVxyXG4gICAgICAgIG1vZGVsLm1pbmltaXplID0gbW9kZWwubWluaW1pemUuc3Vic3RyaW5nKDAsIG1vZGVsLm1pbmltaXplLmxlbmd0aCAtIDIpICsgXCJcXG5cXG5cIlxyXG5cclxuICAgICAgICBmb3IgKGxldCBlbGVtIGluIGRlZmluaXRpb25zKXtcclxuICAgICAgICAgICAgbW9kZWwuYm91bmRzICs9IFwiYmluYXJ5IFwiICsgZWxlbSArIFwiXFxuXCJcclxuICAgICAgICB9XHJcblxyXG4gICAgfVxyXG5cclxuICAgIGlzU2FtZVJhbmtFZGdlKGVkZ2Upe1xyXG4gICAgICAgIHJldHVybiBlZGdlLmxlZnRUYWJsZS5kZXB0aCA9PSBlZGdlLnJpZ2h0VGFibGUuZGVwdGhcclxuICAgIH1cclxuXHJcbiAgICBtb2RlbFRvU3RyaW5nKG1vZGVsKXtcclxuICAgICAgICByZXR1cm4gbW9kZWwubWluaW1pemUgKyBtb2RlbC5zdWJqZWN0VG8gKyBtb2RlbC5ib3VuZHMgKyAnXFxuRW5kXFxuJ1xyXG4gICAgfVxyXG5cclxuICAgIGFwcGx5X3NvbHV0aW9uKHNvbHV0aW9uKXtcclxuICAgICAgICBjb25zb2xlLmxvZyhzb2x1dGlvbilcclxuICAgICAgICBmb3IgKGxldCBpPTA7IGk8dGhpcy5nLm1heERlcHRoICsgMTsgaSsrKXtcclxuICAgICAgICAgICAgbGV0IGxheWVyVGFibGVzID0gdGhpcy5nLnRhYmxlSW5kZXhbaV07XHJcblxyXG4gICAgICAgICAgICBsYXllclRhYmxlcy5zb3J0KChhLCBiKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAvL2NvbnNvbGUubG9nKGEubmFtZSwgYi5uYW1lLCBzb2x1dGlvbltcInhfVFwiICsgYS5uYW1lICsgXCJfVFwiICsgYi5uYW1lXSwgc29sdXRpb25bXCJ4X1RcIiArIGIubmFtZSArIFwiX1RcIiArIGEubmFtZV0pXHJcbiAgICAgICAgICAgICAgICBpZiAoc29sdXRpb25bXCJ4X1RcIiArIGEubmFtZSArIFwiX1RcIiArIGIubmFtZV0gPT0gMCkgcmV0dXJuIDFcclxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKHNvbHV0aW9uW1wieF9UXCIgKyBhLm5hbWUgKyBcIl9UXCIgKyBiLm5hbWVdID09IDEpIHJldHVybiAtMVxyXG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoc29sdXRpb25bXCJ4X1RcIiArIGIubmFtZSArIFwiX1RcIiArIGEubmFtZV0gPT0gMSkgcmV0dXJuIDFcclxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKHNvbHV0aW9uW1wieF9UXCIgKyBiLm5hbWUgKyBcIl9UXCIgKyBhLm5hbWVdID09IDApIHJldHVybiAtMVxyXG4gICAgICAgICAgICB9KVxyXG5cclxuICAgICAgICAgICAgZm9yIChsZXQgayBpbiBsYXllclRhYmxlcyl7XHJcbiAgICAgICAgICAgICAgICBsYXllclRhYmxlc1trXS53ZWlnaHQgPSBrO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBmb3IgKGxldCB0YWJsZSBvZiBsYXllclRhYmxlcyl7XHJcbiAgICAgICAgICAgICAgICB0YWJsZS5hdHRyaWJ1dGVzLnNvcnQoKGEsIGIpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAvL2lmIChiLnRhYmxlLm5hbWUgPT0gXCJUOHk0XCIpIGNvbnNvbGUubG9nKGEubmFtZSwgYi5uYW1lLCBzb2x1dGlvbltcInhfXCIgKyBiLm5hbWUgKyBcIl9cIiArIGEubmFtZV0pXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHNvbHV0aW9uW1wieF9cIiArIGEubmFtZSArIFwiX1wiICsgYi5uYW1lXSA9PSAwKSByZXR1cm4gMVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKHNvbHV0aW9uW1wieF9cIiArIGEubmFtZSArIFwiX1wiICsgYi5uYW1lXSA9PSAxKSByZXR1cm4gLTFcclxuICAgICAgICAgICAgICAgICAgICBlbHNlIGlmIChzb2x1dGlvbltcInhfXCIgKyBiLm5hbWUgKyBcIl9cIiArIGEubmFtZV0gPT0gMSkgcmV0dXJuIDFcclxuICAgICAgICAgICAgICAgICAgICBlbHNlIGlmIChzb2x1dGlvbltcInhfXCIgKyBiLm5hbWUgKyBcIl9cIiArIGEubmFtZV0gPT0gMCkgcmV0dXJuIC0xXHJcbiAgICAgICAgICAgICAgICB9KVxyXG5cclxuICAgICAgICAgICAgICAgIGZvciAobGV0IGo9MDsgajx0YWJsZS5hdHRyaWJ1dGVzLmxlbmd0aDsgaisrKXtcclxuICAgICAgICAgICAgICAgICAgICB0YWJsZS5hdHRyaWJ1dGVzW2pdLndlaWdodCA9IGo7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vICoqKioqKioqKipcclxuICAgICAgICAvLyBiZW5kaW5lc3NcclxuICAgICAgICAvLyAqKioqKioqKioqXHJcbiAgICAgICAgZm9yIChsZXQgaT0wOyBpPHRoaXMuZy50YWJsZUluZGV4Lmxlbmd0aDsgaSsrKXtcclxuICAgICAgICAgICAgbGV0IHRhYmxlQ29sID0gdGhpcy5nLnRhYmxlSW5kZXhbaV07XHJcbiAgICAgICAgICAgIGZvciAobGV0IGo9MDsgajx0YWJsZUNvbC5sZW5ndGg7IGorKyl7XHJcbiAgICAgICAgICAgICAgICBsZXQgdCA9IHRhYmxlQ29sW2pdO1xyXG5cclxuICAgICAgICAgICAgICAgIGxldCB2YWwgPSBzb2x1dGlvbltcInlfXCIgKyB0Lm5hbWVdXHJcbiAgICAgICAgICAgICAgICBpZiAodmFsID09IHVuZGVmaW5lZCkgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICB0LnZlcnRpY2FsQXR0ck9mZnNldCA9IHZhbCAtIHQud2VpZ2h0ICogdGhpcy5nLmJhc2VSb3dEaXN0YW5jZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxufSIsImNsYXNzIExQQmVuZGluZXNzQ29tYmluZWRQbHVzR3JvdXBzIHtcclxuICAgIGNvbnN0cnVjdG9yIChnKSB7XHJcbiAgICAgICAgdGhpcy5nID0gZztcclxuICAgICAgICB0aGlzLm1pcCA9IHRydWU7XHJcbiAgICAgICAgdGhpcy52ZXJib3NlID0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy5lbGFwc2VkVGltZSA9IDBcclxuICAgIH1cclxuXHJcbiAgICBhc3luYyBhcnJhbmdlKCl7XHJcblxyXG4gICAgICAgIGxldCBzdGFydFRpbWUgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKVxyXG5cclxuICAgICAgICAvLyBidWlsZCBtb2RlbCBmcm9tIGdyYXBoXHJcbiAgICAgICAgbGV0IG1vZGVsID0ge31cclxuXHJcbiAgICAgICAgdGhpcy5maWxsTW9kZWwobW9kZWwpXHJcbiAgICAgICAgbGV0IHByb2IgPSB0aGlzLm1vZGVsVG9TdHJpbmcobW9kZWwpXHJcbiAgICAgICAgLy9jb25zb2xlLmxvZyhwcm9iKVxyXG5cclxuICAgICAgICAvLyBzb2x2ZVxyXG4gICAgICAgIGxldCByZXN1bHQgPSB7fSwgb2JqZWN0aXZlLCBpO1xyXG5cclxuICAgICAgICBpZiAodGhpcy52ZXJib3NlKSBnbHBfc2V0X3ByaW50X2Z1bmMoY29uc29sZS5sb2cpO1xyXG5cclxuICAgICAgICBsZXQgbHAgPSBnbHBfY3JlYXRlX3Byb2IoKTtcclxuICAgICAgICBnbHBfcmVhZF9scF9mcm9tX3N0cmluZyhscCwgbnVsbCwgcHJvYik7XHJcblxyXG4gICAgICAgIGdscF9zY2FsZV9wcm9iKGxwLCBHTFBfU0ZfQVVUTyk7XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgIGxldCBzbWNwID0gbmV3IFNNQ1Aoe3ByZXNvbHZlOiBHTFBfT059KTtcclxuICAgICAgICBnbHBfc2ltcGxleChscCwgc21jcCk7XHJcblxyXG4gICAgICAgIGlmICh0aGlzLm1pcCl7XHJcbiAgICAgICAgICAgIGdscF9pbnRvcHQobHApO1xyXG4gICAgICAgICAgICBvYmplY3RpdmUgPSBnbHBfbWlwX29ial92YWwobHApO1xyXG5cclxuICAgICAgICAgICAgZm9yKGkgPSAxOyBpIDw9IGdscF9nZXRfbnVtX2NvbHMobHApOyBpKyspe1xyXG4gICAgICAgICAgICAgICAgcmVzdWx0W2dscF9nZXRfY29sX25hbWUobHAsIGkpXSA9IGdscF9taXBfY29sX3ZhbChscCwgaSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBvYmplY3RpdmUgPSBnbHBfZ2V0X29ial92YWwobHApO1xyXG4gICAgICAgICAgICBmb3IoaSA9IDE7IGkgPD0gZ2xwX2dldF9udW1fY29scyhscCk7IGkrKyl7XHJcbiAgICAgICAgICAgICAgICByZXN1bHRbZ2xwX2dldF9jb2xfbmFtZShscCwgaSldID0gZ2xwX2dldF9jb2xfcHJpbSAobHAsIGkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLmFwcGx5X3NvbHV0aW9uKHJlc3VsdClcclxuXHJcbiAgICAgICAgdGhpcy5lbGFwc2VkVGltZSA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpIC0gc3RhcnRUaW1lXHJcbiAgICAgICAgXHJcbiAgICB9XHJcblxyXG4gICAgZmlsbE1vZGVsKG1vZGVsKXtcclxuXHJcbiAgICAgICAgdGhpcy5tID0gMzA7IC8vIFRPRE86IGNoYW5nZSB0aGlzXHJcbiAgICAgICAgdGhpcy56Y291bnQgPSAwO1xyXG4gICAgICAgIHRoaXMuYnVmZmVyID0gMjtcclxuXHJcbiAgICAgICAgbW9kZWwubWluaW1pemUgPSBcIk1pbmltaXplIFxcblwiXHJcbiAgICAgICAgbW9kZWwuc3ViamVjdFRvID0gXCJTdWJqZWN0IFRvIFxcblwiXHJcbiAgICAgICAgbW9kZWwuYm91bmRzID0gXCJcXG5Cb3VuZHMgXFxuXCJcclxuXHJcbiAgICAgICAgdGhpcy5kZWZpbml0aW9ucyA9IHt9XHJcbiAgICAgICAgbGV0IGNyb3NzaW5nX3ZhcnMgPSB7fVxyXG5cclxuICAgICAgICBsZXQgbWtjID0gKHUxLCB2MSwgdTIsIHYyKSA9PiB7XHJcbiAgICAgICAgICAgIGxldCByZXMgPSBcImNfXCIgKyB1MSArIHYxICsgXCJfXCIgKyB1MiArIHYyO1xyXG4gICAgICAgICAgICBjcm9zc2luZ192YXJzW3Jlc10gPSBcIlwiXHJcbiAgICAgICAgICAgIHJldHVybiByZXNcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIHN0b3JlIGFsbCB2YXJpYWJsZSBuYW1lcyBpbiBvcmRlclxyXG4gICAgICAgIGZvciAobGV0IGs9MDsgayA8IHRoaXMuZy5tYXhEZXB0aCArIDE7IGsrKyl7XHJcbiAgICAgICAgICAgIGxldCBsYXllclRhYmxlcyA9IHRoaXMuZy50YWJsZUluZGV4W2tdO1xyXG4gICAgICAgICAgICBsZXQgbGF5ZXJBdHRyaWJ1dGVzID0gbGF5ZXJUYWJsZXMubWFwKHQgPT4gdC5hdHRyaWJ1dGVzKS5mbGF0KCk7XHJcblxyXG4gICAgICAgICAgICAvLyBzdG9yZSB0YWJsZXNcclxuICAgICAgICAgICAgZm9yIChsZXQgaT0wOyBpPGxheWVyVGFibGVzLmxlbmd0aDsgaSsrKXtcclxuICAgICAgICAgICAgICAgIGxldCB0MSA9IGxheWVyVGFibGVzW2ldLmlkO1xyXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgaj1pKzE7IGo8bGF5ZXJUYWJsZXMubGVuZ3RoOyBqKyspe1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCB0MiA9IGxheWVyVGFibGVzW2pdLmlkO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZGVmaW5pdGlvbnNbdGhpcy5ta3hCYXNlKHQxLCB0MiwgJ1QnKV0gPSAnJ1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAvLyBzdG9yZSBhdHRyaWJ1dGVzXHJcbiAgICAgICAgICAgIGZvciAobGV0IGk9MDsgaTxsYXllckF0dHJpYnV0ZXMubGVuZ3RoOyBpKyspe1xyXG4gICAgICAgICAgICAgICAgbGV0IGExID0gbGF5ZXJBdHRyaWJ1dGVzW2ldLmlkO1xyXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgaj1pKzE7IGo8bGF5ZXJBdHRyaWJ1dGVzLmxlbmd0aDsgaisrKXtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgYTIgPSBsYXllckF0dHJpYnV0ZXNbal0uaWQ7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5kZWZpbml0aW9uc1t0aGlzLm1reEJhc2UoYTEsIGEyKV0gPSAnJ1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBhbGwgZ3JvdXBzIHNob3VsZCBoYXZlIHRoZSBzYW1lIHlfc3RhcnQgYW5kIHlfZW5kIG9uIGV2ZXJ5IGRlcHRoXHJcbiAgICAgICAgZm9yIChsZXQgZ3JvdXAgb2YgdGhpcy5nLmdyb3Vwcyl7XHJcbiAgICAgICAgICAgIGZvciAobGV0IHRhYmxlIG9mIGdyb3VwLnRhYmxlcyl7XHJcbiAgICAgICAgICAgICAgICBtb2RlbC5zdWJqZWN0VG8gKz0gXCJ5X2dyb3Vwc3RhcnRfXCIgKyBncm91cC5pZCArIFwiIC0geV9cIiArIHRhYmxlLmlkICsgXCIgPD0gMFxcblwiO1xyXG4gICAgICAgICAgICAgICAgbW9kZWwuc3ViamVjdFRvICs9IFwieV9ncm91cGVuZF9cIiArIGdyb3VwLmlkICsgXCIgLSB5X1wiICsgdGFibGUuaWQgKyBcIiA+PSBcIiArICh0YWJsZS5hdHRyaWJ1dGVzLmxlbmd0aCArIHRoaXMuYnVmZmVyKSArIFwiXFxuXCI7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGZvciAobGV0IHRhYmxlIG9mIHRoaXMuZy50YWJsZXMpe1xyXG4gICAgICAgICAgICAgICAgaWYgKGdyb3VwLnRhYmxlcy5pbmRleE9mKHRhYmxlKSA9PSAtMSAmJiBncm91cC50YWJsZXMubWFwKHQgPT4gdC5kZXB0aCkuaW5kZXhPZih0YWJsZS5kZXB0aCkgIT0gLTEpe1xyXG4gICAgICAgICAgICAgICAgICAgIG1vZGVsLnN1YmplY3RUbyArPSBcInlfXCIgKyB0YWJsZS5pZCArIFwiIC0gXCIgKyBtICsgXCIgel9cIiArIHRoaXMuemNvdW50ICsgXCIgLSB5X2dyb3Vwc3RhcnRfXCIgKyBncm91cC5pZCArIFwiIDw9IC0gXCIgKyAodGFibGUuYXR0cmlidXRlcy5sZW5ndGggKyB0aGlzLmJ1ZmZlcikgKyBcIlxcblwiO1xyXG4gICAgICAgICAgICAgICAgICAgIG1vZGVsLnN1YmplY3RUbyArPSBcIi0geV9cIiArIHRhYmxlLmlkICsgXCIgKyBcIiArIG0gKyBcIiB6X1wiICsgdGhpcy56Y291bnQgKyBcIiArIHlfZ3JvdXBlbmRfXCIgKyBncm91cC5pZCArIFwiIDw9IFwiICsgbSArIFwiXFxuXCJcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnpjb3VudCArPSAxO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZvciAobGV0IGk9MDsgaTw9dGhpcy56Y291bnQ7IGkrKyl7XHJcbiAgICAgICAgICAgIG1vZGVsLmJvdW5kcyArPSBcImJpbmFyeSB6X1wiICsgaSArIFwiXFxuXCIgXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBsZXQgZ2V0Rmlyc3RMZXZlbENvbnRhaW5lcnNJbkRlcHRoID0gKGRlcHRoKSA9PiB7XHJcbiAgICAgICAgICAgIGxldCBsYXllclRhYmxlcyA9IHRoaXMuZy50YWJsZUluZGV4W2RlcHRoXTtcclxuICAgICAgICAgICAgbGV0IGxheWVyVGFibGVzT3V0c2lkZUdyb3VwcyA9IGxheWVyVGFibGVzLmZpbHRlcih0ID0+IHQuZ3JvdXBzLmxlbmd0aCA9PSAwKTtcclxuICAgICAgICAgICAgbGV0IGxheWVyR3JvdXBzID0gWy4uLm5ldyBTZXQobGF5ZXJUYWJsZXMubWFwKHQgPT4gdC5ncm91cHMpLmZsYXQoKSldO1xyXG5cclxuICAgICAgICAgICAgcmV0dXJuIGxheWVyR3JvdXBzLmNvbmNhdChsYXllclRhYmxlc091dHNpZGVHcm91cHMpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgbGV0IGdldFNlY29uZExldmVsQ29udGFpbmVyc0luRGVwdGhJbkNvbnRhaW5lciA9IChkZXB0aCwgY29udGFpbmVyKSA9PiB7XHJcblxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgbGV0IG1reERpY3QgPSAoc2lnbiwgdTEsIHUyKSA9PiB7XHJcbiAgICAgICAgICAgIGxldCByZXMgPSBcIlwiXHJcbiAgICAgICAgICAgIGxldCBhY2N1bXVsYXRvciA9IDBcclxuICAgICAgICAgICAgbGV0IG9wcHNpZ24gPSBcIiAtIFwiXHJcblxyXG4gICAgICAgICAgICBpZiAoc2lnbiA9PSBcIiAtIFwiKSBvcHBzaWduID0gXCIgKyBcIlxyXG5cclxuICAgICAgICAgICAgbGV0IHAgPSB0aGlzLm1reEJhc2UodTEsIHUyKVxyXG4gICAgICAgICAgICBpZiAodGhpcy5kZWZpbml0aW9uc1twXSAhPSB1bmRlZmluZWQpe1xyXG4gICAgICAgICAgICAgICAgcmVzICs9IHNpZ24gKyBwXHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBwID0gdGhpcy5ta3hCYXNlKHUyLCB1MSlcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLmRlZmluaXRpb25zW3BdID09IHVuZGVmaW5lZCkgY29uc29sZS53YXJuKHAgKyBcIm5vdCBkZWZpbmVkXCIpO1xyXG4gICAgICAgICAgICAgICAgYWNjdW11bGF0b3IgLT0gMVxyXG4gICAgICAgICAgICAgICAgcmVzICs9IG9wcHNpZ24gKyBwXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHJldHVybiBbcmVzLCBhY2N1bXVsYXRvcl07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIFxyXG4gICAgICAgIGZvciAobGV0IGs9MDsgayA8IHRoaXMuZy5tYXhEZXB0aCArIDE7IGsrKyl7XHJcbiAgICAgICAgICAgIGxldCBsYXllclRhYmxlcyA9IHRoaXMuZy50YWJsZUluZGV4W2tdO1xyXG4gICAgICAgICAgICBsZXQgbGF5ZXJBdHRyaWJ1dGVzID0gbGF5ZXJUYWJsZXMubWFwKHQgPT4gdC5hdHRyaWJ1dGVzKS5mbGF0KClcclxuXHJcbiAgICAgICAgICAgIC8vIGxldCBmaXJzdExldmVsQ29udGFpbmVycyA9IGdldEZpcnN0TGV2ZWxDb250YWluZXJzSW5EZXB0aChrKTtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIC8vIGdsb2JhbCBvcmRlcmluZyBvZiB0YWJsZXMgXHJcbiAgICAgICAgICAgIGZvciAobGV0IGk9MDsgaTxsYXllclRhYmxlcy5sZW5ndGg7IGkrKyl7XHJcbiAgICAgICAgICAgICAgICBsZXQgdDEgPSBsYXllclRhYmxlc1tpXS5pZDtcclxuXHJcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBqID0gaSsxOyBqIDwgbGF5ZXJUYWJsZXMubGVuZ3RoOyBqKyspe1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCB0MiA9IGxheWVyVGFibGVzW2pdLmlkO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBtID0gaiArIDE7IG0gPCBsYXllclRhYmxlcy5sZW5ndGg7IG0rKyl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCB0MyA9IGxheWVyVGFibGVzW21dLmlkO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgbW9kZWwuc3ViamVjdFRvICs9IFwiXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICsgdGhpcy5ta3hCYXNlKHQxLCB0MiwgJ1QnKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKyBcIiArIFwiICsgdGhpcy5ta3hCYXNlKHQyLCB0MywgJ1QnKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKyBcIiAtIFwiICsgdGhpcy5ta3hCYXNlKHQxLCB0MywgJ1QnKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKyBcIiA+PSAwXFxuXCJcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1vZGVsLnN1YmplY3RUbyArPSBcIlwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICArIFwiLSBcIiArIHRoaXMubWt4QmFzZSh0MSwgdDIsICdUJylcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICsgXCIgLSBcIiArIHRoaXMubWt4QmFzZSh0MiwgdDMsICdUJylcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICsgXCIgKyBcIiArIHRoaXMubWt4QmFzZSh0MSwgdDMsICdUJylcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICsgXCIgPj0gLTFcXG5cIlxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLy8gZ2xvYmFsIG9yZGVyaW5nIG9mIGF0dHJpYnV0ZXNcclxuICAgICAgICAgICAgLy8gY29uc3RyYWludHMgZ2VuZXJhdGVkOiBPICggbnVtX3RhYmxlcyAqIG51bV9hdHRyaWJ1dGVzX3Blcl90YWJsZVt2YXJpYWJsZV0gKVxyXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxheWVyQXR0cmlidXRlcy5sZW5ndGg7IGkrKyl7XHJcbiAgICAgICAgICAgICAgICBsZXQgdDEgPSBsYXllckF0dHJpYnV0ZXNbaV0uaWQ7XHJcbiAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgIGZvciAobGV0IGogPSBpKzE7IGogPCBsYXllckF0dHJpYnV0ZXMubGVuZ3RoOyBqKyspe1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCB0MiA9IGxheWVyQXR0cmlidXRlc1tqXS5pZDtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoaSA9PSBqKSBjb250aW51ZTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gYXR0cnMgZG9uJ3QgbmVlZCB0cmFuc2l0aXZpdHkgaWYgdGhleSBhcmUgbm90IGluIHRoZSBzYW1lIHRhYmxlIC0gaXQncyBhbHJlYWR5IGdpdmVuIGJ5IHRoZSB0YWJsZVxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChsYXllckF0dHJpYnV0ZXNbaV0udGFibGUuaWQgIT0gbGF5ZXJBdHRyaWJ1dGVzW2pdLnRhYmxlLmlkKSBjb250aW51ZVxyXG5cclxuICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBtID0gaisxOyBtIDwgbGF5ZXJBdHRyaWJ1dGVzLmxlbmd0aDsgbSsrKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG0gPT0gaiB8fCBtID09IGkpIGNvbnRpbnVlXHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBhZ2FpbiwgYWxsIGF0dHJpYnV0ZXMgc2hvdWxkIGJlIGluIHRoZSBzYW1lIHRhYmxlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChsYXllckF0dHJpYnV0ZXNbbV0udGFibGUuaWQgIT0gbGF5ZXJBdHRyaWJ1dGVzW2ldLnRhYmxlLmlkKSBjb250aW51ZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobGF5ZXJBdHRyaWJ1dGVzW21dLnRhYmxlLmlkICE9IGxheWVyQXR0cmlidXRlc1tqXS50YWJsZS5pZCkgY29udGludWVcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCB0MyA9IGxheWVyQXR0cmlidXRlc1ttXS5pZDtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1vZGVsLnN1YmplY3RUbyArPSBcIlwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICArIHRoaXMubWt4QmFzZSh0MSwgdDIpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICArIFwiICsgXCIgKyB0aGlzLm1reEJhc2UodDIsIHQzKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKyBcIiAtIFwiICsgdGhpcy5ta3hCYXNlKHQxLCB0MylcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICsgXCIgPj0gMFxcblwiXHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBtb2RlbC5zdWJqZWN0VG8gKz0gXCJcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKyBcIi0gXCIgKyB0aGlzLm1reEJhc2UodDEsIHQyKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKyBcIiAtIFwiICsgdGhpcy5ta3hCYXNlKHQyLCB0MylcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICsgXCIgKyBcIiArIHRoaXMubWt4QmFzZSh0MSwgdDMpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICArIFwiID49IC0xXFxuXCJcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIGRldGVybWluaW5nIGNyb3NzaW5nc1xyXG4gICAgICAgIGZvciAobGV0IGs9MDsgayA8IHRoaXMuZy5tYXhEZXB0aCArIDE7IGsrKyl7XHJcbiAgICAgICAgICAgIGxldCBsYXllckVkZ2VzID0gdGhpcy5nLmVkZ2VJbmRleFtrXVxyXG5cclxuICAgICAgICAgICAgZm9yIChsZXQgaT0wOyBpPGxheWVyRWRnZXMubGVuZ3RoOyBpKyspe1xyXG4gICAgICAgICAgICAgICAgbGV0IHUxdjEgPSBsYXllckVkZ2VzW2ldO1xyXG5cclxuICAgICAgICAgICAgICAgIGZvciAobGV0IGo9aSsxOyBqPGxheWVyRWRnZXMubGVuZ3RoOyBqKyspe1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCB1MnYyID0gbGF5ZXJFZGdlc1tqXTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gbmV3OiBtYW5hZ2luZyBncm91cHNcclxuICAgICAgICAgICAgICAgICAgICAvLyBlZGdlcyB0aGF0IGFyZSBvdXRzaWRlIG9mIGdyb3VwcyBzaG91bGQgbmV2ZXIgY3Jvc3Mgd2l0aCBlZGdlcyB0aGF0IGFyZSBpbnNpZGUgb2YgZ3JvdXBzXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gaWYgKHUxdjEubGVmdFRhYmxlLmdyb3VwICE9IHVuZGVmaW5lZCAmJiB1MXYxLnJpZ2h0VGFibGUuZ3JvdXAgIT0gdW5kZWZpbmVkKXtcclxuICAgICAgICAgICAgICAgICAgICAvLyAgICAgaWYgKHUydjIubGVmdFRhYmxlLmdyb3VwICE9IHUydjIubGVmdFRhYmxlLmdyb3VwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gICAgICAgICBtb2RlbC5zdWJqZWN0VG8gKz0gbWtjKHUxLCB2MSwgdTIsIHYyKSArIFwiID0gMFxcblwiO1xyXG4gICAgICAgICAgICAgICAgICAgIC8vICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICBsZXQgdTEgPSB1MXYxLmxlZnRBdHRyaWJ1dGUuaWRcclxuICAgICAgICAgICAgICAgICAgICBsZXQgdjEgPSB1MXYxLnJpZ2h0QXR0cmlidXRlLmlkXHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IHUyID0gdTJ2Mi5sZWZ0QXR0cmlidXRlLmlkXHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IHYyID0gdTJ2Mi5yaWdodEF0dHJpYnV0ZS5pZFxyXG5cclxuICAgICAgICAgICAgICAgICAgICAvLyBub3Qgbm90XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCF0aGlzLmlzU2FtZVJhbmtFZGdlKHUxdjEpICYmICF0aGlzLmlzU2FtZVJhbmtFZGdlKHUydjIpKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHUxID09IHUyIHx8IHYxID09IHYyKSBjb250aW51ZVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHAxID0gbWtjKHUxLCB2MSwgdTIsIHYyKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgZmluYWxzdW0gPSAxICsgbWt4RGljdChcIiArIFwiLCB1MiwgdTEpWzFdICsgbWt4RGljdChcIiArIFwiLCB2MSwgdjIpWzFdXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1vZGVsLnN1YmplY3RUbyArPSBwMSArIFwiXCIgKyBta3hEaWN0KFwiICsgXCIsIHUyLCB1MSlbMF0gKyBta3hEaWN0KFwiICsgXCIsIHYxLCB2MilbMF1cclxuICAgICAgICAgICAgICAgICAgICAgICAgbW9kZWwuc3ViamVjdFRvICs9IFwiID49IFwiICsgZmluYWxzdW0gKyBcIlxcblwiXHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBwMSA9IG1rYyh1MSwgdjEsIHUyLCB2MilcclxuICAgICAgICAgICAgICAgICAgICAgICAgZmluYWxzdW0gPSAxICsgbWt4RGljdChcIiArIFwiLCB1MSwgdTIpWzFdICsgbWt4RGljdChcIiArIFwiLCB2MiwgdjEpWzFdXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1vZGVsLnN1YmplY3RUbyArPSBwMSArIFwiXCIgKyBta3hEaWN0KFwiICsgXCIsIHUxLCB1MilbMF0gKyBta3hEaWN0KFwiICsgXCIsIHYyLCB2MSlbMF1cclxuICAgICAgICAgICAgICAgICAgICAgICAgbW9kZWwuc3ViamVjdFRvICs9IFwiID49IFwiICsgZmluYWxzdW0gKyBcIlxcblwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgIC8vIGlmIHRoZXkgYXJlIGJvdGggc2FtZSByYW5rIGVkZ2VzXHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICh0aGlzLmlzU2FtZVJhbmtFZGdlKHUxdjEpICYmIHRoaXMuaXNTYW1lUmFua0VkZ2UodTJ2MikpIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBwMSA9IG1rYyh1MSwgdjEsIHUyLCB2MilcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGZpbmFsc3VtID0gMSArIG1reERpY3QoXCIgKyBcIiwgdTEsIHUyKVsxXSArIG1reERpY3QoXCIgKyBcIiwgdjEsIHYyKVsxXSArIG1reERpY3QoXCIgKyBcIiwgdTIsIHYxKVsxXVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBtb2RlbC5zdWJqZWN0VG8gKz0gcDEgKyBcIlwiICsgbWt4RGljdChcIiArIFwiLCB1MSwgdTIpWzBdICsgbWt4RGljdChcIiArIFwiLCB2MSwgdjIpWzBdICsgbWt4RGljdChcIiArIFwiLCB1MiwgdjEpWzBdXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1vZGVsLnN1YmplY3RUbyArPSBcIiA+PSBcIiArIGZpbmFsc3VtICsgXCJcXG5cIlxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgcDEgPSBta2ModTEsIHYxLCB1MiwgdjIpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZpbmFsc3VtID0gMSArIG1reERpY3QoXCIgKyBcIiwgdTEsIHUyKVsxXSArIG1reERpY3QoXCIgKyBcIiwgdjEsIHYyKVsxXSArIG1reERpY3QoXCIgKyBcIiwgdjIsIHUxKVsxXVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBtb2RlbC5zdWJqZWN0VG8gKz0gcDEgKyBcIlwiICsgbWt4RGljdChcIiArIFwiLCB1MSwgdTIpWzBdICsgbWt4RGljdChcIiArIFwiLCB2MSwgdjIpWzBdICsgbWt4RGljdChcIiArIFwiLCB2MiwgdTEpWzBdXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1vZGVsLnN1YmplY3RUbyArPSBcIiA+PSBcIiArIGZpbmFsc3VtICsgXCJcXG5cIlxyXG5cclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMuaXNTYW1lUmFua0VkZ2UodTF2MSkgJiYgIXRoaXMuaXNTYW1lUmFua0VkZ2UodTJ2MikpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBwMSA9IG1rYyh1MSwgdjEsIHUyLCB2MilcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGZpbmFsc3VtID0gMSArIG1reERpY3QoXCIgKyBcIiwgdTIsIHUxKVsxXSArIG1reERpY3QoXCIgKyBcIiwgdjEsIHUyKVsxXVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBtb2RlbC5zdWJqZWN0VG8gKz0gcDEgKyBcIlwiICsgbWt4RGljdChcIiArIFwiLCB1MiwgdTEpWzBdICsgbWt4RGljdChcIiArIFwiLCB2MSwgdTIpWzBdXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1vZGVsLnN1YmplY3RUbyArPSBcIiA+PSBcIiArIGZpbmFsc3VtICsgXCJcXG5cIlxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgcDEgPSBta2ModTEsIHYxLCB1MiwgdjIpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZpbmFsc3VtID0gMSArIG1reERpY3QoXCIgKyBcIiwgdTIsIHYxKVsxXSArIG1reERpY3QoXCIgKyBcIiwgdTEsIHUyKVsxXVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBtb2RlbC5zdWJqZWN0VG8gKz0gcDEgKyBcIlwiICsgbWt4RGljdChcIiArIFwiLCB1MiwgdjEpWzBdICsgbWt4RGljdChcIiArIFwiLCB1MSwgdTIpWzBdXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1vZGVsLnN1YmplY3RUbyArPSBcIiA+PSBcIiArIGZpbmFsc3VtICsgXCJcXG5cIlxyXG5cclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKCF0aGlzLmlzU2FtZVJhbmtFZGdlKHUxdjEpICYmIHRoaXMuaXNTYW1lUmFua0VkZ2UodTJ2MikpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gY29uc29sZS5sb2codTEsIHYxLCB1MiwgdjIpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBwMSA9IG1rYyh1MSwgdjEsIHUyLCB2MilcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGZpbmFsc3VtID0gMSArIG1reERpY3QoXCIgKyBcIiwgdTEsIHUyKVsxXSArIG1reERpY3QoXCIgKyBcIiwgdjIsIHUxKVsxXVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBtb2RlbC5zdWJqZWN0VG8gKz0gcDEgKyBcIlwiICsgbWt4RGljdChcIiArIFwiLCB1MSwgdTIpWzBdICsgbWt4RGljdChcIiArIFwiLCB2MiwgdTEpWzBdXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1vZGVsLnN1YmplY3RUbyArPSBcIiA+PSBcIiArIGZpbmFsc3VtICsgXCJcXG5cIlxyXG5cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHAxID0gbWtjKHUxLCB2MSwgdTIsIHYyKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBmaW5hbHN1bSA9IDEgKyBta3hEaWN0KFwiICsgXCIsIHUxLCB2MilbMV0gKyBta3hEaWN0KFwiICsgXCIsIHUyLCB1MSlbMV0gXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1vZGVsLnN1YmplY3RUbyArPSBwMSArIFwiXCIgKyBta3hEaWN0KFwiICsgXCIsIHUxLCB2MilbMF0gKyBta3hEaWN0KFwiICsgXCIsIHUyLCB1MSlbMF1cclxuICAgICAgICAgICAgICAgICAgICAgICAgbW9kZWwuc3ViamVjdFRvICs9IFwiID49IFwiICsgZmluYWxzdW0gKyBcIlxcblwiXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuXHJcbiAgICAgICAvLyBncm91cGluZyBjb25zdHJhaW50IG9mIGF0dHJpYnV0ZXMgd2l0aGluIHRhYmxlc1xyXG4gICAgICAgZm9yIChsZXQgaz0wOyBrPHRoaXMuZy5tYXhEZXB0aCArIDE7IGsrKyl7XHJcbiAgICAgICAgICAgIGxldCBsYXllclRhYmxlcyA9IHRoaXMuZy50YWJsZUluZGV4W2tdO1xyXG4gICAgICAgICAgICBsZXQgbGF5ZXJBdHRyaWJ1dGVzID0gbGF5ZXJUYWJsZXMubWFwKHQgPT4gdC5hdHRyaWJ1dGVzKS5mbGF0KClcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIGZvciAobGV0IGk9MDsgaTxsYXllckF0dHJpYnV0ZXMubGVuZ3RoOyBpKyspe1xyXG4gICAgICAgICAgICAgICAgbGV0IGF0dHIxID0gbGF5ZXJBdHRyaWJ1dGVzW2ldLmlkO1xyXG4gICAgICAgICAgICAgICAgbGV0IHQxID0gbGF5ZXJBdHRyaWJ1dGVzW2ldLnRhYmxlLmlkO1xyXG5cclxuICAgICAgICAgICAgICAgIGZvciAobGV0IGo9aSsxOyBqPGxheWVyQXR0cmlidXRlcy5sZW5ndGg7IGorKyl7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IGF0dHIyID0gbGF5ZXJBdHRyaWJ1dGVzW2pdLmlkO1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCB0MiA9IGxheWVyQXR0cmlidXRlc1tqXS50YWJsZS5pZFxyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAodDEgIT0gdDIpe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBtb2RlbC5zdWJqZWN0VG8gKz0gdGhpcy5ta3hCYXNlKGF0dHIxLCBhdHRyMikgKyBcIlwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICArIFwiIC0gXCIgKyB0aGlzLm1reEJhc2UodDEsIHQyLCAnVCcpIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKyBcIiA9IDBcXG5cIlxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gZmlsbCBmdW5jdGlvbiB0byBtaW5pbWl6ZVxyXG4gICAgICAgIGZvciAobGV0IGVsZW0gaW4gY3Jvc3NpbmdfdmFycyl7XHJcbiAgICAgICAgICAgIG1vZGVsLm1pbmltaXplICs9IGVsZW0gKyBcIiArIFwiXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLmFkZFNpbXBsZUJlbmRpbmVzcyh0aGlzLmcsIG1vZGVsKVxyXG5cclxuICAgICAgICBmb3IgKGxldCBlbGVtIGluIHRoaXMuZGVmaW5pdGlvbnMpe1xyXG4gICAgICAgICAgICBtb2RlbC5ib3VuZHMgKz0gXCJiaW5hcnkgXCIgKyBlbGVtICsgXCJcXG5cIlxyXG4gICAgICAgIH1cclxuICAgICAgICBmb3IgKGxldCBlbGVtIGluIGNyb3NzaW5nX3ZhcnMpe1xyXG4gICAgICAgICAgICBtb2RlbC5ib3VuZHMgKz0gXCJiaW5hcnkgXCIgKyBlbGVtICsgXCJcXG5cIlxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gY29uc29sZS5sb2codGhpcy5tb2RlbFRvU3RyaW5nKG1vZGVsKSlcclxuICAgICAgICBjb25zb2xlLmxvZyhcIm51bWJlciBvZiBjb25zdHJhaW50czogXCIsIG1vZGVsLnN1YmplY3RUby5zcGxpdChcIlxcblwiKS5sZW5ndGgpXHJcbiAgICB9XHJcblxyXG4gICAgaXNTYW1lUmFua0VkZ2UoZWRnZSl7XHJcbiAgICAgICAgcmV0dXJuIGVkZ2UubGVmdFRhYmxlLmRlcHRoID09IGVkZ2UucmlnaHRUYWJsZS5kZXB0aFxyXG4gICAgfVxyXG5cclxuICAgIG1vZGVsVG9TdHJpbmcobW9kZWwpe1xyXG4gICAgICAgIHJldHVybiBtb2RlbC5taW5pbWl6ZSArIG1vZGVsLnN1YmplY3RUbyArIG1vZGVsLmJvdW5kcyArICdcXG5FbmRcXG4nXHJcbiAgICB9XHJcblxyXG4gICAgbWt4QmFzZSh1MSwgdTIsIHByZT1cIlwiKXtcclxuICAgICAgICByZXR1cm4gXCJ4X1wiICsgcHJlICsgdTEgKyBcIl9cIiArIHByZSArIHUyXHJcbiAgICB9XHJcblxyXG4gICAgYWRkQmVuZGluZXNzUGx1c01heGltaXplQ3Jvc3NpbmdBbmdsZShnLCBtb2RlbCl7XHJcblxyXG4gICAgfVxyXG5cclxuICAgIGFkZFNpbXBsZUJlbmRpbmVzcyhnLCBtb2RlbCl7XHJcbiAgICAgICAgLy8gKioqKioqKioqKioqXHJcbiAgICAgICAgLy8gYmVuZGluZXNzXHJcbiAgICAgICAgLy8gKioqKioqKioqKioqXHJcbiAgICAgICAgZm9yIChsZXQgZSBvZiBnLmVkZ2VzKXtcclxuICAgICAgICAgICAgaWYgKHRoaXMuaXNTYW1lUmFua0VkZ2UoZSkpIGNvbnRpbnVlO1xyXG5cclxuICAgICAgICAgICAgbW9kZWwuc3ViamVjdFRvICs9IFxyXG4gICAgICAgICAgICAgICAgXCJ5X1wiICsgZS5sZWZ0QXR0cmlidXRlLmlkICsgXCIgLSBcIiArIFxyXG4gICAgICAgICAgICAgICAgXCJ5X1wiICsgZS5yaWdodEF0dHJpYnV0ZS5pZCArIFwiIC0gXCIgKyBcclxuICAgICAgICAgICAgICAgIFwiYmVuZF9cIiArIGUubGVmdEF0dHJpYnV0ZS5pZCArIFwiX1wiICsgZS5yaWdodEF0dHJpYnV0ZS5pZCArXHJcbiAgICAgICAgICAgICAgICBcIiA8PSAwXFxuXCJcclxuXHJcbiAgICAgICAgICAgIG1vZGVsLnN1YmplY3RUbyArPSBcclxuICAgICAgICAgICAgICAgIFwieV9cIiArIGUucmlnaHRBdHRyaWJ1dGUuaWQgKyBcIiAtIFwiICsgXHJcbiAgICAgICAgICAgICAgICBcInlfXCIgKyBlLmxlZnRBdHRyaWJ1dGUuaWQgKyBcIiAtIFwiICsgXHJcbiAgICAgICAgICAgICAgICBcImJlbmRfXCIgKyBlLmxlZnRBdHRyaWJ1dGUuaWQgKyBcIl9cIiArIGUucmlnaHRBdHRyaWJ1dGUuaWQgK1xyXG4gICAgICAgICAgICAgICAgXCIgPD0gMFxcblwiXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBkZWZpbml0aW9uIG9mIHRoZSB2ZXJ0aWNhbCBwb3NpdGlvbiBvZiB0aGUgdGFibGVzIGJhc2VkIG9uIHggdmFyc1xyXG4gICAgICAgIGZvciAobGV0IHRhYmxlQ29sIG9mIGcudGFibGVJbmRleCl7XHJcbiAgICAgICAgICAgIGZvciAobGV0IGkgaW4gdGFibGVDb2wpe1xyXG4gICAgICAgICAgICAgICAgbGV0IHQxID0gdGFibGVDb2xbaV07XHJcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBqIGluIHRhYmxlQ29sKXtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoaSA9PSBqKSBjb250aW51ZTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IHQyID0gdGFibGVDb2xbal07XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGxldCBwID0gdGhpcy5ta3hCYXNlKHQyLmlkLCB0MS5pZCwgJ1QnKVxyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmRlZmluaXRpb25zW3BdICE9IHVuZGVmaW5lZCl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1vZGVsLnN1YmplY3RUbyArPSBcInpfXCIgKyB0aGlzLnpjb3VudCArIFwiIC0gXCIgKyB0aGlzLm0gKyBcIiBcIiArIHAgKyBcIiA8PSAwXFxuXCIgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1vZGVsLnN1YmplY3RUbyArPSBcInpfXCIgKyB0aGlzLnpjb3VudCArIFwiIC0gXCIgKyBcInlfXCIgKyB0Mi5pZCArIFwiIDw9IDBcXG5cIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBtb2RlbC5zdWJqZWN0VG8gKz0gXCJ6X1wiICsgdGhpcy56Y291bnQgKyBcIiAtIFwiICsgXCJ5X1wiICsgdDIuaWQgKyBcIiAtIFwiICsgdGhpcy5tICsgXCIgXCIgKyBwICsgXCIgPj0gLSBcIiArIHRoaXMubSArIFwiXFxuXCIgIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBtb2RlbC5zdWJqZWN0VG8gKz0gXCJ6X1wiICsgdGhpcy56Y291bnQgKyBcIiA+PSAwXFxuXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgbW9kZWwuc3ViamVjdFRvICs9IFwieV9cIiArIHQxLmlkICsgXCIgLSBcIiArIFwiel9cIiArIHRoaXMuemNvdW50ICsgXCIgLSBcIiArICh0aGlzLmJ1ZmZlciArIHQyLmF0dHJpYnV0ZXMubGVuZ3RoKSArIFwiIFwiICsgcCArIFwiID49IDBcXG5cIlxyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHAgPSB0aGlzLm1reEJhc2UodDEuaWQsIHQyLmlkLCAnVCcpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1vZGVsLnN1YmplY3RUbyArPSBcInpfXCIgKyB0aGlzLnpjb3VudCArIFwiICsgXCIgKyB0aGlzLm0gKyBcIiBcIiArIHAgKyBcIiA8PSBcIiArIHRoaXMubSArIFwiXFxuXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgbW9kZWwuc3ViamVjdFRvICs9IFwiel9cIiArIHRoaXMuemNvdW50ICsgXCIgLSBcIiArIFwieV9cIiArIHQyLmlkICsgXCIgPD0gMFxcblwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1vZGVsLnN1YmplY3RUbyArPSBcInpfXCIgKyB0aGlzLnpjb3VudCArIFwiIC0gXCIgKyBcInlfXCIgKyB0Mi5pZCArIFwiICsgXCIgKyB0aGlzLm0gKyBcIiBcIiArIHAgKyBcIiA+PSAwXFxuXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgbW9kZWwuc3ViamVjdFRvICs9IFwiel9cIiArIHRoaXMuemNvdW50ICsgXCIgPj0gMFxcblwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1vZGVsLnN1YmplY3RUbyArPSBcInlfXCIgKyB0MS5pZCArIFwiIC0gXCIgKyBcInpfXCIgKyB0aGlzLnpjb3VudCArIFwiICsgXCIgKyAodGhpcy5idWZmZXIgKyB0Mi5hdHRyaWJ1dGVzLmxlbmd0aCkgKyBcIiBcIiArIHAgKyBcIiA+PSBcIiArICh0aGlzLmJ1ZmZlciArIHQyLmF0dHJpYnV0ZXMubGVuZ3RoKSArIFwiXFxuXCJcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy56Y291bnQgKz0gMVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBkZWZpbnRpb24gb2YgdGhlIHZlcnRpY2FsIHBvc2l0aW9uIG9mIHRoZSBhdHRyaWJ1dGVzIGJhc2VkIG9uIHRoZSB0YWJsZXMgYW5kIHRoZSB4IHZhcnMgb2YgdGhlIG90aGVyIGF0dHJpYnV0ZXMgaW4gdGhlIHRhYmxlXHJcbiAgICAgICAgZm9yIChsZXQgdCBvZiBnLnRhYmxlcyl7XHJcbiAgICAgICAgICAgIGZvciAobGV0IGkgaW4gdC5hdHRyaWJ1dGVzKXtcclxuICAgICAgICAgICAgICAgIGxldCBhMSA9IHQuYXR0cmlidXRlc1tpXVxyXG4gICAgICAgICAgICAgICAgbGV0IGFjY3VtdWxhdG9yID0gMVxyXG4gICAgICAgICAgICAgICAgbGV0IHRtcHN0ciA9IFwieV9cIiArIGExLmlkICsgXCIgLSBcIiArIFwieV9cIiArIHQuaWRcclxuICAgICAgICAgICAgICAgIGZvciAobGV0IGogaW4gdC5hdHRyaWJ1dGVzKXtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoaSA9PSBqKSBjb250aW51ZVxyXG4gICAgICAgICAgICAgICAgICAgIGxldCBhMiA9IHQuYXR0cmlidXRlc1tqXVxyXG4gICAgICAgICAgICAgICAgICAgIGxldCBwID0gIHRoaXMubWt4QmFzZShhMi5pZCwgYTEuaWQpXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuZGVmaW5pdGlvbnNbcF0gIT0gdW5kZWZpbmVkKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdG1wc3RyICs9IFwiIC0gXCIgKyBwXHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHAgPSB0aGlzLm1reEJhc2UoYTEuaWQsIGEyLmlkKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0bXBzdHIgKz0gXCIgKyBcIiArIHBcclxuICAgICAgICAgICAgICAgICAgICAgICAgYWNjdW11bGF0b3IgKz0gMVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICB0bXBzdHIgKz0gXCIgPSBcIiArIGFjY3VtdWxhdG9yICsgXCJcXG5cIlxyXG4gICAgICAgICAgICAgICAgbW9kZWwuc3ViamVjdFRvICs9IHRtcHN0clxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBhZGQgdG8gb2JqZWN0aXZlIGZ1bmN0aW9uXHJcbiAgICAgICAgZm9yIChsZXQgZSBvZiBnLmVkZ2VzKXtcclxuICAgICAgICAgICAgaWYgKHRoaXMuaXNTYW1lUmFua0VkZ2UoZSkpIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICBtb2RlbC5taW5pbWl6ZSArPSBcIjAuMSBiZW5kX1wiICsgZS5sZWZ0QXR0cmlidXRlLmlkICsgXCJfXCIgKyBlLnJpZ2h0QXR0cmlidXRlLmlkICsgXCIgKyBcIlxyXG4gICAgICAgIH1cclxuICAgICAgICBtb2RlbC5taW5pbWl6ZSA9IG1vZGVsLm1pbmltaXplLnN1YnN0cmluZygwLCBtb2RlbC5taW5pbWl6ZS5sZW5ndGggLSAyKSArIFwiXFxuXFxuXCJcclxuICAgIH1cclxuXHJcblxyXG4gICAgYXBwbHlfc29sdXRpb24oc29sdXRpb24pe1xyXG4gICAgICAgIGNvbnNvbGUubG9nKHNvbHV0aW9uKVxyXG4gICAgICAgIGZvciAobGV0IGk9MDsgaTx0aGlzLmcubWF4RGVwdGggKyAxOyBpKyspe1xyXG4gICAgICAgICAgICBsZXQgbGF5ZXJUYWJsZXMgPSB0aGlzLmcudGFibGVJbmRleFtpXTtcclxuXHJcbiAgICAgICAgICAgIGxheWVyVGFibGVzLnNvcnQoKGEsIGIpID0+IHtcclxuICAgICAgICAgICAgICAgIC8vY29uc29sZS5sb2coYS5pZCwgYi5pZCwgc29sdXRpb25bXCJ4X1RcIiArIGEuaWQgKyBcIl9UXCIgKyBiLmlkXSwgc29sdXRpb25bXCJ4X1RcIiArIGIuaWQgKyBcIl9UXCIgKyBhLmlkXSlcclxuICAgICAgICAgICAgICAgIGlmIChzb2x1dGlvbltcInhfVFwiICsgYS5pZCArIFwiX1RcIiArIGIuaWRdID09IDApIHJldHVybiAxXHJcbiAgICAgICAgICAgICAgICBlbHNlIGlmIChzb2x1dGlvbltcInhfVFwiICsgYS5pZCArIFwiX1RcIiArIGIuaWRdID09IDEpIHJldHVybiAtMVxyXG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoc29sdXRpb25bXCJ4X1RcIiArIGIuaWQgKyBcIl9UXCIgKyBhLmlkXSA9PSAxKSByZXR1cm4gMVxyXG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoc29sdXRpb25bXCJ4X1RcIiArIGIuaWQgKyBcIl9UXCIgKyBhLmlkXSA9PSAwKSByZXR1cm4gLTFcclxuICAgICAgICAgICAgfSlcclxuXHJcbiAgICAgICAgICAgIGZvciAobGV0IGsgaW4gbGF5ZXJUYWJsZXMpe1xyXG4gICAgICAgICAgICAgICAgbGF5ZXJUYWJsZXNba10ud2VpZ2h0ID0gaztcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgZm9yIChsZXQgdGFibGUgb2YgbGF5ZXJUYWJsZXMpe1xyXG4gICAgICAgICAgICAgICAgdGFibGUuYXR0cmlidXRlcy5zb3J0KChhLCBiKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy9pZiAoYi50YWJsZS5pZCA9PSBcIlQ4eTRcIikgY29uc29sZS5sb2coYS5pZCwgYi5pZCwgc29sdXRpb25bXCJ4X1wiICsgYi5pZCArIFwiX1wiICsgYS5pZF0pXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHNvbHV0aW9uW1wieF9cIiArIGEuaWQgKyBcIl9cIiArIGIuaWRdID09IDApIHJldHVybiAxXHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAoc29sdXRpb25bXCJ4X1wiICsgYS5pZCArIFwiX1wiICsgYi5pZF0gPT0gMSkgcmV0dXJuIC0xXHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAoc29sdXRpb25bXCJ4X1wiICsgYi5pZCArIFwiX1wiICsgYS5pZF0gPT0gMSkgcmV0dXJuIDFcclxuICAgICAgICAgICAgICAgICAgICBlbHNlIGlmIChzb2x1dGlvbltcInhfXCIgKyBiLmlkICsgXCJfXCIgKyBhLmlkXSA9PSAwKSByZXR1cm4gLTFcclxuICAgICAgICAgICAgICAgIH0pXHJcblxyXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgaj0wOyBqPHRhYmxlLmF0dHJpYnV0ZXMubGVuZ3RoOyBqKyspe1xyXG4gICAgICAgICAgICAgICAgICAgIHRhYmxlLmF0dHJpYnV0ZXNbal0ud2VpZ2h0ID0gajtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gKioqKioqKioqKlxyXG4gICAgICAgIC8vIGJlbmRpbmVzc1xyXG4gICAgICAgIC8vICoqKioqKioqKipcclxuICAgICAgICBmb3IgKGxldCBpPTA7IGk8dGhpcy5nLnRhYmxlSW5kZXgubGVuZ3RoOyBpKyspe1xyXG4gICAgICAgICAgICBsZXQgdGFibGVDb2wgPSB0aGlzLmcudGFibGVJbmRleFtpXTtcclxuICAgICAgICAgICAgZm9yIChsZXQgaj0wOyBqPHRhYmxlQ29sLmxlbmd0aDsgaisrKXtcclxuICAgICAgICAgICAgICAgIGxldCB0ID0gdGFibGVDb2xbal07XHJcblxyXG4gICAgICAgICAgICAgICAgbGV0IHZhbCA9IHNvbHV0aW9uW1wieV9cIiArIHQuaWRdXHJcbiAgICAgICAgICAgICAgICBpZiAodmFsID09IHVuZGVmaW5lZCkgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICB0LnZlcnRpY2FsQXR0ck9mZnNldCA9IHZhbCAtIHQud2VpZ2h0ICogdGhpcy5nLmJhc2VSb3dEaXN0YW5jZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxufSIsImNsYXNzIExQRm9ybXVsYXRpb24ge1xyXG4gICAgY29uc3RydWN0b3IgKGcpIHtcclxuICAgICAgICB0aGlzLmcgPSBnO1xyXG4gICAgICAgIHRoaXMubWlwID0gdHJ1ZTtcclxuICAgICAgICB0aGlzLnZlcmJvc2UgPSBmYWxzZTtcclxuICAgICAgICB0aGlzLmVsYXBzZWRUaW1lID0gMFxyXG4gICAgfVxyXG5cclxuICAgIGFzeW5jIGFycmFuZ2UoKXtcclxuXHJcbiAgICAgICAgbGV0IHN0YXJ0VGltZSA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpXHJcblxyXG4gICAgICAgIC8vIGJ1aWxkIG1vZGVsIGZyb20gZ3JhcGhcclxuICAgICAgICBsZXQgbW9kZWwgPSB7fVxyXG5cclxuICAgICAgICB0aGlzLmZpbGxNb2RlbChtb2RlbClcclxuICAgICAgICBsZXQgcHJvYiA9IHRoaXMubW9kZWxUb1N0cmluZyhtb2RlbClcclxuXHJcblxyXG4gICAgICAgIC8vIHNvbHZlXHJcbiAgICAgICAgbGV0IHJlc3VsdCA9IHt9LCBvYmplY3RpdmUsIGk7XHJcblxyXG4gICAgICAgIGlmICh0aGlzLnZlcmJvc2UpIGdscF9zZXRfcHJpbnRfZnVuYyhjb25zb2xlLmxvZyk7XHJcblxyXG4gICAgICAgIGxldCBscCA9IGdscF9jcmVhdGVfcHJvYigpO1xyXG4gICAgICAgIGdscF9yZWFkX2xwX2Zyb21fc3RyaW5nKGxwLCBudWxsLCBwcm9iKTtcclxuXHJcbiAgICAgICAgZ2xwX3NjYWxlX3Byb2IobHAsIEdMUF9TRl9BVVRPKTtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgbGV0IHNtY3AgPSBuZXcgU01DUCh7cHJlc29sdmU6IEdMUF9PTn0pO1xyXG4gICAgICAgIGdscF9zaW1wbGV4KGxwLCBzbWNwKTtcclxuXHJcbiAgICAgICAgaWYgKHRoaXMubWlwKXtcclxuICAgICAgICAgICAgZ2xwX2ludG9wdChscCk7XHJcbiAgICAgICAgICAgIG9iamVjdGl2ZSA9IGdscF9taXBfb2JqX3ZhbChscCk7XHJcblxyXG4gICAgICAgICAgICBmb3IoaSA9IDE7IGkgPD0gZ2xwX2dldF9udW1fY29scyhscCk7IGkrKyl7XHJcbiAgICAgICAgICAgICAgICByZXN1bHRbZ2xwX2dldF9jb2xfbmFtZShscCwgaSldID0gZ2xwX21pcF9jb2xfdmFsKGxwLCBpKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIG9iamVjdGl2ZSA9IGdscF9nZXRfb2JqX3ZhbChscCk7XHJcbiAgICAgICAgICAgIGZvcihpID0gMTsgaSA8PSBnbHBfZ2V0X251bV9jb2xzKGxwKTsgaSsrKXtcclxuICAgICAgICAgICAgICAgIHJlc3VsdFtnbHBfZ2V0X2NvbF9uYW1lKGxwLCBpKV0gPSBnbHBfZ2V0X2NvbF9wcmltIChscCwgaSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuYXBwbHlfc29sdXRpb24ocmVzdWx0KVxyXG5cclxuICAgICAgICB0aGlzLmVsYXBzZWRUaW1lID0gbmV3IERhdGUoKS5nZXRUaW1lKCkgLSBzdGFydFRpbWVcclxuICAgICAgICBcclxuICAgIH1cclxuXHJcbiAgICBmaWxsTW9kZWwobW9kZWwpe1xyXG4gICAgICAgIG1vZGVsLm1pbmltaXplID0gXCJNaW5pbWl6ZSBcXG5cIlxyXG4gICAgICAgIG1vZGVsLnN1YmplY3RUbyA9IFwiU3ViamVjdCBUbyBcXG5cIlxyXG4gICAgICAgIG1vZGVsLmJvdW5kcyA9IFwiXFxuQm91bmRzIFxcblwiXHJcblxyXG4gICAgICAgIGxldCBkZWZpbml0aW9ucyA9IHt9XHJcbiAgICAgICAgbGV0IGNyb3NzaW5nX3ZhcnMgPSB7fVxyXG5cclxuICAgICAgICBsZXQgbWtjID0gKHUxLCB2MSwgdTIsIHYyKSA9PiB7XHJcbiAgICAgICAgICAgIGxldCByZXMgPSBcImNfXCIgKyB1MSArIHYxICsgXCJfXCIgKyB1MiArIHYyO1xyXG4gICAgICAgICAgICBjcm9zc2luZ192YXJzW3Jlc10gPSBcIlwiXHJcbiAgICAgICAgICAgIHJldHVybiByZXNcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGxldCBta3ggPSAodTEsIHUyLCBwcmU9XCJcIikgPT4ge1xyXG4gICAgICAgICAgICBsZXQgcmVzID0gXCJ4X1wiICsgcHJlICsgdTEgKyBcIl9cIiArIHByZSArIHUyXHJcbiAgICAgICAgICAgIGxldCBvcHBvc2l0ZXJlcyA9IFwieF9cIiArIHByZSArIHUyICsgXCJfXCIgKyBwcmUgKyB1MVxyXG4gICAgICAgICAgICBsZXQgb2Zmc2V0ID0gMFxyXG5cclxuICAgICAgICAgICAgaWYgKGRlZmluaXRpb25zW29wcG9zaXRlcmVzXSAhPSB1bmRlZmluZWQpe1xyXG4gICAgICAgICAgICAgICAgb2Zmc2V0IC09IDFcclxuICAgICAgICAgICAgICAgIHJldHVybiBbXCIgLSBcIiArIG9wcG9zaXRlcmVzLCBvZmZzZXRdXHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoZGVmaW5pdGlvbnNbcmVzXSA9PSB1bmRlZmluZWQpe1xyXG4gICAgICAgICAgICAgICAgLy9kZWZpbml0aW9uc1tyZXNdID0gJydcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gW1wiICsgXCIgKyByZXMsIG9mZnNldF1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGxldCBta3hCYXNlID0gKHUxLCB1MiwgcHJlPVwiXCIpID0+IHtcclxuICAgICAgICAgICAgcmV0dXJuIFwieF9cIiArIHByZSArIHUxICsgXCJfXCIgKyBwcmUgKyB1MlxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gc3RvcmUgYWxsIHZhcmlhYmxlIG5hbWVzIGluIG9yZGVyXHJcbiAgICAgICAgZm9yIChsZXQgaz0wOyBrIDwgdGhpcy5nLm1heERlcHRoICsgMTsgaysrKXtcclxuICAgICAgICAgICAgbGV0IGxheWVyVGFibGVzID0gdGhpcy5nLnRhYmxlSW5kZXhba107XHJcbiAgICAgICAgICAgIGxldCBsYXllckF0dHJpYnV0ZXMgPSBsYXllclRhYmxlcy5tYXAodCA9PiB0LmF0dHJpYnV0ZXMpLmZsYXQoKTtcclxuXHJcbiAgICAgICAgICAgIC8vIHN0b3JlIHRhYmxlc1xyXG4gICAgICAgICAgICBmb3IgKGxldCBpPTA7IGk8bGF5ZXJUYWJsZXMubGVuZ3RoOyBpKyspe1xyXG4gICAgICAgICAgICAgICAgbGV0IHQxID0gbGF5ZXJUYWJsZXNbaV0ubmFtZTtcclxuICAgICAgICAgICAgICAgIGZvciAobGV0IGo9aSsxOyBqPGxheWVyVGFibGVzLmxlbmd0aDsgaisrKXtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgdDIgPSBsYXllclRhYmxlc1tqXS5uYW1lO1xyXG4gICAgICAgICAgICAgICAgICAgIGRlZmluaXRpb25zW21reEJhc2UodDEsIHQyLCAnVCcpXSA9ICcnXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8vIHN0b3JlIGF0dHJpYnV0ZXNcclxuICAgICAgICAgICAgZm9yIChsZXQgaT0wOyBpPGxheWVyQXR0cmlidXRlcy5sZW5ndGg7IGkrKyl7XHJcbiAgICAgICAgICAgICAgICBsZXQgYTEgPSBsYXllckF0dHJpYnV0ZXNbaV0ubmFtZTtcclxuICAgICAgICAgICAgICAgIGZvciAobGV0IGo9aSsxOyBqPGxheWVyQXR0cmlidXRlcy5sZW5ndGg7IGorKyl7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IGEyID0gbGF5ZXJBdHRyaWJ1dGVzW2pdLm5hbWU7XHJcbiAgICAgICAgICAgICAgICAgICAgZGVmaW5pdGlvbnNbbWt4QmFzZShhMSwgYTIpXSA9ICcnXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIFxyXG4gICAgICAgIGZvciAobGV0IGs9MDsgayA8IHRoaXMuZy5tYXhEZXB0aCArIDE7IGsrKyl7XHJcbiAgICAgICAgICAgIGxldCBsYXllclRhYmxlcyA9IHRoaXMuZy50YWJsZUluZGV4W2tdO1xyXG4gICAgICAgICAgICBsZXQgbGF5ZXJBdHRyaWJ1dGVzID0gbGF5ZXJUYWJsZXMubWFwKHQgPT4gdC5hdHRyaWJ1dGVzKS5mbGF0KClcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIC8vIGdsb2JhbCBvcmRlcmluZyBvZiB0YWJsZXMgXHJcbiAgICAgICAgICAgIGZvciAobGV0IGk9MDsgaTxsYXllclRhYmxlcy5sZW5ndGg7IGkrKyl7XHJcbiAgICAgICAgICAgICAgICBsZXQgdDEgPSBsYXllclRhYmxlc1tpXS5uYW1lO1xyXG5cclxuICAgICAgICAgICAgICAgIGZvciAobGV0IGogPSBpKzE7IGogPCBsYXllclRhYmxlcy5sZW5ndGg7IGorKyl7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IHQyID0gbGF5ZXJUYWJsZXNbal0ubmFtZTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgbSA9IGogKyAxOyBtIDwgbGF5ZXJUYWJsZXMubGVuZ3RoOyBtKyspe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgdDMgPSBsYXllclRhYmxlc1ttXS5uYW1lO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgbW9kZWwuc3ViamVjdFRvICs9IFwiXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICsgbWt4QmFzZSh0MSwgdDIsICdUJylcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICsgXCIgKyBcIiArIG1reEJhc2UodDIsIHQzLCAnVCcpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICArIFwiIC0gXCIgKyBta3hCYXNlKHQxLCB0MywgJ1QnKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKyBcIiA+PSAwXFxuXCJcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1vZGVsLnN1YmplY3RUbyArPSBcIlwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICArIFwiLSBcIiArIG1reEJhc2UodDEsIHQyLCAnVCcpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICArIFwiIC0gXCIgKyBta3hCYXNlKHQyLCB0MywgJ1QnKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKyBcIiArIFwiICsgbWt4QmFzZSh0MSwgdDMsICdUJylcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICsgXCIgPj0gLTFcXG5cIlxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLy8gZ2xvYmFsIG9yZGVyaW5nIG9mIGF0dHJpYnV0ZXNcclxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsYXllckF0dHJpYnV0ZXMubGVuZ3RoOyBpKyspe1xyXG4gICAgICAgICAgICAgICAgbGV0IHQxID0gbGF5ZXJBdHRyaWJ1dGVzW2ldLm5hbWU7XHJcbiAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgIGZvciAobGV0IGogPSBpKzE7IGogPCBsYXllckF0dHJpYnV0ZXMubGVuZ3RoOyBqKyspe1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCB0MiA9IGxheWVyQXR0cmlidXRlc1tqXS5uYW1lO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChpID09IGopIGNvbnRpbnVlO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAobGF5ZXJBdHRyaWJ1dGVzW2ldLnRhYmxlLm5hbWUgIT0gbGF5ZXJBdHRyaWJ1dGVzW2pdLnRhYmxlLm5hbWUpIGNvbnRpbnVlXHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGZvciAobGV0IG0gPSBqKzE7IG0gPCBsYXllckF0dHJpYnV0ZXMubGVuZ3RoOyBtKyspe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobSA9PSBqIHx8IG0gPT0gaSkgY29udGludWVcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChsYXllckF0dHJpYnV0ZXNbbV0udGFibGUubmFtZSAhPSBsYXllckF0dHJpYnV0ZXNbaV0udGFibGUubmFtZSkgY29udGludWVcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGxheWVyQXR0cmlidXRlc1ttXS50YWJsZS5uYW1lICE9IGxheWVyQXR0cmlidXRlc1tqXS50YWJsZS5uYW1lKSBjb250aW51ZVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHQzID0gbGF5ZXJBdHRyaWJ1dGVzW21dLm5hbWU7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBtb2RlbC5zdWJqZWN0VG8gKz0gXCJcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKyBta3hCYXNlKHQxLCB0MilcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICsgXCIgKyBcIiArIG1reEJhc2UodDIsIHQzKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKyBcIiAtIFwiICsgbWt4QmFzZSh0MSwgdDMpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICArIFwiID49IDBcXG5cIlxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgbW9kZWwuc3ViamVjdFRvICs9IFwiXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICsgXCItIFwiICsgbWt4QmFzZSh0MSwgdDIpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICArIFwiIC0gXCIgKyBta3hCYXNlKHQyLCB0MylcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICsgXCIgKyBcIiArIG1reEJhc2UodDEsIHQzKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKyBcIiA+PSAtMVxcblwiXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBkZXRlcm1pbmluZyBjcm9zc2luZ3NcclxuICAgICAgICBmb3IgKGxldCBrPTA7IGsgPCB0aGlzLmcubWF4RGVwdGggKyAxOyBrKyspe1xyXG4gICAgICAgICAgICBsZXQgbGF5ZXJFZGdlcyA9IHRoaXMuZy5lZGdlSW5kZXhba11cclxuXHJcbiAgICAgICAgICAgIGZvciAobGV0IGk9MDsgaTxsYXllckVkZ2VzLmxlbmd0aDsgaSsrKXtcclxuICAgICAgICAgICAgICAgIGxldCB1MXYxID0gbGF5ZXJFZGdlc1tpXTtcclxuXHJcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBqPWkrMTsgajxsYXllckVkZ2VzLmxlbmd0aDsgaisrKXtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgdTJ2MiA9IGxheWVyRWRnZXNbal07XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIC8vIG5ldzogbWFuYWdpbmcgZ3JvdXBzXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gZWRnZXMgdGhhdCBhcmUgb3V0c2lkZSBvZiBncm91cHMgc2hvdWxkIG5ldmVyIGNyb3NzIHdpdGggZWRnZXMgdGhhdCBhcmUgaW5zaWRlIG9mIGdyb3Vwc1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh1MXYxLmxlZnRUYWJsZS5ncm91cCAhPSB1bmRlZmluZWQgJiYgdTF2MS5yaWdodFRhYmxlLmdyb3VwICE9IHVuZGVmaW5lZCl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh1MnYyLmxlZnRUYWJsZS5ncm91cCAhPSB1MnYyLmxlZnRUYWJsZS5ncm91cCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbW9kZWwuc3ViamVjdFRvICs9IG1rYyh1MSwgdjEsIHUyLCB2MikgKyBcIiA9IDBcXG5cIjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCF0aGlzLmlzU2FtZVJhbmtFZGdlKHUxdjEpICYmICF0aGlzLmlzU2FtZVJhbmtFZGdlKHUydjIpKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHUxID0gdTF2MS5sZWZ0QXR0cmlidXRlLm5hbWVcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHYxID0gdTF2MS5yaWdodEF0dHJpYnV0ZS5uYW1lXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCB1MiA9IHUydjIubGVmdEF0dHJpYnV0ZS5uYW1lXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCB2MiA9IHUydjIucmlnaHRBdHRyaWJ1dGUubmFtZVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHUxID09IHUyIHx8IHYxID09IHYyKSBjb250aW51ZVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHAxID0gbWtjKHUxLCB2MSwgdTIsIHYyKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgZmluYWxzdW0gPSAxXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1vZGVsLnN1YmplY3RUbyArPSBwMSArIFwiXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHAyID0gbWt4QmFzZSh1MiwgdTEpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkZWZpbml0aW9uc1twMl0gIT0gdW5kZWZpbmVkKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1vZGVsLnN1YmplY3RUbyArPSBcIiArIFwiICsgcDJcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHAyID0gbWt4QmFzZSh1MSwgdTIpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaW5hbHN1bSAtPSAxXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtb2RlbC5zdWJqZWN0VG8gKz0gXCIgLSBcIiArIHAyXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBwMyA9IG1reEJhc2UodjEsIHYyKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZGVmaW5pdGlvbnNbcDNdICE9IHVuZGVmaW5lZCl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtb2RlbC5zdWJqZWN0VG8gKz0gXCIgKyBcIiArIHAzXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwMyA9IG1reEJhc2UodjIsIHYxKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZmluYWxzdW0gLT0gMVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbW9kZWwuc3ViamVjdFRvICs9IFwiIC0gXCIgKyBwM1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1vZGVsLnN1YmplY3RUbyArPSBcIiA+PSBcIiArIGZpbmFsc3VtICsgXCJcXG5cIlxyXG5cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHAxID0gbWtjKHUxLCB2MSwgdTIsIHYyKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBmaW5hbHN1bSA9IDFcclxuICAgICAgICAgICAgICAgICAgICAgICAgbW9kZWwuc3ViamVjdFRvICs9IHAxICsgXCJcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBwMiA9IG1reEJhc2UodTEsIHUyKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZGVmaW5pdGlvbnNbcDJdICE9IHVuZGVmaW5lZCl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtb2RlbC5zdWJqZWN0VG8gKz0gXCIgKyBcIiArIHAyXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwMiA9IG1reEJhc2UodTIsIHUxKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZmluYWxzdW0gLT0gMVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbW9kZWwuc3ViamVjdFRvICs9IFwiIC0gXCIgKyBwMlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBwMyA9IG1reEJhc2UodjIsIHYxKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZGVmaW5pdGlvbnNbcDNdICE9IHVuZGVmaW5lZCl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtb2RlbC5zdWJqZWN0VG8gKz0gXCIgKyBcIiArIHAzXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwMyA9IG1reEJhc2UodjEsIHYyKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZmluYWxzdW0gLT0gMVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbW9kZWwuc3ViamVjdFRvICs9IFwiIC0gXCIgKyBwM1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1vZGVsLnN1YmplY3RUbyArPSBcIiA+PSBcIiArIGZpbmFsc3VtICsgXCJcXG5cIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICAvLyBpZiB0aGV5IGFyZSBib3RoIHNhbWUgcmFuayBlZGdlc1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy5pc1NhbWVSYW5rRWRnZSh1MXYxKSAmJiB0aGlzLmlzU2FtZVJhbmtFZGdlKHUydjIpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCB1MSA9IHUxdjEubGVmdEF0dHJpYnV0ZS5uYW1lXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCB2MSA9IHUxdjEucmlnaHRBdHRyaWJ1dGUubmFtZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgdTIgPSB1MnYyLmxlZnRBdHRyaWJ1dGUubmFtZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgdjIgPSB1MnYyLnJpZ2h0QXR0cmlidXRlLm5hbWVcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBwMSA9IG1rYyh1MSwgdjEsIHUyLCB2MilcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGZpbmFsc3VtID0gMVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBtb2RlbC5zdWJqZWN0VG8gKz0gcDEgKyBcIlwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBwMiA9IG1reEJhc2UodTEsIHUyKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZGVmaW5pdGlvbnNbcDJdICE9IHVuZGVmaW5lZCl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtb2RlbC5zdWJqZWN0VG8gKz0gXCIgKyBcIiArIHAyXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwMiA9IG1reEJhc2UodTIsIHUxKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZmluYWxzdW0gLT0gMVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbW9kZWwuc3ViamVjdFRvICs9IFwiIC0gXCIgKyBwMlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgcDMgPSBta3hCYXNlKHYxLCB2MilcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGRlZmluaXRpb25zW3AzXSAhPSB1bmRlZmluZWQpe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbW9kZWwuc3ViamVjdFRvICs9IFwiICsgXCIgKyBwM1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZmluYWxzdW0gLT0gMVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcDMgPSBta3hCYXNlKHYyLCB2MSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1vZGVsLnN1YmplY3RUbyArPSBcIiAtIFwiICsgcDNcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHA0ID0gbWt4QmFzZSh1MiwgdjEpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkZWZpbml0aW9uc1twNF0gIT0gdW5kZWZpbmVkKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1vZGVsLnN1YmplY3RUbyArPSBwNFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZmluYWxzdW0gLT0gMVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcDQgPSBta3hCYXNlKHYxLCB1MilcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1vZGVsLnN1YmplY3RUbyArPSBcIiArIFwiICsgcDRcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBtb2RlbC5zdWJqZWN0VG8gKz0gXCIgPj0gXCIgKyBmaW5hbHN1bSArIFwiXFxuXCJcclxuXHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBwMSA9IG1rYyh1MSwgdjEsIHUyLCB2MilcclxuICAgICAgICAgICAgICAgICAgICAgICAgZmluYWxzdW0gPSAxXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1vZGVsLnN1YmplY3RUbyArPSBwMSArIFwiXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgcDIgPSBta3hCYXNlKHUxLCB1MilcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGRlZmluaXRpb25zW3AyXSAhPSB1bmRlZmluZWQpe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbW9kZWwuc3ViamVjdFRvICs9IFwiICsgXCIgKyBwMlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcDIgPSBta3hCYXNlKHUyLCB1MSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpbmFsc3VtIC09IDFcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1vZGVsLnN1YmplY3RUbyArPSBcIiAtIFwiICsgcDJcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgcDMgPSBta3hCYXNlKHYxLCB2MilcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGRlZmluaXRpb25zW3AzXSAhPSB1bmRlZmluZWQpe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbW9kZWwuc3ViamVjdFRvICs9IFwiICsgXCIgKyBwM1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZmluYWxzdW0gLT0gMVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcDMgPSBta3hCYXNlKHYyLCB2MSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1vZGVsLnN1YmplY3RUbyArPSBcIiAtIFwiICsgcDNcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgcDQgPSBta3hCYXNlKHYyLCB1MSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGRlZmluaXRpb25zW3A0XSAhPSB1bmRlZmluZWQpe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbW9kZWwuc3ViamVjdFRvICs9IHA0XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaW5hbHN1bSAtPSAxXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwNCA9IG1reEJhc2UodTEsIHYyKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbW9kZWwuc3ViamVjdFRvICs9IFwiICsgXCIgKyBwNFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1vZGVsLnN1YmplY3RUbyArPSBcIiA+PSBcIiArIGZpbmFsc3VtICsgXCJcXG5cIlxyXG5cclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMuaXNTYW1lUmFua0VkZ2UodTF2MSkgJiYgIXRoaXMuaXNTYW1lUmFua0VkZ2UodTJ2MikpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHUxID0gdTF2MS5sZWZ0QXR0cmlidXRlLm5hbWVcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHYxID0gdTF2MS5yaWdodEF0dHJpYnV0ZS5uYW1lXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCB1MiA9IHUydjIubGVmdEF0dHJpYnV0ZS5uYW1lXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCB2MiA9IHUydjIucmlnaHRBdHRyaWJ1dGUubmFtZVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHAxID0gbWtjKHUxLCB2MSwgdTIsIHYyKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgZmluYWxzdW0gPSAxXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1vZGVsLnN1YmplY3RUbyArPSBwMSArIFwiXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHAyID0gbWt4QmFzZSh1MiwgdTEpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkZWZpbml0aW9uc1twMl0gIT0gdW5kZWZpbmVkKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1vZGVsLnN1YmplY3RUbyArPSBcIiArIFwiICsgcDJcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHAyID0gbWt4QmFzZSh1MSwgdTIpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaW5hbHN1bSAtPSAxXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtb2RlbC5zdWJqZWN0VG8gKz0gXCIgLSBcIiArIHAyXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBwMyA9IG1reEJhc2UodjEsIHUyKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZGVmaW5pdGlvbnNbcDNdICE9IHVuZGVmaW5lZCl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtb2RlbC5zdWJqZWN0VG8gKz0gXCIgKyBcIiArIHAzXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaW5hbHN1bSAtPSAxXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwMyA9IG1reEJhc2UodTIsIHYxKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbW9kZWwuc3ViamVjdFRvICs9IFwiIC0gXCIgKyBwM1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1vZGVsLnN1YmplY3RUbyArPSBcIiA+PSBcIiArIGZpbmFsc3VtICsgXCJcXG5cIlxyXG5cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHAxID0gbWtjKHUxLCB2MSwgdTIsIHYyKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBmaW5hbHN1bSA9IDFcclxuICAgICAgICAgICAgICAgICAgICAgICAgbW9kZWwuc3ViamVjdFRvICs9IHAxICsgXCJcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBwMiA9IG1reEJhc2UodTIsIHYxKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZGVmaW5pdGlvbnNbcDJdICE9IHVuZGVmaW5lZCl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtb2RlbC5zdWJqZWN0VG8gKz0gXCIgKyBcIiArIHAyXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwMiA9IG1reEJhc2UodjEsIHUyKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZmluYWxzdW0gLT0gMVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbW9kZWwuc3ViamVjdFRvICs9IFwiIC0gXCIgKyBwMlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBwMyA9IG1reEJhc2UodTEsIHUyKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZGVmaW5pdGlvbnNbcDNdICE9IHVuZGVmaW5lZCl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtb2RlbC5zdWJqZWN0VG8gKz0gXCIgKyBcIiArIHAzXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaW5hbHN1bSAtPSAxXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwMyA9IG1reEJhc2UodTIsIHUxKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbW9kZWwuc3ViamVjdFRvICs9IFwiIC0gXCIgKyBwM1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1vZGVsLnN1YmplY3RUbyArPSBcIiA+PSBcIiArIGZpbmFsc3VtICsgXCJcXG5cIlxyXG5cclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKCF0aGlzLmlzU2FtZVJhbmtFZGdlKHUxdjEpICYmIHRoaXMuaXNTYW1lUmFua0VkZ2UodTJ2MikpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHUxID0gdTF2MS5sZWZ0QXR0cmlidXRlLm5hbWVcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHYxID0gdTF2MS5yaWdodEF0dHJpYnV0ZS5uYW1lXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCB1MiA9IHUydjIubGVmdEF0dHJpYnV0ZS5uYW1lXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCB2MiA9IHUydjIucmlnaHRBdHRyaWJ1dGUubmFtZVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHAxID0gbWtjKHUxLCB2MSwgdTIsIHYyKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgZmluYWxzdW0gPSAxXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1vZGVsLnN1YmplY3RUbyArPSBwMSArIFwiXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHAyID0gbWt4QmFzZSh1MSwgdTIpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkZWZpbml0aW9uc1twMl0gIT0gdW5kZWZpbmVkKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1vZGVsLnN1YmplY3RUbyArPSBcIiArIFwiICsgcDJcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHAyID0gbWt4QmFzZSh1MiwgdTEpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaW5hbHN1bSAtPSAxXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtb2RlbC5zdWJqZWN0VG8gKz0gXCIgLSBcIiArIHAyXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBwMyA9IG1reEJhc2UodjIsIHUxKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZGVmaW5pdGlvbnNbcDNdICE9IHVuZGVmaW5lZCl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtb2RlbC5zdWJqZWN0VG8gKz0gXCIgKyBcIiArIHAzXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaW5hbHN1bSAtPSAxXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwMyA9IG1reEJhc2UodTEsIHYyKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbW9kZWwuc3ViamVjdFRvICs9IFwiIC0gXCIgKyBwM1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1vZGVsLnN1YmplY3RUbyArPSBcIiA+PSBcIiArIGZpbmFsc3VtICsgXCJcXG5cIlxyXG5cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHAxID0gbWtjKHUxLCB2MSwgdTIsIHYyKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBmaW5hbHN1bSA9IDFcclxuICAgICAgICAgICAgICAgICAgICAgICAgbW9kZWwuc3ViamVjdFRvICs9IHAxICsgXCJcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBwMiA9IG1reEJhc2UodTEsIHYyKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZGVmaW5pdGlvbnNbcDJdICE9IHVuZGVmaW5lZCl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtb2RlbC5zdWJqZWN0VG8gKz0gXCIgKyBcIiArIHAyXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwMiA9IG1reEJhc2UodjIsIHUxKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZmluYWxzdW0gLT0gMVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbW9kZWwuc3ViamVjdFRvICs9IFwiIC0gXCIgKyBwMlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBwMyA9IG1reEJhc2UodTIsIHUxKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZGVmaW5pdGlvbnNbcDNdICE9IHVuZGVmaW5lZCl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtb2RlbC5zdWJqZWN0VG8gKz0gXCIgKyBcIiArIHAzXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaW5hbHN1bSAtPSAxXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwMyA9IG1reEJhc2UodTEsIHUyKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbW9kZWwuc3ViamVjdFRvICs9IFwiIC0gXCIgKyBwM1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1vZGVsLnN1YmplY3RUbyArPSBcIiA+PSBcIiArIGZpbmFsc3VtICsgXCJcXG5cIlxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcblxyXG4gICAgICAgLy8gZ3JvdXBpbmcgY29uc3RyYWludCBvZiBhdHRyaWJ1dGVzIHdpdGhpbiB0YWJsZXNcclxuICAgICAgIGZvciAobGV0IGs9MDsgazx0aGlzLmcubWF4RGVwdGggKyAxOyBrKyspe1xyXG4gICAgICAgICAgICBsZXQgbGF5ZXJUYWJsZXMgPSB0aGlzLmcudGFibGVJbmRleFtrXTtcclxuICAgICAgICAgICAgbGV0IGxheWVyQXR0cmlidXRlcyA9IGxheWVyVGFibGVzLm1hcCh0ID0+IHQuYXR0cmlidXRlcykuZmxhdCgpXHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICBmb3IgKGxldCBpPTA7IGk8bGF5ZXJBdHRyaWJ1dGVzLmxlbmd0aDsgaSsrKXtcclxuICAgICAgICAgICAgICAgIGxldCBhdHRyMSA9IGxheWVyQXR0cmlidXRlc1tpXS5uYW1lO1xyXG4gICAgICAgICAgICAgICAgbGV0IHQxID0gbGF5ZXJBdHRyaWJ1dGVzW2ldLnRhYmxlLm5hbWU7XHJcblxyXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgaj1pKzE7IGo8bGF5ZXJBdHRyaWJ1dGVzLmxlbmd0aDsgaisrKXtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgYXR0cjIgPSBsYXllckF0dHJpYnV0ZXNbal0ubmFtZTtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgdDIgPSBsYXllckF0dHJpYnV0ZXNbal0udGFibGUubmFtZVxyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAodDEgIT0gdDIpe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBtb2RlbC5zdWJqZWN0VG8gKz0gXCJ4X1wiICsgYXR0cjEubmFtZSArIFwiX1wiICsgYXR0cjIubmFtZSArIFwiIC0gXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gICAgICsgXCJ4X1RcIiArIGF0dHIxLnRhYmxlLm5hbWUgKyBcIl9UXCIgKyBhdHRyMi50YWJsZS5uYW1lICsgXCIgPSAwXFxuXCJcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1vZGVsLnN1YmplY3RUbyArPSBta3hCYXNlKGF0dHIxLCBhdHRyMikgKyBcIlwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICArIFwiIC0gXCIgKyBta3hCYXNlKHQxLCB0MiwgJ1QnKSBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICsgXCIgPSAwXFxuXCJcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIGZpbGwgZnVuY3Rpb24gdG8gbWluaW1pemVcclxuICAgICAgICBmb3IgKGxldCBlbGVtIGluIGNyb3NzaW5nX3ZhcnMpe1xyXG4gICAgICAgICAgICBtb2RlbC5taW5pbWl6ZSArPSBlbGVtICsgXCIgKyBcIlxyXG4gICAgICAgIH1cclxuICAgICAgICBtb2RlbC5taW5pbWl6ZSA9IG1vZGVsLm1pbmltaXplLnN1YnN0cmluZygwLCBtb2RlbC5taW5pbWl6ZS5sZW5ndGggLSAyKSArIFwiXFxuXFxuXCJcclxuXHJcbiAgICAgICAgZm9yIChsZXQgZWxlbSBpbiBkZWZpbml0aW9ucyl7XHJcbiAgICAgICAgICAgIG1vZGVsLmJvdW5kcyArPSBcImJpbmFyeSBcIiArIGVsZW0gKyBcIlxcblwiXHJcbiAgICAgICAgfVxyXG5cclxuICAgIH1cclxuXHJcblxyXG4gICAgZmlsbE1vZGVsMihtb2RlbCl7XHJcbiAgICAgICAgbW9kZWwubWluaW1pemUgPSBcIk1pbmltaXplIFxcbmNyb3NzaW5nczogXCJcclxuICAgICAgICBtb2RlbC5zdWJqZWN0VG8gPSBcIlN1YmplY3QgVG8gXFxuXCJcclxuICAgICAgICBtb2RlbC5ib3VuZHMgPSBcIlxcbkJvdW5kcyBcXG5cIlxyXG5cclxuICAgICAgICAvLyBvYmplY3RpdmUgZnVuY3Rpb25cclxuICAgICAgICBmb3IgKGxldCBrPTA7IGs8dGhpcy5nLm1heERlcHRoICsgMTsgaysrKXtcclxuICAgICAgICAgICAgbGV0IGxheWVyRWRnZXMgPSB0aGlzLmcuZWRnZUluZGV4W2tdXHJcbiAgICAgICAgICAgIGZvciAobGV0IGk9MDsgaTxsYXllckVkZ2VzLmxlbmd0aDsgaSsrKXtcclxuICAgICAgICAgICAgICAgIGZvciAobGV0IGo9MDsgajxsYXllckVkZ2VzLmxlbmd0aDsgaisrKXtcclxuICAgICAgICAgICAgICAgICAgICBpZiAobGF5ZXJFZGdlc1tpXSAhPSBsYXllckVkZ2VzW2pdKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGNyb3NzdmFyID0gXCJjX1wiICsgbGF5ZXJFZGdlc1tpXS5sZWZ0QXR0cmlidXRlLm5hbWUgKyBsYXllckVkZ2VzW2ldLnJpZ2h0QXR0cmlidXRlLm5hbWUgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICArIFwiX1wiICsgbGF5ZXJFZGdlc1tqXS5sZWZ0QXR0cmlidXRlLm5hbWUgKyBsYXllckVkZ2VzW2pdLnJpZ2h0QXR0cmlidXRlLm5hbWVcclxuICAgICAgICAgICAgICAgICAgICAgICAgbW9kZWwubWluaW1pemUgKz0gY3Jvc3N2YXIgKyAnICsgJ1xyXG4gICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1vZGVsLmJvdW5kcyArPSBcImJpbmFyeSBcIiArIGNyb3NzdmFyICsgXCJcXG5cIlxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSAgICAgIFxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgbW9kZWwubWluaW1pemUgPSBtb2RlbC5taW5pbWl6ZS5zdWJzdHJpbmcoMCwgbW9kZWwubWluaW1pemUubGVuZ3RoIC0gMikgKyAnXFxuXFxuJztcclxuICAgICAgICBcclxuICAgICAgICAvLyBlYWNoIHRhYmxlIG11c3QgYmUgYWJvdmUgb3IgYmVsb3cgYW5vdGhlciBvbmVcclxuICAgICAgICBmb3IgKGxldCBrPTA7IGs8dGhpcy5nLm1heERlcHRoICsgMTsgaysrKXtcclxuICAgICAgICAgICAgbGV0IGxheWVyVGFibGVzID0gdGhpcy5nLnRhYmxlSW5kZXhba107XHJcbiAgICAgICAgICAgIGZvciAobGV0IGk9MDsgaTxsYXllclRhYmxlcy5sZW5ndGg7IGkrKyl7XHJcbiAgICAgICAgICAgICAgICBsZXQgdDEgPSBsYXllclRhYmxlc1tpXVxyXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgaj0wOyBqPGxheWVyVGFibGVzLmxlbmd0aDsgaisrKXtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoaT09aikgY29udGludWVcclxuICAgICAgICAgICAgICAgICAgICBsZXQgdDIgPSBsYXllclRhYmxlc1tqXVxyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0MSAhPSB0Mil7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1vZGVsLnN1YmplY3RUbyArPSBcInhfVFwiICsgdDEubmFtZSArIFwiX1RcIiArIHQyLm5hbWUgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICArIFwiICsgeF9UXCIgKyB0Mi5uYW1lICsgXCJfVFwiICsgdDEubmFtZSArIFwiID0gMVxcblwiXHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBhZGQgdmFycyB0byBib3VuZHNcclxuICAgICAgICAgICAgICAgICAgICAgICAgbW9kZWwuYm91bmRzICs9IFwiYmluYXJ5IHhfVFwiICsgdDEubmFtZSArIFwiX1RcIiArIHQyLm5hbWUgKyBcIlxcblwiXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyB0cmFuc2l0aXZpdHkgb2YgcmVsYXRpb25zaGlwIGFib3ZlXHJcbiAgICAgICAgZm9yIChsZXQgaz0wOyBrIDwgdGhpcy5nLm1heERlcHRoICsgMTsgaysrKXtcclxuICAgICAgICAgICAgIGxldCBsYXllclRhYmxlcyA9IHRoaXMuZy50YWJsZUluZGV4W2tdO1xyXG4gICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsYXllclRhYmxlcy5sZW5ndGg7IGkrKyl7XHJcbiAgICAgICAgICAgICAgICAgbGV0IHQxID0gbGF5ZXJUYWJsZXNbaV07XHJcbiAgICAgICAgICAgICAgICAgZm9yIChsZXQgaiA9MDsgaiA8IGxheWVyVGFibGVzLmxlbmd0aDsgaisrKXtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoaT09aikgY29udGludWVcclxuICAgICAgICAgICAgICAgICAgICBsZXQgdDIgPSBsYXllclRhYmxlc1tqXTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgbSA9IGogKyAxOyBtIDwgbGF5ZXJUYWJsZXMubGVuZ3RoOyBtKyspe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgdDMgPSBsYXllclRhYmxlc1ttXTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1vZGVsLnN1YmplY3RUbyArPSBcInhfVFwiICsgdDMubmFtZSArIFwiX1RcIiArIHQxLm5hbWUgKyBcIiAtIHhfVFwiICsgdDMubmFtZSArIFwiX1RcIiBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICsgdDIubmFtZSArIFwiIC0geF9UXCIgKyB0Mi5uYW1lICsgXCJfVFwiICsgdDEubmFtZSArIFwiID49IC0gMVxcblwiIFxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIGVhY2ggYXR0cmlidXRlIG11c3QgYmUgYWJvdmUgb3IgYmVsb3cgYW5vdGhlciBvbmVcclxuICAgICAgICBmb3IgKGxldCBrPTA7IGs8dGhpcy5nLm1heERlcHRoICsgMTsgaysrKXtcclxuICAgICAgICAgICAgbGV0IGxheWVyVGFibGVzID0gdGhpcy5nLnRhYmxlSW5kZXhba107XHJcbiAgICAgICAgICAgIGxldCBsYXllckF0dHJpYnV0ZXMgPSBsYXllclRhYmxlcy5tYXAodCA9PiB0LmF0dHJpYnV0ZXMpLmZsYXQoKVxyXG4gICAgICAgICAgICBmb3IgKGxldCBpPTA7IGk8bGF5ZXJBdHRyaWJ1dGVzLmxlbmd0aDsgaSsrKXtcclxuICAgICAgICAgICAgICAgIGxldCB0MSA9IGxheWVyQXR0cmlidXRlc1tpXVxyXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgaj1pKzE7IGo8bGF5ZXJBdHRyaWJ1dGVzLmxlbmd0aDsgaisrKXtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgdDIgPSBsYXllckF0dHJpYnV0ZXNbal1cclxuICAgICAgICAgICAgICAgICAgICBpZiAodDEgIT0gdDIpe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBtb2RlbC5zdWJqZWN0VG8gKz0gXCJ4X1wiICsgdDEubmFtZSArIFwiX1wiICsgdDIubmFtZSBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICsgXCIgKyB4X1wiICsgdDIubmFtZSArIFwiX1wiICsgdDEubmFtZSArIFwiID0gMVxcblwiXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBncm91cGluZyBjb25zdHJhaW50IG9mIGF0dHJpYnV0ZXMgd2l0aGluIHRhYmxlc1xyXG4gICAgICAgIGZvciAobGV0IGs9MDsgazx0aGlzLmcubWF4RGVwdGggKyAxOyBrKyspe1xyXG4gICAgICAgICAgICBsZXQgbGF5ZXJUYWJsZXMgPSB0aGlzLmcudGFibGVJbmRleFtrXTtcclxuICAgICAgICAgICAgbGV0IGxheWVyQXR0cmlidXRlcyA9IGxheWVyVGFibGVzLm1hcCh0ID0+IHQuYXR0cmlidXRlcykuZmxhdCgpXHJcbiAgICAgICAgICAgIGZvciAobGV0IGF0dHIxIG9mIGxheWVyQXR0cmlidXRlcyl7XHJcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBhdHRyMiBvZiBsYXllckF0dHJpYnV0ZXMpe1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChhdHRyMS50YWJsZSAhPSBhdHRyMi50YWJsZSl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1vZGVsLnN1YmplY3RUbyArPSBcInhfXCIgKyBhdHRyMS5uYW1lICsgXCJfXCIgKyBhdHRyMi5uYW1lICsgXCIgLSBcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKyBcInhfVFwiICsgYXR0cjEudGFibGUubmFtZSArIFwiX1RcIiArIGF0dHIyLnRhYmxlLm5hbWUgKyBcIiA9IDBcXG5cIlxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcblxyXG4gICAgICAgIC8vIHRyYW5zaXRpdml0eSBvZiByZWxhdGlvbnNoaXAgYWJvdmVcclxuICAgICAgICBmb3IgKGxldCBrPTA7IGsgPCB0aGlzLmcubWF4RGVwdGggKyAxOyBrKyspe1xyXG4gICAgICAgICAgICBsZXQgbGF5ZXJUYWJsZXMgPSB0aGlzLmcudGFibGVJbmRleFtrXTtcclxuICAgICAgICAgICAgbGV0IGxheWVyQXR0cmlidXRlcyA9IGxheWVyVGFibGVzLm1hcCh0ID0+IHQuYXR0cmlidXRlcykuZmxhdCgpXHJcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGF5ZXJBdHRyaWJ1dGVzLmxlbmd0aDsgaSsrKXtcclxuICAgICAgICAgICAgICAgIGxldCB0MSA9IGxheWVyQXR0cmlidXRlc1tpXTtcclxuICAgICAgICAgICAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgbGF5ZXJBdHRyaWJ1dGVzLmxlbmd0aDsgaisrKXtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgdDIgPSBsYXllckF0dHJpYnV0ZXNbal07XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGkgPT0gaikgY29udGludWUgXHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGZvciAobGV0IG0gPSAwOyBtIDwgbGF5ZXJBdHRyaWJ1dGVzLmxlbmd0aDsgbSsrKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG0gPT0gaSB8fCBtID09IGopIGNvbnRpbnVlXHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgdDMgPSBsYXllckF0dHJpYnV0ZXNbbV07XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBtb2RlbC5zdWJqZWN0VG8gKz0gXCJ4X1wiICsgdDMubmFtZSArIFwiX1wiICsgdDEubmFtZSArIFwiIC0geF9cIiArIHQzLm5hbWUgKyBcIl9cIiBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgKyB0Mi5uYW1lICsgXCIgLSB4X1wiICsgdDIubmFtZSArIFwiX1wiICsgdDEubmFtZSArIFwiID49IC0gMVxcblwiIFxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gYWRkIHZhcnMgdG8gYm91bmRzXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vbW9kZWwuYm91bmRzICs9IFwiYmluYXJ5IHhfVFwiICsgdDMubmFtZSArIFwiX1RcIiArIHQxLm5hbWUgKyBcIlxcblwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vbW9kZWwuYm91bmRzICs9IFwiYmluYXJ5IHhfVFwiICsgdDMubmFtZSArIFwiX1RcIiArIHQyLm5hbWUgKyBcIlxcblwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vbW9kZWwuYm91bmRzICs9IFwiYmluYXJ5IHhfVFwiICsgdDIubmFtZSArIFwiX1RcIiArIHQxLm5hbWUgKyBcIlxcblwiXHJcbiAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgfVxyXG4gICAgICAgfVxyXG5cclxuICAgICAgICAvLyBhdHRyaWJ1dGUgcG9zaXRpb25zIGRldGVybWluZSBjcm9zc2luZ3MgZm9yIG5vbi1zYW1lLXJhbmsgZWRnZXNcclxuICAgICAgICBmb3IgKGxldCBrPTA7IGsgPCB0aGlzLmcubWF4RGVwdGg7IGsrKyl7XHJcbiAgICAgICAgICAgIGxldCBsYXllckVkZ2VzID0gdGhpcy5nLmVkZ2VJbmRleFtrXVxyXG4gICAgICAgICAgICBmb3IgKGxldCBpPTA7IGk8bGF5ZXJFZGdlcy5sZW5ndGg7IGkrKyl7XHJcbiAgICAgICAgICAgICAgICBsZXQgdTF2MSA9IGxheWVyRWRnZXNbaV1cclxuICAgICAgICAgICAgICAgIGZvciAobGV0IGo9MDsgajxsYXllckVkZ2VzLmxlbmd0aDsgaisrKXtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoaT09aikgY29udGludWVcclxuICAgICAgICAgICAgICAgICAgICBsZXQgdTJ2MiA9IGxheWVyRWRnZXNbal1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gbGVhdmUgc2FtZSByYW5rIGVkZ2VzIG91dCBmb3Igbm93XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHUxdjEubGVmdFRhYmxlLmRlcHRoID09IHUxdjEucmlnaHRUYWJsZS5kZXB0aCB8fCB1MnYyLmxlZnRUYWJsZS5kZXB0aCA9PSB1MnYyLnJpZ2h0VGFibGUuZGVwdGgpIGNvbnRpbnVlXHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGxldCB1MSA9IHUxdjEubGVmdEF0dHJpYnV0ZS5uYW1lIFxyXG4gICAgICAgICAgICAgICAgICAgIGxldCB2MSA9IHUxdjEucmlnaHRBdHRyaWJ1dGUubmFtZVxyXG4gICAgICAgICAgICAgICAgICAgIGxldCB1MiA9IHUydjIubGVmdEF0dHJpYnV0ZS5uYW1lXHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IHYyID0gdTJ2Mi5yaWdodEF0dHJpYnV0ZS5uYW1lXHJcblxyXG4gICAgICAgICAgICAgICAgICAgIG1vZGVsLnN1YmplY3RUbyArPSBcImNfXCIgKyB1MSArIHYxICBcclxuICAgICAgICAgICAgICAgICAgICAgICAgKyBcIl9cIiArIHUyICsgdjIgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICsgXCIgKyB4X1wiICsgdTIgKyBcIl9cIiArIHUxIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICArIFwiICsgeF9cIiArIHYxICsgXCJfXCIgKyB2MiBcclxuICAgICAgICAgICAgICAgICAgICAgICAgKyBcIiA+PSAxXFxuXCJcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgbW9kZWwuc3ViamVjdFRvICs9IFwiY19cIiArIHUxICsgdjEgIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICArIFwiX1wiICsgdTIgKyB2MiBcclxuICAgICAgICAgICAgICAgICAgICAgICAgKyBcIiArIHhfXCIgKyB1MSArIFwiX1wiICsgdTIgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICsgXCIgKyB4X1wiICsgdjIgKyBcIl9cIiArIHYxIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICArIFwiID49IDFcXG5cIlxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBzYW1lIHJhbmsgZWRnZXNcclxuICAgICAgICBmb3IgKGxldCBrPTA7IGsgPCB0aGlzLmcubWF4RGVwdGggKyAxOyBrKyspe1xyXG5cclxuICAgICAgICAgICAgbGV0IGxheWVyRWRnZXMgPSB0aGlzLmcuZWRnZUluZGV4W2tdO1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgZm9yIChsZXQgaT0wOyBpPGxheWVyRWRnZXMubGVuZ3RoOyBpKyspe1xyXG4gICAgICAgICAgICAgICAgbGV0IHUxdjEgPSBsYXllckVkZ2VzW2ldXHJcbiAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgIGZvciAobGV0IGo9MDsgajxsYXllckVkZ2VzLmxlbmd0aDsgaisrKXtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgdTJ2MiA9IGxheWVyRWRnZXNbal1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHUxdjEgPT0gdTJ2MikgY29udGludWVcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gaWYgdGhleSBhcmUgYm90aCBzYW1lIHJhbmsgZWRnZXNcclxuICAgICAgICAgICAgICAgICAgICBpZiAodTF2MS5sZWZ0VGFibGUuZGVwdGggPT0gdTF2MS5yaWdodFRhYmxlLmRlcHRoICYmIHUydjIubGVmdFRhYmxlLmRlcHRoID09IHUydjIucmlnaHRUYWJsZS5kZXB0aCl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCB1MSA9IHUxdjEubGVmdEF0dHJpYnV0ZS5uYW1lIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgdjEgPSB1MXYxLnJpZ2h0QXR0cmlidXRlLm5hbWVcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHUyID0gdTJ2Mi5sZWZ0QXR0cmlidXRlLm5hbWVcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHYyID0gdTJ2Mi5yaWdodEF0dHJpYnV0ZS5uYW1lXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIEkgYW0gc3RpbGwgZG91YnRmdWwgYWJvdXQgdGhpcyBuZWVkaW5nIHRvIGJlIGRlY2xhcmVkIGZvciBpbnZlcnRlZCBsZWZ0LXJpZ2h0IGVkZ2VzIG9yIG5vdC4uLlxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgbW9kZWwuc3ViamVjdFRvICs9IFwiY19cIiArIHUxICsgdjEgIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKyBcIl9cIiArIHUyICsgdjIgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICArIFwiICsgeF9cIiArIHUxICsgXCJfXCIgKyB1MiBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICsgXCIgKyB4X1wiICsgdjEgKyBcIl9cIiArIHYyIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKyBcIiArIHhfXCIgKyB1MiArIFwiX1wiICsgdjEgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICArIFwiID49IDFcXG5cIlxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgbW9kZWwuc3ViamVjdFRvICs9IFwiY19cIiArIHUxICsgdjEgIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKyBcIl9cIiArIHUyICsgdjIgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICArIFwiICsgeF9cIiArIHUxICsgXCJfXCIgKyB1MiBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICsgXCIgKyB4X1wiICsgdjEgKyBcIl9cIiArIHYyIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKyBcIiArIHhfXCIgKyB2MiArIFwiX1wiICsgdTEgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICArIFwiID49IDFcXG5cIlxyXG5cclxuICAgICAgICAgICAgICAgICAgICAvLyBpZiB1MXYxIGlzIHRoZSBzYW1lIHJhbmsgZWRnZSBhbmQgdGhlIG90aGVyIGlzIG5vdFxyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy5pc1NhbWVSYW5rRWRnZSh1MXYxKSAmJiAhdGhpcy5pc1NhbWVSYW5rRWRnZSh1MnYyKSl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCB1MSA9IHUxdjEubGVmdEF0dHJpYnV0ZS5uYW1lIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgdjEgPSB1MXYxLnJpZ2h0QXR0cmlidXRlLm5hbWVcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHUyID0gdTJ2Mi5sZWZ0QXR0cmlidXRlLm5hbWVcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHYyID0gdTJ2Mi5yaWdodEF0dHJpYnV0ZS5uYW1lXHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBtb2RlbC5zdWJqZWN0VG8gKz0gXCJjX1wiICsgdTEgKyB2MSAgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICArIFwiX1wiICsgdTIgKyB2MiBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICsgXCIgKyB4X1wiICsgdTIgKyBcIl9cIiArIHUxIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKyBcIiArIHhfXCIgKyB2MSArIFwiX1wiICsgdTIgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICArIFwiID49IDFcXG5cIlxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgbW9kZWwuc3ViamVjdFRvICs9IFwiY19cIiArIHUxICsgdjEgIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKyBcIl9cIiArIHUyICsgdjIgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICArIFwiICsgeF9cIiArIHUyICsgXCJfXCIgKyB2MSBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICsgXCIgKyB4X1wiICsgdTEgKyBcIl9cIiArIHUyIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKyBcIiA+PSAxXFxuXCJcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgfVxyXG5cclxuICAgIGlzU2FtZVJhbmtFZGdlKGVkZ2Upe1xyXG4gICAgICAgIHJldHVybiBlZGdlLmxlZnRUYWJsZS5kZXB0aCA9PSBlZGdlLnJpZ2h0VGFibGUuZGVwdGhcclxuICAgIH1cclxuXHJcbiAgICBtb2RlbFRvU3RyaW5nKG1vZGVsKXtcclxuICAgICAgICByZXR1cm4gbW9kZWwubWluaW1pemUgKyBtb2RlbC5zdWJqZWN0VG8gKyBtb2RlbC5ib3VuZHMgKyAnXFxuRW5kXFxuJ1xyXG4gICAgfVxyXG5cclxuICAgIGFwcGx5X3NvbHV0aW9uKHNvbHV0aW9uKXtcclxuICAgICAgICAvL2NvbnNvbGUubG9nKHNvbHV0aW9uKVxyXG4gICAgICAgIGZvciAobGV0IGk9MDsgaTx0aGlzLmcubWF4RGVwdGggKyAxOyBpKyspe1xyXG4gICAgICAgICAgICBsZXQgbGF5ZXJUYWJsZXMgPSB0aGlzLmcudGFibGVJbmRleFtpXTtcclxuXHJcbiAgICAgICAgICAgIGxheWVyVGFibGVzLnNvcnQoKGEsIGIpID0+IHtcclxuICAgICAgICAgICAgICAgIC8vY29uc29sZS5sb2coYS5uYW1lLCBiLm5hbWUsIHNvbHV0aW9uW1wieF9UXCIgKyBhLm5hbWUgKyBcIl9UXCIgKyBiLm5hbWVdLCBzb2x1dGlvbltcInhfVFwiICsgYi5uYW1lICsgXCJfVFwiICsgYS5uYW1lXSlcclxuICAgICAgICAgICAgICAgIGlmIChzb2x1dGlvbltcInhfVFwiICsgYS5uYW1lICsgXCJfVFwiICsgYi5uYW1lXSA9PSAwKSByZXR1cm4gMVxyXG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoc29sdXRpb25bXCJ4X1RcIiArIGEubmFtZSArIFwiX1RcIiArIGIubmFtZV0gPT0gMSkgcmV0dXJuIC0xXHJcbiAgICAgICAgICAgICAgICBlbHNlIGlmIChzb2x1dGlvbltcInhfVFwiICsgYi5uYW1lICsgXCJfVFwiICsgYS5uYW1lXSA9PSAxKSByZXR1cm4gMVxyXG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoc29sdXRpb25bXCJ4X1RcIiArIGIubmFtZSArIFwiX1RcIiArIGEubmFtZV0gPT0gMCkgcmV0dXJuIC0xXHJcbiAgICAgICAgICAgIH0pXHJcblxyXG4gICAgICAgICAgICBmb3IgKGxldCBrIGluIGxheWVyVGFibGVzKXtcclxuICAgICAgICAgICAgICAgIGxheWVyVGFibGVzW2tdLndlaWdodCA9IGs7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGZvciAobGV0IHRhYmxlIG9mIGxheWVyVGFibGVzKXtcclxuICAgICAgICAgICAgICAgIHRhYmxlLmF0dHJpYnV0ZXMuc29ydCgoYSwgYikgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vaWYgKGIudGFibGUubmFtZSA9PSBcIlQ4eTRcIikgY29uc29sZS5sb2coYS5uYW1lLCBiLm5hbWUsIHNvbHV0aW9uW1wieF9cIiArIGIubmFtZSArIFwiX1wiICsgYS5uYW1lXSlcclxuICAgICAgICAgICAgICAgICAgICBpZiAoc29sdXRpb25bXCJ4X1wiICsgYS5uYW1lICsgXCJfXCIgKyBiLm5hbWVdID09IDApIHJldHVybiAxXHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAoc29sdXRpb25bXCJ4X1wiICsgYS5uYW1lICsgXCJfXCIgKyBiLm5hbWVdID09IDEpIHJldHVybiAtMVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKHNvbHV0aW9uW1wieF9cIiArIGIubmFtZSArIFwiX1wiICsgYS5uYW1lXSA9PSAxKSByZXR1cm4gMVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKHNvbHV0aW9uW1wieF9cIiArIGIubmFtZSArIFwiX1wiICsgYS5uYW1lXSA9PSAwKSByZXR1cm4gLTFcclxuICAgICAgICAgICAgICAgIH0pXHJcblxyXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgaj0wOyBqPHRhYmxlLmF0dHJpYnV0ZXMubGVuZ3RoOyBqKyspe1xyXG4gICAgICAgICAgICAgICAgICAgIHRhYmxlLmF0dHJpYnV0ZXNbal0ud2VpZ2h0ID0gajtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxufSIsImNsYXNzIFN3ZWVwIHtcclxuICAgIGNvbnN0cnVjdG9yKGcpe1xyXG4gICAgICAgIHRoaXMuZyA9IGc7XHJcbiAgICAgICAgdGhpcy5lbGFwc2VkVGltZSA9IDA7XHJcbiAgICB9XHJcblxyXG4gICAgYXJyYW5nZSgpe1xyXG4gICAgICAgIGxldCBzdGFydFRpbWUgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKTtcclxuXHJcbiAgICAgICAgdGhpcy5nLnNldEV4YWN0V2VpZ2h0cygpO1xyXG4gICAgICAgIHRoaXMuc3dlZXBSaWdodCgpO1xyXG4gICAgICAgIHRoaXMuc3dlZXBMZWZ0KCk7XHJcblxyXG4gICAgICAgIHRoaXMuZWxhcHNlZFRpbWUgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKSAtIHN0YXJ0VGltZTtcclxuICAgIH1cclxuXHJcbiAgICBzd2VlcFJpZ2h0KCl7XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDE7IGkgPD0gdGhpcy5nLm1heERlcHRoOyBpKyspe1xyXG4gICAgICAgICAgICBsZXQgbGF5ZXJUYWJsZXMgPSB0aGlzLmcudGFibGVJbmRleFtpXTtcclxuICAgICAgICAgICAgbGV0IGNyb3NzZXMsIGN1ckNyb3NzZXM7XHJcblxyXG4gICAgICAgICAgICBkbyB7XHJcbiAgICAgICAgICAgICAgICBjcm9zc2VzID0gdGhpcy5nLmdldEVkZ2VDcm9zc2luZ3NBdERlcHRoKGktMSkgKyB0aGlzLmcuZ2V0RWRnZUNyb3NzaW5nc0F0RGVwdGgoaSk7XHJcbiAgICAgICAgICAgICAgICBjdXJDcm9zc2VzID0gY3Jvc3NlcztcclxuXHJcbiAgICAgICAgICAgICAgICBkbyB7XHJcbiAgICAgICAgICAgICAgICAgICAgY3Jvc3NlcyA9IHRoaXMuZy5nZXRFZGdlQ3Jvc3NpbmdzQXREZXB0aChpLTEpICsgdGhpcy5nLmdldEVkZ2VDcm9zc2luZ3NBdERlcHRoKGkpO1xyXG4gICAgICAgICAgICAgICAgICAgIGN1ckNyb3NzZXMgPSBjcm9zc2VzO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBqPTA7IGo8bGF5ZXJUYWJsZXMubGVuZ3RoIC0gMTsgaisrKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHQxID0gbGF5ZXJUYWJsZXNbal07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCB0MiA9IGxheWVyVGFibGVzW2orMV07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc3dhcCh0MSwgdDIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgbmV3Q3Jvc3NlcyA9IHRoaXMuZy5nZXRFZGdlQ3Jvc3NpbmdzQXREZXB0aChpLTEpICsgdGhpcy5nLmdldEVkZ2VDcm9zc2luZ3NBdERlcHRoKGkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoY3VyQ3Jvc3NlcyA+IG5ld0Nyb3NzZXMpe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY3VyQ3Jvc3NlcyA9IG5ld0Nyb3NzZXNcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxheWVyVGFibGVzW2pdID0gdDI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYXllclRhYmxlc1tqKzFdID0gdDE7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB0aGlzLnN3YXAodDEsIHQyKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgfSB3aGlsZSAoY3Jvc3NlcyA+IGN1ckNyb3NzZXMpO1xyXG5cclxuICAgICAgICAgICAgICAgIGRvIHtcclxuICAgICAgICAgICAgICAgICAgICBjcm9zc2VzID0gdGhpcy5nLmdldEVkZ2VDcm9zc2luZ3NBdERlcHRoKGktMSkgKyB0aGlzLmcuZ2V0RWRnZUNyb3NzaW5nc0F0RGVwdGgoaSk7XHJcbiAgICAgICAgICAgICAgICAgICAgY3VyQ3Jvc3NlcyA9IGNyb3NzZXM7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGZvciAobGV0IGo9MDsgajxsYXllclRhYmxlcy5sZW5ndGg7IGorKyl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBhdHRycyA9IGxheWVyVGFibGVzW2pdLmF0dHJpYnV0ZXM7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBrPTA7IGs8YXR0cnMubGVuZ3RoIC0xOyBrKyspe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGExID0gYXR0cnNba11cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBhMiA9IGF0dHJzW2srMV1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc3dhcChhMSwgYTIpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBuZXdDcm9zc2VzID0gdGhpcy5nLmdldEVkZ2VDcm9zc2luZ3NBdERlcHRoKGktMSkgKyB0aGlzLmcuZ2V0RWRnZUNyb3NzaW5nc0F0RGVwdGgoaSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGN1ckNyb3NzZXMgPiBuZXdDcm9zc2VzKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdXJDcm9zc2VzID0gbmV3Q3Jvc3NlcztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhdHRyc1trXSA9IGEyO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJzW2srMV0gPSBhMTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB0aGlzLnN3YXAoYTEsIGEyKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICB9IHdoaWxlIChjcm9zc2VzID4gY3VyQ3Jvc3Nlcyk7XHJcblxyXG4gICAgICAgICAgICB9IHdoaWxlIChjcm9zc2VzID4gY3VyQ3Jvc3Nlcyk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHN3ZWVwTGVmdCgpe1xyXG4gICAgICAgIGZvciAobGV0IGk9dGhpcy5nLm1heERlcHRoOyBpPj0yOyBpLS0pe1xyXG4gICAgICAgICAgICBsZXQgbGF5ZXJUYWJsZXMgPSB0aGlzLmcudGFibGVJbmRleFtpLTFdO1xyXG4gICAgICAgICAgICBsZXQgY3Jvc3NlcywgY3VyQ3Jvc3NlcztcclxuXHJcbiAgICAgICAgICAgIGRvIHtcclxuICAgICAgICAgICAgICAgIGNyb3NzZXMgPSB0aGlzLmcuZ2V0RWRnZUNyb3NzaW5nc0F0RGVwdGgoaS0xKSArIHRoaXMuZy5nZXRFZGdlQ3Jvc3NpbmdzQXREZXB0aChpLTIpO1xyXG4gICAgICAgICAgICAgICAgY3VyQ3Jvc3NlcyA9IGNyb3NzZXM7XHJcblxyXG4gICAgICAgICAgICAgICAgZG8ge1xyXG4gICAgICAgICAgICAgICAgICAgIGNyb3NzZXMgPSB0aGlzLmcuZ2V0RWRnZUNyb3NzaW5nc0F0RGVwdGgoaS0xKSArIHRoaXMuZy5nZXRFZGdlQ3Jvc3NpbmdzQXREZXB0aChpLTIpO1xyXG4gICAgICAgICAgICAgICAgICAgIGN1ckNyb3NzZXMgPSBjcm9zc2VzO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBqPTA7IGo8bGF5ZXJUYWJsZXMubGVuZ3RoIC0gMTsgaisrKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHQxID0gbGF5ZXJUYWJsZXNbal07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCB0MiA9IGxheWVyVGFibGVzW2orMV07XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnN3YXAodDEsIHQyKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IG5ld0Nyb3NzZXMgPSB0aGlzLmcuZ2V0RWRnZUNyb3NzaW5nc0F0RGVwdGgoaS0xKSArIHRoaXMuZy5nZXRFZGdlQ3Jvc3NpbmdzQXREZXB0aChpLTIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoY3VyQ3Jvc3NlcyA+IG5ld0Nyb3NzZXMpe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY3VyQ3Jvc3NlcyA9IG5ld0Nyb3NzZXM7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYXllclRhYmxlc1tqXSA9IHQyO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGF5ZXJUYWJsZXNbaisxXSA9IHQxO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgdGhpcy5zd2FwKHQxLCB0Mik7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSB3aGlsZSAoY3Jvc3NlcyA+IGN1ckNyb3NzZXMpO1xyXG5cclxuICAgICAgICAgICAgICAgIGRvIHtcclxuICAgICAgICAgICAgICAgICAgICBjcm9zc2VzID0gdGhpcy5nLmdldEVkZ2VDcm9zc2luZ3NBdERlcHRoKGktMSkgKyB0aGlzLmcuZ2V0RWRnZUNyb3NzaW5nc0F0RGVwdGgoaS0yKTtcclxuICAgICAgICAgICAgICAgICAgICBjdXJDcm9zc2VzID0gY3Jvc3NlcztcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgaj0wOyBqPGxheWVyVGFibGVzLmxlbmd0aDsgaisrKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGF0dHJzID0gbGF5ZXJUYWJsZXNbal0uYXR0cmlidXRlcztcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAobGV0IGs9MDsgazxhdHRycy5sZW5ndGggLTE7IGsrKyl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgYTEgPSBhdHRyc1trXVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGEyID0gYXR0cnNbaysxXVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zd2FwKGExLCBhMik7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IG5ld0Nyb3NzZXMgPSB0aGlzLmcuZ2V0RWRnZUNyb3NzaW5nc0F0RGVwdGgoaS0xKSArIHRoaXMuZy5nZXRFZGdlQ3Jvc3NpbmdzQXREZXB0aChpLTIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjdXJDcm9zc2VzID4gbmV3Q3Jvc3Nlcyl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY3VyQ3Jvc3NlcyA9IG5ld0Nyb3NzZXM7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXR0cnNba10gPSBhMjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhdHRyc1trKzFdID0gYTE7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgdGhpcy5zd2FwKGExLCBhMik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9IHdoaWxlIChjcm9zc2VzID4gY3VyQ3Jvc3Nlcyk7XHJcblxyXG4gICAgICAgICAgICB9IHdoaWxlIChjcm9zc2VzID4gY3VyQ3Jvc3Nlcyk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHN3YXAodzEsIHcyKXtcclxuICAgICAgICBsZXQgdG1wdyA9IHcxLndlaWdodDtcclxuICAgICAgICB3MS53ZWlnaHQgPSB3Mi53ZWlnaHQ7XHJcbiAgICAgICAgdzIud2VpZ2h0ID0gdG1wdztcclxuICAgIH1cclxufSIsImNsYXNzIFRhYmxlIHtcclxuICAgIGNvbnN0cnVjdG9yKG5hbWUsIGhlYWRlciwgbWFpbiwgZGVwdGgsIHR5cGU9dW5kZWZpbmVkKXtcclxuICAgICAgICB0aGlzLm5hbWUgPSBuYW1lO1xyXG4gICAgICAgIHRoaXMuaGVhZGVyID0gaGVhZGVyO1xyXG4gICAgICAgIHRoaXMubWFpbiA9IG1haW47XHJcbiAgICAgICAgdGhpcy5kZXB0aCA9IGRlcHRoO1xyXG4gICAgICAgIHRoaXMuYXR0cmlidXRlcyA9IFtdO1xyXG4gICAgICAgIHRoaXMuYXR0ck1hcHMgPSBbXTtcclxuICAgICAgICB0aGlzLndlaWdodCA9IDA7XHJcbiAgICAgICAgdGhpcy5ncm91cCA9IHVuZGVmaW5lZDtcclxuICAgICAgICB0aGlzLmdyb3VwcyA9IFtdO1xyXG4gICAgICAgIHRoaXMuZ3JhcGggPSB1bmRlZmluZWQ7XHJcbiAgICAgICAgdGhpcy52aXNpYmlsaXR5ID0gJ3Zpc2libGUnO1xyXG4gICAgICAgIHRoaXMudmVydGljYWxBdHRyT2Zmc2V0ID0gMDtcclxuICAgICAgICB0aGlzLmlkID0gbmFtZTtcclxuICAgICAgICB0aGlzLnR5cGUgPSB0eXBlO1xyXG4gICAgfVxyXG5cclxuICAgIGFkZEF0dHJpYnV0ZShhdHRyaWJ1dGUpe1xyXG4gICAgICAgIHRoaXMuYXR0cmlidXRlcy5wdXNoKG5ldyBBdHRyaWJ1dGUodGhpcywgYXR0cmlidXRlKSlcclxuICAgIH1cclxuXHJcbiAgICBjb21wYXJlVG8ob3RoZXJUYWJsZSl7XHJcbiAgICAgICAgaWYgKHRoaXMuZGVwdGggPiBvdGhlclRhYmxlLmRlcHRoKSByZXR1cm4gLTE7XHJcbiAgICAgICAgZWxzZSBpZiAodGhpcy5kZXB0aCA8IG90aGVyVGFibGUuZGVwdGgpIHJldHVybiAxO1xyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBpZiAodGhpcy53ZWlnaHQgPCBvdGhlclRhYmxlLndlaWdodCkgcmV0dXJuIDE7XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKHRoaXMud2VpZ2h0ID4gb3RoZXJUYWJsZS53ZWlnaHQpIHJldHVybiAtMTtcclxuICAgICAgICAgICAgZWxzZSByZXR1cm4gMDtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn0iLCJsZXQgZHJhd0dyYXBoID0gKHN2ZywgZywgYWxnb3JpdGhtID0gdW5kZWZpbmVkKSA9PiB7XG4gICAgbGV0IGxpbmUgPSBkMy5saW5lKClcbiAgICAgICAgLmN1cnZlKGQzLmN1cnZlQmFzaXMpO1xuXG4gICAgbGV0IHN0cmFpZ2h0bGluZSA9IGQzLmxpbmUoKVxuXG4gICAgdGFibGVfdmVydF9zcGFjZSA9IGcuYmFzZVJvd0Rpc3RhbmNlICogYXR0cl9oZWlnaHRcblxuICAgIHZpc2cgPSBzdmcuYXBwZW5kKCdnJylcbiAgICAgICAgLmF0dHIoJ3RyYW5zZm9ybScsICd0cmFuc2xhdGUoMjAsIDIwKScpXG5cbiAgICAvLyB0ZW1wIGdyaWQgaW5kaWNhdG9yXG4gICAgZm9yIChsZXQgaSBpbiBbIC4uLiBBcnJheSgxMCkua2V5cygpXSl7XG4gICAgICAgIHZpc2cuYXBwZW5kKCdwYXRoJylcbiAgICAgICAgICAgIC5hdHRyKCdzdHJva2Utd2lkdGgnLCAxKVxuICAgICAgICAgICAgLmF0dHIoJ3N0cm9rZScsICcjY2NjJylcbiAgICAgICAgICAgIC5hdHRyKCdmaWxsJywgJ25vbmUnKVxuICAgICAgICAgICAgLnN0eWxlKFwic3Ryb2tlLWRhc2hhcnJheVwiLCAoXCI1LCAzXCIpKVxuICAgICAgICAgICAgLmF0dHIoJ2QnLCBzdHJhaWdodGxpbmUoW1swLCBhdHRyX2hlaWdodCpnLmJhc2VSb3dEaXN0YW5jZSppXSwgWzEwMDAsIGF0dHJfaGVpZ2h0KmcuYmFzZVJvd0Rpc3RhbmNlKmldXSkpXG4gICAgfVxuICAgIFxuXG4gICAgLy8gKioqKipcbiAgICAvLyB0YWJsZXNcbiAgICAvLyAqKioqKlxuICAgIHRhYmxlZ3JvdXBzID0gdmlzZy5zZWxlY3RBbGwoXCIudGFibGVzXCIpXG4gICAgICAgIC5kYXRhKGcudGFibGVzKVxuICAgICAgICAuZW50ZXIoKVxuICAgICAgICAuYXBwZW5kKCdnJylcbiAgICAgICAgLmF0dHIoJ2NsYXNzJywgJ3RhYmxlZ3JvdXAnKVxuICAgICAgICAuYXR0cignaWQnLCBkID0+ICd0YWJsZWdyb3VwXycgKyBkLm5hbWUpXG4gICAgICAgIC5zdHlsZSgndmlzaWJpbGl0eScsIGQgPT4gZC52aXNpYmlsaXR5KVxuICAgICAgICAuYXR0cigndHJhbnNmb3JtJywgZCA9PiBcbiAgICAgICAgICAgIFwidHJhbnNsYXRlKFwiICsgKGQuZGVwdGgqZGVwdGhfZGlzdGFuY2UpICsgXCIsXCIgXG4gICAgICAgICAgICArIChnLnRhYmxlSW5kZXhbZC5kZXB0aF0uaW5kZXhPZihkKSAqIHRhYmxlX3ZlcnRfc3BhY2UgKyBkLnZlcnRpY2FsQXR0ck9mZnNldCAqIGF0dHJfaGVpZ2h0KSArIFwiKVwiIClcblxuICAgIHRhYmxlZ3JvdXBzLmFwcGVuZCgncmVjdCcpXG4gICAgICAgIC5hdHRyKCd3aWR0aCcsIHRhYmxlX3dpZHRoKVxuICAgICAgICAuYXR0cignaGVpZ2h0JywgZCA9PiBkLmF0dHJpYnV0ZXMubGVuZ3RoICogYXR0cl9oZWlnaHQgKyBoZWFkZXJfaGVpZ2h0KSAgXG4gICAgICAgIC5hdHRyKCdmaWxsJywgZCA9PiBkLnR5cGUgPT0gXCJncm91cGhlYWRlclwiPyBcIiNlZWVcIiA6ICdibGFjaycpXG4gICAgICAgIC5hdHRyKCdzdHJva2UnLCAnZ3JheScpXG4gICAgICAgIC5vbignY2xpY2snLCBkID0+IGNvbnNvbGUubG9nKGQpKVxuXG4gICAgdGFibGVncm91cHMuYXBwZW5kKCd0ZXh0JylcbiAgICAgICAgLmF0dHIoJ3gnLCB0YWJsZV93aWR0aC8yKVxuICAgICAgICAuYXR0cigneScsIGF0dHJfaGVpZ2h0LzIgKyA1KVxuICAgICAgICAuYXR0cigndGV4dC1hbmNob3InLCAnbWlkZGxlJylcbiAgICAgICAgLmF0dHIoJ2ZpbGwnLCBkID0+IGQudHlwZSA9PSBcImdyb3VwaGVhZGVyXCI/IFwiYmxhY2tcIiA6ICd3aGl0ZScpXG4gICAgICAgIC5hdHRyKCdmb250LXNpemUnLCAnMC43ZW0nKVxuICAgICAgICAuYXR0cihcImZvbnQtZmFtaWx5XCIsIFwiQXJpYWxcIilcbiAgICAgICAgLnRleHQoZCA9PiBkLmhlYWRlciArIFwiIHc6XCIgKyBkLndlaWdodClcbiAgICBcbiAgICAvLyAqKioqKlxuICAgIC8vIGF0dHJpYnV0ZXNcbiAgICAvLyAqKioqKlxuICAgIGF0dHJncm91cHMgPSB0YWJsZWdyb3Vwcy5zZWxlY3RBbGwoJy5hdHRycycpXG4gICAgICAgIC5kYXRhKGQgPT4gZC5hdHRyaWJ1dGVzKVxuICAgICAgICAuZW50ZXIoKVxuICAgICAgICAuYXBwZW5kKCdnJylcbiAgICAgICAgLmF0dHIoJ3RyYW5zZm9ybScsIChkLCBpKSA9PiBcInRyYW5zbGF0ZSgwLCBcIiArIChoZWFkZXJfaGVpZ2h0ICsgKGkpKmF0dHJfaGVpZ2h0KSArIFwiKVwiKVxuICAgICAgICBcbiAgICBhdHRyZ3JvdXBzLmFwcGVuZChcInJlY3RcIilcbiAgICAgICAgLmF0dHIoXCJ3aWR0aFwiLCB0YWJsZV93aWR0aClcbiAgICAgICAgLmF0dHIoXCJoZWlnaHRcIiwgYXR0cl9oZWlnaHQpXG4gICAgICAgIC5hdHRyKFwiZmlsbFwiLCBcIiNjY2NcIilcbiAgICAgICAgLmF0dHIoXCJzdHJva2VcIiwgXCJ3aGl0ZVwiKVxuICAgICAgICAuYXR0cihcInN0cm9rZS13aWR0aFwiLCAyKVxuICAgICAgICAub24oJ2NsaWNrJywgZCA9PiBjb25zb2xlLmxvZyhkKSlcblxuICAgIGF0dHJncm91cHMuYXBwZW5kKCd0ZXh0JylcbiAgICAgICAgLmF0dHIoJ3gnLCB0YWJsZV93aWR0aC8yKVxuICAgICAgICAuYXR0cigneScsIGF0dHJfaGVpZ2h0LzIgKyAzKVxuICAgICAgICAuYXR0cigndGV4dC1hbmNob3InLCAnbWlkZGxlJylcbiAgICAgICAgLmF0dHIoJ2ZvbnQtc2l6ZScsICcwLjdlbScpXG4gICAgICAgIC5hdHRyKFwiZm9udC1mYW1pbHlcIiwgXCJBcmlhbFwiKVxuICAgICAgICAudGV4dChkID0+IGQuYXR0ciArIFwiIHc6XCIgKyBkLndlaWdodCkgXG5cbiAgICBsZXQgZ2V0XzFzdF9jb29yZCA9IChkKSA9PiBcbiAgICAgICAgW2QubGVmdFRhYmxlLmRlcHRoICogZGVwdGhfZGlzdGFuY2UgKyB0YWJsZV93aWR0aCxcbiAgICAgICAgZC5sZWZ0VGFibGUuYXR0cmlidXRlcy5pbmRleE9mKGQuYXR0MSkqYXR0cl9oZWlnaHQgKyBoZWFkZXJfaGVpZ2h0ICsgYXR0cl9oZWlnaHQvMiArIGcudGFibGVJbmRleFtkLmxlZnRUYWJsZS5kZXB0aF0uaW5kZXhPZihkLmxlZnRUYWJsZSkqdGFibGVfdmVydF9zcGFjZSArIGQubGVmdFRhYmxlLnZlcnRpY2FsQXR0ck9mZnNldCphdHRyX2hlaWdodF1cbiAgIFxuICAgIGxldCBnZXRfMm5kX2Nvb3JkID0gKGQpID0+IHtcbiAgICAgICAgaWYgKGQubGVmdFRhYmxlLmRlcHRoICE9IGQucmlnaHRUYWJsZS5kZXB0aClcbiAgICAgICAgICAgIHJldHVybiBbZC5yaWdodFRhYmxlLmRlcHRoICogZGVwdGhfZGlzdGFuY2UsIFxuICAgICAgICAgICAgICAgIGQucmlnaHRUYWJsZS5hdHRyaWJ1dGVzLmluZGV4T2YoZC5hdHQyKSphdHRyX2hlaWdodCArIGhlYWRlcl9oZWlnaHQgKyBhdHRyX2hlaWdodC8yICsgZy50YWJsZUluZGV4W2QucmlnaHRUYWJsZS5kZXB0aF0uaW5kZXhPZihkLnJpZ2h0VGFibGUpKnRhYmxlX3ZlcnRfc3BhY2UgKyBkLnJpZ2h0VGFibGUudmVydGljYWxBdHRyT2Zmc2V0KmF0dHJfaGVpZ2h0XVxuICAgICAgICBlbHNlIHJldHVybiBbZC5sZWZ0VGFibGUuZGVwdGggKiBkZXB0aF9kaXN0YW5jZSArIHRhYmxlX3dpZHRoLFxuICAgICAgICAgICAgZC5yaWdodFRhYmxlLmF0dHJpYnV0ZXMuaW5kZXhPZihkLmF0dDIpKmF0dHJfaGVpZ2h0ICsgaGVhZGVyX2hlaWdodCArIGF0dHJfaGVpZ2h0LzIgKyBnLnRhYmxlSW5kZXhbZC5yaWdodFRhYmxlLmRlcHRoXS5pbmRleE9mKGQucmlnaHRUYWJsZSkqdGFibGVfdmVydF9zcGFjZSArIGQucmlnaHRUYWJsZS52ZXJ0aWNhbEF0dHJPZmZzZXQqYXR0cl9oZWlnaHRdICAgIFxuICAgIH1cblxuICAgIC8vICoqKioqXG4gICAgLy8gZ3JvdXBzXG4gICAgLy8gKioqKipcbiAgICBnLnVwZGF0ZUdyb3VwQ29vcmRzKClcbiAgICB2aXNnLnNlbGVjdEFsbCgnLmdyb3VwcmVjdHMnKSBcbiAgICAgICAgLmRhdGEoZy5ncm91cHMpXG4gICAgICAgIC5lbnRlcigpXG4gICAgICAgIC5hcHBlbmQoJ3BhdGgnKVxuICAgICAgICAuYXR0cignY2xhc3MnLCAnZ3JvdXBsaW5lcycpXG4gICAgICAgIC5hdHRyKCdzdHJva2Utd2lkdGgnLCAzKVxuICAgICAgICAuYXR0cignc3Ryb2tlJywgJ2JsYWNrJylcbiAgICAgICAgLmF0dHIoJ2ZpbGwnLCAnbm9uZScpXG4gICAgICAgIC5zdHlsZShcInN0cm9rZS1kYXNoYXJyYXlcIiwgKFwiNSwgM1wiKSlcbiAgICAgICAgLmF0dHIoJ2QnLCBkID0+IHsgcmV0dXJuIHN0cmFpZ2h0bGluZShkLmNvb3JkcykgfSlcblxuXG4gICAgLy8gKioqKipcbiAgICAvLyBlZGdlc1xuICAgIC8vICoqKioqXG4gICAgZWRnZXMgPSB2aXNnLnNlbGVjdEFsbCgnLmVkZ2VzJylcbiAgICAgICAgLmRhdGEoZy5lZGdlcylcbiAgICAgICAgLmVudGVyKClcbiAgICAgICAgLmFwcGVuZCgncGF0aCcpXG4gICAgICAgIC5hdHRyKCdzdHJva2UnLCAnYmxhY2snKVxuICAgICAgICAuYXR0cignZmlsbCcsICdub25lJylcbiAgICAgICAgLmF0dHIoJ2QnLCBkID0+IHtcbiAgICAgICAgICAgIGZpcnN0ID0gZ2V0XzFzdF9jb29yZChkKVxuICAgICAgICAgICAgc2Vjb25kID0gZ2V0XzJuZF9jb29yZChkKVxuICAgICAgICAgICAgcmV0dXJuIGxpbmUoXG4gICAgICAgICAgICAgICAgW2ZpcnN0LCBcbiAgICAgICAgICAgICAgICBbZmlyc3RbMF0gKyBkZXB0aF9kaXN0YW5jZSowLjIsIGZpcnN0WzFdXSxcbiAgICAgICAgICAgICAgICBbc2Vjb25kWzBdICsgKGQubGVmdFRhYmxlLmRlcHRoID09IGQucmlnaHRUYWJsZS5kZXB0aCA/IDEgOiAtMSkqZGVwdGhfZGlzdGFuY2UqMC4yLCBzZWNvbmRbMV1dLFxuICAgICAgICAgICAgICAgIHNlY29uZF1cbiAgICAgICAgICAgIClcbiAgICAgICAgfSlcblxuICAgIGQzLnNlbGVjdChzdmcubm9kZSgpLnBhcmVudE5vZGUpXG4gICAgICAgIC5hcHBlbmQoJ2RpdicpLmFwcGVuZCgndGV4dCcpXG4gICAgICAgIC50ZXh0KCdjcm9zc2luZ3M6ICcgKyBnLmdldEVkZ2VDcm9zc2luZ3MoKSArICcsIHRhYmxlczogJyArIGcudGFibGVzLmxlbmd0aCArICcsIGVkZ2VzOiAnICsgZy5lZGdlcy5sZW5ndGggKyBcIiwgYmVuZGluZXNzOiBcIiArIGcuZ2V0R3JhcGhUb3RhbEVkZ2VCZW5kaW5lc3MoKSlcbiAgICAgICAgLnN0eWxlKCdmb250LWZhbWlseScsICdBcmlhbCcpXG4gICAgICAgIC5hdHRyKCdjbGFzcycsICdjcm9zc2luZ19jb3VudCcpXG5cbiAgICBpZiAoYWxnb3JpdGhtICE9IHVuZGVmaW5lZCAmJiBhbGdvcml0aG0uZWxhcHNlZFRpbWUgIT0gdW5kZWZpbmVkKXtcbiAgICAgICAgZDMuc2VsZWN0KHN2Zy5ub2RlKCkucGFyZW50Tm9kZSlcbiAgICAgICAgICAgIC5hcHBlbmQoJ2RpdicpLmFwcGVuZCgndGV4dCcpXG4gICAgICAgICAgICAudGV4dCgndGltZTogJyArIGFsZ29yaXRobS5lbGFwc2VkVGltZSArICdtcycpXG4gICAgICAgICAgICAuc3R5bGUoJ2ZvbnQtZmFtaWx5JywgJ0FyaWFsJylcbiAgICAgICAgICAgIC5hdHRyKCdjbGFzcycsICdjcm9zc2luZ19jb3VudCcpXG5cbiAgICAgICAgaWYgKGFsZ29yaXRobS5pdGVyYXRpb25zICE9IHVuZGVmaW5lZCl7XG5cbiAgICAgICAgICAgIGQzLnNlbGVjdChzdmcubm9kZSgpLnBhcmVudE5vZGUpXG4gICAgICAgICAgICAgICAgLmFwcGVuZCgndGV4dCcpXG4gICAgICAgICAgICAgICAgLnRleHQoJ+KPue+4jycpXG5cbiAgICAgICAgICAgIGQzLnNlbGVjdChzdmcubm9kZSgpLnBhcmVudE5vZGUpXG4gICAgICAgICAgICAgICAgLmFwcGVuZCgndGV4dCcpXG4gICAgICAgICAgICAgICAgLnRleHQoJ+KPqicpXG4gICAgICAgICAgICAgICAgLm9uKCdjbGljaycsICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgYWxnb3JpdGhtLmN1cl9pdGVyYXRpb24tLTtcbiAgICAgICAgICAgICAgICAgICAgYWxnb3JpdGhtLmFwcGx5X2l0ZXJhdGlvbihhbGdvcml0aG0uY3VyX2l0ZXJhdGlvbik7XG5cbiAgICAgICAgICAgICAgICAgICAgc3ZnLnNlbGVjdEFsbCgnLnRhYmxlZ3JvdXAnKVxuICAgICAgICAgICAgICAgICAgICAgICAgLnRyYW5zaXRpb24oKVxuICAgICAgICAgICAgICAgICAgICAgICAgLmR1cmF0aW9uKDc1MClcbiAgICAgICAgICAgICAgICAgICAgICAgIC5hdHRyKCd0cmFuc2Zvcm0nLCBkID0+IFxuICAgICAgICAgICAgICAgICAgICAgICAgJ3RyYW5zbGF0ZSgnICsgKGQuZGVwdGgqZGVwdGhfZGlzdGFuY2UpICsgJyAsICAnICsgKGFsZ29yaXRobS5nLnRhYmxlSW5kZXhbZC5kZXB0aF0uaW5kZXhPZihkKSAqIHRhYmxlX3ZlcnRfc3BhY2UpICArICcgKScpXG5cbiAgICAgICAgICAgICAgICAgICAgLy8gZDMuc2VsZWN0QWxsXG4gICAgICAgICAgICAgICAgICAgIC8vIC5hdHRyKCd0cmFuc2Zvcm0nLCBkID0+IFxuICAgICAgICAgICAgICAgICAgICAvLyAgICAgLy8gXCJ0cmFuc2xhdGUoXCIgKyAoZC5kZXB0aCpkZXB0aF9kaXN0YW5jZSkgKyBcIixcIiBcbiAgICAgICAgICAgICAgICAgICAgLy8gICAgIC8vICsgYWxnb3JpdGhtLmcudGFibGVJbmRleFtkLmRlcHRoXS5pbmRleE9mKGQpICogdGFibGVfdmVydF9zcGFjZSArIFwiKVwiIClcbiAgICAgICAgICAgICAgICAgICAgLy8gICAgIFwidHJhbnNsYXRlKDAsIDApXCJcbiAgICAgICAgICAgICAgICAgICAgLy8gICAgIClcbiAgICAgICAgICAgICAgICB9KVxuXG4gICAgICAgICAgICBkMy5zZWxlY3Qoc3ZnLm5vZGUoKS5wYXJlbnROb2RlKVxuICAgICAgICAgICAgICAgIC5hcHBlbmQoJ3RleHQnKVxuICAgICAgICAgICAgICAgIC50ZXh0KGFsZ29yaXRobS5jdXJfaXRlcmF0aW9uKVxuICAgICAgICAgICAgXG4gICAgICAgICAgICBkMy5zZWxlY3Qoc3ZnLm5vZGUoKS5wYXJlbnROb2RlKVxuICAgICAgICAgICAgICAgIC5hcHBlbmQoJ3RleHQnKVxuICAgICAgICAgICAgICAgIC50ZXh0KCfij6knKVxuICAgICAgICAgICAgICAgIC5vbignY2xpY2snLCAoKSA9PiB7XG5cbiAgICAgICAgICAgICAgICB9KVxuXG4gICAgICAgICAgICBkMy5zZWxlY3Qoc3ZnLm5vZGUoKS5wYXJlbnROb2RlKVxuICAgICAgICAgICAgICAgIC5hcHBlbmQoJ3RleHQnKVxuICAgICAgICAgICAgICAgIC50ZXh0KCfilrbvuI8nKVxuICAgICAgICB9XG4gICAgfVxufSIsIiJdfQ==
