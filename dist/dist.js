class Attribute{constructor(t,i){this.table=t,this.name=i,this.attr=i,this.weight=0,this.diffEdges=0,this.randomEdges=0,this.sameEdges=0,this.mutable=!0}compareTo(t){return this.weight>t.weight?-1:this.weight<t.weight?1:0}}
class DumbHeuristic{constructor(t){this.g=t}arrange(){for(let t=0;t<this.g.maxDepth;t++){let e=g.edgeIndex[t];e=e.sort((t,e)=>t.compareTo(e));for(let t=0;t<e.length-1;t++){let i=e[t],r=e[t+1];i.leftTable==r.leftTable&&(i.leftAttribute.mutable||r.leftAttribute.mutable)&&(this.swap(i.leftAttribute,r.leftAttribute),(i.rightAttribute.mutable||r.rightAttribute.mutable)&&(i.rightTable==r.rightTable?this.swap(i.rightAttribute,r.rightAttribute):this.swap(i.rightTable,r.rightTable)))}}}swap(t,e){let i=t.weight;t.weight=e.weight,e.weight=i}}
class Edge{constructor(t,e,i,h){this.leftTable=t,this.att1=e,this.leftAttribute=e,this.rightTable=i,this.att2=h,this.rightAttribute=h}compareTo(t){if(this.leftTable==t.leftTable)if(this.rightTable==t.rightTable){if(this.leftAttribute.weight>t.leftAttribute.weight&&this.rightAttribute.weight<t.rightAttribute.weight)return!0;if(this.leftAttribute.weight<t.leftAttribute.weight&&this.rightAttribute.weight>t.rightAttribute.weight)return!0}else{if(this.rightTable.weight<t.rightTable.weight&&this.leftAttribute.weight>t.leftAttribute.weight)return!0;if(this.rightTable.weight>t.rightTable.weight&&this.leftAttribute.weight<t.leftAttribute.weight)return!0}else if(this.rightTable==t.rightTable)if(this.leftTable==t.leftTable){if(this.leftAttribute.weight>t.leftAttribute.weight&&this.rightAttribute.weight<t.rightAttribute.weight)return!0;if(this.leftAttribute.weight<t.leftAttribute.weight&&this.rightAttribute.weight>t.rightAttribute.weight)return!0}else{if(this.leftTable.weight<t.leftTable.weight&&this.rightAttribute.weight>t.rightAttribute.weight)return!0;if(this.leftTable.weight>t.leftTable.weight&&this.rightAttribute.weight<t.rightAttribute.weight)return!0}else{if(this.leftTable.weight<t.leftTable.weight&&this.rightTable.weight>t.rightTable.weight)return!0;if(this.leftTable.weight>t.leftTable.weight&&this.rightTable.weight<t.rightTable.weight)return!0}return!1}compareSelfEdgeTo(t){if(this.leftTable.depth==this.rightTable.depth&&t.leftTable.depth==t.rightTable.depth){if(this.leftTable==t.leftTable)if(this.rightTable==t.rightTable){if(this.leftAttribute.weight<t.leftAttribute.weight&&this.rightAttribute.weight<t.rightAttribute.weight)return!0;if(this.leftAttribute.weight>t.leftAttribute.weight&&this.rightAttribute.weight>t.rightAttribute.weight)return!0}else{if(this.leftAttribute.weight<t.leftAttribute.weight&&this.rightTable.weight<t.rightTable.weight)return!0;if(this.leftAttribute.weight>t.leftAttribute.weight&&this.rightTable.weight>t.rightTable.weight)return!0}else if(this.leftTable==t.rightTable)if(this.rightTable==t.leftTable){if(this.rightAttribute.weight<t.leftAttribute.weight&&this.leftAttribute.weight<t.rightAttribute.weight)return!0;if(this.rightAttribute.weight>t.leftAttribute.weight&&this.leftAttribute.weight>t.rightAttribute.weight)return!0}else{if(this.leftAttribute.weight<t.rightAttribute.weight&&this.rightTable.weight<t.leftTable.weight)return!0;if(this.leftAttribute.weight>t.rightAttribute.weight&&this.rightTable.weight>t.leftTable.weight)return!0}else if(this.rightTable==t.leftTable)if(this.leftTable==t.rightTable){if(this.rightAttribute.weight<t.leftAttribute.weight&&this.leftAttribute.weight<t.rightAttribute.weight)return!0;if(this.rightAttribute.weight>t.leftAttribute.weight&&this.leftAttribute.weight>t.rightAttribute.weight)return!0}else{if(this.rightAttribute.weight<t.leftAttribute.weight&&this.leftTable.weight<t.rightTable.weight)return!0;if(this.rightAttribute.weight>t.leftAttribute.weight&&this.leftTable.weight>t.rightTable.weight)return!0}else if(this.rightTable==t.rightTable)if(this.leftTable==t.leftTable){if(this.leftAttribute.weight<t.leftAttribute.weight&&this.rightAttribute.weight<t.rightAttribute.weight)return!0;if(this.leftAttribute.weight>t.leftAttribute.weight&&this.rightAttribute.weight>t.rightAttribute.weight)return!0}else{if(this.rightAttribute.weight<t.rightAttribute.weight&&this.leftTable.weight<t.leftTable.weight)return!0;if(this.rightAttribute.weight>t.rightAttribute.weight&&this.leftTable.weight>t.leftTable.weight)return!0}}else if(this.leftTable.depth==this.rightTable.depth)if(this.leftTable==t.leftTable){if(this.leftAttribute.weight<t.leftAttribute.weight&&this.rightTable.weight>t.leftTable.weight)return!0;if(this.leftAttribute.weight>t.leftAttribute.weight&&this.rightTable.weight<t.leftTable.weight)return!0}else if(this.rightTable==t.rightTable){if(this.rightAttribute.weight<t.leftAttribute.weight&&this.leftTable.weight>t.leftTable.weight)return!0;if(this.rightAttribute.weight>t.leftAttribute.weight&&this.leftTable.weight<t.leftTable.weight)return!0}else{if(this.leftTable.weight>t.leftTable.weight&&this.rightTable.weight<t.leftTable.weight)return!0;if(this.leftTable.weight<t.leftTable.weight&&this.rightTable.weight>t.leftTable.weight)return!0}else if(t.leftTable==this.leftTable){if(t.leftAttribute.weight<this.leftAttribute.weight&&t.rightTable.weight>this.leftTable.weight)return!0;if(t.leftAttribute.weight>this.leftAttribute.weight&&t.rightTable.weight<this.leftTable.weight)return!0}else if(t.rightTable==this.leftTable){if(t.rightAttribute.weight<this.leftAttribute.weight&&t.leftTable.weight>this.leftTable.weight)return!0;if(t.rightAttribute.weight>this.leftAttribute.weight&&t.leftTable.weight<this.leftTable.weight)return!0}else{if(t.leftTable.weight<this.leftAttribute.weight&&t.rightTable.weight>this.leftAttribute.weight)return!0;if(t.leftTable.weight>this.leftAttribute.weight&&t.rightTable.weight<this.leftAttribute.weight)return!0}}crosses(t){return this.leftTable.depth==this.rightTable.depth||t.leftTable.depth==t.rightTable.depth?this.compareSelfEdgeTo(t):!!this.compareTo(t)}compare(t){if(null==t)return 1;this.compareAttributes(this.leftTable,this.leftAttribute,t.leftTable,t.leftAttribute)}compareAttributes(t,e,i,h){let r=t.compareTo(i);return 0==r&&(r=e.compareTo(h)),r}isSameRankEdge(){return this.leftTable.depth==this.rightTable.depth}getBendiness(){let t=0,e=10/(10*this.leftTable.graph.baseRowDistance);return t=this.rightTable.weight+this.rightAttribute.weight*e+this.rightTable.verticalAttrOffset*e-(this.leftTable.weight+this.leftAttribute.weight*e+this.leftTable.verticalAttrOffset*e),t=Math.round(1e3*t)/1e3,Math.abs(t)}}
class Gansner{constructor(t){this.g=t,this.max_iterations=11,this.elapsedTime=0}median(t){return(t=t.sort()).length%2==0?(t[t.length/2]+t[t.length/2-1])/2:t[(t.length-1)/2]}applyArrangement(t){for(let e of t.tables){let t=this.g.tables.find(t=>t.name==e.name);t.weight=e.weight;for(let i of e.attributes){t.attributes.find(t=>t.name==i.name).weight=i.weight}}}arrange(){let t=(new Date).getTime(),e=this.g.getEdgeCrossings();for(let t=0;t<this.max_iterations;t++){let i=_.cloneDeep(this.g);t%2==0?this.arrangeLeft(i):this.arrangeRight(i),this.transpose(i);let a=i.getEdgeCrossings();a<=e&&(this.applyArrangement(i),e=a)}this.elapsedTime=(new Date).getTime()-t}arrangeLeft(t){for(let e=1;e<=t.maxDepth;e++){let i=t.tableIndex[e],a=t.edgeIndex[e-1];for(let t of i){let e=a.filter(e=>e.rightTable==t&&e.leftTable.depth!=e.rightTable.depth).map(t=>parseFloat(t.leftTable.weight));t.weight=this.median(e);for(let e of t.attributes){let i=a.filter(t=>t.rightAttribute==e&&t.leftTable.depth!=t.rightTable.depth).map(t=>parseFloat(t.leftTable.weight)),l=a.filter(t=>t.rightAttribute==e&&t.leftTable.depth!=t.rightTable.depth).map(t=>parseFloat(t.leftAttribute.weight));0!=i.length&&(e.weight=this.median(i)+this.median(l)/t.attributes.length)}}t.setExactWeights()}}arrangeRight(t){for(let e=t.maxDepth-1;e>0;e--){let i=t.tableIndex[e],a=t.edgeIndex[e];for(let t of i){let e=a.filter(e=>e.leftTable==t&&e.leftTable.depth!=e.rightTable.depth).map(t=>parseFloat(t.rightTable.weight));t.weight=this.median(e);for(let e of t.attributes){let i=a.filter(t=>t.leftAttribute==e&&t.leftTable.depth!=t.rightTable.depth).map(t=>parseFloat(t.rightTable.weight)),l=a.filter(t=>t.leftAttribute==e&&t.leftTable.depth!=t.rightTable.depth).map(t=>parseFloat(t.rightAttribute.weight));0!=i.length&&(e.weight=this.median(i)+this.median(l)/t.attributes.length)}}t.setExactWeights()}}transpose(t){let e=!0;for(;e;){e=!1;for(let i=0;i<=t.maxDepth;i++){let a=t.getEdgeCrossingsAtDepth(i),l=t.tableIndex[i];for(let h=0;h<l.length-1;h++){let r=l[h],s=l[h+1];this.swap(r,s),t.getEdgeCrossingsAtDepth(i)+t.getEdgeCrossingsAtDepth(i+1)<a?e=!0:this.swap(r,s)}for(let h of l)for(let l=0;l<h.attributes.length-1;l++){let r=h.attributes[l],s=h.attributes[l+1];this.swap(r,s),t.getEdgeCrossingsAtDepth(i)+t.getEdgeCrossingsAtDepth(i+1)<a?e=!0:this.swap(r,s)}}}}swap(t,e){let i=t.weight;t.weight=e.weight,e.weight=i}}
class GansnerSameRank{constructor(t){this.g=t,this.max_iterations=6,this.elapsedTime=0,this.iterations=[],this.cur_iteration=0}apply_iteration(t){this.applyArrangement(this.iterations[t])}quicksort(t){if(t.length<=1)return t;for(var e=t[0],i=[],a=[],s=1;s<t.length;s++)t[s]<e?i.push(t[s]):a.push(t[s]);return quicksort(i).concat(e,quicksort(a))}median(t){return(t=t.sort()).length%2==0?(t[t.length/2]+t[t.length/2-1])/2:t[(t.length-1)/2]}applyArrangement(t){for(let e of t.tables){let t=this.g.tables.find(t=>t.name==e.name);t.weight=e.weight,t.assignedWeight=e.assignedWeight;for(let i of e.attributes){let e=t.attributes.find(t=>t.name==i.name);e.weight=i.weight,e.assignedWeight=i.assignedWeight}}}arrange(){let t=(new Date).getTime();this.g.setExactWeights();let e=this.g.getEdgeCrossings();for(let t=0;t<this.max_iterations;t++){this.cur_iteration=t;let i=_.cloneDeep(this.g);t%2==0?this.arrangeLeft(i):this.arrangeRight(i),this.transpose(i);let a=i.getEdgeCrossings();a<=e&&(this.applyArrangement(i),e=a),this.iterations[this.cur_iteration]=_.cloneDeep(i)}this.elapsedTime=(new Date).getTime()-t}arrangeLeft(t){console.log("Left");let e={},i={};for(let a=1;a<=t.maxDepth+1;a++){let s=t.tableIndex[a],r=t.edgeIndex[a-1];for(let t in s){let a=s[t],n=r.filter(t=>t.rightTable==a&&!this.isSameRankEdge(t)).map(t=>parseFloat(t.leftTable.weight)),l=this.median(n);isNaN(l)||(e[a.name]=l),i[a.name]={};for(let t of a.attributes){let e=r.filter(e=>e.rightAttribute==t&&!this.isSameRankEdge(e)).map(t=>parseFloat(t.leftTable.weight)),s=r.filter(e=>e.rightAttribute==t&&!this.isSameRankEdge(e)).map(t=>parseFloat(t.leftAttribute.weight)),n=parseFloat(this.median(e))+parseFloat(this.median(s)/a.attributes.length);isNaN(n)||(i[a.name][t.name]=n)}}}this.reorder(t,e,i)}arrangeRight(t){console.log("Right");let e={},i={};for(let a=t.maxDepth-1;a>0;a--){let s=t.tableIndex[a],r=t.edgeIndex[a];for(let t of s){let a=r.filter(e=>e.leftTable==t).map(t=>parseFloat(t.rightTable.weight)),s=parseFloat(this.median(a));isNaN(s)||(e[t.name]=s),i[t.name]={};for(let e of t.attributes){let a=r.filter(t=>t.leftAttribute==e).map(t=>parseFloat(t.rightTable.weight)),s=r.filter(t=>t.leftAttribute==e).map(t=>parseFloat(t.rightAttribute.weight)),n=parseFloat(this.median(a))+parseFloat(this.median(s)/t.attributes.length);isNaN(n)||(i[t.name][e.name]=n)}}}this.reorder(t,e,i)}isSameRankEdge(t){return t.leftTable.depth==t.rightTable.depth}reorder(t,e,i){for(let a in t.tableIndex)if(0!=a){for(let s in t.tableIndex[a]){let r=t.tableIndex[a][s];if(null!=e[r.name]){r.weight=e[r.name],r.assignedWeight=e[r.name];for(let t in r.attributes){let e=r.attributes[t];e.weight=i[r.name][e.name],e.assignedWeight=i[r.name][e.name]}r.attributes.sort((t,e)=>isNaN(t.weight)||isNaN(e.weight)?0:t.weight>e.weight?1:-1);for(let t in r.attributes){r.attributes[t].weight=t}}}t.tableIndex[a].sort((t,e)=>isNaN(t.weight)||isNaN(e.weight)?0:t.weight>e.weight?1:-1);for(let e in t.tableIndex[a]){t.tableIndex[a][e].weight=e}}}transpose(t){let e=!0;for(;e;){e=!1;for(let i=0;i<=t.maxDepth;i++){let a=t.getEdgeCrossingsAtDepth(i),s=t.tableIndex[i];for(let r=0;r<s.length-1;r++){let n=s[r],l=s[r+1];this.swap(n,l),t.getEdgeCrossingsAtDepth(i)+t.getEdgeCrossingsAtDepth(i+1)<a?e=!0:this.swap(n,l)}for(let r of s)for(let s=0;s<r.attributes.length-1;s++){let n=r.attributes[s],l=r.attributes[s+1];this.swap(n,l),t.getEdgeCrossingsAtDepth(i)+t.getEdgeCrossingsAtDepth(i+1)<a?e=!0:this.swap(n,l)}}}}swap(t,e){let i=t.weight;t.weight=e.weight,e.weight=i}}
class Graph{constructor(e){null==e?(this.edges=[],this.tables=[],this.tableIndex=[],this.edgeIndex=[],this.maxDepth=0,this.groups=[],this.baseRowDistance=6,this.newLayer()):e&&Object.assign(this,e)}addGroup(e){this.groups.push(e)}updateGroupCoords(){for(let e of this.groups)e.updateCoords()}newLayer(){this.tableIndex.push([]),this.edgeIndex.push([])}addTable(e){for(;this.maxDepth<e.depth;)this.maxDepth+=1,this.newLayer();e.graph=this,this.tables.push(e),this.tableIndex[e.depth].push(e)}addEdge(e){this.edges.push(e),this.edgeIndex[e.leftTable.depth].push(e)}ensureUniqueEdges(){}getEdgeCrossings(){let e=0;for(let t in this.edgeIndex)e+=this.getEdgeCrossingsAtDepth(t);return e}getEdgeCrossingsAtDepth(e,t=!1){let s=0,i=this.edgeIndex[e];for(let e in i){let h=i[e];for(let r=parseFloat(e)+1;r<i.length;r++){let e=i[r];h.crosses(e)&&(t&&console.log("Edge "+h.leftAttribute.name+h.rightAttribute.name+" crosses "+e.leftAttribute.name+e.rightAttribute.name),s+=1)}}return s}sortGraph(){for(let e of this.tables)e.main||(e.attributes=e.attributes.sort((e,t)=>e.weight>t.weight?1:-1));this.tables=this.tables.sort((e,t)=>e.weight>t.weight?1:-1);for(let e of this.tableIndex)e.sort((e,t)=>e.weight>t.weight?1:-1)}setExactWeights(){for(let e in this.tableIndex){let t=this.tableIndex[e];t=t.sort((e,t)=>e.weight>t.weight?1:-1);for(let e in t){let s=t[e];s.weight=parseFloat(e);let i=s.attributes;i=i.sort((e,t)=>e.weight>t.weight?1:-1);for(let e in i)i[e].weight=parseFloat(e)}}this.updateGroupCoords()}getNumStraightEdges(){let e=0;for(let t in this.edgeIndex)e+=this.getNumStraightEdgesAtDepth(t);return e}getNumStraightEdgesAtDepth(e){let t=0;for(let s of this.edgeIndex[e])s.leftTable.weight==s.rightTable.weight&&(t+=1);return t}adjustTableYPosition(){this.adjustAttrOffset()}getBendLeft(e){let t=e.depth,s=this.edgeIndex[t-1].filter(t=>t.rightTable==e&&!t.isSameRankEdge());return 0==s.length?0:Math.abs(s.map(e=>e.getBendiness()).reduce((e,t)=>Math.round(1e3*e+1e3*t)/1e3))}getBendRight(e){let t=e.depth,s=this.edgeIndex[t].filter(t=>t.leftTable==e&&!t.isSameRankEdge());return 0==s.length?0:Math.abs(s.map(e=>e.getBendiness()).reduce((e,t)=>Math.round(1e3*e+1e3*t)/1e3))}getTableBendiness(e){return 0==e.depth?Math.round(1e3*this.getBendRight(e))/1e3:Math.round(1e3*this.getBendLeft(e)+1e3*this.getBendRight(e))/1e3}getGraphTotalEdgeBendiness(){return this.tables.map(e=>this.getTableBendiness(e)).reduce((e,t)=>e+t)}adjustAttrOffset(){let e=!0,t=0,s=(e,t)=>{let s=-2;return s=0==t?0:e[t-1].verticalAttrOffset-this.baseRowDistance+e[t-1].attributes.length+2,s},i=(e,t)=>{let s=2;return s=1==e.length||null==e[t+1]?20:e[t+1].verticalAttrOffset+this.baseRowDistance-e[t].attributes.length-2,s},h=()=>{for(let t=0;t<this.tableIndex.length;t++){let h=this.tableIndex[t];for(let t=0;t<h.length;t++){let r=h[t],l=this.getTableBendiness(r),a=r.verticalAttrOffset,n=s(h,t),g=i(h,t);for(let t=n;t<=g;t++){r.verticalAttrOffset=t;let s=this.getTableBendiness(r);s<=l&&(a=t,l=s,e=!0)}r.verticalAttrOffset=a}}},r=()=>{for(let e=this.tableIndex.length-1;e>0;e--){let t=this.tableIndex[e];for(let e=t.length-1;e>=0;e--){let h=t[e],r=this.getTableBendiness(h),l=h.verticalAttrOffset,a=s(t,e),n=i(t,e);for(let e=a;e<=n;e++){h.verticalAttrOffset=e;let t=this.getTableBendiness(h);t<r&&(l=e,r=t)}h.verticalAttrOffset=l}}};for(;t<1;)console.log(t,t%2==0?"right":"left",this.getGraphTotalEdgeBendiness()),t++,t%2==0?h():r();this.updateGroupCoords()}}
class GraphGenerator{constructor(t=3,e="hello",r=[2,3],s=[1,5]){this.d=t,this.s=3,this.jd=.1,this.js=.05,this.attributeCounter=0,this.seed=e,this.tableDistribution=r,this.attributeDistribution=s,this.rng=new Math.seedrandom(this.seed),this.tableDist=()=>r[0]+Math.round(this.rng()*(r[1]-r[0])),this.attrDist=()=>s[0]+Math.round(this.rng()*(s[1]-s[0]))}generate(){g=new Graph,g.baseRowDistance=this.attributeDistribution[1]+2;for(var t=1;t<this.d;t++){g.newLayer();for(var e=0;e<this.tableDist();e++)g.addTable(this.generateTable(t,e))}return this.generateProjections(g),this.generateJoins(g),g.ensureUniqueEdges(),g}generateTable(t,e){name="T"+t+"y"+e;for(var r=new Table(name,name,!1,t),s=0;s<this.attrDist();s++)r.addAttribute("a"+this.attributeCounter),this.attributeCounter+=1;return r}generateProjections(t){let e=t.tableIndex[1],r=[],s=new Table("select","SELECT",!0,0),a=[],i=[],n=0;for(let t of e){let e=t.attributes,s=e[Math.floor(this.rng()*e.length)];a.push(s),i.push(s);for(let a of e)a!=s&&r.push(new Attribute(t,a));n++}let o=this.s*(r.length+n);for(t.addTable(s);n<o;n++){let t=Math.floor(this.rng()*r.length);r[t];r.splice(t,1)}for(let e of a){let r=new Attribute(s,"a"+this.attributeCounter++);r.mutable=!1,s.attributes.push(r),t.addEdge(new Edge(s,r,e.table,e))}}generateInterLayerJoins(t){for(var e=1;e<this.d;e++){let r=t.tableIndex[e],s=t.tableIndex[e+1],a=[],i=[];for(let t of r){let e=t.attributes;for(let r of e)a.push(new Attribute(t,r))}for(let e of s){if(0==a.length)break;let r=e.attributes,s=r[Math.floor(this.rng()*r.length)],n=Math.floor(this.rng()*a.length),o=a[n];a.splice(n,1),t.addEdge(new Edge(o.table,o.attr,e,s)),o.diffEdges++,s.diffEdges++;for(let t of r)t!=s&&i.push(new Attribute(e,t))}for(let e of a){if(0==i.length)break;if(this.rng()<this.jd){let r=Math.floor(this.rng()*i.length),s=i[r];i.splice(r,1),t.addEdge(new Edge(e.table,e.attr,s.table,s.attr)),e.diffEdges++,s.diffEdges++}}}}generateInLayerJoins(){for(var t=1;t<this.d;t++){let e=g.tableIndex[t];for(let t of e){let r=[],s=[];for(let e of t.attributes)r.push(new Attribute(t,e));for(let r of e)if(t!=r)for(let t of r.attributes)0==t.sameEdges&&s.push(new Attribute(r,t));for(let t of r){if(0==s.length)break;if(this.rng()<this.js){let e=Math.floor(this.rng()*s.length),r=s[e];s.splice(e,1),g.addEdge(new Edge(t.table,t.attr,r.table,r.attr)),t.sameEdges++,r.sameEdges++}}}}}generateRandomJoins(){}generateJoins(t){this.generateInterLayerJoins(t),this.generateInLayerJoins(t),this.generateRandomJoins(t)}}
class Group{constructor(){this.tables=[],this.coords=[],this.x_coord=0,this.y_coord=0,this.width_coord=0,this.height_coord=0,this.coords=[]}addTable(t){t.group=this,this.tables.push(t),this.updateCoords()}updateCoords(){this.coords=[];let t=Math.min.apply(0,this.tables.map(t=>t.depth)),h=this.tables.find(h=>h.depth==t);this.x_coord=h.depth;let e=Math.min.apply(0,this.tables.map(t=>t.weight)),i=this.tables.find(t=>t.weight==e);this.y_coord=i.weight;let s=Math.max.apply(0,this.tables.map(t=>t.depth)),a=this.tables.find(t=>t.depth==s);this.width_coord=a.depth-h.depth;let d=Math.max.apply(0,this.tables.map(t=>t.weight)),p=this.tables.find(t=>t.weight==d);this.height_coord=p.weight-i.weight;let l=[h.depth,a.depth];for(let t=0;t<l.length;t++){let h=l[t],e=Math.min.apply(0,this.tables.filter(t=>t.depth==h).map(t=>t.weight)),i=this.tables.find(t=>t.depth==h&&t.weight==e);this.coords.push([i.depth*depth_distance-10,i.weight*table_vert_space+i.verticalAttrOffset*attr_height-10]),this.coords.push([i.depth*depth_distance+table_width+10,i.weight*table_vert_space+i.verticalAttrOffset*attr_height-10])}for(let t=l.length-1;t>=0;t--){let h=l[t],e=Math.max.apply(0,this.tables.filter(t=>t.depth==h).map(t=>t.weight)),i=this.tables.find(t=>t.depth==h&&t.weight==e);this.coords.push([i.depth*depth_distance+table_width+10,i.weight*table_vert_space+(1+i.attributes.length)*attr_height+i.verticalAttrOffset*attr_height+10]),this.coords.push([i.depth*depth_distance-10,i.weight*table_vert_space+(1+i.attributes.length)*attr_height+i.verticalAttrOffset*attr_height+10])}this.coords.push(this.coords[0])}}
class LPBendiness{constructor(e){this.g=e,this.mip=!0,this.verbose=!1,this.elapsedTime=0}async arrange(){let e=(new Date).getTime(),t={};this.fillModel(t);let l,n,i=this.modelToString(t),a={};this.verbose&&glp_set_print_func(console.log);let o=glp_create_prob();glp_read_lp_from_string(o,null,i),glp_scale_prob(o,GLP_SF_AUTO);let s=new SMCP({presolve:GLP_ON});if(glp_simplex(o,s),this.mip)for(glp_intopt(o),l=glp_mip_obj_val(o),n=1;n<=glp_get_num_cols(o);n++)a[glp_get_col_name(o,n)]=glp_mip_col_val(o,n);else for(l=glp_get_obj_val(o),n=1;n<=glp_get_num_cols(o);n++)a[glp_get_col_name(o,n)]=glp_get_col_prim(o,n);this.apply_solution(a),this.elapsedTime=(new Date).getTime()-e}fillModel(e){e.minimize="Minimize \n",e.subjectTo="Subject To \n",e.bounds="\nBounds \n";let t={},l={},n=(e,t,n,i)=>{let a="c_"+e+t+"_"+n+i;return l[a]="",a},i=(e,t,l="")=>"x_"+l+e+"_"+l+t;for(let e=0;e<this.g.maxDepth+1;e++){let l=this.g.tableIndex[e],n=l.map(e=>e.attributes).flat();for(let e=0;e<l.length;e++){let n=l[e].name;for(let a=e+1;a<l.length;a++){let e=l[a].name;t[i(n,e,"T")]=""}}for(let e=0;e<n.length;e++){let l=n[e].name;for(let a=e+1;a<n.length;a++){let e=n[a].name;t[i(l,e)]=""}}}for(let t=0;t<this.g.maxDepth+1;t++){let l=this.g.tableIndex[t],n=l.map(e=>e.attributes).flat();for(let t=0;t<l.length;t++){let n=l[t].name;for(let a=t+1;a<l.length;a++){let t=l[a].name;for(let o=a+1;o<l.length;o++){let a=l[o].name;e.subjectTo+=i(n,t,"T")+" + "+i(t,a,"T")+" - "+i(n,a,"T")+" >= 0\n",e.subjectTo+="- "+i(n,t,"T")+" - "+i(t,a,"T")+" + "+i(n,a,"T")+" >= -1\n"}}}for(let t=0;t<n.length;t++){let l=n[t].name;for(let a=t+1;a<n.length;a++){let o=n[a].name;if(t!=a&&n[t].table.name==n[a].table.name)for(let s=a+1;s<n.length;s++){if(s==a||s==t)continue;if(n[s].table.name!=n[t].table.name)continue;if(n[s].table.name!=n[a].table.name)continue;let u=n[s].name;e.subjectTo+=i(l,o)+" + "+i(o,u)+" - "+i(l,u)+" >= 0\n",e.subjectTo+="- "+i(l,o)+" - "+i(o,u)+" + "+i(l,u)+" >= -1\n"}}}}for(let l=0;l<this.g.maxDepth+1;l++){let a=this.g.edgeIndex[l];for(let l=0;l<a.length;l++){let o=a[l];for(let s=l+1;s<a.length;s++){let l=a[s];if(null!=o.leftTable.group&&null!=o.rightTable.group&&l.leftTable.group!=l.leftTable.group&&(e.subjectTo+=n(u1,v1,u2,v2)+" = 0\n"),this.isSameRankEdge(o)||this.isSameRankEdge(l)){if(this.isSameRankEdge(o)&&this.isSameRankEdge(l)){let a=o.leftAttribute.name,s=o.rightAttribute.name,u=l.leftAttribute.name,b=l.rightAttribute.name,m=n(a,s,u,b),r=1;e.subjectTo+=m+"";let g=i(a,u);null!=t[g]?e.subjectTo+=" + "+g:(g=i(u,a),r-=1,e.subjectTo+=" - "+g);let _=i(s,b);null!=t[_]?e.subjectTo+=" + "+_:(r-=1,_=i(b,s),e.subjectTo+=" - "+_);let h=i(u,s);null!=t[h]?e.subjectTo+=h:(r-=1,h=i(s,u),e.subjectTo+=" + "+h),e.subjectTo+=" >= "+r+"\n",m=n(a,s,u,b),r=1,e.subjectTo+=m+"",g=i(a,u),null!=t[g]?e.subjectTo+=" + "+g:(g=i(u,a),r-=1,e.subjectTo+=" - "+g),_=i(s,b),null!=t[_]?e.subjectTo+=" + "+_:(r-=1,_=i(b,s),e.subjectTo+=" - "+_),h=i(b,a),null!=t[h]?e.subjectTo+=h:(r-=1,h=i(a,b),e.subjectTo+=" + "+h),e.subjectTo+=" >= "+r+"\n"}else if(this.isSameRankEdge(o)&&!this.isSameRankEdge(l)){let a=o.leftAttribute.name,s=o.rightAttribute.name,u=l.leftAttribute.name,b=l.rightAttribute.name,m=n(a,s,u,b),r=1;e.subjectTo+=m+"";let g=i(u,a);null!=t[g]?e.subjectTo+=" + "+g:(g=i(a,u),r-=1,e.subjectTo+=" - "+g);let _=i(s,u);null!=t[_]?e.subjectTo+=" + "+_:(r-=1,_=i(u,s),e.subjectTo+=" - "+_),e.subjectTo+=" >= "+r+"\n",m=n(a,s,u,b),r=1,e.subjectTo+=m+"",g=i(u,s),null!=t[g]?e.subjectTo+=" + "+g:(g=i(s,u),r-=1,e.subjectTo+=" - "+g),_=i(a,u),null!=t[_]?e.subjectTo+=" + "+_:(r-=1,_=i(u,a),e.subjectTo+=" - "+_),e.subjectTo+=" >= "+r+"\n"}else if(!this.isSameRankEdge(o)&&this.isSameRankEdge(l)){let a=o.leftAttribute.name,s=o.rightAttribute.name,u=l.leftAttribute.name,b=l.rightAttribute.name,m=n(a,s,u,b),r=1;e.subjectTo+=m+"";let g=i(a,u);null!=t[g]?e.subjectTo+=" + "+g:(g=i(u,a),r-=1,e.subjectTo+=" - "+g);let _=i(b,a);null!=t[_]?e.subjectTo+=" + "+_:(r-=1,_=i(a,b),e.subjectTo+=" - "+_),e.subjectTo+=" >= "+r+"\n",m=n(a,s,u,b),r=1,e.subjectTo+=m+"",g=i(a,b),null!=t[g]?e.subjectTo+=" + "+g:(g=i(b,a),r-=1,e.subjectTo+=" - "+g),_=i(u,a),null!=t[_]?e.subjectTo+=" + "+_:(r-=1,_=i(a,u),e.subjectTo+=" - "+_),e.subjectTo+=" >= "+r+"\n"}}else{let a=o.leftAttribute.name,s=o.rightAttribute.name,u=l.leftAttribute.name,b=l.rightAttribute.name;if(a==u||s==b)continue;let m=n(a,s,u,b),r=1;e.subjectTo+=m+"";let g=i(u,a);null!=t[g]?e.subjectTo+=" + "+g:(g=i(a,u),r-=1,e.subjectTo+=" - "+g);let _=i(s,b);null!=t[_]?e.subjectTo+=" + "+_:(_=i(b,s),r-=1,e.subjectTo+=" - "+_),e.subjectTo+=" >= "+r+"\n",m=n(a,s,u,b),r=1,e.subjectTo+=m+"",g=i(a,u),null!=t[g]?e.subjectTo+=" + "+g:(g=i(u,a),r-=1,e.subjectTo+=" - "+g),_=i(b,s),null!=t[_]?e.subjectTo+=" + "+_:(_=i(s,b),r-=1,e.subjectTo+=" - "+_),e.subjectTo+=" >= "+r+"\n"}}}}for(let t=0;t<this.g.maxDepth+1;t++){let l=this.g.tableIndex[t].map(e=>e.attributes).flat();for(let t=0;t<l.length;t++){let n=l[t].name,a=l[t].table.name;for(let o=t+1;o<l.length;o++){let t=l[o].name,s=l[o].table.name;a!=s&&(e.subjectTo+=i(n,t)+" - "+i(a,s,"T")+" = 0\n")}}}for(let t in l)e.minimize+=t+" + ";e.minimize=e.minimize.substring(0,e.minimize.length-2)+"\n\n";for(let l in t)e.bounds+="binary "+l+"\n"}fillModel2(e){e.minimize="Minimize \ncrossings: ",e.subjectTo="Subject To \n",e.bounds="\nBounds \n";for(let t=0;t<this.g.maxDepth+1;t++){let l=this.g.edgeIndex[t];for(let t=0;t<l.length;t++)for(let n=0;n<l.length;n++)if(l[t]!=l[n]){let i="c_"+l[t].leftAttribute.name+l[t].rightAttribute.name+"_"+l[n].leftAttribute.name+l[n].rightAttribute.name;e.minimize+=i+" + ",e.bounds+="binary "+i+"\n"}}e.minimize=e.minimize.substring(0,e.minimize.length-2)+"\n\n";for(let t=0;t<this.g.maxDepth+1;t++){let l=this.g.tableIndex[t];for(let t=0;t<l.length;t++){let n=l[t];for(let i=0;i<l.length;i++){if(t==i)continue;let a=l[i];n!=a&&(e.subjectTo+="x_T"+n.name+"_T"+a.name+" + x_T"+a.name+"_T"+n.name+" = 1\n",e.bounds+="binary x_T"+n.name+"_T"+a.name+"\n")}}}for(let t=0;t<this.g.maxDepth+1;t++){let l=this.g.tableIndex[t];for(let t=0;t<l.length;t++){let n=l[t];for(let i=0;i<l.length;i++){if(t==i)continue;let a=l[i];for(let t=i+1;t<l.length;t++){let i=l[t];e.subjectTo+="x_T"+i.name+"_T"+n.name+" - x_T"+i.name+"_T"+a.name+" - x_T"+a.name+"_T"+n.name+" >= - 1\n"}}}}for(let t=0;t<this.g.maxDepth+1;t++){let l=this.g.tableIndex[t].map(e=>e.attributes).flat();for(let t=0;t<l.length;t++){let n=l[t];for(let i=t+1;i<l.length;i++){let t=l[i];n!=t&&(e.subjectTo+="x_"+n.name+"_"+t.name+" + x_"+t.name+"_"+n.name+" = 1\n")}}}for(let t=0;t<this.g.maxDepth+1;t++){let l=this.g.tableIndex[t].map(e=>e.attributes).flat();for(let t of l)for(let n of l)t.table!=n.table&&(e.subjectTo+="x_"+t.name+"_"+n.name+" - x_T"+t.table.name+"_T"+n.table.name+" = 0\n")}for(let t=0;t<this.g.maxDepth+1;t++){let l=this.g.tableIndex[t].map(e=>e.attributes).flat();for(let t=0;t<l.length;t++){let n=l[t];for(let i=0;i<l.length;i++){let a=l[i];if(t!=i)for(let o=0;o<l.length;o++){if(o==t||o==i)continue;let s=l[o];e.subjectTo+="x_"+s.name+"_"+n.name+" - x_"+s.name+"_"+a.name+" - x_"+a.name+"_"+n.name+" >= - 1\n"}}}}for(let t=0;t<this.g.maxDepth;t++){let l=this.g.edgeIndex[t];for(let t=0;t<l.length;t++){let n=l[t];for(let i=0;i<l.length;i++){if(t==i)continue;let a=l[i];if(n.leftTable.depth==n.rightTable.depth||a.leftTable.depth==a.rightTable.depth)continue;let o=n.leftAttribute.name,s=n.rightAttribute.name,u=a.leftAttribute.name,b=a.rightAttribute.name;e.subjectTo+="c_"+o+s+"_"+u+b+" + x_"+u+"_"+o+" + x_"+s+"_"+b+" >= 1\n",e.subjectTo+="c_"+o+s+"_"+u+b+" + x_"+o+"_"+u+" + x_"+b+"_"+s+" >= 1\n"}}}for(let t=0;t<this.g.maxDepth+1;t++){let l=this.g.edgeIndex[t];for(let t=0;t<l.length;t++){let n=l[t];for(let t=0;t<l.length;t++){let i=l[t];if(n!=i)if(n.leftTable.depth==n.rightTable.depth&&i.leftTable.depth==i.rightTable.depth){let t=n.leftAttribute.name,l=n.rightAttribute.name,a=i.leftAttribute.name,o=i.rightAttribute.name;e.subjectTo+="c_"+t+l+"_"+a+o+" + x_"+t+"_"+a+" + x_"+l+"_"+o+" + x_"+a+"_"+l+" >= 1\n",e.subjectTo+="c_"+t+l+"_"+a+o+" + x_"+t+"_"+a+" + x_"+l+"_"+o+" + x_"+o+"_"+t+" >= 1\n"}else if(this.isSameRankEdge(n)&&!this.isSameRankEdge(i)){let t=n.leftAttribute.name,l=n.rightAttribute.name,a=i.leftAttribute.name,o=i.rightAttribute.name;e.subjectTo+="c_"+t+l+"_"+a+o+" + x_"+a+"_"+t+" + x_"+l+"_"+a+" >= 1\n",e.subjectTo+="c_"+t+l+"_"+a+o+" + x_"+a+"_"+l+" + x_"+t+"_"+a+" >= 1\n"}}}}}isSameRankEdge(e){return e.leftTable.depth==e.rightTable.depth}modelToString(e){return e.minimize+e.subjectTo+e.bounds+"\nEnd\n"}apply_solution(e){for(let t=0;t<this.g.maxDepth+1;t++){let l=this.g.tableIndex[t];l.sort((t,l)=>0==e["x_T"+t.name+"_T"+l.name]?1:1==e["x_T"+t.name+"_T"+l.name]?-1:1==e["x_T"+l.name+"_T"+t.name]?1:0==e["x_T"+l.name+"_T"+t.name]?-1:void 0);for(let e in l)l[e].weight=e;for(let t of l){t.attributes.sort((t,l)=>0==e["x_"+t.name+"_"+l.name]?1:1==e["x_"+t.name+"_"+l.name]?-1:1==e["x_"+l.name+"_"+t.name]?1:0==e["x_"+l.name+"_"+t.name]?-1:void 0);for(let e=0;e<t.attributes.length;e++)t.attributes[e].weight=e}}}}
class LPFormulation{constructor(e){this.g=e,this.mip=!0,this.verbose=!1,this.elapsedTime=0}async arrange(){let e=(new Date).getTime(),t={};this.fillModel(t);let l,n,i=this.modelToString(t),a={};this.verbose&&glp_set_print_func(console.log);let o=glp_create_prob();glp_read_lp_from_string(o,null,i),glp_scale_prob(o,GLP_SF_AUTO);let s=new SMCP({presolve:GLP_ON});if(glp_simplex(o,s),this.mip)for(glp_intopt(o),l=glp_mip_obj_val(o),n=1;n<=glp_get_num_cols(o);n++)a[glp_get_col_name(o,n)]=glp_mip_col_val(o,n);else for(l=glp_get_obj_val(o),n=1;n<=glp_get_num_cols(o);n++)a[glp_get_col_name(o,n)]=glp_get_col_prim(o,n);this.apply_solution(a),this.elapsedTime=(new Date).getTime()-e}fillModel(e){e.minimize="Minimize \n",e.subjectTo="Subject To \n",e.bounds="\nBounds \n";let t={},l={},n=(e,t,n,i)=>{let a="c_"+e+t+"_"+n+i;return l[a]="",a},i=(e,t,l="")=>"x_"+l+e+"_"+l+t;for(let e=0;e<this.g.maxDepth+1;e++){let l=this.g.tableIndex[e],n=l.map(e=>e.attributes).flat();for(let e=0;e<l.length;e++){let n=l[e].name;for(let a=e+1;a<l.length;a++){let e=l[a].name;t[i(n,e,"T")]=""}}for(let e=0;e<n.length;e++){let l=n[e].name;for(let a=e+1;a<n.length;a++){let e=n[a].name;t[i(l,e)]=""}}}for(let t=0;t<this.g.maxDepth+1;t++){let l=this.g.tableIndex[t],n=l.map(e=>e.attributes).flat();for(let t=0;t<l.length;t++){let n=l[t].name;for(let a=t+1;a<l.length;a++){let t=l[a].name;for(let o=a+1;o<l.length;o++){let a=l[o].name;e.subjectTo+=i(n,t,"T")+" + "+i(t,a,"T")+" - "+i(n,a,"T")+" >= 0\n",e.subjectTo+="- "+i(n,t,"T")+" - "+i(t,a,"T")+" + "+i(n,a,"T")+" >= -1\n"}}}for(let t=0;t<n.length;t++){let l=n[t].name;for(let a=t+1;a<n.length;a++){let o=n[a].name;if(t!=a&&n[t].table.name==n[a].table.name)for(let s=a+1;s<n.length;s++){if(s==a||s==t)continue;if(n[s].table.name!=n[t].table.name)continue;if(n[s].table.name!=n[a].table.name)continue;let u=n[s].name;e.subjectTo+=i(l,o)+" + "+i(o,u)+" - "+i(l,u)+" >= 0\n",e.subjectTo+="- "+i(l,o)+" - "+i(o,u)+" + "+i(l,u)+" >= -1\n"}}}}for(let l=0;l<this.g.maxDepth+1;l++){let a=this.g.edgeIndex[l];for(let l=0;l<a.length;l++){let o=a[l];for(let s=l+1;s<a.length;s++){let l=a[s];if(null!=o.leftTable.group&&null!=o.rightTable.group&&l.leftTable.group!=l.leftTable.group&&(e.subjectTo+=n(u1,v1,u2,v2)+" = 0\n"),this.isSameRankEdge(o)||this.isSameRankEdge(l)){if(this.isSameRankEdge(o)&&this.isSameRankEdge(l)){let a=o.leftAttribute.name,s=o.rightAttribute.name,u=l.leftAttribute.name,b=l.rightAttribute.name,m=n(a,s,u,b),r=1;e.subjectTo+=m+"";let g=i(a,u);null!=t[g]?e.subjectTo+=" + "+g:(g=i(u,a),r-=1,e.subjectTo+=" - "+g);let _=i(s,b);null!=t[_]?e.subjectTo+=" + "+_:(r-=1,_=i(b,s),e.subjectTo+=" - "+_);let h=i(u,s);null!=t[h]?e.subjectTo+=h:(r-=1,h=i(s,u),e.subjectTo+=" + "+h),e.subjectTo+=" >= "+r+"\n",m=n(a,s,u,b),r=1,e.subjectTo+=m+"",g=i(a,u),null!=t[g]?e.subjectTo+=" + "+g:(g=i(u,a),r-=1,e.subjectTo+=" - "+g),_=i(s,b),null!=t[_]?e.subjectTo+=" + "+_:(r-=1,_=i(b,s),e.subjectTo+=" - "+_),h=i(b,a),null!=t[h]?e.subjectTo+=h:(r-=1,h=i(a,b),e.subjectTo+=" + "+h),e.subjectTo+=" >= "+r+"\n"}else if(this.isSameRankEdge(o)&&!this.isSameRankEdge(l)){let a=o.leftAttribute.name,s=o.rightAttribute.name,u=l.leftAttribute.name,b=l.rightAttribute.name,m=n(a,s,u,b),r=1;e.subjectTo+=m+"";let g=i(u,a);null!=t[g]?e.subjectTo+=" + "+g:(g=i(a,u),r-=1,e.subjectTo+=" - "+g);let _=i(s,u);null!=t[_]?e.subjectTo+=" + "+_:(r-=1,_=i(u,s),e.subjectTo+=" - "+_),e.subjectTo+=" >= "+r+"\n",m=n(a,s,u,b),r=1,e.subjectTo+=m+"",g=i(u,s),null!=t[g]?e.subjectTo+=" + "+g:(g=i(s,u),r-=1,e.subjectTo+=" - "+g),_=i(a,u),null!=t[_]?e.subjectTo+=" + "+_:(r-=1,_=i(u,a),e.subjectTo+=" - "+_),e.subjectTo+=" >= "+r+"\n"}else if(!this.isSameRankEdge(o)&&this.isSameRankEdge(l)){let a=o.leftAttribute.name,s=o.rightAttribute.name,u=l.leftAttribute.name,b=l.rightAttribute.name,m=n(a,s,u,b),r=1;e.subjectTo+=m+"";let g=i(a,u);null!=t[g]?e.subjectTo+=" + "+g:(g=i(u,a),r-=1,e.subjectTo+=" - "+g);let _=i(b,a);null!=t[_]?e.subjectTo+=" + "+_:(r-=1,_=i(a,b),e.subjectTo+=" - "+_),e.subjectTo+=" >= "+r+"\n",m=n(a,s,u,b),r=1,e.subjectTo+=m+"",g=i(a,b),null!=t[g]?e.subjectTo+=" + "+g:(g=i(b,a),r-=1,e.subjectTo+=" - "+g),_=i(u,a),null!=t[_]?e.subjectTo+=" + "+_:(r-=1,_=i(a,u),e.subjectTo+=" - "+_),e.subjectTo+=" >= "+r+"\n"}}else{let a=o.leftAttribute.name,s=o.rightAttribute.name,u=l.leftAttribute.name,b=l.rightAttribute.name;if(a==u||s==b)continue;let m=n(a,s,u,b),r=1;e.subjectTo+=m+"";let g=i(u,a);null!=t[g]?e.subjectTo+=" + "+g:(g=i(a,u),r-=1,e.subjectTo+=" - "+g);let _=i(s,b);null!=t[_]?e.subjectTo+=" + "+_:(_=i(b,s),r-=1,e.subjectTo+=" - "+_),e.subjectTo+=" >= "+r+"\n",m=n(a,s,u,b),r=1,e.subjectTo+=m+"",g=i(a,u),null!=t[g]?e.subjectTo+=" + "+g:(g=i(u,a),r-=1,e.subjectTo+=" - "+g),_=i(b,s),null!=t[_]?e.subjectTo+=" + "+_:(_=i(s,b),r-=1,e.subjectTo+=" - "+_),e.subjectTo+=" >= "+r+"\n"}}}}for(let t=0;t<this.g.maxDepth+1;t++){let l=this.g.tableIndex[t].map(e=>e.attributes).flat();for(let t=0;t<l.length;t++){let n=l[t].name,a=l[t].table.name;for(let o=t+1;o<l.length;o++){let t=l[o].name,s=l[o].table.name;a!=s&&(e.subjectTo+=i(n,t)+" - "+i(a,s,"T")+" = 0\n")}}}for(let t in l)e.minimize+=t+" + ";e.minimize=e.minimize.substring(0,e.minimize.length-2)+"\n\n";for(let l in t)e.bounds+="binary "+l+"\n"}fillModel2(e){e.minimize="Minimize \ncrossings: ",e.subjectTo="Subject To \n",e.bounds="\nBounds \n";for(let t=0;t<this.g.maxDepth+1;t++){let l=this.g.edgeIndex[t];for(let t=0;t<l.length;t++)for(let n=0;n<l.length;n++)if(l[t]!=l[n]){let i="c_"+l[t].leftAttribute.name+l[t].rightAttribute.name+"_"+l[n].leftAttribute.name+l[n].rightAttribute.name;e.minimize+=i+" + ",e.bounds+="binary "+i+"\n"}}e.minimize=e.minimize.substring(0,e.minimize.length-2)+"\n\n";for(let t=0;t<this.g.maxDepth+1;t++){let l=this.g.tableIndex[t];for(let t=0;t<l.length;t++){let n=l[t];for(let i=0;i<l.length;i++){if(t==i)continue;let a=l[i];n!=a&&(e.subjectTo+="x_T"+n.name+"_T"+a.name+" + x_T"+a.name+"_T"+n.name+" = 1\n",e.bounds+="binary x_T"+n.name+"_T"+a.name+"\n")}}}for(let t=0;t<this.g.maxDepth+1;t++){let l=this.g.tableIndex[t];for(let t=0;t<l.length;t++){let n=l[t];for(let i=0;i<l.length;i++){if(t==i)continue;let a=l[i];for(let t=i+1;t<l.length;t++){let i=l[t];e.subjectTo+="x_T"+i.name+"_T"+n.name+" - x_T"+i.name+"_T"+a.name+" - x_T"+a.name+"_T"+n.name+" >= - 1\n"}}}}for(let t=0;t<this.g.maxDepth+1;t++){let l=this.g.tableIndex[t].map(e=>e.attributes).flat();for(let t=0;t<l.length;t++){let n=l[t];for(let i=t+1;i<l.length;i++){let t=l[i];n!=t&&(e.subjectTo+="x_"+n.name+"_"+t.name+" + x_"+t.name+"_"+n.name+" = 1\n")}}}for(let t=0;t<this.g.maxDepth+1;t++){let l=this.g.tableIndex[t].map(e=>e.attributes).flat();for(let t of l)for(let n of l)t.table!=n.table&&(e.subjectTo+="x_"+t.name+"_"+n.name+" - x_T"+t.table.name+"_T"+n.table.name+" = 0\n")}for(let t=0;t<this.g.maxDepth+1;t++){let l=this.g.tableIndex[t].map(e=>e.attributes).flat();for(let t=0;t<l.length;t++){let n=l[t];for(let i=0;i<l.length;i++){let a=l[i];if(t!=i)for(let o=0;o<l.length;o++){if(o==t||o==i)continue;let s=l[o];e.subjectTo+="x_"+s.name+"_"+n.name+" - x_"+s.name+"_"+a.name+" - x_"+a.name+"_"+n.name+" >= - 1\n"}}}}for(let t=0;t<this.g.maxDepth;t++){let l=this.g.edgeIndex[t];for(let t=0;t<l.length;t++){let n=l[t];for(let i=0;i<l.length;i++){if(t==i)continue;let a=l[i];if(n.leftTable.depth==n.rightTable.depth||a.leftTable.depth==a.rightTable.depth)continue;let o=n.leftAttribute.name,s=n.rightAttribute.name,u=a.leftAttribute.name,b=a.rightAttribute.name;e.subjectTo+="c_"+o+s+"_"+u+b+" + x_"+u+"_"+o+" + x_"+s+"_"+b+" >= 1\n",e.subjectTo+="c_"+o+s+"_"+u+b+" + x_"+o+"_"+u+" + x_"+b+"_"+s+" >= 1\n"}}}for(let t=0;t<this.g.maxDepth+1;t++){let l=this.g.edgeIndex[t];for(let t=0;t<l.length;t++){let n=l[t];for(let t=0;t<l.length;t++){let i=l[t];if(n!=i)if(n.leftTable.depth==n.rightTable.depth&&i.leftTable.depth==i.rightTable.depth){let t=n.leftAttribute.name,l=n.rightAttribute.name,a=i.leftAttribute.name,o=i.rightAttribute.name;e.subjectTo+="c_"+t+l+"_"+a+o+" + x_"+t+"_"+a+" + x_"+l+"_"+o+" + x_"+a+"_"+l+" >= 1\n",e.subjectTo+="c_"+t+l+"_"+a+o+" + x_"+t+"_"+a+" + x_"+l+"_"+o+" + x_"+o+"_"+t+" >= 1\n"}else if(this.isSameRankEdge(n)&&!this.isSameRankEdge(i)){let t=n.leftAttribute.name,l=n.rightAttribute.name,a=i.leftAttribute.name,o=i.rightAttribute.name;e.subjectTo+="c_"+t+l+"_"+a+o+" + x_"+a+"_"+t+" + x_"+l+"_"+a+" >= 1\n",e.subjectTo+="c_"+t+l+"_"+a+o+" + x_"+a+"_"+l+" + x_"+t+"_"+a+" >= 1\n"}}}}}isSameRankEdge(e){return e.leftTable.depth==e.rightTable.depth}modelToString(e){return e.minimize+e.subjectTo+e.bounds+"\nEnd\n"}apply_solution(e){for(let t=0;t<this.g.maxDepth+1;t++){let l=this.g.tableIndex[t];l.sort((t,l)=>0==e["x_T"+t.name+"_T"+l.name]?1:1==e["x_T"+t.name+"_T"+l.name]?-1:1==e["x_T"+l.name+"_T"+t.name]?1:0==e["x_T"+l.name+"_T"+t.name]?-1:void 0);for(let e in l)l[e].weight=e;for(let t of l){t.attributes.sort((t,l)=>0==e["x_"+t.name+"_"+l.name]?1:1==e["x_"+t.name+"_"+l.name]?-1:1==e["x_"+l.name+"_"+t.name]?1:0==e["x_"+l.name+"_"+t.name]?-1:void 0);for(let e=0;e<t.attributes.length;e++)t.attributes[e].weight=e}}}}
class Sweep{constructor(t){this.g=t,this.elapsedTime=0}arrange(){let t=(new Date).getTime();this.g.setExactWeights(),this.sweepRight(),this.sweepLeft(),this.elapsedTime=(new Date).getTime()-t}sweepRight(){for(let t=1;t<=this.g.maxDepth;t++){let e,s,g=this.g.tableIndex[t];do{e=this.g.getEdgeCrossingsAtDepth(t-1)+this.g.getEdgeCrossingsAtDepth(t),s=e;do{e=this.g.getEdgeCrossingsAtDepth(t-1)+this.g.getEdgeCrossingsAtDepth(t),s=e;for(let e=0;e<g.length-1;e++){let h=g[e],i=g[e+1];this.swap(h,i);let l=this.g.getEdgeCrossingsAtDepth(t-1)+this.g.getEdgeCrossingsAtDepth(t);s>l?(s=l,g[e]=i,g[e+1]=h):this.swap(h,i)}}while(e>s);do{e=this.g.getEdgeCrossingsAtDepth(t-1)+this.g.getEdgeCrossingsAtDepth(t),s=e;for(let e=0;e<g.length;e++){let h=g[e].attributes;for(let e=0;e<h.length-1;e++){let g=h[e],i=h[e+1];this.swap(g,i);let l=this.g.getEdgeCrossingsAtDepth(t-1)+this.g.getEdgeCrossingsAtDepth(t);s>l?(s=l,h[e]=i,h[e+1]=g):this.swap(g,i)}}}while(e>s)}while(e>s)}}sweepLeft(){for(let t=this.g.maxDepth;t>=2;t--){let e,s,g=this.g.tableIndex[t-1];do{e=this.g.getEdgeCrossingsAtDepth(t-1)+this.g.getEdgeCrossingsAtDepth(t-2),s=e;do{e=this.g.getEdgeCrossingsAtDepth(t-1)+this.g.getEdgeCrossingsAtDepth(t-2),s=e;for(let e=0;e<g.length-1;e++){let h=g[e],i=g[e+1];this.swap(h,i);let l=this.g.getEdgeCrossingsAtDepth(t-1)+this.g.getEdgeCrossingsAtDepth(t-2);s>l?(s=l,g[e]=i,g[e+1]=h):this.swap(h,i)}}while(e>s);do{e=this.g.getEdgeCrossingsAtDepth(t-1)+this.g.getEdgeCrossingsAtDepth(t-2),s=e;for(let e=0;e<g.length;e++){let h=g[e].attributes;for(let e=0;e<h.length-1;e++){let g=h[e],i=h[e+1];this.swap(g,i);let l=this.g.getEdgeCrossingsAtDepth(t-1)+this.g.getEdgeCrossingsAtDepth(t-2);s>l?(s=l,h[e]=i,h[e+1]=g):this.swap(g,i)}}}while(e>s)}while(e>s)}}swap(t,e){let s=t.weight;t.weight=e.weight,e.weight=s}}
class Table{constructor(t,i,h,s){this.name=t,this.header=i,this.main=h,this.depth=s,this.attributes=[],this.attrMaps=[],this.weight=0,this.group=void 0,this.graph=void 0,this.visibility="visible",this.verticalAttrOffset=0}addAttribute(t){this.attributes.push(new Attribute(this,t))}compareTo(t){return this.depth>t.depth?-1:this.depth<t.depth||this.weight<t.weight?1:this.weight>t.weight?-1:0}}
let drawGraph=(t,e,a)=>{let r=d3.line().curve(d3.curveBasis),l=d3.line();table_vert_space=e.baseRowDistance*attr_height,visg=t.append("g").attr("transform","translate(20, 20)");for(let t in[...Array(10).keys()])visg.append("path").attr("stroke-width",1).attr("stroke","#ccc").attr("fill","none").style("stroke-dasharray","5, 3").attr("d",l([[0,attr_height*e.baseRowDistance*t],[1e3,attr_height*e.baseRowDistance*t]]));tablegroups=visg.selectAll(".tables").data(e.tables).enter().append("g").attr("class","tablegroup").attr("id",t=>"tablegroup_"+t.name).style("visibility",t=>t.visibility).attr("transform",t=>"translate("+t.depth*depth_distance+","+(e.tableIndex[t.depth].indexOf(t)*table_vert_space+t.verticalAttrOffset*attr_height)+")"),tablegroups.append("rect").attr("width",table_width).attr("height",t=>t.attributes.length*attr_height+header_height).attr("fill","black").attr("stroke","gray").on("click",t=>console.log(t)),tablegroups.append("text").attr("x",table_width/2).attr("y",attr_height/2+5).attr("text-anchor","middle").attr("fill","white").attr("font-size","0.7em").attr("font-family","Arial").text(t=>t.header+" w:"+t.weight),attrgroups=tablegroups.selectAll(".attrs").data(t=>t.attributes).enter().append("g").attr("transform",(t,e)=>"translate(0, "+(header_height+e*attr_height)+")"),attrgroups.append("rect").attr("width",table_width).attr("height",attr_height).attr("fill","#ccc").attr("stroke","white").attr("stroke-width",2).on("click",t=>console.log(t)),attrgroups.append("text").attr("x",table_width/2).attr("y",attr_height/2+3).attr("text-anchor","middle").attr("font-size","0.7em").attr("font-family","Arial").text(t=>t.attr+" w:"+t.weight);e.updateGroupCoords(),visg.selectAll(".grouprects").data(e.groups).enter().append("path").attr("class","grouplines").attr("stroke-width",3).attr("stroke","black").attr("fill","none").style("stroke-dasharray","5, 3").attr("d",t=>l(t.coords)),edges=visg.selectAll(".edges").data(e.edges).enter().append("path").attr("stroke","black").attr("fill","none").attr("d",t=>(first=(t=>[t.leftTable.depth*depth_distance+table_width,t.leftTable.attributes.indexOf(t.att1)*attr_height+header_height+attr_height/2+e.tableIndex[t.leftTable.depth].indexOf(t.leftTable)*table_vert_space+t.leftTable.verticalAttrOffset*attr_height])(t),second=(t=>t.leftTable.depth!=t.rightTable.depth?[t.rightTable.depth*depth_distance,t.rightTable.attributes.indexOf(t.att2)*attr_height+header_height+attr_height/2+e.tableIndex[t.rightTable.depth].indexOf(t.rightTable)*table_vert_space+t.rightTable.verticalAttrOffset*attr_height]:[t.leftTable.depth*depth_distance+table_width,t.rightTable.attributes.indexOf(t.att2)*attr_height+header_height+attr_height/2+e.tableIndex[t.rightTable.depth].indexOf(t.rightTable)*table_vert_space+t.rightTable.verticalAttrOffset*attr_height])(t),r([first,[first[0]+.2*depth_distance,first[1]],[second[0]+(t.leftTable.depth==t.rightTable.depth?1:-1)*depth_distance*.2,second[1]],second]))),d3.select(t.node().parentNode).append("div").append("text").text("crossings: "+e.getEdgeCrossings()+", tables: "+e.tables.length+", edges: "+e.edges.length).style("font-family","Arial").attr("class","crossing_count"),null!=a&&null!=a.elapsedTime&&(d3.select(t.node().parentNode).append("div").append("text").text("time: "+a.elapsedTime+"ms").style("font-family","Arial").attr("class","crossing_count"),null!=a.iterations&&(d3.select(t.node().parentNode).append("text").text("⏹️"),d3.select(t.node().parentNode).append("text").text("⏪").on("click",()=>{a.cur_iteration--,a.apply_iteration(a.cur_iteration),t.selectAll(".tablegroup").transition().duration(750).attr("transform",t=>"translate("+t.depth*depth_distance+" ,  "+a.g.tableIndex[t.depth].indexOf(t)*table_vert_space+" )")}),d3.select(t.node().parentNode).append("text").text(a.cur_iteration),d3.select(t.node().parentNode).append("text").text("⏩").on("click",()=>{}),d3.select(t.node().parentNode).append("text").text("▶️")))};
/**
 * @license
 * Lodash <https://lodash.com/>
 * Copyright OpenJS Foundation and other contributors <https://openjsf.org/>
 * Released under MIT license <https://lodash.com/license>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 */
(function(){var n="Expected a function",t="__lodash_placeholder__",e=[["ary",128],["bind",1],["bindKey",2],["curry",8],["curryRight",16],["flip",512],["partial",32],["partialRight",64],["rearg",256]],r="[object Arguments]",u="[object Array]",i="[object Boolean]",f="[object Date]",o="[object Error]",a="[object Function]",c="[object GeneratorFunction]",l="[object Map]",s="[object Number]",d="[object Object]",h="[object RegExp]",p="[object Set]",v="[object String]",_="[object Symbol]",g="[object WeakMap]",y="[object ArrayBuffer]",b="[object DataView]",w="[object Float32Array]",m="[object Float64Array]",x="[object Int8Array]",j="[object Int16Array]",A="[object Int32Array]",I="[object Uint8Array]",k="[object Uint8ClampedArray]",O="[object Uint16Array]",R="[object Uint32Array]",E=/\b__p \+= '';/g,z=/\b(__p \+=) '' \+/g,S=/(__e\(.*?\)|\b__t\)) \+\n'';/g,L=/&(?:amp|lt|gt|quot|#39);/g,C=/[&<>"']/g,W=RegExp(L.source),U=RegExp(C.source),B=/<%-([\s\S]+?)%>/g,T=/<%([\s\S]+?)%>/g,$=/<%=([\s\S]+?)%>/g,D=/\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,N=/^\w*$/,M=/[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g,F=/[\\^$.*+?()[\]{}|]/g,P=RegExp(F.source),q=/^\s+|\s+$/g,Z=/^\s+/,K=/\s+$/,V=/\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/,G=/\{\n\/\* \[wrapped with (.+)\] \*/,H=/,? & /,J=/[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g,Y=/\\(\\)?/g,Q=/\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g,X=/\w*$/,nn=/^[-+]0x[0-9a-f]+$/i,tn=/^0b[01]+$/i,en=/^\[object .+?Constructor\]$/,rn=/^0o[0-7]+$/i,un=/^(?:0|[1-9]\d*)$/,fn=/[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g,on=/($^)/,an=/['\n\r\u2028\u2029\\]/g,cn="\\u0300-\\u036f\\ufe20-\\ufe2f\\u20d0-\\u20ff",ln="\\xac\\xb1\\xd7\\xf7\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf\\u2000-\\u206f \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000",sn="[\\ud800-\\udfff]",dn="["+ln+"]",hn="["+cn+"]",pn="\\d+",vn="[\\u2700-\\u27bf]",_n="[a-z\\xdf-\\xf6\\xf8-\\xff]",gn="[^\\ud800-\\udfff"+ln+pn+"\\u2700-\\u27bfa-z\\xdf-\\xf6\\xf8-\\xffA-Z\\xc0-\\xd6\\xd8-\\xde]",yn="\\ud83c[\\udffb-\\udfff]",bn="[^\\ud800-\\udfff]",wn="(?:\\ud83c[\\udde6-\\uddff]){2}",mn="[\\ud800-\\udbff][\\udc00-\\udfff]",xn="[A-Z\\xc0-\\xd6\\xd8-\\xde]",jn="(?:"+_n+"|"+gn+")",An="(?:"+xn+"|"+gn+")",In="(?:"+hn+"|"+yn+")"+"?",kn="[\\ufe0e\\ufe0f]?"+In+("(?:\\u200d(?:"+[bn,wn,mn].join("|")+")[\\ufe0e\\ufe0f]?"+In+")*"),On="(?:"+[vn,wn,mn].join("|")+")"+kn,Rn="(?:"+[bn+hn+"?",hn,wn,mn,sn].join("|")+")",En=RegExp("['’]","g"),zn=RegExp(hn,"g"),Sn=RegExp(yn+"(?="+yn+")|"+Rn+kn,"g"),Ln=RegExp([xn+"?"+_n+"+(?:['’](?:d|ll|m|re|s|t|ve))?(?="+[dn,xn,"$"].join("|")+")",An+"+(?:['’](?:D|LL|M|RE|S|T|VE))?(?="+[dn,xn+jn,"$"].join("|")+")",xn+"?"+jn+"+(?:['’](?:d|ll|m|re|s|t|ve))?",xn+"+(?:['’](?:D|LL|M|RE|S|T|VE))?","\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])","\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])",pn,On].join("|"),"g"),Cn=RegExp("[\\u200d\\ud800-\\udfff"+cn+"\\ufe0e\\ufe0f]"),Wn=/[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/,Un=["Array","Buffer","DataView","Date","Error","Float32Array","Float64Array","Function","Int8Array","Int16Array","Int32Array","Map","Math","Object","Promise","RegExp","Set","String","Symbol","TypeError","Uint8Array","Uint8ClampedArray","Uint16Array","Uint32Array","WeakMap","_","clearTimeout","isFinite","parseInt","setTimeout"],Bn=-1,Tn={};Tn[w]=Tn[m]=Tn[x]=Tn[j]=Tn[A]=Tn[I]=Tn["[object Uint8ClampedArray]"]=Tn[O]=Tn[R]=!0,Tn[r]=Tn[u]=Tn[y]=Tn[i]=Tn[b]=Tn[f]=Tn[o]=Tn[a]=Tn[l]=Tn[s]=Tn[d]=Tn[h]=Tn[p]=Tn[v]=Tn[g]=!1;var $n={};$n[r]=$n[u]=$n[y]=$n[b]=$n[i]=$n[f]=$n[w]=$n[m]=$n[x]=$n[j]=$n[A]=$n[l]=$n[s]=$n[d]=$n[h]=$n[p]=$n[v]=$n[_]=$n[I]=$n["[object Uint8ClampedArray]"]=$n[O]=$n[R]=!0,$n[o]=$n[a]=$n[g]=!1;var Dn={"\\":"\\","'":"'","\n":"n","\r":"r","\u2028":"u2028","\u2029":"u2029"},Nn=parseFloat,Mn=parseInt,Fn="object"==typeof global&&global&&global.Object===Object&&global,Pn="object"==typeof self&&self&&self.Object===Object&&self,qn=Fn||Pn||Function("return this")(),Zn="object"==typeof exports&&exports&&!exports.nodeType&&exports,Kn=Zn&&"object"==typeof module&&module&&!module.nodeType&&module,Vn=Kn&&Kn.exports===Zn,Gn=Vn&&Fn.process,Hn=function(){try{var n=Kn&&Kn.require&&Kn.require("util").types;return n||Gn&&Gn.binding&&Gn.binding("util")}catch(n){}}(),Jn=Hn&&Hn.isArrayBuffer,Yn=Hn&&Hn.isDate,Qn=Hn&&Hn.isMap,Xn=Hn&&Hn.isRegExp,nt=Hn&&Hn.isSet,tt=Hn&&Hn.isTypedArray;function et(n,t,e){switch(e.length){case 0:return n.call(t);case 1:return n.call(t,e[0]);case 2:return n.call(t,e[0],e[1]);case 3:return n.call(t,e[0],e[1],e[2])}return n.apply(t,e)}function rt(n,t,e,r){for(var u=-1,i=null==n?0:n.length;++u<i;){var f=n[u];t(r,f,e(f),n)}return r}function ut(n,t){for(var e=-1,r=null==n?0:n.length;++e<r&&!1!==t(n[e],e,n););return n}function it(n,t){for(var e=null==n?0:n.length;e--&&!1!==t(n[e],e,n););return n}function ft(n,t){for(var e=-1,r=null==n?0:n.length;++e<r;)if(!t(n[e],e,n))return!1;return!0}function ot(n,t){for(var e=-1,r=null==n?0:n.length,u=0,i=[];++e<r;){var f=n[e];t(f,e,n)&&(i[u++]=f)}return i}function at(n,t){return!!(null==n?0:n.length)&&yt(n,t,0)>-1}function ct(n,t,e){for(var r=-1,u=null==n?0:n.length;++r<u;)if(e(t,n[r]))return!0;return!1}function lt(n,t){for(var e=-1,r=null==n?0:n.length,u=Array(r);++e<r;)u[e]=t(n[e],e,n);return u}function st(n,t){for(var e=-1,r=t.length,u=n.length;++e<r;)n[u+e]=t[e];return n}function dt(n,t,e,r){var u=-1,i=null==n?0:n.length;for(r&&i&&(e=n[++u]);++u<i;)e=t(e,n[u],u,n);return e}function ht(n,t,e,r){var u=null==n?0:n.length;for(r&&u&&(e=n[--u]);u--;)e=t(e,n[u],u,n);return e}function pt(n,t){for(var e=-1,r=null==n?0:n.length;++e<r;)if(t(n[e],e,n))return!0;return!1}var vt=xt("length");function _t(n,t,e){var r;return e(n,(function(n,e,u){if(t(n,e,u))return r=e,!1})),r}function gt(n,t,e,r){for(var u=n.length,i=e+(r?1:-1);r?i--:++i<u;)if(t(n[i],i,n))return i;return-1}function yt(n,t,e){return t==t?function(n,t,e){var r=e-1,u=n.length;for(;++r<u;)if(n[r]===t)return r;return-1}(n,t,e):gt(n,wt,e)}function bt(n,t,e,r){for(var u=e-1,i=n.length;++u<i;)if(r(n[u],t))return u;return-1}function wt(n){return n!=n}function mt(n,t){var e=null==n?0:n.length;return e?It(n,t)/e:NaN}function xt(n){return function(t){return null==t?undefined:t[n]}}function jt(n){return function(t){return null==n?undefined:n[t]}}function At(n,t,e,r,u){return u(n,(function(n,u,i){e=r?(r=!1,n):t(e,n,u,i)})),e}function It(n,t){for(var e,r=-1,u=n.length;++r<u;){var i=t(n[r]);undefined!==i&&(e=undefined===e?i:e+i)}return e}function kt(n,t){for(var e=-1,r=Array(n);++e<n;)r[e]=t(e);return r}function Ot(n){return function(t){return n(t)}}function Rt(n,t){return lt(t,(function(t){return n[t]}))}function Et(n,t){return n.has(t)}function zt(n,t){for(var e=-1,r=n.length;++e<r&&yt(t,n[e],0)>-1;);return e}function St(n,t){for(var e=n.length;e--&&yt(t,n[e],0)>-1;);return e}function Lt(n,t){for(var e=n.length,r=0;e--;)n[e]===t&&++r;return r}var Ct=jt({"À":"A","Á":"A","Â":"A","Ã":"A","Ä":"A","Å":"A","à":"a","á":"a","â":"a","ã":"a","ä":"a","å":"a","Ç":"C","ç":"c","Ð":"D","ð":"d","È":"E","É":"E","Ê":"E","Ë":"E","è":"e","é":"e","ê":"e","ë":"e","Ì":"I","Í":"I","Î":"I","Ï":"I","ì":"i","í":"i","î":"i","ï":"i","Ñ":"N","ñ":"n","Ò":"O","Ó":"O","Ô":"O","Õ":"O","Ö":"O","Ø":"O","ò":"o","ó":"o","ô":"o","õ":"o","ö":"o","ø":"o","Ù":"U","Ú":"U","Û":"U","Ü":"U","ù":"u","ú":"u","û":"u","ü":"u","Ý":"Y","ý":"y","ÿ":"y","Æ":"Ae","æ":"ae","Þ":"Th","þ":"th","ß":"ss","Ā":"A","Ă":"A","Ą":"A","ā":"a","ă":"a","ą":"a","Ć":"C","Ĉ":"C","Ċ":"C","Č":"C","ć":"c","ĉ":"c","ċ":"c","č":"c","Ď":"D","Đ":"D","ď":"d","đ":"d","Ē":"E","Ĕ":"E","Ė":"E","Ę":"E","Ě":"E","ē":"e","ĕ":"e","ė":"e","ę":"e","ě":"e","Ĝ":"G","Ğ":"G","Ġ":"G","Ģ":"G","ĝ":"g","ğ":"g","ġ":"g","ģ":"g","Ĥ":"H","Ħ":"H","ĥ":"h","ħ":"h","Ĩ":"I","Ī":"I","Ĭ":"I","Į":"I","İ":"I","ĩ":"i","ī":"i","ĭ":"i","į":"i","ı":"i","Ĵ":"J","ĵ":"j","Ķ":"K","ķ":"k","ĸ":"k","Ĺ":"L","Ļ":"L","Ľ":"L","Ŀ":"L","Ł":"L","ĺ":"l","ļ":"l","ľ":"l","ŀ":"l","ł":"l","Ń":"N","Ņ":"N","Ň":"N","Ŋ":"N","ń":"n","ņ":"n","ň":"n","ŋ":"n","Ō":"O","Ŏ":"O","Ő":"O","ō":"o","ŏ":"o","ő":"o","Ŕ":"R","Ŗ":"R","Ř":"R","ŕ":"r","ŗ":"r","ř":"r","Ś":"S","Ŝ":"S","Ş":"S","Š":"S","ś":"s","ŝ":"s","ş":"s","š":"s","Ţ":"T","Ť":"T","Ŧ":"T","ţ":"t","ť":"t","ŧ":"t","Ũ":"U","Ū":"U","Ŭ":"U","Ů":"U","Ű":"U","Ų":"U","ũ":"u","ū":"u","ŭ":"u","ů":"u","ű":"u","ų":"u","Ŵ":"W","ŵ":"w","Ŷ":"Y","ŷ":"y","Ÿ":"Y","Ź":"Z","Ż":"Z","Ž":"Z","ź":"z","ż":"z","ž":"z","Ĳ":"IJ","ĳ":"ij","Œ":"Oe","œ":"oe","ŉ":"'n","ſ":"s"}),Wt=jt({"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#39;"});function Ut(n){return"\\"+Dn[n]}function Bt(n){return Cn.test(n)}function Tt(n){var t=-1,e=Array(n.size);return n.forEach((function(n,r){e[++t]=[r,n]})),e}function $t(n,t){return function(e){return n(t(e))}}function Dt(n,e){for(var r=-1,u=n.length,i=0,f=[];++r<u;){var o=n[r];o!==e&&o!==t||(n[r]=t,f[i++]=r)}return f}function Nt(n){var t=-1,e=Array(n.size);return n.forEach((function(n){e[++t]=n})),e}function Mt(n){var t=-1,e=Array(n.size);return n.forEach((function(n){e[++t]=[n,n]})),e}function Ft(n){return Bt(n)?function(n){var t=Sn.lastIndex=0;for(;Sn.test(n);)++t;return t}(n):vt(n)}function Pt(n){return Bt(n)?function(n){return n.match(Sn)||[]}(n):function(n){return n.split("")}(n)}var qt=jt({"&amp;":"&","&lt;":"<","&gt;":">","&quot;":'"',"&#39;":"'"});var Zt=function cn(ln){var sn,dn=(ln=null==ln?qn:Zt.defaults(qn.Object(),ln,Zt.pick(qn,Un))).Array,hn=ln.Date,pn=ln.Error,vn=ln.Function,_n=ln.Math,gn=ln.Object,yn=ln.RegExp,bn=ln.String,wn=ln.TypeError,mn=dn.prototype,xn=vn.prototype,jn=gn.prototype,An=ln["__core-js_shared__"],In=xn.toString,kn=jn.hasOwnProperty,On=0,Rn=(sn=/[^.]+$/.exec(An&&An.keys&&An.keys.IE_PROTO||""))?"Symbol(src)_1."+sn:"",Sn=jn.toString,Cn=In.call(gn),Dn=qn._,Fn=yn("^"+In.call(kn).replace(F,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$"),Pn=Vn?ln.Buffer:undefined,Zn=ln.Symbol,Kn=ln.Uint8Array,Gn=Pn?Pn.allocUnsafe:undefined,Hn=$t(gn.getPrototypeOf,gn),vt=gn.create,jt=jn.propertyIsEnumerable,Kt=mn.splice,Vt=Zn?Zn.isConcatSpreadable:undefined,Gt=Zn?Zn.iterator:undefined,Ht=Zn?Zn.toStringTag:undefined,Jt=function(){try{var n=ni(gn,"defineProperty");return n({},"",{}),n}catch(n){}}(),Yt=ln.clearTimeout!==qn.clearTimeout&&ln.clearTimeout,Qt=hn&&hn.now!==qn.Date.now&&hn.now,Xt=ln.setTimeout!==qn.setTimeout&&ln.setTimeout,ne=_n.ceil,te=_n.floor,ee=gn.getOwnPropertySymbols,re=Pn?Pn.isBuffer:undefined,ue=ln.isFinite,ie=mn.join,fe=$t(gn.keys,gn),oe=_n.max,ae=_n.min,ce=hn.now,le=ln.parseInt,se=_n.random,de=mn.reverse,he=ni(ln,"DataView"),pe=ni(ln,"Map"),ve=ni(ln,"Promise"),_e=ni(ln,"Set"),ge=ni(ln,"WeakMap"),ye=ni(gn,"create"),be=ge&&new ge,we={},me=Oi(he),xe=Oi(pe),je=Oi(ve),Ae=Oi(_e),Ie=Oi(ge),ke=Zn?Zn.prototype:undefined,Oe=ke?ke.valueOf:undefined,Re=ke?ke.toString:undefined;function Ee(n){if(Zf(n)&&!Wf(n)&&!(n instanceof Ce)){if(n instanceof Le)return n;if(kn.call(n,"__wrapped__"))return Ri(n)}return new Le(n)}var ze=function(){function n(){}return function(t){if(!qf(t))return{};if(vt)return vt(t);n.prototype=t;var e=new n;return n.prototype=undefined,e}}();function Se(){}function Le(n,t){this.__wrapped__=n,this.__actions__=[],this.__chain__=!!t,this.__index__=0,this.__values__=undefined}function Ce(n){this.__wrapped__=n,this.__actions__=[],this.__dir__=1,this.__filtered__=!1,this.__iteratees__=[],this.__takeCount__=4294967295,this.__views__=[]}function We(n){var t=-1,e=null==n?0:n.length;for(this.clear();++t<e;){var r=n[t];this.set(r[0],r[1])}}function Ue(n){var t=-1,e=null==n?0:n.length;for(this.clear();++t<e;){var r=n[t];this.set(r[0],r[1])}}function Be(n){var t=-1,e=null==n?0:n.length;for(this.clear();++t<e;){var r=n[t];this.set(r[0],r[1])}}function Te(n){var t=-1,e=null==n?0:n.length;for(this.__data__=new Be;++t<e;)this.add(n[t])}function $e(n){var t=this.__data__=new Ue(n);this.size=t.size}function De(n,t){var e=Wf(n),r=!e&&Cf(n),u=!e&&!r&&$f(n),i=!e&&!r&&!u&&Xf(n),f=e||r||u||i,o=f?kt(n.length,bn):[],a=o.length;for(var c in n)!t&&!kn.call(n,c)||f&&("length"==c||u&&("offset"==c||"parent"==c)||i&&("buffer"==c||"byteLength"==c||"byteOffset"==c)||oi(c,a))||o.push(c);return o}function Ne(n){var t=n.length;return t?n[Tr(0,t-1)]:undefined}function Me(n,t){return Ai(yu(n),Je(t,0,n.length))}function Fe(n){return Ai(yu(n))}function Pe(n,t,e){(undefined!==e&&!zf(n[t],e)||undefined===e&&!(t in n))&&Ge(n,t,e)}function qe(n,t,e){var r=n[t];kn.call(n,t)&&zf(r,e)&&(undefined!==e||t in n)||Ge(n,t,e)}function Ze(n,t){for(var e=n.length;e--;)if(zf(n[e][0],t))return e;return-1}function Ke(n,t,e,r){return tr(n,(function(n,u,i){t(r,n,e(n),i)})),r}function Ve(n,t){return n&&bu(t,xo(t),n)}function Ge(n,t,e){"__proto__"==t&&Jt?Jt(n,t,{configurable:!0,enumerable:!0,value:e,writable:!0}):n[t]=e}function He(n,t){for(var e=-1,r=t.length,u=dn(r),i=null==n;++e<r;)u[e]=i?undefined:go(n,t[e]);return u}function Je(n,t,e){return n==n&&(undefined!==e&&(n=n<=e?n:e),undefined!==t&&(n=n>=t?n:t)),n}function Ye(n,t,e,u,o,g){var E,z=1&t,S=2&t,L=4&t;if(e&&(E=o?e(n,u,o,g):e(n)),undefined!==E)return E;if(!qf(n))return n;var C=Wf(n);if(C){if(E=function(n){var t=n.length,e=new n.constructor(t);t&&"string"==typeof n[0]&&kn.call(n,"index")&&(e.index=n.index,e.input=n.input);return e}(n),!z)return yu(n,E)}else{var W=ri(n),U=W==a||W==c;if($f(n))return du(n,z);if(W==d||W==r||U&&!o){if(E=S||U?{}:ii(n),!z)return S?function(n,t){return bu(n,ei(n),t)}(n,function(n,t){return n&&bu(t,jo(t),n)}(E,n)):function(n,t){return bu(n,ti(n),t)}(n,Ve(E,n))}else{if(!$n[W])return o?n:{};E=function(n,t,e){var r=n.constructor;switch(t){case y:return hu(n);case i:case f:return new r(+n);case b:return function(n,t){var e=t?hu(n.buffer):n.buffer;return new n.constructor(e,n.byteOffset,n.byteLength)}(n,e);case w:case m:case x:case j:case A:case I:case k:case O:case R:return pu(n,e);case l:return new r;case s:case v:return new r(n);case h:return function(n){var t=new n.constructor(n.source,X.exec(n));return t.lastIndex=n.lastIndex,t}(n);case p:return new r;case _:return u=n,Oe?gn(Oe.call(u)):{}}var u}(n,W,z)}}g||(g=new $e);var B=g.get(n);if(B)return B;g.set(n,E),Jf(n)?n.forEach((function(r){E.add(Ye(r,t,e,r,n,g))})):Kf(n)&&n.forEach((function(r,u){E.set(u,Ye(r,t,e,u,n,g))}));var T=C?undefined:(L?S?Vu:Ku:S?jo:xo)(n);return ut(T||n,(function(r,u){T&&(r=n[u=r]),qe(E,u,Ye(r,t,e,u,n,g))})),E}function Qe(n,t,e){var r=e.length;if(null==n)return!r;for(n=gn(n);r--;){var u=e[r],i=t[u],f=n[u];if(undefined===f&&!(u in n)||!i(f))return!1}return!0}function Xe(t,e,r){if("function"!=typeof t)throw new wn(n);return wi((function(){t.apply(undefined,r)}),e)}function nr(n,t,e,r){var u=-1,i=at,f=!0,o=n.length,a=[],c=t.length;if(!o)return a;e&&(t=lt(t,Ot(e))),r?(i=ct,f=!1):t.length>=200&&(i=Et,f=!1,t=new Te(t));n:for(;++u<o;){var l=n[u],s=null==e?l:e(l);if(l=r||0!==l?l:0,f&&s==s){for(var d=c;d--;)if(t[d]===s)continue n;a.push(l)}else i(t,s,r)||a.push(l)}return a}Ee.templateSettings={escape:B,evaluate:T,interpolate:$,variable:"",imports:{_:Ee}},Ee.prototype=Se.prototype,Ee.prototype.constructor=Ee,Le.prototype=ze(Se.prototype),Le.prototype.constructor=Le,Ce.prototype=ze(Se.prototype),Ce.prototype.constructor=Ce,We.prototype.clear=function(){this.__data__=ye?ye(null):{},this.size=0},We.prototype.delete=function(n){var t=this.has(n)&&delete this.__data__[n];return this.size-=t?1:0,t},We.prototype.get=function(n){var t=this.__data__;if(ye){var e=t[n];return"__lodash_hash_undefined__"===e?undefined:e}return kn.call(t,n)?t[n]:undefined},We.prototype.has=function(n){var t=this.__data__;return ye?undefined!==t[n]:kn.call(t,n)},We.prototype.set=function(n,t){var e=this.__data__;return this.size+=this.has(n)?0:1,e[n]=ye&&undefined===t?"__lodash_hash_undefined__":t,this},Ue.prototype.clear=function(){this.__data__=[],this.size=0},Ue.prototype.delete=function(n){var t=this.__data__,e=Ze(t,n);return!(e<0)&&(e==t.length-1?t.pop():Kt.call(t,e,1),--this.size,!0)},Ue.prototype.get=function(n){var t=this.__data__,e=Ze(t,n);return e<0?undefined:t[e][1]},Ue.prototype.has=function(n){return Ze(this.__data__,n)>-1},Ue.prototype.set=function(n,t){var e=this.__data__,r=Ze(e,n);return r<0?(++this.size,e.push([n,t])):e[r][1]=t,this},Be.prototype.clear=function(){this.size=0,this.__data__={hash:new We,map:new(pe||Ue),string:new We}},Be.prototype.delete=function(n){var t=Qu(this,n).delete(n);return this.size-=t?1:0,t},Be.prototype.get=function(n){return Qu(this,n).get(n)},Be.prototype.has=function(n){return Qu(this,n).has(n)},Be.prototype.set=function(n,t){var e=Qu(this,n),r=e.size;return e.set(n,t),this.size+=e.size==r?0:1,this},Te.prototype.add=Te.prototype.push=function(n){return this.__data__.set(n,"__lodash_hash_undefined__"),this},Te.prototype.has=function(n){return this.__data__.has(n)},$e.prototype.clear=function(){this.__data__=new Ue,this.size=0},$e.prototype.delete=function(n){var t=this.__data__,e=t.delete(n);return this.size=t.size,e},$e.prototype.get=function(n){return this.__data__.get(n)},$e.prototype.has=function(n){return this.__data__.has(n)},$e.prototype.set=function(n,t){var e=this.__data__;if(e instanceof Ue){var r=e.__data__;if(!pe||r.length<199)return r.push([n,t]),this.size=++e.size,this;e=this.__data__=new Be(r)}return e.set(n,t),this.size=e.size,this};var tr=xu(cr),er=xu(lr,!0);function rr(n,t){var e=!0;return tr(n,(function(n,r,u){return e=!!t(n,r,u)})),e}function ur(n,t,e){for(var r=-1,u=n.length;++r<u;){var i=n[r],f=t(i);if(null!=f&&(undefined===o?f==f&&!Qf(f):e(f,o)))var o=f,a=i}return a}function ir(n,t){var e=[];return tr(n,(function(n,r,u){t(n,r,u)&&e.push(n)})),e}function fr(n,t,e,r,u){var i=-1,f=n.length;for(e||(e=fi),u||(u=[]);++i<f;){var o=n[i];t>0&&e(o)?t>1?fr(o,t-1,e,r,u):st(u,o):r||(u[u.length]=o)}return u}var or=ju(),ar=ju(!0);function cr(n,t){return n&&or(n,t,xo)}function lr(n,t){return n&&ar(n,t,xo)}function sr(n,t){return ot(t,(function(t){return Mf(n[t])}))}function dr(n,t){for(var e=0,r=(t=au(t,n)).length;null!=n&&e<r;)n=n[ki(t[e++])];return e&&e==r?n:undefined}function hr(n,t,e){var r=t(n);return Wf(n)?r:st(r,e(n))}function pr(n){return null==n?undefined===n?"[object Undefined]":"[object Null]":Ht&&Ht in gn(n)?function(n){var t=kn.call(n,Ht),e=n[Ht];try{n[Ht]=undefined;var r=!0}catch(n){}var u=Sn.call(n);r&&(t?n[Ht]=e:delete n[Ht]);return u}(n):function(n){return Sn.call(n)}(n)}function vr(n,t){return n>t}function _r(n,t){return null!=n&&kn.call(n,t)}function gr(n,t){return null!=n&&t in gn(n)}function yr(n,t,e){for(var r=e?ct:at,u=n[0].length,i=n.length,f=i,o=dn(i),a=1/0,c=[];f--;){var l=n[f];f&&t&&(l=lt(l,Ot(t))),a=ae(l.length,a),o[f]=!e&&(t||u>=120&&l.length>=120)?new Te(f&&l):undefined}l=n[0];var s=-1,d=o[0];n:for(;++s<u&&c.length<a;){var h=l[s],p=t?t(h):h;if(h=e||0!==h?h:0,!(d?Et(d,p):r(c,p,e))){for(f=i;--f;){var v=o[f];if(!(v?Et(v,p):r(n[f],p,e)))continue n}d&&d.push(p),c.push(h)}}return c}function br(n,t,e){var r=null==(n=_i(n,t=au(t,n)))?n:n[ki(Di(t))];return null==r?undefined:et(r,n,e)}function wr(n){return Zf(n)&&pr(n)==r}function mr(n,t,e,a,c){return n===t||(null==n||null==t||!Zf(n)&&!Zf(t)?n!=n&&t!=t:function(n,t,e,a,c,g){var w=Wf(n),m=Wf(t),x=w?u:ri(n),j=m?u:ri(t),A=(x=x==r?d:x)==d,I=(j=j==r?d:j)==d,k=x==j;if(k&&$f(n)){if(!$f(t))return!1;w=!0,A=!1}if(k&&!A)return g||(g=new $e),w||Xf(n)?qu(n,t,e,a,c,g):function(n,t,e,r,u,a,c){switch(e){case b:if(n.byteLength!=t.byteLength||n.byteOffset!=t.byteOffset)return!1;n=n.buffer,t=t.buffer;case y:return!(n.byteLength!=t.byteLength||!a(new Kn(n),new Kn(t)));case i:case f:case s:return zf(+n,+t);case o:return n.name==t.name&&n.message==t.message;case h:case v:return n==t+"";case l:var d=Tt;case p:var g=1&r;if(d||(d=Nt),n.size!=t.size&&!g)return!1;var w=c.get(n);if(w)return w==t;r|=2,c.set(n,t);var m=qu(d(n),d(t),r,u,a,c);return c.delete(n),m;case _:if(Oe)return Oe.call(n)==Oe.call(t)}return!1}(n,t,x,e,a,c,g);if(!(1&e)){var O=A&&kn.call(n,"__wrapped__"),R=I&&kn.call(t,"__wrapped__");if(O||R){var E=O?n.value():n,z=R?t.value():t;return g||(g=new $e),c(E,z,e,a,g)}}if(!k)return!1;return g||(g=new $e),function(n,t,e,r,u,i){var f=1&e,o=Ku(n),a=o.length,c=Ku(t).length;if(a!=c&&!f)return!1;var l=a;for(;l--;){var s=o[l];if(!(f?s in t:kn.call(t,s)))return!1}var d=i.get(n);if(d&&i.get(t))return d==t;var h=!0;i.set(n,t),i.set(t,n);var p=f;for(;++l<a;){var v=n[s=o[l]],_=t[s];if(r)var g=f?r(_,v,s,t,n,i):r(v,_,s,n,t,i);if(!(undefined===g?v===_||u(v,_,e,r,i):g)){h=!1;break}p||(p="constructor"==s)}if(h&&!p){var y=n.constructor,b=t.constructor;y==b||!("constructor"in n)||!("constructor"in t)||"function"==typeof y&&y instanceof y&&"function"==typeof b&&b instanceof b||(h=!1)}return i.delete(n),i.delete(t),h}(n,t,e,a,c,g)}(n,t,e,a,mr,c))}function xr(n,t,e,r){var u=e.length,i=u,f=!r;if(null==n)return!i;for(n=gn(n);u--;){var o=e[u];if(f&&o[2]?o[1]!==n[o[0]]:!(o[0]in n))return!1}for(;++u<i;){var a=(o=e[u])[0],c=n[a],l=o[1];if(f&&o[2]){if(undefined===c&&!(a in n))return!1}else{var s=new $e;if(r)var d=r(c,l,a,n,t,s);if(!(undefined===d?mr(l,c,3,r,s):d))return!1}}return!0}function jr(n){return!(!qf(n)||(t=n,Rn&&Rn in t))&&(Mf(n)?Fn:en).test(Oi(n));var t}function Ar(n){return"function"==typeof n?n:null==n?Go:"object"==typeof n?Wf(n)?zr(n[0],n[1]):Er(n):ra(n)}function Ir(n){if(!di(n))return fe(n);var t=[];for(var e in gn(n))kn.call(n,e)&&"constructor"!=e&&t.push(e);return t}function kr(n){if(!qf(n))return function(n){var t=[];if(null!=n)for(var e in gn(n))t.push(e);return t}(n);var t=di(n),e=[];for(var r in n)("constructor"!=r||!t&&kn.call(n,r))&&e.push(r);return e}function Or(n,t){return n<t}function Rr(n,t){var e=-1,r=Bf(n)?dn(n.length):[];return tr(n,(function(n,u,i){r[++e]=t(n,u,i)})),r}function Er(n){var t=Xu(n);return 1==t.length&&t[0][2]?pi(t[0][0],t[0][1]):function(e){return e===n||xr(e,n,t)}}function zr(n,t){return ci(n)&&hi(t)?pi(ki(n),t):function(e){var r=go(e,n);return undefined===r&&r===t?yo(e,n):mr(t,r,3)}}function Sr(n,t,e,r,u){n!==t&&or(t,(function(i,f){if(u||(u=new $e),qf(i))!function(n,t,e,r,u,i,f){var o=yi(n,e),a=yi(t,e),c=f.get(a);if(c)return void Pe(n,e,c);var l=i?i(o,a,e+"",n,t,f):undefined,s=undefined===l;if(s){var d=Wf(a),h=!d&&$f(a),p=!d&&!h&&Xf(a);l=a,d||h||p?Wf(o)?l=o:Tf(o)?l=yu(o):h?(s=!1,l=du(a,!0)):p?(s=!1,l=pu(a,!0)):l=[]:Gf(a)||Cf(a)?(l=o,Cf(o)?l=oo(o):qf(o)&&!Mf(o)||(l=ii(a))):s=!1}s&&(f.set(a,l),u(l,a,r,i,f),f.delete(a));Pe(n,e,l)}(n,t,f,e,Sr,r,u);else{var o=r?r(yi(n,f),i,f+"",n,t,u):undefined;undefined===o&&(o=i),Pe(n,f,o)}}),jo)}function Lr(n,t){var e=n.length;if(e)return oi(t+=t<0?e:0,e)?n[t]:undefined}function Cr(n,t,e){var r=-1;return t=lt(t.length?t:[Go],Ot(Yu())),function(n,t){var e=n.length;for(n.sort(t);e--;)n[e]=n[e].value;return n}(Rr(n,(function(n,e,u){return{criteria:lt(t,(function(t){return t(n)})),index:++r,value:n}})),(function(n,t){return function(n,t,e){var r=-1,u=n.criteria,i=t.criteria,f=u.length,o=e.length;for(;++r<f;){var a=vu(u[r],i[r]);if(a)return r>=o?a:a*("desc"==e[r]?-1:1)}return n.index-t.index}(n,t,e)}))}function Wr(n,t,e){for(var r=-1,u=t.length,i={};++r<u;){var f=t[r],o=dr(n,f);e(o,f)&&Fr(i,au(f,n),o)}return i}function Ur(n,t,e,r){var u=r?bt:yt,i=-1,f=t.length,o=n;for(n===t&&(t=yu(t)),e&&(o=lt(n,Ot(e)));++i<f;)for(var a=0,c=t[i],l=e?e(c):c;(a=u(o,l,a,r))>-1;)o!==n&&Kt.call(o,a,1),Kt.call(n,a,1);return n}function Br(n,t){for(var e=n?t.length:0,r=e-1;e--;){var u=t[e];if(e==r||u!==i){var i=u;oi(u)?Kt.call(n,u,1):nu(n,u)}}return n}function Tr(n,t){return n+te(se()*(t-n+1))}function $r(n,t){var e="";if(!n||t<1||t>9007199254740991)return e;do{t%2&&(e+=n),(t=te(t/2))&&(n+=n)}while(t);return e}function Dr(n,t){return mi(vi(n,t,Go),n+"")}function Nr(n){return Ne(So(n))}function Mr(n,t){var e=So(n);return Ai(e,Je(t,0,e.length))}function Fr(n,t,e,r){if(!qf(n))return n;for(var u=-1,i=(t=au(t,n)).length,f=i-1,o=n;null!=o&&++u<i;){var a=ki(t[u]),c=e;if(u!=f){var l=o[a];undefined===(c=r?r(l,a,o):undefined)&&(c=qf(l)?l:oi(t[u+1])?[]:{})}qe(o,a,c),o=o[a]}return n}var Pr=be?function(n,t){return be.set(n,t),n}:Go,qr=Jt?function(n,t){return Jt(n,"toString",{configurable:!0,enumerable:!1,value:Zo(t),writable:!0})}:Go;function Zr(n){return Ai(So(n))}function Kr(n,t,e){var r=-1,u=n.length;t<0&&(t=-t>u?0:u+t),(e=e>u?u:e)<0&&(e+=u),u=t>e?0:e-t>>>0,t>>>=0;for(var i=dn(u);++r<u;)i[r]=n[r+t];return i}function Vr(n,t){var e;return tr(n,(function(n,r,u){return!(e=t(n,r,u))})),!!e}function Gr(n,t,e){var r=0,u=null==n?r:n.length;if("number"==typeof t&&t==t&&u<=2147483647){for(;r<u;){var i=r+u>>>1,f=n[i];null!==f&&!Qf(f)&&(e?f<=t:f<t)?r=i+1:u=i}return u}return Hr(n,t,Go,e)}function Hr(n,t,e,r){t=e(t);for(var u=0,i=null==n?0:n.length,f=t!=t,o=null===t,a=Qf(t),c=undefined===t;u<i;){var l=te((u+i)/2),s=e(n[l]),d=undefined!==s,h=null===s,p=s==s,v=Qf(s);if(f)var _=r||p;else _=c?p&&(r||d):o?p&&d&&(r||!h):a?p&&d&&!h&&(r||!v):!h&&!v&&(r?s<=t:s<t);_?u=l+1:i=l}return ae(i,4294967294)}function Jr(n,t){for(var e=-1,r=n.length,u=0,i=[];++e<r;){var f=n[e],o=t?t(f):f;if(!e||!zf(o,a)){var a=o;i[u++]=0===f?0:f}}return i}function Yr(n){return"number"==typeof n?n:Qf(n)?NaN:+n}function Qr(n){if("string"==typeof n)return n;if(Wf(n))return lt(n,Qr)+"";if(Qf(n))return Re?Re.call(n):"";var t=n+"";return"0"==t&&1/n==-Infinity?"-0":t}function Xr(n,t,e){var r=-1,u=at,i=n.length,f=!0,o=[],a=o;if(e)f=!1,u=ct;else if(i>=200){var c=t?null:$u(n);if(c)return Nt(c);f=!1,u=Et,a=new Te}else a=t?[]:o;n:for(;++r<i;){var l=n[r],s=t?t(l):l;if(l=e||0!==l?l:0,f&&s==s){for(var d=a.length;d--;)if(a[d]===s)continue n;t&&a.push(s),o.push(l)}else u(a,s,e)||(a!==o&&a.push(s),o.push(l))}return o}function nu(n,t){return null==(n=_i(n,t=au(t,n)))||delete n[ki(Di(t))]}function tu(n,t,e,r){return Fr(n,t,e(dr(n,t)),r)}function eu(n,t,e,r){for(var u=n.length,i=r?u:-1;(r?i--:++i<u)&&t(n[i],i,n););return e?Kr(n,r?0:i,r?i+1:u):Kr(n,r?i+1:0,r?u:i)}function ru(n,t){var e=n;return e instanceof Ce&&(e=e.value()),dt(t,(function(n,t){return t.func.apply(t.thisArg,st([n],t.args))}),e)}function uu(n,t,e){var r=n.length;if(r<2)return r?Xr(n[0]):[];for(var u=-1,i=dn(r);++u<r;)for(var f=n[u],o=-1;++o<r;)o!=u&&(i[u]=nr(i[u]||f,n[o],t,e));return Xr(fr(i,1),t,e)}function iu(n,t,e){for(var r=-1,u=n.length,i=t.length,f={};++r<u;){var o=r<i?t[r]:undefined;e(f,n[r],o)}return f}function fu(n){return Tf(n)?n:[]}function ou(n){return"function"==typeof n?n:Go}function au(n,t){return Wf(n)?n:ci(n,t)?[n]:Ii(ao(n))}var cu=Dr;function lu(n,t,e){var r=n.length;return e=undefined===e?r:e,!t&&e>=r?n:Kr(n,t,e)}var su=Yt||function(n){return qn.clearTimeout(n)};function du(n,t){if(t)return n.slice();var e=n.length,r=Gn?Gn(e):new n.constructor(e);return n.copy(r),r}function hu(n){var t=new n.constructor(n.byteLength);return new Kn(t).set(new Kn(n)),t}function pu(n,t){var e=t?hu(n.buffer):n.buffer;return new n.constructor(e,n.byteOffset,n.length)}function vu(n,t){if(n!==t){var e=undefined!==n,r=null===n,u=n==n,i=Qf(n),f=undefined!==t,o=null===t,a=t==t,c=Qf(t);if(!o&&!c&&!i&&n>t||i&&f&&a&&!o&&!c||r&&f&&a||!e&&a||!u)return 1;if(!r&&!i&&!c&&n<t||c&&e&&u&&!r&&!i||o&&e&&u||!f&&u||!a)return-1}return 0}function _u(n,t,e,r){for(var u=-1,i=n.length,f=e.length,o=-1,a=t.length,c=oe(i-f,0),l=dn(a+c),s=!r;++o<a;)l[o]=t[o];for(;++u<f;)(s||u<i)&&(l[e[u]]=n[u]);for(;c--;)l[o++]=n[u++];return l}function gu(n,t,e,r){for(var u=-1,i=n.length,f=-1,o=e.length,a=-1,c=t.length,l=oe(i-o,0),s=dn(l+c),d=!r;++u<l;)s[u]=n[u];for(var h=u;++a<c;)s[h+a]=t[a];for(;++f<o;)(d||u<i)&&(s[h+e[f]]=n[u++]);return s}function yu(n,t){var e=-1,r=n.length;for(t||(t=dn(r));++e<r;)t[e]=n[e];return t}function bu(n,t,e,r){var u=!e;e||(e={});for(var i=-1,f=t.length;++i<f;){var o=t[i],a=r?r(e[o],n[o],o,e,n):undefined;undefined===a&&(a=n[o]),u?Ge(e,o,a):qe(e,o,a)}return e}function wu(n,t){return function(e,r){var u=Wf(e)?rt:Ke,i=t?t():{};return u(e,n,Yu(r,2),i)}}function mu(n){return Dr((function(t,e){var r=-1,u=e.length,i=u>1?e[u-1]:undefined,f=u>2?e[2]:undefined;for(i=n.length>3&&"function"==typeof i?(u--,i):undefined,f&&ai(e[0],e[1],f)&&(i=u<3?undefined:i,u=1),t=gn(t);++r<u;){var o=e[r];o&&n(t,o,r,i)}return t}))}function xu(n,t){return function(e,r){if(null==e)return e;if(!Bf(e))return n(e,r);for(var u=e.length,i=t?u:-1,f=gn(e);(t?i--:++i<u)&&!1!==r(f[i],i,f););return e}}function ju(n){return function(t,e,r){for(var u=-1,i=gn(t),f=r(t),o=f.length;o--;){var a=f[n?o:++u];if(!1===e(i[a],a,i))break}return t}}function Au(n){return function(t){var e=Bt(t=ao(t))?Pt(t):undefined,r=e?e[0]:t.charAt(0),u=e?lu(e,1).join(""):t.slice(1);return r[n]()+u}}function Iu(n){return function(t){return dt(Fo(Wo(t).replace(En,"")),n,"")}}function ku(n){return function(){var t=arguments;switch(t.length){case 0:return new n;case 1:return new n(t[0]);case 2:return new n(t[0],t[1]);case 3:return new n(t[0],t[1],t[2]);case 4:return new n(t[0],t[1],t[2],t[3]);case 5:return new n(t[0],t[1],t[2],t[3],t[4]);case 6:return new n(t[0],t[1],t[2],t[3],t[4],t[5]);case 7:return new n(t[0],t[1],t[2],t[3],t[4],t[5],t[6])}var e=ze(n.prototype),r=n.apply(e,t);return qf(r)?r:e}}function Ou(n){return function(t,e,r){var u=gn(t);if(!Bf(t)){var i=Yu(e,3);t=xo(t),e=function(n){return i(u[n],n,u)}}var f=n(t,e,r);return f>-1?u[i?t[f]:f]:undefined}}function Ru(t){return Zu((function(e){var r=e.length,u=r,i=Le.prototype.thru;for(t&&e.reverse();u--;){var f=e[u];if("function"!=typeof f)throw new wn(n);if(i&&!o&&"wrapper"==Hu(f))var o=new Le([],!0)}for(u=o?u:r;++u<r;){var a=Hu(f=e[u]),c="wrapper"==a?Gu(f):undefined;o=c&&li(c[0])&&424==c[1]&&!c[4].length&&1==c[9]?o[Hu(c[0])].apply(o,c[3]):1==f.length&&li(f)?o[a]():o.thru(f)}return function(){var n=arguments,t=n[0];if(o&&1==n.length&&Wf(t))return o.plant(t).value();for(var u=0,i=r?e[u].apply(this,n):t;++u<r;)i=e[u].call(this,i);return i}}))}function Eu(n,t,e,r,u,i,f,o,a,c){var l=128&t,s=1&t,d=2&t,h=24&t,p=512&t,v=d?undefined:ku(n);return function _(){for(var g=arguments.length,y=dn(g),b=g;b--;)y[b]=arguments[b];if(h)var w=Ju(_),m=Lt(y,w);if(r&&(y=_u(y,r,u,h)),i&&(y=gu(y,i,f,h)),g-=m,h&&g<c){var x=Dt(y,w);return Bu(n,t,Eu,_.placeholder,e,y,x,o,a,c-g)}var j=s?e:this,A=d?j[n]:n;return g=y.length,o?y=gi(y,o):p&&g>1&&y.reverse(),l&&a<g&&(y.length=a),this&&this!==qn&&this instanceof _&&(A=v||ku(A)),A.apply(j,y)}}function zu(n,t){return function(e,r){return function(n,t,e,r){return cr(n,(function(n,u,i){t(r,e(n),u,i)})),r}(e,n,t(r),{})}}function Su(n,t){return function(e,r){var u;if(undefined===e&&undefined===r)return t;if(undefined!==e&&(u=e),undefined!==r){if(undefined===u)return r;"string"==typeof e||"string"==typeof r?(e=Qr(e),r=Qr(r)):(e=Yr(e),r=Yr(r)),u=n(e,r)}return u}}function Lu(n){return Zu((function(t){return t=lt(t,Ot(Yu())),Dr((function(e){var r=this;return n(t,(function(n){return et(n,r,e)}))}))}))}function Cu(n,t){var e=(t=undefined===t?" ":Qr(t)).length;if(e<2)return e?$r(t,n):t;var r=$r(t,ne(n/Ft(t)));return Bt(t)?lu(Pt(r),0,n).join(""):r.slice(0,n)}function Wu(n){return function(t,e,r){return r&&"number"!=typeof r&&ai(t,e,r)&&(e=r=undefined),t=ro(t),undefined===e?(e=t,t=0):e=ro(e),function(n,t,e,r){for(var u=-1,i=oe(ne((t-n)/(e||1)),0),f=dn(i);i--;)f[r?i:++u]=n,n+=e;return f}(t,e,r=undefined===r?t<e?1:-1:ro(r),n)}}function Uu(n){return function(t,e){return"string"==typeof t&&"string"==typeof e||(t=fo(t),e=fo(e)),n(t,e)}}function Bu(n,t,e,r,u,i,f,o,a,c){var l=8&t;t|=l?32:64,4&(t&=~(l?64:32))||(t&=-4);var s=[n,t,u,l?i:undefined,l?f:undefined,l?undefined:i,l?undefined:f,o,a,c],d=e.apply(undefined,s);return li(n)&&bi(d,s),d.placeholder=r,xi(d,n,t)}function Tu(n){var t=_n[n];return function(n,e){if(n=fo(n),(e=null==e?0:ae(uo(e),292))&&ue(n)){var r=(ao(n)+"e").split("e");return+((r=(ao(t(r[0]+"e"+(+r[1]+e)))+"e").split("e"))[0]+"e"+(+r[1]-e))}return t(n)}}var $u=_e&&1/Nt(new _e([,-0]))[1]==Infinity?function(n){return new _e(n)}:Xo;function Du(n){return function(t){var e=ri(t);return e==l?Tt(t):e==p?Mt(t):function(n,t){return lt(t,(function(t){return[t,n[t]]}))}(t,n(t))}}function Nu(e,r,u,i,f,o,a,c){var l=2&r;if(!l&&"function"!=typeof e)throw new wn(n);var s=i?i.length:0;if(s||(r&=-97,i=f=undefined),a=undefined===a?a:oe(uo(a),0),c=undefined===c?c:uo(c),s-=f?f.length:0,64&r){var d=i,h=f;i=f=undefined}var p=l?undefined:Gu(e),v=[e,r,u,i,f,d,h,o,a,c];if(p&&function(n,e){var r=n[1],u=e[1],i=r|u,f=i<131,o=128==u&&8==r||128==u&&256==r&&n[7].length<=e[8]||384==u&&e[7].length<=e[8]&&8==r;if(!f&&!o)return n;1&u&&(n[2]=e[2],i|=1&r?0:4);var a=e[3];if(a){var c=n[3];n[3]=c?_u(c,a,e[4]):a,n[4]=c?Dt(n[3],t):e[4]}(a=e[5])&&(c=n[5],n[5]=c?gu(c,a,e[6]):a,n[6]=c?Dt(n[5],t):e[6]);(a=e[7])&&(n[7]=a);128&u&&(n[8]=null==n[8]?e[8]:ae(n[8],e[8]));null==n[9]&&(n[9]=e[9]);n[0]=e[0],n[1]=i}(v,p),e=v[0],r=v[1],u=v[2],i=v[3],f=v[4],!(c=v[9]=undefined===v[9]?l?0:e.length:oe(v[9]-s,0))&&24&r&&(r&=-25),r&&1!=r)_=8==r||16==r?function(n,t,e){var r=ku(n);return function u(){for(var i=arguments.length,f=dn(i),o=i,a=Ju(u);o--;)f[o]=arguments[o];var c=i<3&&f[0]!==a&&f[i-1]!==a?[]:Dt(f,a);return(i-=c.length)<e?Bu(n,t,Eu,u.placeholder,void 0,f,c,void 0,void 0,e-i):et(this&&this!==qn&&this instanceof u?r:n,this,f)}}(e,r,c):32!=r&&33!=r||f.length?Eu.apply(undefined,v):function(n,t,e,r){var u=1&t,i=ku(n);return function t(){for(var f=-1,o=arguments.length,a=-1,c=r.length,l=dn(c+o),s=this&&this!==qn&&this instanceof t?i:n;++a<c;)l[a]=r[a];for(;o--;)l[a++]=arguments[++f];return et(s,u?e:this,l)}}(e,r,u,i);else var _=function(n,t,e){var r=1&t,u=ku(n);return function t(){return(this&&this!==qn&&this instanceof t?u:n).apply(r?e:this,arguments)}}(e,r,u);return xi((p?Pr:bi)(_,v),e,r)}function Mu(n,t,e,r){return undefined===n||zf(n,jn[e])&&!kn.call(r,e)?t:n}function Fu(n,t,e,r,u,i){return qf(n)&&qf(t)&&(i.set(t,n),Sr(n,t,undefined,Fu,i),i.delete(t)),n}function Pu(n){return Gf(n)?undefined:n}function qu(n,t,e,r,u,i){var f=1&e,o=n.length,a=t.length;if(o!=a&&!(f&&a>o))return!1;var c=i.get(n);if(c&&i.get(t))return c==t;var l=-1,s=!0,d=2&e?new Te:undefined;for(i.set(n,t),i.set(t,n);++l<o;){var h=n[l],p=t[l];if(r)var v=f?r(p,h,l,t,n,i):r(h,p,l,n,t,i);if(undefined!==v){if(v)continue;s=!1;break}if(d){if(!pt(t,(function(n,t){if(!Et(d,t)&&(h===n||u(h,n,e,r,i)))return d.push(t)}))){s=!1;break}}else if(h!==p&&!u(h,p,e,r,i)){s=!1;break}}return i.delete(n),i.delete(t),s}function Zu(n){return mi(vi(n,undefined,Wi),n+"")}function Ku(n){return hr(n,xo,ti)}function Vu(n){return hr(n,jo,ei)}var Gu=be?function(n){return be.get(n)}:Xo;function Hu(n){for(var t=n.name+"",e=we[t],r=kn.call(we,t)?e.length:0;r--;){var u=e[r],i=u.func;if(null==i||i==n)return u.name}return t}function Ju(n){return(kn.call(Ee,"placeholder")?Ee:n).placeholder}function Yu(){var n=Ee.iteratee||Ho;return n=n===Ho?Ar:n,arguments.length?n(arguments[0],arguments[1]):n}function Qu(n,t){var e,r,u=n.__data__;return("string"==(r=typeof(e=t))||"number"==r||"symbol"==r||"boolean"==r?"__proto__"!==e:null===e)?u["string"==typeof t?"string":"hash"]:u.map}function Xu(n){for(var t=xo(n),e=t.length;e--;){var r=t[e],u=n[r];t[e]=[r,u,hi(u)]}return t}function ni(n,t){var e=function(n,t){return null==n?void 0:n[t]}(n,t);return jr(e)?e:undefined}var ti=ee?function(n){return null==n?[]:(n=gn(n),ot(ee(n),(function(t){return jt.call(n,t)})))}:fa,ei=ee?function(n){for(var t=[];n;)st(t,ti(n)),n=Hn(n);return t}:fa,ri=pr;function ui(n,t,e){for(var r=-1,u=(t=au(t,n)).length,i=!1;++r<u;){var f=ki(t[r]);if(!(i=null!=n&&e(n,f)))break;n=n[f]}return i||++r!=u?i:!!(u=null==n?0:n.length)&&Pf(u)&&oi(f,u)&&(Wf(n)||Cf(n))}function ii(n){return"function"!=typeof n.constructor||di(n)?{}:ze(Hn(n))}function fi(n){return Wf(n)||Cf(n)||!!(Vt&&n&&n[Vt])}function oi(n,t){var e=typeof n;return!!(t=null==t?9007199254740991:t)&&("number"==e||"symbol"!=e&&un.test(n))&&n>-1&&n%1==0&&n<t}function ai(n,t,e){if(!qf(e))return!1;var r=typeof t;return!!("number"==r?Bf(e)&&oi(t,e.length):"string"==r&&t in e)&&zf(e[t],n)}function ci(n,t){if(Wf(n))return!1;var e=typeof n;return!("number"!=e&&"symbol"!=e&&"boolean"!=e&&null!=n&&!Qf(n))||(N.test(n)||!D.test(n)||null!=t&&n in gn(t))}function li(n){var t=Hu(n),e=Ee[t];if("function"!=typeof e||!(t in Ce.prototype))return!1;if(n===e)return!0;var r=Gu(e);return!!r&&n===r[0]}(he&&ri(new he(new ArrayBuffer(1)))!=b||pe&&ri(new pe)!=l||ve&&"[object Promise]"!=ri(ve.resolve())||_e&&ri(new _e)!=p||ge&&ri(new ge)!=g)&&(ri=function(n){var t=pr(n),e=t==d?n.constructor:undefined,r=e?Oi(e):"";if(r)switch(r){case me:return b;case xe:return l;case je:return"[object Promise]";case Ae:return p;case Ie:return g}return t});var si=An?Mf:oa;function di(n){var t=n&&n.constructor;return n===("function"==typeof t&&t.prototype||jn)}function hi(n){return n==n&&!qf(n)}function pi(n,t){return function(e){return null!=e&&(e[n]===t&&(undefined!==t||n in gn(e)))}}function vi(n,t,e){return t=oe(undefined===t?n.length-1:t,0),function(){for(var r=arguments,u=-1,i=oe(r.length-t,0),f=dn(i);++u<i;)f[u]=r[t+u];u=-1;for(var o=dn(t+1);++u<t;)o[u]=r[u];return o[t]=e(f),et(n,this,o)}}function _i(n,t){return t.length<2?n:dr(n,Kr(t,0,-1))}function gi(n,t){for(var e=n.length,r=ae(t.length,e),u=yu(n);r--;){var i=t[r];n[r]=oi(i,e)?u[i]:undefined}return n}function yi(n,t){if(("constructor"!==t||"function"!=typeof n[t])&&"__proto__"!=t)return n[t]}var bi=ji(Pr),wi=Xt||function(n,t){return qn.setTimeout(n,t)},mi=ji(qr);function xi(n,t,r){var u=t+"";return mi(n,function(n,t){var e=t.length;if(!e)return n;var r=e-1;return t[r]=(e>1?"& ":"")+t[r],t=t.join(e>2?", ":" "),n.replace(V,"{\n/* [wrapped with "+t+"] */\n")}(u,function(n,t){return ut(e,(function(e){var r="_."+e[0];t&e[1]&&!at(n,r)&&n.push(r)})),n.sort()}(function(n){var t=n.match(G);return t?t[1].split(H):[]}(u),r)))}function ji(n){var t=0,e=0;return function(){var r=ce(),u=16-(r-e);if(e=r,u>0){if(++t>=800)return arguments[0]}else t=0;return n.apply(undefined,arguments)}}function Ai(n,t){var e=-1,r=n.length,u=r-1;for(t=undefined===t?r:t;++e<t;){var i=Tr(e,u),f=n[i];n[i]=n[e],n[e]=f}return n.length=t,n}var Ii=function(n){var t=Af(n,(function(n){return 500===e.size&&e.clear(),n})),e=t.cache;return t}((function(n){var t=[];return 46===n.charCodeAt(0)&&t.push(""),n.replace(M,(function(n,e,r,u){t.push(r?u.replace(Y,"$1"):e||n)})),t}));function ki(n){if("string"==typeof n||Qf(n))return n;var t=n+"";return"0"==t&&1/n==-Infinity?"-0":t}function Oi(n){if(null!=n){try{return In.call(n)}catch(n){}try{return n+""}catch(n){}}return""}function Ri(n){if(n instanceof Ce)return n.clone();var t=new Le(n.__wrapped__,n.__chain__);return t.__actions__=yu(n.__actions__),t.__index__=n.__index__,t.__values__=n.__values__,t}var Ei=Dr((function(n,t){return Tf(n)?nr(n,fr(t,1,Tf,!0)):[]})),zi=Dr((function(n,t){var e=Di(t);return Tf(e)&&(e=undefined),Tf(n)?nr(n,fr(t,1,Tf,!0),Yu(e,2)):[]})),Si=Dr((function(n,t){var e=Di(t);return Tf(e)&&(e=undefined),Tf(n)?nr(n,fr(t,1,Tf,!0),undefined,e):[]}));function Li(n,t,e){var r=null==n?0:n.length;if(!r)return-1;var u=null==e?0:uo(e);return u<0&&(u=oe(r+u,0)),gt(n,Yu(t,3),u)}function Ci(n,t,e){var r=null==n?0:n.length;if(!r)return-1;var u=r-1;return undefined!==e&&(u=uo(e),u=e<0?oe(r+u,0):ae(u,r-1)),gt(n,Yu(t,3),u,!0)}function Wi(n){return(null==n?0:n.length)?fr(n,1):[]}function Ui(n){return n&&n.length?n[0]:undefined}var Bi=Dr((function(n){var t=lt(n,fu);return t.length&&t[0]===n[0]?yr(t):[]})),Ti=Dr((function(n){var t=Di(n),e=lt(n,fu);return t===Di(e)?t=undefined:e.pop(),e.length&&e[0]===n[0]?yr(e,Yu(t,2)):[]})),$i=Dr((function(n){var t=Di(n),e=lt(n,fu);return(t="function"==typeof t?t:undefined)&&e.pop(),e.length&&e[0]===n[0]?yr(e,undefined,t):[]}));function Di(n){var t=null==n?0:n.length;return t?n[t-1]:undefined}var Ni=Dr(Mi);function Mi(n,t){return n&&n.length&&t&&t.length?Ur(n,t):n}var Fi=Zu((function(n,t){var e=null==n?0:n.length,r=He(n,t);return Br(n,lt(t,(function(n){return oi(n,e)?+n:n})).sort(vu)),r}));function Pi(n){return null==n?n:de.call(n)}var qi=Dr((function(n){return Xr(fr(n,1,Tf,!0))})),Zi=Dr((function(n){var t=Di(n);return Tf(t)&&(t=undefined),Xr(fr(n,1,Tf,!0),Yu(t,2))})),Ki=Dr((function(n){var t=Di(n);return t="function"==typeof t?t:undefined,Xr(fr(n,1,Tf,!0),undefined,t)}));function Vi(n){if(!n||!n.length)return[];var t=0;return n=ot(n,(function(n){if(Tf(n))return t=oe(n.length,t),!0})),kt(t,(function(t){return lt(n,xt(t))}))}function Gi(n,t){if(!n||!n.length)return[];var e=Vi(n);return null==t?e:lt(e,(function(n){return et(t,undefined,n)}))}var Hi=Dr((function(n,t){return Tf(n)?nr(n,t):[]})),Ji=Dr((function(n){return uu(ot(n,Tf))})),Yi=Dr((function(n){var t=Di(n);return Tf(t)&&(t=undefined),uu(ot(n,Tf),Yu(t,2))})),Qi=Dr((function(n){var t=Di(n);return t="function"==typeof t?t:undefined,uu(ot(n,Tf),undefined,t)})),Xi=Dr(Vi);var nf=Dr((function(n){var t=n.length,e=t>1?n[t-1]:undefined;return e="function"==typeof e?(n.pop(),e):undefined,Gi(n,e)}));function tf(n){var t=Ee(n);return t.__chain__=!0,t}function ef(n,t){return t(n)}var rf=Zu((function(n){var t=n.length,e=t?n[0]:0,r=this.__wrapped__,u=function(t){return He(t,n)};return!(t>1||this.__actions__.length)&&r instanceof Ce&&oi(e)?((r=r.slice(e,+e+(t?1:0))).__actions__.push({func:ef,args:[u],thisArg:undefined}),new Le(r,this.__chain__).thru((function(n){return t&&!n.length&&n.push(undefined),n}))):this.thru(u)}));var uf=wu((function(n,t,e){kn.call(n,e)?++n[e]:Ge(n,e,1)}));var ff=Ou(Li),of=Ou(Ci);function af(n,t){return(Wf(n)?ut:tr)(n,Yu(t,3))}function cf(n,t){return(Wf(n)?it:er)(n,Yu(t,3))}var lf=wu((function(n,t,e){kn.call(n,e)?n[e].push(t):Ge(n,e,[t])}));var sf=Dr((function(n,t,e){var r=-1,u="function"==typeof t,i=Bf(n)?dn(n.length):[];return tr(n,(function(n){i[++r]=u?et(t,n,e):br(n,t,e)})),i})),df=wu((function(n,t,e){Ge(n,e,t)}));function hf(n,t){return(Wf(n)?lt:Rr)(n,Yu(t,3))}var pf=wu((function(n,t,e){n[e?0:1].push(t)}),(function(){return[[],[]]}));var vf=Dr((function(n,t){if(null==n)return[];var e=t.length;return e>1&&ai(n,t[0],t[1])?t=[]:e>2&&ai(t[0],t[1],t[2])&&(t=[t[0]]),Cr(n,fr(t,1),[])})),_f=Qt||function(){return qn.Date.now()};function gf(n,t,e){return t=e?undefined:t,Nu(n,128,undefined,undefined,undefined,undefined,t=n&&null==t?n.length:t)}function yf(t,e){var r;if("function"!=typeof e)throw new wn(n);return t=uo(t),function(){return--t>0&&(r=e.apply(this,arguments)),t<=1&&(e=undefined),r}}var bf=Dr((function(n,t,e){var r=1;if(e.length){var u=Dt(e,Ju(bf));r|=32}return Nu(n,r,t,e,u)})),wf=Dr((function(n,t,e){var r=3;if(e.length){var u=Dt(e,Ju(wf));r|=32}return Nu(t,r,n,e,u)}));function mf(t,e,r){var u,i,f,o,a,c,l=0,s=!1,d=!1,h=!0;if("function"!=typeof t)throw new wn(n);function p(n){var e=u,r=i;return u=i=undefined,l=n,o=t.apply(r,e)}function v(n){return l=n,a=wi(g,e),s?p(n):o}function _(n){var t=n-c;return undefined===c||t>=e||t<0||d&&n-l>=f}function g(){var n=_f();if(_(n))return y(n);a=wi(g,function(n){var t=e-(n-c);return d?ae(t,f-(n-l)):t}(n))}function y(n){return a=undefined,h&&u?p(n):(u=i=undefined,o)}function b(){var n=_f(),t=_(n);if(u=arguments,i=this,c=n,t){if(undefined===a)return v(c);if(d)return su(a),a=wi(g,e),p(c)}return undefined===a&&(a=wi(g,e)),o}return e=fo(e)||0,qf(r)&&(s=!!r.leading,f=(d="maxWait"in r)?oe(fo(r.maxWait)||0,e):f,h="trailing"in r?!!r.trailing:h),b.cancel=function(){undefined!==a&&su(a),l=0,u=c=i=a=undefined},b.flush=function(){return undefined===a?o:y(_f())},b}var xf=Dr((function(n,t){return Xe(n,1,t)})),jf=Dr((function(n,t,e){return Xe(n,fo(t)||0,e)}));function Af(t,e){if("function"!=typeof t||null!=e&&"function"!=typeof e)throw new wn(n);var r=function(){var n=arguments,u=e?e.apply(this,n):n[0],i=r.cache;if(i.has(u))return i.get(u);var f=t.apply(this,n);return r.cache=i.set(u,f)||i,f};return r.cache=new(Af.Cache||Be),r}function If(t){if("function"!=typeof t)throw new wn(n);return function(){var n=arguments;switch(n.length){case 0:return!t.call(this);case 1:return!t.call(this,n[0]);case 2:return!t.call(this,n[0],n[1]);case 3:return!t.call(this,n[0],n[1],n[2])}return!t.apply(this,n)}}Af.Cache=Be;var kf=cu((function(n,t){var e=(t=1==t.length&&Wf(t[0])?lt(t[0],Ot(Yu())):lt(fr(t,1),Ot(Yu()))).length;return Dr((function(r){for(var u=-1,i=ae(r.length,e);++u<i;)r[u]=t[u].call(this,r[u]);return et(n,this,r)}))})),Of=Dr((function(n,t){return Nu(n,32,undefined,t,Dt(t,Ju(Of)))})),Rf=Dr((function(n,t){return Nu(n,64,undefined,t,Dt(t,Ju(Rf)))})),Ef=Zu((function(n,t){return Nu(n,256,undefined,undefined,undefined,t)}));function zf(n,t){return n===t||n!=n&&t!=t}var Sf=Uu(vr),Lf=Uu((function(n,t){return n>=t})),Cf=wr(function(){return arguments}())?wr:function(n){return Zf(n)&&kn.call(n,"callee")&&!jt.call(n,"callee")},Wf=dn.isArray,Uf=Jn?Ot(Jn):function(n){return Zf(n)&&pr(n)==y};function Bf(n){return null!=n&&Pf(n.length)&&!Mf(n)}function Tf(n){return Zf(n)&&Bf(n)}var $f=re||oa,Df=Yn?Ot(Yn):function(n){return Zf(n)&&pr(n)==f};function Nf(n){if(!Zf(n))return!1;var t=pr(n);return t==o||"[object DOMException]"==t||"string"==typeof n.message&&"string"==typeof n.name&&!Gf(n)}function Mf(n){if(!qf(n))return!1;var t=pr(n);return t==a||t==c||"[object AsyncFunction]"==t||"[object Proxy]"==t}function Ff(n){return"number"==typeof n&&n==uo(n)}function Pf(n){return"number"==typeof n&&n>-1&&n%1==0&&n<=9007199254740991}function qf(n){var t=typeof n;return null!=n&&("object"==t||"function"==t)}function Zf(n){return null!=n&&"object"==typeof n}var Kf=Qn?Ot(Qn):function(n){return Zf(n)&&ri(n)==l};function Vf(n){return"number"==typeof n||Zf(n)&&pr(n)==s}function Gf(n){if(!Zf(n)||pr(n)!=d)return!1;var t=Hn(n);if(null===t)return!0;var e=kn.call(t,"constructor")&&t.constructor;return"function"==typeof e&&e instanceof e&&In.call(e)==Cn}var Hf=Xn?Ot(Xn):function(n){return Zf(n)&&pr(n)==h};var Jf=nt?Ot(nt):function(n){return Zf(n)&&ri(n)==p};function Yf(n){return"string"==typeof n||!Wf(n)&&Zf(n)&&pr(n)==v}function Qf(n){return"symbol"==typeof n||Zf(n)&&pr(n)==_}var Xf=tt?Ot(tt):function(n){return Zf(n)&&Pf(n.length)&&!!Tn[pr(n)]};var no=Uu(Or),to=Uu((function(n,t){return n<=t}));function eo(n){if(!n)return[];if(Bf(n))return Yf(n)?Pt(n):yu(n);if(Gt&&n[Gt])return function(n){for(var t,e=[];!(t=n.next()).done;)e.push(t.value);return e}(n[Gt]());var t=ri(n);return(t==l?Tt:t==p?Nt:So)(n)}function ro(n){return n?Infinity===(n=fo(n))||-Infinity===n?17976931348623157e292*(n<0?-1:1):n==n?n:0:0===n?n:0}function uo(n){var t=ro(n),e=t%1;return t==t?e?t-e:t:0}function io(n){return n?Je(uo(n),0,4294967295):0}function fo(n){if("number"==typeof n)return n;if(Qf(n))return NaN;if(qf(n)){var t="function"==typeof n.valueOf?n.valueOf():n;n=qf(t)?t+"":t}if("string"!=typeof n)return 0===n?n:+n;n=n.replace(q,"");var e=tn.test(n);return e||rn.test(n)?Mn(n.slice(2),e?2:8):nn.test(n)?NaN:+n}function oo(n){return bu(n,jo(n))}function ao(n){return null==n?"":Qr(n)}var co=mu((function(n,t){if(di(t)||Bf(t))bu(t,xo(t),n);else for(var e in t)kn.call(t,e)&&qe(n,e,t[e])})),lo=mu((function(n,t){bu(t,jo(t),n)})),so=mu((function(n,t,e,r){bu(t,jo(t),n,r)})),ho=mu((function(n,t,e,r){bu(t,xo(t),n,r)})),po=Zu(He);var vo=Dr((function(n,t){n=gn(n);var e=-1,r=t.length,u=r>2?t[2]:undefined;for(u&&ai(t[0],t[1],u)&&(r=1);++e<r;)for(var i=t[e],f=jo(i),o=-1,a=f.length;++o<a;){var c=f[o],l=n[c];(undefined===l||zf(l,jn[c])&&!kn.call(n,c))&&(n[c]=i[c])}return n})),_o=Dr((function(n){return n.push(undefined,Fu),et(Io,undefined,n)}));function go(n,t,e){var r=null==n?undefined:dr(n,t);return undefined===r?e:r}function yo(n,t){return null!=n&&ui(n,t,gr)}var bo=zu((function(n,t,e){null!=t&&"function"!=typeof t.toString&&(t=Sn.call(t)),n[t]=e}),Zo(Go)),wo=zu((function(n,t,e){null!=t&&"function"!=typeof t.toString&&(t=Sn.call(t)),kn.call(n,t)?n[t].push(e):n[t]=[e]}),Yu),mo=Dr(br);function xo(n){return Bf(n)?De(n):Ir(n)}function jo(n){return Bf(n)?De(n,!0):kr(n)}var Ao=mu((function(n,t,e){Sr(n,t,e)})),Io=mu((function(n,t,e,r){Sr(n,t,e,r)})),ko=Zu((function(n,t){var e={};if(null==n)return e;var r=!1;t=lt(t,(function(t){return t=au(t,n),r||(r=t.length>1),t})),bu(n,Vu(n),e),r&&(e=Ye(e,7,Pu));for(var u=t.length;u--;)nu(e,t[u]);return e}));var Oo=Zu((function(n,t){return null==n?{}:function(n,t){return Wr(n,t,(function(t,e){return yo(n,e)}))}(n,t)}));function Ro(n,t){if(null==n)return{};var e=lt(Vu(n),(function(n){return[n]}));return t=Yu(t),Wr(n,e,(function(n,e){return t(n,e[0])}))}var Eo=Du(xo),zo=Du(jo);function So(n){return null==n?[]:Rt(n,xo(n))}var Lo=Iu((function(n,t,e){return t=t.toLowerCase(),n+(e?Co(t):t)}));function Co(n){return Mo(ao(n).toLowerCase())}function Wo(n){return(n=ao(n))&&n.replace(fn,Ct).replace(zn,"")}var Uo=Iu((function(n,t,e){return n+(e?"-":"")+t.toLowerCase()})),Bo=Iu((function(n,t,e){return n+(e?" ":"")+t.toLowerCase()})),To=Au("toLowerCase");var $o=Iu((function(n,t,e){return n+(e?"_":"")+t.toLowerCase()}));var Do=Iu((function(n,t,e){return n+(e?" ":"")+Mo(t)}));var No=Iu((function(n,t,e){return n+(e?" ":"")+t.toUpperCase()})),Mo=Au("toUpperCase");function Fo(n,t,e){return n=ao(n),undefined===(t=e?undefined:t)?function(n){return Wn.test(n)}(n)?function(n){return n.match(Ln)||[]}(n):function(n){return n.match(J)||[]}(n):n.match(t)||[]}var Po=Dr((function(n,t){try{return et(n,undefined,t)}catch(n){return Nf(n)?n:new pn(n)}})),qo=Zu((function(n,t){return ut(t,(function(t){t=ki(t),Ge(n,t,bf(n[t],n))})),n}));function Zo(n){return function(){return n}}var Ko=Ru(),Vo=Ru(!0);function Go(n){return n}function Ho(n){return Ar("function"==typeof n?n:Ye(n,1))}var Jo=Dr((function(n,t){return function(e){return br(e,n,t)}})),Yo=Dr((function(n,t){return function(e){return br(n,e,t)}}));function Qo(n,t,e){var r=xo(t),u=sr(t,r);null!=e||qf(t)&&(u.length||!r.length)||(e=t,t=n,n=this,u=sr(t,xo(t)));var i=!(qf(e)&&"chain"in e&&!e.chain),f=Mf(n);return ut(u,(function(e){var r=t[e];n[e]=r,f&&(n.prototype[e]=function(){var t=this.__chain__;if(i||t){var e=n(this.__wrapped__),u=e.__actions__=yu(this.__actions__);return u.push({func:r,args:arguments,thisArg:n}),e.__chain__=t,e}return r.apply(n,st([this.value()],arguments))})})),n}function Xo(){}var na=Lu(lt),ta=Lu(ft),ea=Lu(pt);function ra(n){return ci(n)?xt(ki(n)):function(n){return function(t){return dr(t,n)}}(n)}var ua=Wu(),ia=Wu(!0);function fa(){return[]}function oa(){return!1}var aa=Su((function(n,t){return n+t}),0),ca=Tu("ceil"),la=Su((function(n,t){return n/t}),1),sa=Tu("floor");var da,ha=Su((function(n,t){return n*t}),1),pa=Tu("round"),va=Su((function(n,t){return n-t}),0);return Ee.after=function(t,e){if("function"!=typeof e)throw new wn(n);return t=uo(t),function(){if(--t<1)return e.apply(this,arguments)}},Ee.ary=gf,Ee.assign=co,Ee.assignIn=lo,Ee.assignInWith=so,Ee.assignWith=ho,Ee.at=po,Ee.before=yf,Ee.bind=bf,Ee.bindAll=qo,Ee.bindKey=wf,Ee.castArray=function(){if(!arguments.length)return[];var n=arguments[0];return Wf(n)?n:[n]},Ee.chain=tf,Ee.chunk=function(n,t,e){t=(e?ai(n,t,e):undefined===t)?1:oe(uo(t),0);var r=null==n?0:n.length;if(!r||t<1)return[];for(var u=0,i=0,f=dn(ne(r/t));u<r;)f[i++]=Kr(n,u,u+=t);return f},Ee.compact=function(n){for(var t=-1,e=null==n?0:n.length,r=0,u=[];++t<e;){var i=n[t];i&&(u[r++]=i)}return u},Ee.concat=function(){var n=arguments.length;if(!n)return[];for(var t=dn(n-1),e=arguments[0],r=n;r--;)t[r-1]=arguments[r];return st(Wf(e)?yu(e):[e],fr(t,1))},Ee.cond=function(t){var e=null==t?0:t.length,r=Yu();return t=e?lt(t,(function(t){if("function"!=typeof t[1])throw new wn(n);return[r(t[0]),t[1]]})):[],Dr((function(n){for(var r=-1;++r<e;){var u=t[r];if(et(u[0],this,n))return et(u[1],this,n)}}))},Ee.conforms=function(n){return function(n){var t=xo(n);return function(e){return Qe(e,n,t)}}(Ye(n,1))},Ee.constant=Zo,Ee.countBy=uf,Ee.create=function(n,t){var e=ze(n);return null==t?e:Ve(e,t)},Ee.curry=function n(t,e,r){var u=Nu(t,8,undefined,undefined,undefined,undefined,undefined,e=r?undefined:e);return u.placeholder=n.placeholder,u},Ee.curryRight=function n(t,e,r){var u=Nu(t,16,undefined,undefined,undefined,undefined,undefined,e=r?undefined:e);return u.placeholder=n.placeholder,u},Ee.debounce=mf,Ee.defaults=vo,Ee.defaultsDeep=_o,Ee.defer=xf,Ee.delay=jf,Ee.difference=Ei,Ee.differenceBy=zi,Ee.differenceWith=Si,Ee.drop=function(n,t,e){var r=null==n?0:n.length;return r?Kr(n,(t=e||undefined===t?1:uo(t))<0?0:t,r):[]},Ee.dropRight=function(n,t,e){var r=null==n?0:n.length;return r?Kr(n,0,(t=r-(t=e||undefined===t?1:uo(t)))<0?0:t):[]},Ee.dropRightWhile=function(n,t){return n&&n.length?eu(n,Yu(t,3),!0,!0):[]},Ee.dropWhile=function(n,t){return n&&n.length?eu(n,Yu(t,3),!0):[]},Ee.fill=function(n,t,e,r){var u=null==n?0:n.length;return u?(e&&"number"!=typeof e&&ai(n,t,e)&&(e=0,r=u),function(n,t,e,r){var u=n.length;for((e=uo(e))<0&&(e=-e>u?0:u+e),(r=void 0===r||r>u?u:uo(r))<0&&(r+=u),r=e>r?0:io(r);e<r;)n[e++]=t;return n}(n,t,e,r)):[]},Ee.filter=function(n,t){return(Wf(n)?ot:ir)(n,Yu(t,3))},Ee.flatMap=function(n,t){return fr(hf(n,t),1)},Ee.flatMapDeep=function(n,t){return fr(hf(n,t),Infinity)},Ee.flatMapDepth=function(n,t,e){return e=undefined===e?1:uo(e),fr(hf(n,t),e)},Ee.flatten=Wi,Ee.flattenDeep=function(n){return(null==n?0:n.length)?fr(n,Infinity):[]},Ee.flattenDepth=function(n,t){return(null==n?0:n.length)?fr(n,t=undefined===t?1:uo(t)):[]},Ee.flip=function(n){return Nu(n,512)},Ee.flow=Ko,Ee.flowRight=Vo,Ee.fromPairs=function(n){for(var t=-1,e=null==n?0:n.length,r={};++t<e;){var u=n[t];r[u[0]]=u[1]}return r},Ee.functions=function(n){return null==n?[]:sr(n,xo(n))},Ee.functionsIn=function(n){return null==n?[]:sr(n,jo(n))},Ee.groupBy=lf,Ee.initial=function(n){return(null==n?0:n.length)?Kr(n,0,-1):[]},Ee.intersection=Bi,Ee.intersectionBy=Ti,Ee.intersectionWith=$i,Ee.invert=bo,Ee.invertBy=wo,Ee.invokeMap=sf,Ee.iteratee=Ho,Ee.keyBy=df,Ee.keys=xo,Ee.keysIn=jo,Ee.map=hf,Ee.mapKeys=function(n,t){var e={};return t=Yu(t,3),cr(n,(function(n,r,u){Ge(e,t(n,r,u),n)})),e},Ee.mapValues=function(n,t){var e={};return t=Yu(t,3),cr(n,(function(n,r,u){Ge(e,r,t(n,r,u))})),e},Ee.matches=function(n){return Er(Ye(n,1))},Ee.matchesProperty=function(n,t){return zr(n,Ye(t,1))},Ee.memoize=Af,Ee.merge=Ao,Ee.mergeWith=Io,Ee.method=Jo,Ee.methodOf=Yo,Ee.mixin=Qo,Ee.negate=If,Ee.nthArg=function(n){return n=uo(n),Dr((function(t){return Lr(t,n)}))},Ee.omit=ko,Ee.omitBy=function(n,t){return Ro(n,If(Yu(t)))},Ee.once=function(n){return yf(2,n)},Ee.orderBy=function(n,t,e,r){return null==n?[]:(Wf(t)||(t=null==t?[]:[t]),Wf(e=r?undefined:e)||(e=null==e?[]:[e]),Cr(n,t,e))},Ee.over=na,Ee.overArgs=kf,Ee.overEvery=ta,Ee.overSome=ea,Ee.partial=Of,Ee.partialRight=Rf,Ee.partition=pf,Ee.pick=Oo,Ee.pickBy=Ro,Ee.property=ra,Ee.propertyOf=function(n){return function(t){return null==n?undefined:dr(n,t)}},Ee.pull=Ni,Ee.pullAll=Mi,Ee.pullAllBy=function(n,t,e){return n&&n.length&&t&&t.length?Ur(n,t,Yu(e,2)):n},Ee.pullAllWith=function(n,t,e){return n&&n.length&&t&&t.length?Ur(n,t,undefined,e):n},Ee.pullAt=Fi,Ee.range=ua,Ee.rangeRight=ia,Ee.rearg=Ef,Ee.reject=function(n,t){return(Wf(n)?ot:ir)(n,If(Yu(t,3)))},Ee.remove=function(n,t){var e=[];if(!n||!n.length)return e;var r=-1,u=[],i=n.length;for(t=Yu(t,3);++r<i;){var f=n[r];t(f,r,n)&&(e.push(f),u.push(r))}return Br(n,u),e},Ee.rest=function(t,e){if("function"!=typeof t)throw new wn(n);return Dr(t,e=undefined===e?e:uo(e))},Ee.reverse=Pi,Ee.sampleSize=function(n,t,e){return t=(e?ai(n,t,e):undefined===t)?1:uo(t),(Wf(n)?Me:Mr)(n,t)},Ee.set=function(n,t,e){return null==n?n:Fr(n,t,e)},Ee.setWith=function(n,t,e,r){return r="function"==typeof r?r:undefined,null==n?n:Fr(n,t,e,r)},Ee.shuffle=function(n){return(Wf(n)?Fe:Zr)(n)},Ee.slice=function(n,t,e){var r=null==n?0:n.length;return r?(e&&"number"!=typeof e&&ai(n,t,e)?(t=0,e=r):(t=null==t?0:uo(t),e=undefined===e?r:uo(e)),Kr(n,t,e)):[]},Ee.sortBy=vf,Ee.sortedUniq=function(n){return n&&n.length?Jr(n):[]},Ee.sortedUniqBy=function(n,t){return n&&n.length?Jr(n,Yu(t,2)):[]},Ee.split=function(n,t,e){return e&&"number"!=typeof e&&ai(n,t,e)&&(t=e=undefined),(e=undefined===e?4294967295:e>>>0)?(n=ao(n))&&("string"==typeof t||null!=t&&!Hf(t))&&!(t=Qr(t))&&Bt(n)?lu(Pt(n),0,e):n.split(t,e):[]},Ee.spread=function(t,e){if("function"!=typeof t)throw new wn(n);return e=null==e?0:oe(uo(e),0),Dr((function(n){var r=n[e],u=lu(n,0,e);return r&&st(u,r),et(t,this,u)}))},Ee.tail=function(n){var t=null==n?0:n.length;return t?Kr(n,1,t):[]},Ee.take=function(n,t,e){return n&&n.length?Kr(n,0,(t=e||undefined===t?1:uo(t))<0?0:t):[]},Ee.takeRight=function(n,t,e){var r=null==n?0:n.length;return r?Kr(n,(t=r-(t=e||undefined===t?1:uo(t)))<0?0:t,r):[]},Ee.takeRightWhile=function(n,t){return n&&n.length?eu(n,Yu(t,3),!1,!0):[]},Ee.takeWhile=function(n,t){return n&&n.length?eu(n,Yu(t,3)):[]},Ee.tap=function(n,t){return t(n),n},Ee.throttle=function(t,e,r){var u=!0,i=!0;if("function"!=typeof t)throw new wn(n);return qf(r)&&(u="leading"in r?!!r.leading:u,i="trailing"in r?!!r.trailing:i),mf(t,e,{leading:u,maxWait:e,trailing:i})},Ee.thru=ef,Ee.toArray=eo,Ee.toPairs=Eo,Ee.toPairsIn=zo,Ee.toPath=function(n){return Wf(n)?lt(n,ki):Qf(n)?[n]:yu(Ii(ao(n)))},Ee.toPlainObject=oo,Ee.transform=function(n,t,e){var r=Wf(n),u=r||$f(n)||Xf(n);if(t=Yu(t,4),null==e){var i=n&&n.constructor;e=u?r?new i:[]:qf(n)&&Mf(i)?ze(Hn(n)):{}}return(u?ut:cr)(n,(function(n,r,u){return t(e,n,r,u)})),e},Ee.unary=function(n){return gf(n,1)},Ee.union=qi,Ee.unionBy=Zi,Ee.unionWith=Ki,Ee.uniq=function(n){return n&&n.length?Xr(n):[]},Ee.uniqBy=function(n,t){return n&&n.length?Xr(n,Yu(t,2)):[]},Ee.uniqWith=function(n,t){return t="function"==typeof t?t:undefined,n&&n.length?Xr(n,undefined,t):[]},Ee.unset=function(n,t){return null==n||nu(n,t)},Ee.unzip=Vi,Ee.unzipWith=Gi,Ee.update=function(n,t,e){return null==n?n:tu(n,t,ou(e))},Ee.updateWith=function(n,t,e,r){return r="function"==typeof r?r:undefined,null==n?n:tu(n,t,ou(e),r)},Ee.values=So,Ee.valuesIn=function(n){return null==n?[]:Rt(n,jo(n))},Ee.without=Hi,Ee.words=Fo,Ee.wrap=function(n,t){return Of(ou(t),n)},Ee.xor=Ji,Ee.xorBy=Yi,Ee.xorWith=Qi,Ee.zip=Xi,Ee.zipObject=function(n,t){return iu(n||[],t||[],qe)},Ee.zipObjectDeep=function(n,t){return iu(n||[],t||[],Fr)},Ee.zipWith=nf,Ee.entries=Eo,Ee.entriesIn=zo,Ee.extend=lo,Ee.extendWith=so,Qo(Ee,Ee),Ee.add=aa,Ee.attempt=Po,Ee.camelCase=Lo,Ee.capitalize=Co,Ee.ceil=ca,Ee.clamp=function(n,t,e){return undefined===e&&(e=t,t=undefined),undefined!==e&&(e=(e=fo(e))==e?e:0),undefined!==t&&(t=(t=fo(t))==t?t:0),Je(fo(n),t,e)},Ee.clone=function(n){return Ye(n,4)},Ee.cloneDeep=function(n){return Ye(n,5)},Ee.cloneDeepWith=function(n,t){return Ye(n,5,t="function"==typeof t?t:undefined)},Ee.cloneWith=function(n,t){return Ye(n,4,t="function"==typeof t?t:undefined)},Ee.conformsTo=function(n,t){return null==t||Qe(n,t,xo(t))},Ee.deburr=Wo,Ee.defaultTo=function(n,t){return null==n||n!=n?t:n},Ee.divide=la,Ee.endsWith=function(n,t,e){n=ao(n),t=Qr(t);var r=n.length,u=e=undefined===e?r:Je(uo(e),0,r);return(e-=t.length)>=0&&n.slice(e,u)==t},Ee.eq=zf,Ee.escape=function(n){return(n=ao(n))&&U.test(n)?n.replace(C,Wt):n},Ee.escapeRegExp=function(n){return(n=ao(n))&&P.test(n)?n.replace(F,"\\$&"):n},Ee.every=function(n,t,e){var r=Wf(n)?ft:rr;return e&&ai(n,t,e)&&(t=undefined),r(n,Yu(t,3))},Ee.find=ff,Ee.findIndex=Li,Ee.findKey=function(n,t){return _t(n,Yu(t,3),cr)},Ee.findLast=of,Ee.findLastIndex=Ci,Ee.findLastKey=function(n,t){return _t(n,Yu(t,3),lr)},Ee.floor=sa,Ee.forEach=af,Ee.forEachRight=cf,Ee.forIn=function(n,t){return null==n?n:or(n,Yu(t,3),jo)},Ee.forInRight=function(n,t){return null==n?n:ar(n,Yu(t,3),jo)},Ee.forOwn=function(n,t){return n&&cr(n,Yu(t,3))},Ee.forOwnRight=function(n,t){return n&&lr(n,Yu(t,3))},Ee.get=go,Ee.gt=Sf,Ee.gte=Lf,Ee.has=function(n,t){return null!=n&&ui(n,t,_r)},Ee.hasIn=yo,Ee.head=Ui,Ee.identity=Go,Ee.includes=function(n,t,e,r){n=Bf(n)?n:So(n),e=e&&!r?uo(e):0;var u=n.length;return e<0&&(e=oe(u+e,0)),Yf(n)?e<=u&&n.indexOf(t,e)>-1:!!u&&yt(n,t,e)>-1},Ee.indexOf=function(n,t,e){var r=null==n?0:n.length;if(!r)return-1;var u=null==e?0:uo(e);return u<0&&(u=oe(r+u,0)),yt(n,t,u)},Ee.inRange=function(n,t,e){return t=ro(t),undefined===e?(e=t,t=0):e=ro(e),function(n,t,e){return n>=ae(t,e)&&n<oe(t,e)}(n=fo(n),t,e)},Ee.invoke=mo,Ee.isArguments=Cf,Ee.isArray=Wf,Ee.isArrayBuffer=Uf,Ee.isArrayLike=Bf,Ee.isArrayLikeObject=Tf,Ee.isBoolean=function(n){return!0===n||!1===n||Zf(n)&&pr(n)==i},Ee.isBuffer=$f,Ee.isDate=Df,Ee.isElement=function(n){return Zf(n)&&1===n.nodeType&&!Gf(n)},Ee.isEmpty=function(n){if(null==n)return!0;if(Bf(n)&&(Wf(n)||"string"==typeof n||"function"==typeof n.splice||$f(n)||Xf(n)||Cf(n)))return!n.length;var t=ri(n);if(t==l||t==p)return!n.size;if(di(n))return!Ir(n).length;for(var e in n)if(kn.call(n,e))return!1;return!0},Ee.isEqual=function(n,t){return mr(n,t)},Ee.isEqualWith=function(n,t,e){var r=(e="function"==typeof e?e:undefined)?e(n,t):undefined;return undefined===r?mr(n,t,undefined,e):!!r},Ee.isError=Nf,Ee.isFinite=function(n){return"number"==typeof n&&ue(n)},Ee.isFunction=Mf,Ee.isInteger=Ff,Ee.isLength=Pf,Ee.isMap=Kf,Ee.isMatch=function(n,t){return n===t||xr(n,t,Xu(t))},Ee.isMatchWith=function(n,t,e){return e="function"==typeof e?e:undefined,xr(n,t,Xu(t),e)},Ee.isNaN=function(n){return Vf(n)&&n!=+n},Ee.isNative=function(n){if(si(n))throw new pn("Unsupported core-js use. Try https://npms.io/search?q=ponyfill.");return jr(n)},Ee.isNil=function(n){return null==n},Ee.isNull=function(n){return null===n},Ee.isNumber=Vf,Ee.isObject=qf,Ee.isObjectLike=Zf,Ee.isPlainObject=Gf,Ee.isRegExp=Hf,Ee.isSafeInteger=function(n){return Ff(n)&&n>=-9007199254740991&&n<=9007199254740991},Ee.isSet=Jf,Ee.isString=Yf,Ee.isSymbol=Qf,Ee.isTypedArray=Xf,Ee.isUndefined=function(n){return undefined===n},Ee.isWeakMap=function(n){return Zf(n)&&ri(n)==g},Ee.isWeakSet=function(n){return Zf(n)&&"[object WeakSet]"==pr(n)},Ee.join=function(n,t){return null==n?"":ie.call(n,t)},Ee.kebabCase=Uo,Ee.last=Di,Ee.lastIndexOf=function(n,t,e){var r=null==n?0:n.length;if(!r)return-1;var u=r;return undefined!==e&&(u=(u=uo(e))<0?oe(r+u,0):ae(u,r-1)),t==t?function(n,t,e){for(var r=e+1;r--;)if(n[r]===t)return r;return r}(n,t,u):gt(n,wt,u,!0)},Ee.lowerCase=Bo,Ee.lowerFirst=To,Ee.lt=no,Ee.lte=to,Ee.max=function(n){return n&&n.length?ur(n,Go,vr):undefined},Ee.maxBy=function(n,t){return n&&n.length?ur(n,Yu(t,2),vr):undefined},Ee.mean=function(n){return mt(n,Go)},Ee.meanBy=function(n,t){return mt(n,Yu(t,2))},Ee.min=function(n){return n&&n.length?ur(n,Go,Or):undefined},Ee.minBy=function(n,t){return n&&n.length?ur(n,Yu(t,2),Or):undefined},Ee.stubArray=fa,Ee.stubFalse=oa,Ee.stubObject=function(){return{}},Ee.stubString=function(){return""},Ee.stubTrue=function(){return!0},Ee.multiply=ha,Ee.nth=function(n,t){return n&&n.length?Lr(n,uo(t)):undefined},Ee.noConflict=function(){return qn._===this&&(qn._=Dn),this},Ee.noop=Xo,Ee.now=_f,Ee.pad=function(n,t,e){n=ao(n);var r=(t=uo(t))?Ft(n):0;if(!t||r>=t)return n;var u=(t-r)/2;return Cu(te(u),e)+n+Cu(ne(u),e)},Ee.padEnd=function(n,t,e){n=ao(n);var r=(t=uo(t))?Ft(n):0;return t&&r<t?n+Cu(t-r,e):n},Ee.padStart=function(n,t,e){n=ao(n);var r=(t=uo(t))?Ft(n):0;return t&&r<t?Cu(t-r,e)+n:n},Ee.parseInt=function(n,t,e){return e||null==t?t=0:t&&(t=+t),le(ao(n).replace(Z,""),t||0)},Ee.random=function(n,t,e){if(e&&"boolean"!=typeof e&&ai(n,t,e)&&(t=e=undefined),undefined===e&&("boolean"==typeof t?(e=t,t=undefined):"boolean"==typeof n&&(e=n,n=undefined)),undefined===n&&undefined===t?(n=0,t=1):(n=ro(n),undefined===t?(t=n,n=0):t=ro(t)),n>t){var r=n;n=t,t=r}if(e||n%1||t%1){var u=se();return ae(n+u*(t-n+Nn("1e-"+((u+"").length-1))),t)}return Tr(n,t)},Ee.reduce=function(n,t,e){var r=Wf(n)?dt:At,u=arguments.length<3;return r(n,Yu(t,4),e,u,tr)},Ee.reduceRight=function(n,t,e){var r=Wf(n)?ht:At,u=arguments.length<3;return r(n,Yu(t,4),e,u,er)},Ee.repeat=function(n,t,e){return t=(e?ai(n,t,e):undefined===t)?1:uo(t),$r(ao(n),t)},Ee.replace=function(){var n=arguments,t=ao(n[0]);return n.length<3?t:t.replace(n[1],n[2])},Ee.result=function(n,t,e){var r=-1,u=(t=au(t,n)).length;for(u||(u=1,n=undefined);++r<u;){var i=null==n?undefined:n[ki(t[r])];undefined===i&&(r=u,i=e),n=Mf(i)?i.call(n):i}return n},Ee.round=pa,Ee.runInContext=cn,Ee.sample=function(n){return(Wf(n)?Ne:Nr)(n)},Ee.size=function(n){if(null==n)return 0;if(Bf(n))return Yf(n)?Ft(n):n.length;var t=ri(n);return t==l||t==p?n.size:Ir(n).length},Ee.snakeCase=$o,Ee.some=function(n,t,e){var r=Wf(n)?pt:Vr;return e&&ai(n,t,e)&&(t=undefined),r(n,Yu(t,3))},Ee.sortedIndex=function(n,t){return Gr(n,t)},Ee.sortedIndexBy=function(n,t,e){return Hr(n,t,Yu(e,2))},Ee.sortedIndexOf=function(n,t){var e=null==n?0:n.length;if(e){var r=Gr(n,t);if(r<e&&zf(n[r],t))return r}return-1},Ee.sortedLastIndex=function(n,t){return Gr(n,t,!0)},Ee.sortedLastIndexBy=function(n,t,e){return Hr(n,t,Yu(e,2),!0)},Ee.sortedLastIndexOf=function(n,t){if(null==n?0:n.length){var e=Gr(n,t,!0)-1;if(zf(n[e],t))return e}return-1},Ee.startCase=Do,Ee.startsWith=function(n,t,e){return n=ao(n),e=null==e?0:Je(uo(e),0,n.length),t=Qr(t),n.slice(e,e+t.length)==t},Ee.subtract=va,Ee.sum=function(n){return n&&n.length?It(n,Go):0},Ee.sumBy=function(n,t){return n&&n.length?It(n,Yu(t,2)):0},Ee.template=function(n,t,e){var r=Ee.templateSettings;e&&ai(n,t,e)&&(t=undefined),n=ao(n),t=so({},t,r,Mu);var u,i,f=so({},t.imports,r.imports,Mu),o=xo(f),a=Rt(f,o),c=0,l=t.interpolate||on,s="__p += '",d=yn((t.escape||on).source+"|"+l.source+"|"+(l===$?Q:on).source+"|"+(t.evaluate||on).source+"|$","g"),h="//# sourceURL="+(kn.call(t,"sourceURL")?(t.sourceURL+"").replace(/[\r\n]/g," "):"lodash.templateSources["+ ++Bn+"]")+"\n";n.replace(d,(function(t,e,r,f,o,a){return r||(r=f),s+=n.slice(c,a).replace(an,Ut),e&&(u=!0,s+="' +\n__e("+e+") +\n'"),o&&(i=!0,s+="';\n"+o+";\n__p += '"),r&&(s+="' +\n((__t = ("+r+")) == null ? '' : __t) +\n'"),c=a+t.length,t})),s+="';\n";var p=kn.call(t,"variable")&&t.variable;p||(s="with (obj) {\n"+s+"\n}\n"),s=(i?s.replace(E,""):s).replace(z,"$1").replace(S,"$1;"),s="function("+(p||"obj")+") {\n"+(p?"":"obj || (obj = {});\n")+"var __t, __p = ''"+(u?", __e = _.escape":"")+(i?", __j = Array.prototype.join;\nfunction print() { __p += __j.call(arguments, '') }\n":";\n")+s+"return __p\n}";var v=Po((function(){return vn(o,h+"return "+s).apply(undefined,a)}));if(v.source=s,Nf(v))throw v;return v},Ee.times=function(n,t){if((n=uo(n))<1||n>9007199254740991)return[];var e=4294967295,r=ae(n,4294967295);n-=4294967295;for(var u=kt(r,t=Yu(t));++e<n;)t(e);return u},Ee.toFinite=ro,Ee.toInteger=uo,Ee.toLength=io,Ee.toLower=function(n){return ao(n).toLowerCase()},Ee.toNumber=fo,Ee.toSafeInteger=function(n){return n?Je(uo(n),-9007199254740991,9007199254740991):0===n?n:0},Ee.toString=ao,Ee.toUpper=function(n){return ao(n).toUpperCase()},Ee.trim=function(n,t,e){if((n=ao(n))&&(e||undefined===t))return n.replace(q,"");if(!n||!(t=Qr(t)))return n;var r=Pt(n),u=Pt(t);return lu(r,zt(r,u),St(r,u)+1).join("")},Ee.trimEnd=function(n,t,e){if((n=ao(n))&&(e||undefined===t))return n.replace(K,"");if(!n||!(t=Qr(t)))return n;var r=Pt(n);return lu(r,0,St(r,Pt(t))+1).join("")},Ee.trimStart=function(n,t,e){if((n=ao(n))&&(e||undefined===t))return n.replace(Z,"");if(!n||!(t=Qr(t)))return n;var r=Pt(n);return lu(r,zt(r,Pt(t))).join("")},Ee.truncate=function(n,t){var e=30,r="...";if(qf(t)){var u="separator"in t?t.separator:u;e="length"in t?uo(t.length):e,r="omission"in t?Qr(t.omission):r}var i=(n=ao(n)).length;if(Bt(n)){var f=Pt(n);i=f.length}if(e>=i)return n;var o=e-Ft(r);if(o<1)return r;var a=f?lu(f,0,o).join(""):n.slice(0,o);if(undefined===u)return a+r;if(f&&(o+=a.length-o),Hf(u)){if(n.slice(o).search(u)){var c,l=a;for(u.global||(u=yn(u.source,ao(X.exec(u))+"g")),u.lastIndex=0;c=u.exec(l);)var s=c.index;a=a.slice(0,undefined===s?o:s)}}else if(n.indexOf(Qr(u),o)!=o){var d=a.lastIndexOf(u);d>-1&&(a=a.slice(0,d))}return a+r},Ee.unescape=function(n){return(n=ao(n))&&W.test(n)?n.replace(L,qt):n},Ee.uniqueId=function(n){var t=++On;return ao(n)+t},Ee.upperCase=No,Ee.upperFirst=Mo,Ee.each=af,Ee.eachRight=cf,Ee.first=Ui,Qo(Ee,(da={},cr(Ee,(function(n,t){kn.call(Ee.prototype,t)||(da[t]=n)})),da),{chain:!1}),Ee.VERSION="4.17.15",ut(["bind","bindKey","curry","curryRight","partial","partialRight"],(function(n){Ee[n].placeholder=Ee})),ut(["drop","take"],(function(n,t){Ce.prototype[n]=function(e){e=undefined===e?1:oe(uo(e),0);var r=this.__filtered__&&!t?new Ce(this):this.clone();return r.__filtered__?r.__takeCount__=ae(e,r.__takeCount__):r.__views__.push({size:ae(e,4294967295),type:n+(r.__dir__<0?"Right":"")}),r},Ce.prototype[n+"Right"]=function(t){return this.reverse()[n](t).reverse()}})),ut(["filter","map","takeWhile"],(function(n,t){var e=t+1,r=1==e||3==e;Ce.prototype[n]=function(n){var t=this.clone();return t.__iteratees__.push({iteratee:Yu(n,3),type:e}),t.__filtered__=t.__filtered__||r,t}})),ut(["head","last"],(function(n,t){var e="take"+(t?"Right":"");Ce.prototype[n]=function(){return this[e](1).value()[0]}})),ut(["initial","tail"],(function(n,t){var e="drop"+(t?"":"Right");Ce.prototype[n]=function(){return this.__filtered__?new Ce(this):this[e](1)}})),Ce.prototype.compact=function(){return this.filter(Go)},Ce.prototype.find=function(n){return this.filter(n).head()},Ce.prototype.findLast=function(n){return this.reverse().find(n)},Ce.prototype.invokeMap=Dr((function(n,t){return"function"==typeof n?new Ce(this):this.map((function(e){return br(e,n,t)}))})),Ce.prototype.reject=function(n){return this.filter(If(Yu(n)))},Ce.prototype.slice=function(n,t){n=uo(n);var e=this;return e.__filtered__&&(n>0||t<0)?new Ce(e):(n<0?e=e.takeRight(-n):n&&(e=e.drop(n)),undefined!==t&&(e=(t=uo(t))<0?e.dropRight(-t):e.take(t-n)),e)},Ce.prototype.takeRightWhile=function(n){return this.reverse().takeWhile(n).reverse()},Ce.prototype.toArray=function(){return this.take(4294967295)},cr(Ce.prototype,(function(n,t){var e=/^(?:filter|find|map|reject)|While$/.test(t),r=/^(?:head|last)$/.test(t),u=Ee[r?"take"+("last"==t?"Right":""):t],i=r||/^find/.test(t);u&&(Ee.prototype[t]=function(){var t=this.__wrapped__,f=r?[1]:arguments,o=t instanceof Ce,a=f[0],c=o||Wf(t),l=function(n){var t=u.apply(Ee,st([n],f));return r&&s?t[0]:t};c&&e&&"function"==typeof a&&1!=a.length&&(o=c=!1);var s=this.__chain__,d=!!this.__actions__.length,h=i&&!s,p=o&&!d;if(!i&&c){t=p?t:new Ce(this);var v=n.apply(t,f);return v.__actions__.push({func:ef,args:[l],thisArg:undefined}),new Le(v,s)}return h&&p?n.apply(this,f):(v=this.thru(l),h?r?v.value()[0]:v.value():v)})})),ut(["pop","push","shift","sort","splice","unshift"],(function(n){var t=mn[n],e=/^(?:push|sort|unshift)$/.test(n)?"tap":"thru",r=/^(?:pop|shift)$/.test(n);Ee.prototype[n]=function(){var n=arguments;if(r&&!this.__chain__){var u=this.value();return t.apply(Wf(u)?u:[],n)}return this[e]((function(e){return t.apply(Wf(e)?e:[],n)}))}})),cr(Ce.prototype,(function(n,t){var e=Ee[t];if(e){var r=e.name+"";kn.call(we,r)||(we[r]=[]),we[r].push({name:t,func:e})}})),we[Eu(undefined,2).name]=[{name:"wrapper",func:undefined}],Ce.prototype.clone=function(){var n=new Ce(this.__wrapped__);return n.__actions__=yu(this.__actions__),n.__dir__=this.__dir__,n.__filtered__=this.__filtered__,n.__iteratees__=yu(this.__iteratees__),n.__takeCount__=this.__takeCount__,n.__views__=yu(this.__views__),n},Ce.prototype.reverse=function(){if(this.__filtered__){var n=new Ce(this);n.__dir__=-1,n.__filtered__=!0}else(n=this.clone()).__dir__*=-1;return n},Ce.prototype.value=function(){var n=this.__wrapped__.value(),t=this.__dir__,e=Wf(n),r=t<0,u=e?n.length:0,i=function(n,t,e){var r=-1,u=e.length;for(;++r<u;){var i=e[r],f=i.size;switch(i.type){case"drop":n+=f;break;case"dropRight":t-=f;break;case"take":t=ae(t,n+f);break;case"takeRight":n=oe(n,t-f)}}return{start:n,end:t}}(0,u,this.__views__),f=i.start,o=i.end,a=o-f,c=r?o:f-1,l=this.__iteratees__,s=l.length,d=0,h=ae(a,this.__takeCount__);if(!e||!r&&u==a&&h==a)return ru(n,this.__actions__);var p=[];n:for(;a--&&d<h;){for(var v=-1,_=n[c+=t];++v<s;){var g=l[v],y=g.iteratee,b=g.type,w=y(_);if(2==b)_=w;else if(!w){if(1==b)continue n;break n}}p[d++]=_}return p},Ee.prototype.at=rf,Ee.prototype.chain=function(){return tf(this)},Ee.prototype.commit=function(){return new Le(this.value(),this.__chain__)},Ee.prototype.next=function(){undefined===this.__values__&&(this.__values__=eo(this.value()));var n=this.__index__>=this.__values__.length;return{done:n,value:n?undefined:this.__values__[this.__index__++]}},Ee.prototype.plant=function(n){for(var t,e=this;e instanceof Se;){var r=Ri(e);r.__index__=0,r.__values__=undefined,t?u.__wrapped__=r:t=r;var u=r;e=e.__wrapped__}return u.__wrapped__=n,t},Ee.prototype.reverse=function(){var n=this.__wrapped__;if(n instanceof Ce){var t=n;return this.__actions__.length&&(t=new Ce(this)),(t=t.reverse()).__actions__.push({func:ef,args:[Pi],thisArg:undefined}),new Le(t,this.__chain__)}return this.thru(Pi)},Ee.prototype.toJSON=Ee.prototype.valueOf=Ee.prototype.value=function(){return ru(this.__wrapped__,this.__actions__)},Ee.prototype.first=Ee.prototype.head,Gt&&(Ee.prototype[Gt]=function(){return this}),Ee}();"function"==typeof define&&"object"==typeof define.amd&&define.amd?(qn._=Zt,define((function(){return Zt}))):Kn?((Kn.exports=Zt)._=Zt,Zn._=Zt):qn._=Zt}).call(this);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
